{"version":3,"file":"main.ed8103e3.iframe.bundle.js","mappings":";;;AAuBA;AACA;AAGA;ACYA;AAKA;;;;;;;;;;;;;;;;AC8DA;;;;AChEA;;ACHA;AACA;;AAMA;ACkDA;;;AAKA;;;AAGA;AAGA;AAaA;AACA;;;;;AAOA;;;AAKA;;;;;AAKA;;AAIA;AACA;AACA;;;;AAIA;AACA;;AAIA;;;;AAIA;AACA;;AAIA;AACA;AACA;;;AAKA;AClIA;;;AAGA;AACA;AACA;;;;AAMA;AACA;AAGA;AAGA;;AAIA;;AA+CA;;;AAGA;AACA;;;AAGA;;;AAKA;AA4JA;;AAIA;AAiDA;AAGA;;;;ACtRA;AAGA;;;;ACjBA;;AC4CA;;AAEA;AACA;AACA;AAGA;AACA;;AAEA;AACA;AAGA;;;;AAMA;;AAEA;AAGA;;;AAGA;;AAEA;AACA;;AAEA;;;;AAIA;AACA;;;AAGA;AACA;AACA;;;;;;;;AAQA;;;AAKA;AAMA;AACA;;AAEA;;;AAGA;;;;;;;AASA;AACA;AACA;;;AAGA;;;;AAMA;;;;;;;;;AASA;;AAEA;AACA;;;AAKA;;;;AAIA;;;AAKA;;;;AAoOA;;AAEA;AACA;;;;AAMA;;;;;AAyEA;AAGA;;;;;;AAMA;AAGA;;;;;AAKA;;AAEA;AACA;;;AAGA;;AAEA;;;AAKA;;;AAGA;AAGA;AAKA;AACA;;AAHA;;;AAUA;ACpTA;;;;AAMA;;;ACzNA;AAGA;;;;AAQA;;ACOA;;;;;;;;;;AAYA;AAIA;;;AAkCA;;;;;;;;;;AAYA;AAIA;ACqqBA;AACA;;;;AAIA;;;AAKA;ACvuBA;;AAEA;;;AAGA;;AAIA;AA8LA;AAGA;;AAEA;;AAIA;AACA;;AAEA;AACA;;AAIA;;;;AAMA;AACA;AAGA;;;ACqBA;;AAIA;AC7RA;AACA;;;;;AAKA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;AAKA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;ACyGA;AAGA;;;;;;;;;;;;;;;;AC5FA;AChEA;AAGA;;;AAKA;;;;;AAKA;;;;;AAcA;;;;;AAkBA;AC4HA;AAIA;AACA;;AAIA;;;;AChLA;AACA;AAGA;ACyDA;;AAGA;;;ACxCA;;AAEA;AAGA;;;;;;;;ACWA;;;;;;;;ACVA;;;;;;;;;;ACSA;;;;ACDA;;AC/BA;;;;ACHA;AACA;;;AAKA;;;;;;;;;;;;;;ACiCA;AACA;;;AAKA;AC1EA;AACA;;;;AAOA;;ACHA;AACA;;AAEA;;;AAcA;ACfA;AAKA;ACGA;AAGA;;;AC4FA;;;;;;ACpFA;;;ACTA;AACA;AACA;AAGA;ACcA;AACA;AAGA;;;ACFA;;AAIA;;;;;AAOA;;;;ACtBA;;AAFA;AAAA;AAAA;;;AAWA;AACA;AAGA;AACA;;;AAGA;;AAIA;AACA;AAGA;ACIA;AACA;AAJA;AAQA;AAGA;;AAEA;AAbA;;AAmBA;;;;;;;AASA;;;;;;;;ACtDA;;;;ACPA;;AAIA;ACCA;AAGA;ACPA;AAKA;;;;;;ACJA;AACA;AAGA;;;;ACNA;AAGA;;;;ACcA;AAGA;;;;AAIA;AAGA;AACA;AAEA;AAMA;AAEA;AAMA;AAEA;AAMA;AAEA;AAMA;AAEA;AAMA;AAEA;AAMA;;AAGA;AACA;AAEA;AAWA;AAOA;AACA;;AAIA;AACA;AAOA;AACA;;AAIA;AAWA;AAEA;AAQA;AAGA;AACA;AAIA;AAWA;AAEA;AAWA;AACA;AACA;AAEA;;;AAcA;AAEA;AAMA;AAEA;;;AAQA;AAEA;AAYA;AAEA;AAMA;;;;AAIA;AACA;AAEA;AAMA;;AAEA;;;AAIA;;AAOA;AAEA;;;;;;;ACpQA;AACA;;;AAGA;AACA;;;;AAIA;AACA;;;;ACGA;AAGA;AC/BA;AACA;;AC0BA;AAGA;;AC1BA;;AAEA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;AC0CA;AAGA;AC3CA;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;;ACJA;AAGA;AC1CA;AACA;AAUA;;;AAGA;AACA;;AAEA;AACA;AAGA;;;;;;;ACwBA;;;;AAIA;;AAEA;AAGA;AACA;AACA;AA5CA;;;;;;;;;;;;;AC2BA;;AAIA;;;AAGA;AAGA;;;;AAIA;AACA;;;;;;AAMA;AAGA;;AAEA;AACA;;;;AAIA;AACA;AACA;;;AAGA;AACA;;AAEA;;;;;ACpEA;;;;;;;;ACEA;AACA;;AAEA;AAEA;;ACfA;AACA;;AAEA;AACA;;;;ACmBA;AAGA;ACJA;AACA;AACA;;AAEA;AAEA;AAGA;;;;AAIA;;;AAIA;;;AAGA;;;;AAKA;;;;;;ACmEA;AAGA;AC4GA;AAGA;;AC3KA;;AAEA;AACA;;AAEA;;;;;;;;;;;AAYA;;;AAGA;;;;AAIA;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;;;;;AAMA;AACA;;AAEA;;;;;AAMA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;;AAIA;AAEA;;;;AAIA;;AAEA;;;;;AAKA;AACA;;;;AAIA;AACA;;;;;;AAMA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AAEA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;;;;;;;;;;;;AC+BA;AAGA;AC7LA;AACA;AACA;AACA;AAKA;;;;AAkBA;AACA;AACA;;;;AAMA;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;;AAGA;;;;AAOA;AACA;;;AASA;;AAEA;;AAIA;AACA;;;;;;AAMA;AACA;;;;AAIA;AACA;;;AAKA;AACA;;;;AAIA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;AAKA;;;AAGA;;;;;;;AAOA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;;;AAKA;AACA;;AAEA;AACA;;;;;AAKA;;AAEA;AACA;;;;;AAKA;;;;;;AAYA;AAKA;;;;;ACjOA;;AAEA;;;;;AAKA;;;AAGA;AAEA;AACA;AAEA;;;;ACkDA;AAGA;ACrEA;;;;;;;;;ACoCA;AAEA;;;;AAQA;;;AAIA;AAKA;AAcA;AACA;;AAEA;;;;AAKA;AACA;;AAEA;AAEA;;;AAGA;;;;;AAKA;AACA;AACA;;;AAMA;AAaA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;AACA;AAIA;;AAEA;;AAEA;;;;;AAKA;;;AAIA;AAGA;;AAEA;AACA;;;;;;;;AAQA;AACA;;;;AAKA;;;AAGA;;;AAGA;AACA;;;AAGA;;;;AAIA;AAEA;;;;;AAKA;;AAEA;AAEA;;AAEA;;;;AAIA;AACA;;;;;AAKA;;;;;;;AAOA;AAEA;AACA;AACA;;AAEA;;;;;;AAMA;AAEA;AACA;;;AAGA;;;;AAIA;AACA;;;;AAIA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AAEA;AACA;;;;AAIA;AACA;;;;AC0DA;AAGA;AC3TA;;;AAGA;;AAEA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;;;AAGA;AAEA;;AAEA;;AAEA;;;;AAIA;;;AAGA;;;AAGA;AAEA;AACA;AACA;;;;;AAKA;AAEA;;AAEA;;;;AAIA;;AAEA;;;;;AAKA;AACA;AACA;;;;;ACXA;AAGA;ACzDA;AACA;AACA;;AAEA;AACA;AAEA;;AAEA;AACA;AAEA;;AAEA;;;;AAIA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;;;;;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;AChDA;AAGA;AACA;;AAEA;;AAEA;;;AAIA;;;;;;AAOA;AAEA;AACA;AAEA;;;;;AAKA;AAEA;AACA;AAEA;;;;;ACnCA;AACA;AACA;AACA;AACA;;;;;AAKA;;;;AAIA;;;AAIA;AACA;;;AAIA;;;;;;AAMA;AACA;;ACPA;AAGA;;ACnCA;;AAEA;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;;;;ACoCA;AAGA;;;AC5CA;;;;AAIA;;AAIA;AAGA;AACA;;;;AAIA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;;ACwDA;AAGA;;ACnGA;;;ACuBA;AAGA;AC3BA;;AC4BA;AAGA;ACEA;AAGA;;;;ACrBA;AACA;;ACYA;AAGA;ACEA;AAGA;;;;;;;;ACZA;;AAEA;;;;AAIA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;;;ACgDA;AAGA;;;AClFA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAMA;;AAEA;;;;;AAKA;;;;AAIA;;;AAGA;AACA;;;;AAIA;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;AAKA;;;;AAIA;;;;;AAKA;AACA;;;;;;;;;;ACmCA;AAGA;;ACjIA;;;AAGA;;;;;;;;;;;ACuOA;AAGA;;AC9OA;;;;AAAA;;AAUA;;;;;;;;AAQA;;;AAGA;;;;;AC6BA;AAGA;AC2RA;AAGA;AC/UA;AACA;;;ACsHA;AAGA;AC/GA;AACA;;AAEA;AAMA;AACA;;;;AAIA;;AAGA;AAEA;AAEA;AACA;AAEA;;AAEA;AAEA;AAEA;AACA;AAEA;;;;;;ACeA;AAGA;AC3DA;;AAEA;AACA;;;ACsBA;AAGA;AC7BA;;AC6EA;AACA;AAGA;ACzEA;;AAEA;;AAEA;;ACsCA;AAGA;;;;;;;AClCA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;;;AAIA;;AAEA;;;;ACRA;AAGA;;;;;ACtBA;;AAEA;AACA;AACA;;;ACWA;AAGA;ACxBA;;;;;;;;AAQA;;;;;;;;;;;AAWA;AACA;;;;AAIA;;;AAGA;AACA;AACA;;;;AC45BA;AAGA;AC77BA;AACA;;;;;AAKA;;;;;ACoWA;AAGA;;;ACxWA;AAMA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;AAUA;;;;;;;;ACrBA;AACA;;;AAGA;AAGA;AACA;AACA;AAEA;AACA;;;ACJA;;;;;AAKA;;ACTA;AACA;;AAEA;;;;;;;AAQA;AACA;;;;;ACgDA;AAGA;AC0BA;AAGA;ACxGA;;;;;ACWA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;;;ACPA;AAGA;ACVA;AACA;AAGA;ACtBA;AACA;AACA;;AAEA;AACA;;;ACNA;;;;;AAKA;;;;ACaA;AACA;;AAIA;;;;;;AAMA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;;;AAKA;;;;;;AAMA;;;;AAaA;;AAEA;;;;AAIA;;AAMA;;;AAMA;AACA;AACA;;;;;;ACrFA;AAGA;;;;;;AAQA;;;;AAIA;;AAMA;;;;AAIA;;;AAMA;AACA;;AAMA;AACA;;AAIA;;AAIA;;;;AAIA;;;;;AAMA;AACA;AAGA;AACA;AAGA;AACA;;;;AAKA;;;AAGA;AACA;;AAIA;;AAIA;;;;;AAKA;;;;;;;;;;;;;;ACxFA;;;;;ACmHA;AAGA;;;;;;;;ACrHA;;AAEA;AACA;AACA;AACA;;;;;;AAMA;;;;ACRA;AAKA;AACA;AAIA;AACA;AACA;;;AAIA;;;AC1BA;AAIA;;AAEA;AACA;AACA;AACA;;;;ACfA;;AAEA;;;ACGA;AAIA;;AAEA;;AAEA;AACA;AACA;;;;;;;AC4BA;;;;AAIA;;;;;;;;AApCA;AAWA;AACA;;;;;;;;;;;;;ACtBA;AACA;;;ACaA;;AAEA;;AAEA;AACA;;;;AC6DA;AAGA;ACwHA;AAGA;AC1LA;AACA;;;;AAIA;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AAUA;;;;;AAKA;;;;;;;;AAQA;AACA;;;AAGA;;;;AAIA;;AAEA;;;;AAIA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;;;;;;AAUA;AAIA;AACA;;;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;AAEA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;;ACzHA;;AAEA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;AAEA;;;;AAIA;AACA;;;;AAIA;AACA;;;ACPA;AAGA;AC6DA;AAGA;;AC/EA;;AAGA;;;AAKA;AAKA;AACA;AACA;AACA;;;AAGA;AACA;;;;AAMA;AAWA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;;;;;;;;;AASA;AACA;AACA;;;;AAIA;;AAEA;;;;;AAKA;;;;ACmPA;AAGA;AC7UA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;AASA;;;;AAIA;;;AAGA;AACA;;;;AAIA;;AAEA;;;;AAIA;;AAEA;;;;AAIA;AACA;;AAEA;;;;ACvDA;;;AAKA;AACA;AACA;AACA;;;;AAIA;AACA;;AAIA;AAaA;;AAEA;;AAEA;AAEA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;AAEA;;;;;AAKA;;AAEA;AACA;AACA;;;AAGA;;;;AAIA;AAIA;;;;AAIA;;AAEA;;;AAGA;AACA;;AAEA;;;;;;AAMA;;;;AAIA;;AAEA;;;;AAIA;AACA;;AAEA;;AAEA;;;;AAIA;;;;;;;AAOA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;AAmBA;;ACvJA;AACA;;AAKA;AACA;AACA;;;AC5BA;AACA;;AAEA;AACA;AACA;AAEA;;;;;;;;AAQA;;;;AC+BA;AAGA;ACfA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;;AAKA;AACA;AACA;;;;;AAKA;AACA;;;;ACzCA;AAGA;;ACJA;AACA;AACA;;;;;;;;;ACqLA;AAGA;;;;;;;;;AC/LA;;;AAOA;AACA;;AAEA;AACA;AAGA;;;AAqCA;ACxEA;AAGA;;;;;;;;;;;;AAYA;;;;;AAKA;;;;AAIA;AACA;;;;AAIA;AACA;;;;;;;AAOA;;;;AAMA;AACA;;;;;AAOA;AACA;;;;AC5CA;AAGA;;;AAGA;;;AAGA;;AAEA;;;;AAIA;;;;;AAKA;AACA;AACA;AACA;;AAEA;;;;;;;;AAcA;AAGA;;;AAGA;AACA;;AAIA;;;AAGA;AACA;;;ACwSA;AAGA;AClVA;AACA;AACA;;;;;;AAMA;;;;AAIA;;AAAA;;;AAIA;;;;;;;AAOA;;;;ACwDA;AAGA;AC9EA;AAGA;ACgHA;AAGA;AC9HA;;;AAGA;;;AAGA;AACA;;;AAKA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;;AAGA;AACA;;;AAGA;;AAEA;;;;AAIA;;;AAGA;;;;AAIA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;ACpFA;;AAEA;;ACuBA;AAGA;ACpBA;;;AAGA;;;AAGA;AACA;;;AAGA;;;AAGA;AACA;;;AAGA;AACA;;;ACDA;AAGA;ACnBA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;;AAMA;;;ACuBA;AAGA;ACrBA;AACA;AAGA;AACA;;;;;;AAOA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;ACkCA;AAGA;;AC3FA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;;ACSA;AAGA;;;;;;;;;ACnBA;AAEA;;AAIA;ACpBA;;ACgFA;AAGA;;ACpEA;;;AASA;AACA;;;;AAIA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;AAMA;;ACuMA;AAGA;AC3KA;AAGA;AChFA;AACA;;AAIA;;AAKA;AACA;;;;;;ACHA;;AAIA;ACkWA;AAGA;ACzVA;AAGA;ACDA;AAGA;ACIA;AAGA;ACpCA;;ACsBA;AAGA;ACzBA;AAGA;AACA;;AAGA;;;;;;;;;ACmBA;AASA;AACA;AACA;AACA;AACA;;AAIA;AACA;;;AAGA;AACA;;;;;ACtCA;;ACyBA;AAGA;AC7BA;AACA;AACA;;;AAGA;AACA;;;AAGA;;AAEA;AACA;;;;;ACOA;AAGA;ACNA;AACA;;AAEA;;AAEA;AACA;;;AAGA;;;;AAIA;;;;AAIA;AACA;;;AAGA;AACA;;;AAGA;;;AAGA;AACA;AAEA;AAGA;AAEA;;;;AAIA;AACA;;;;AAIA;;;;AC0CA;AAGA;ACpDA;AAGA;ACpDA;;AAEA;AACA;AACA;;;;AAIA;AACA;;;AAGA;AACA;;;;AAIA;;;;AAIA;;;;AAIA;AACA;;;AC+BA;AAGA;AC3CA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;AAKA;;AAEA;;;AAGA;AACA;;;;;AAKA;;;;;AAKA;;;AAGA;;;ACuDA;AAGA;ACvHA;AACA;AACA;;;ACqBA;AAGA;AC5BA;;;;ACyEA;AAGA;AC3EA;AACA;;;ACwBA;AAGA;;;ACjBA;AACA;;AAEA;;AAEA;AACA;;ACqCA;AAGA;ACrDA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;;;;;ACLA;;AAEA;AACA;AACA;;;;AAIA;AACA;;AAEA;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AACA;;;AAGA;AACA;;;;AAIA;AACA;AACA;;;AAGA;AACA;;;;ACaA;AAGA;AC/DA;;ACiCA;AAGA;;ACvBA;AAeA;;ACVA;;;;AAMA;AACA;;;;;;AAMA;;;;;AAKA;AACA;;;;AAIA;;AAEA;;;AAGA;;;;;AAKA;;;;;AAKA;;;;AAIA;;;AAMA;ACyKA;AAGA;;;;AC7OA;;;;AAIA;;;ACeA;;;;;;ACWA;AACA;;AAEA;;AAQA;;;;;;AAMA;;AAEA;;;;AAIA;;;;;;AAMA;;;;;;;;;;;;;;AAcA;;;;;;;;;;AAUA;AACA;;;AAGA;AACA;;;;AAIA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;AAEA;;;AAKA;;;;;;AAQA;;;;;;;AAOA;;AAIA;;;AAKA;AACA;;;AAMA;;;AAMA;;;;;;;;;AASA;;;;;;AAMA;AAGA;AACA;AACA;;;;;AAKA;;AAOA;;;;AAIA;AAEA;AAEA;;;;ACjLA;AACA;;AAEA;AACA;AACA;;;AAGA;;;AAGA;AAEA;AACA;;;AAGA;AACA;;AAEA;;;;ACLA;AAGA;ACiBA;AAGA;AClBA;AAGA;;;;AC/BA;;AAGA;;;;;ACsHA;AAGA;;;AChIA;AACA;;;ACgGA;AAGA;;;ACnFA;AACA;AACA;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;ACqBA;AAGA;ACrDA;;;AAIA;;;;;AAKA;;AAfA;AAkBA;AACA;;;ACyEA;AAGA;AC5EA;;;ACjBA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;;;;;;;;;ACWA;;;AAaA;;;AAKA;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;;;AAGA;AACA;AAjCA;AAmCA;;;;AAIA;AACA;AAxCA;AA0CA;;;;AAIA;AACA;AA/CA;AAiDA;AACA;;;;AAIA;AACA;AAvDA;AAyDA;AACA;;;;ACqFA;AAGA;ACzGA;AAGA;AC5DA;AACA;AACA;;ACQA;;AAIA;AC4GA;AAGA;ACtIA;;ACFA;;;;;;ACLA;AAGA;;;ACHA;;;;;;;;;;;;;;AAAA;;;;;;;;ACwCA;;;;;;ACrBA;;AAEA;AAEA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;;;AAKA;AAIA;AACA;;;;;;ACpBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;AClBA;;AAEA;;;;;;;;;;;AC6BA;AACA;AACA;AAEA;AAGA;AACA;;;ACpCA;;AAEA;AACA;;;;;AAKA;;;;AAIA;;;;AAIA;;AAIA;;;ACRA;;AAOA;;;;;AAOA;;;;;;;;;;AAUA;AAGA;;;;;;;;;AAWA;;AAWA","sources":["webpack://@ringcentral/juno/./src/components/Animations/Highlight/__stories__/Highlight.story.tsx","webpack://@ringcentral/juno/./src/components/Backdrop/__stories__/Backdrop.story.tsx","webpack://@ringcentral/juno/./src/components/Buttons/Button/__stories__/Button.story.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ButtonBase/__stories__/ButtonBase.story.tsx","webpack://@ringcentral/juno/./src/components/Buttons/IconButtonGroup/__stories__/IconButtonGroup.story.tsx","webpack://@ringcentral/juno/./src/components/Card/Card/__stories__/Card.story.tsx","webpack://@ringcentral/juno/./src/components/Card/__stories__/CardExample.story.tsx","webpack://@ringcentral/juno/./src/components/DetachedWindow/__stories__/DetachedWindow.story.tsx","webpack://@ringcentral/juno/./src/components/Dialer/DialPad/__stories__/DialPad.story.tsx","webpack://@ringcentral/juno/./src/components/Dialer/__stories__/Dialer.story.tsx","webpack://@ringcentral/juno/./src/components/Dialog/__stories__/Dialog.story.tsx","webpack://@ringcentral/juno/./src/components/Divider/__stories__/Divider.story.tsx","webpack://@ringcentral/juno/./src/components/DnD/__stories__/DnDListPortal.story.tsx","webpack://@ringcentral/juno/./src/components/Downshift/__stories__/Downshift.story.tsx","webpack://@ringcentral/juno/./src/components/Drawer/__stories__/Drawer.story.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/__stories__/TimePicker.story.tsx","webpack://@ringcentral/juno/./src/components/Forms/Select/PlainSelect/styles/StyledSelect.tsx","webpack://@ringcentral/juno/./src/components/Forms/Select/PlainSelect/PlainSelect.tsx","webpack://@ringcentral/juno/./src/components/Icon/__stories__/Icon.story.tsx","webpack://@ringcentral/juno/./src/components/Icon/__stories__/IconList.story.tsx","webpack://@ringcentral/juno/./src/components/InlineEditable/__stories__/InlineEditable.story.tsx","webpack://@ringcentral/juno/./src/components/Loading/__stories__/Loading.story.tsx","webpack://@ringcentral/juno/./src/components/Pagination/Pagination/__stories__/Pagination.story.tsx","webpack://@ringcentral/juno/./src/components/Presence/__stories__/Presence.story.tsx","webpack://@ringcentral/juno/./src/components/Rating/__stories__/Rating.story.tsx","webpack://@ringcentral/juno/./src/components/Responsive/__stories__/Responsive.story.tsx","webpack://@ringcentral/juno/./src/components/Snackbar/SnackbarContent/__stories__/SnackbarContent.story.tsx","webpack://@ringcentral/juno/./src/components/Stepper/__stories__/Stepper.story.tsx","webpack://@ringcentral/juno/./src/components/TablePagination/__stories__/TablePaginationComponent.story.tsx","webpack://@ringcentral/juno/./src/components/Tables/__stories__/Tables.story.tsx","webpack://@ringcentral/juno/./src/components/Tabs/TabPanel/__stories__/TabPanel.story.tsx","webpack://@ringcentral/juno/./src/components/TextWithHighlight/TextWithHighlight.tsx","webpack://@ringcentral/juno/./src/components/TextWithLink/TextWithLink.tsx","webpack://@ringcentral/juno/./src/components/TextWithTooltip/TextWithTooltip.tsx","webpack://@ringcentral/juno/./src/components/TextWithTooltip/__stories__/TextWithLink.story.tsx","webpack://@ringcentral/juno/./src/components/Tooltip/__stories__/Tooltip.story.tsx","webpack://@ringcentral/juno/./src/components/Transitions/ZoomFrom/__stories__/ZoomFrom.story.tsx","webpack://@ringcentral/juno/./src/components/Transitions/ZoomInFadeOut/__stories__/ZoomInFadeOut.story.tsx","webpack://@ringcentral/juno/./src/components/Typography/__stories__/Typography.story.tsx","webpack://@ringcentral/juno/./src/components/Typography/__stories__/TypographyExamples.story.tsx","webpack://@ringcentral/juno/./src/foundation/__stories__/Palette.story.tsx","webpack://@ringcentral/juno/./src/foundation/__stories__/Spacing.story.tsx","webpack://@ringcentral/juno/./src/foundation/hoc/withResponsive/__stories__/withResponsive.story.tsx","webpack://@ringcentral/juno/./src/foundation/hooks/useHiddenTabindex/__stories__/useHiddenTabindex.story.tsx","webpack://@ringcentral/juno/./src/foundation/hooks/useKeyboardMoveFocus/__stories__/useMoveFocusedIndex.story.tsx","webpack://@ringcentral/juno/./src/foundation/hooks/useKeyboardMoveFocus/__stories__/useOnlyOneFocusable.story.tsx","webpack://@ringcentral/juno/./src/foundation/hooks/useOverflow/__stories__/useOverflow.story.tsx","webpack://@ringcentral/juno/./src/foundation/hooks/useResizeObserver/__stories__/useResizeObserver.story.tsx","webpack://@ringcentral/juno/./src/foundation/styles/__stories__/styleSystem.story.tsx","webpack://@ringcentral/juno/./src/components/Accordion/styles/AccordionStyle.tsx","webpack://@ringcentral/juno/./src/components/Accordion/Accordion.tsx","webpack://@ringcentral/juno/./src/components/Accordion/AccordionDetails/styles/AccordionDetailsStyle.tsx","webpack://@ringcentral/juno/./src/components/Accordion/AccordionDetails/AccordionDetails.tsx","webpack://@ringcentral/juno/./src/components/Accordion/AccordionSummary/styles/AccordionSummaryStyle.tsx","webpack://@ringcentral/juno/./src/components/Accordion/AccordionSummary/AccordionSummary.tsx","webpack://@ringcentral/juno/./src/components/Alert/styles/AlertStyle.tsx","webpack://@ringcentral/juno/./src/components/Alert/Alert.tsx","webpack://@ringcentral/juno/./src/components/AppBar/AppBar.tsx","webpack://@ringcentral/juno/./src/components/Avatar/styles/StyledAvatar.tsx","webpack://@ringcentral/juno/./src/components/Avatar/styles/StyledAvatarWrapper.tsx","webpack://@ringcentral/juno/./src/components/Avatar/styles/StyledIconAvatar.tsx","webpack://@ringcentral/juno/./src/components/Avatar/styles/StyledMask.tsx","webpack://@ringcentral/juno/./src/components/Avatar/styles/StyledPresenceWrapper.tsx","webpack://@ringcentral/juno/./src/components/Backdrop/Backdrop.tsx","webpack://@ringcentral/juno/./src/components/Badge/styles/BadgeStyle.tsx","webpack://@ringcentral/juno/./src/components/Badge/Badge.tsx","webpack://@ringcentral/juno/./src/components/Buttons/Button/Button.tsx","webpack://@ringcentral/juno/./src/components/Buttons/Button/styles/StyledButton.tsx","webpack://@ringcentral/juno/./src/components/Buttons/IconButton/IconButton.tsx","webpack://@ringcentral/juno/./src/components/Buttons/IconButton/styles/StyledIconButton.tsx","webpack://@ringcentral/juno/./src/components/Buttons/IconButtonGroup/styles/IconButtonGroupStyle.tsx","webpack://@ringcentral/juno/./src/components/Buttons/IconButtonGroup/IconButtonGroup.tsx","webpack://@ringcentral/juno/./src/components/Buttons/SplitButton/styles/StyledArrowIcon.tsx","webpack://@ringcentral/juno/./src/components/Buttons/SplitButton/styles/StyledSplitButton.tsx","webpack://@ringcentral/juno/./src/components/Buttons/SplitButton/SplitButton.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ToggleButton/styles/ToggleButtonStyle.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ToggleButton/ToggleButton.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ToggleButtonGroup/styles/boxStyle.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ToggleButtonGroup/styles/standardStyle.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ToggleButtonGroup/styles/ToggleButtonGroupStyle.tsx","webpack://@ringcentral/juno/./src/components/Buttons/ToggleButtonGroup/ToggleButtonGroup.tsx","webpack://@ringcentral/juno/./src/components/Card/Card/styles/CardStyles.tsx","webpack://@ringcentral/juno/./src/components/Card/Card/Card.tsx","webpack://@ringcentral/juno/./src/components/Card/CardActionArea/styles/CardActionAreaStyle.tsx","webpack://@ringcentral/juno/./src/components/Card/CardActionArea/CardActionArea.tsx","webpack://@ringcentral/juno/./src/components/Card/CardActions/styles/CardActionsStyle.tsx","webpack://@ringcentral/juno/./src/components/Card/CardActions/CardActions.tsx","webpack://@ringcentral/juno/./src/components/Card/CardContent/styles/CardContentStyle.tsx","webpack://@ringcentral/juno/./src/components/Card/CardContent/CardContent.tsx","webpack://@ringcentral/juno/./src/components/Card/CardHeader/CardHeader.tsx","webpack://@ringcentral/juno/./src/components/Card/CardHoverActions/styles/CardHoverActionsStyle.tsx","webpack://@ringcentral/juno/./src/components/Card/CardHoverActions/CardHoverActions.tsx","webpack://@ringcentral/juno/./src/components/Card/CardMedia/CardMedia.tsx","webpack://@ringcentral/juno/./src/components/Card/CardSelectionArea/styles/CardSelectionAreaStyle.tsx","webpack://@ringcentral/juno/./src/components/Card/CardSelectionArea/CardSelectionArea.tsx","webpack://@ringcentral/juno/./src/components/Chip/styles/ChipStyle.tsx","webpack://@ringcentral/juno/./src/components/Chip/Chip.tsx","webpack://@ringcentral/juno/./src/components/DetachedWindow/styles/DetachedWindowStyle.tsx","webpack://@ringcentral/juno/./src/components/Dialer/DialPad/DialPad.tsx","webpack://@ringcentral/juno/./src/components/Dialer/DialPadButton/styles/StyledDialPadButton.tsx","webpack://@ringcentral/juno/./src/components/Dialer/DialPadButton/DialPadButton.tsx","webpack://@ringcentral/juno/./src/components/Dialer/DialTextField/DialTextField.tsx","webpack://@ringcentral/juno/./src/components/Dialog/styles/DialogStyle.tsx","webpack://@ringcentral/juno/./src/components/Dialog/Dialog.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogActions/styles/DialogActionsStyle.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogActions/DialogActions.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogContent/styles/DialogContentStyle.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogContent/DialogContent.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogContentText/styles/DialogContentTextStyle.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogContentText/DialogContentText.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogTitle/styles/DialogTitleStyle.tsx","webpack://@ringcentral/juno/./src/components/Dialog/DialogTitle/DialogTitle.tsx","webpack://@ringcentral/juno/./src/components/Divider/styles/StyledDivider.tsx","webpack://@ringcentral/juno/./src/components/Divider/Divider.tsx","webpack://@ringcentral/juno/./src/components/DnD/DragHandle/styles/StyledDragHandle.tsx","webpack://@ringcentral/juno/./src/components/DnD/DragHandle/DragHandle.tsx","webpack://@ringcentral/juno/./src/components/DnD/DragDropContext/styles/StyledGlobalDraggable.tsx","webpack://@ringcentral/juno/./src/components/Downshift/Downshift.tsx","webpack://@ringcentral/juno/./src/components/Downshift/SuggestionList/styles/SuggestionListStyle.tsx","webpack://@ringcentral/juno/./src/components/Downshift/SuggestionList/SuggestionList.tsx","webpack://@ringcentral/juno/./src/components/Downshift/styles/DownshiftStyle.tsx","webpack://@ringcentral/juno/./src/components/Downshift/styles/StyledPopper.tsx","webpack://@ringcentral/juno/./src/components/Downshift/styles/StyledTextField.tsx","webpack://@ringcentral/juno/./src/components/Drawer/styles/DrawerStyle.tsx","webpack://@ringcentral/juno/./src/components/Drawer/Drawer.tsx","webpack://@ringcentral/juno/./src/components/Forms/Checkbox/Checkbox.tsx","webpack://@ringcentral/juno/./src/components/Forms/Checkbox/styles/CheckboxStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/FormControlLabel/styles/FormControlLabelStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/FormControlLabel/FormControlLabel.tsx","webpack://@ringcentral/juno/./src/components/Forms/FormLabel.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/DatePicker/styles/StyledDay.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/DatePicker/styles/StyledYear.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/DatePicker/styles/StyledDatePickerHeader.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/DatePicker/styles/StyledCalendar.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/DatePicker/styles/StyledYears.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/ToggleText.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/styles/StyledNumberPicker.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/styles/StyledTimeIconButton.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/styles/StyledPickerPopperWrap.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/styles/StyledSelectionItem.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/TimePicker/styles/StyledSelectionView.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/styles/StyledPickerTextField.tsx","webpack://@ringcentral/juno/./src/components/Forms/Picker/styles/StyledPopover.tsx","webpack://@ringcentral/juno/./src/components/Forms/Radio/styles/RadioStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/Radio/Radio.tsx","webpack://@ringcentral/juno/./src/components/Forms/Select/Select.tsx","webpack://@ringcentral/juno/./src/components/Forms/Select/styles/StyledSelect.tsx","webpack://@ringcentral/juno/./src/components/Forms/Slider/styles/SliderStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/Slider/Slider.tsx","webpack://@ringcentral/juno/./src/components/Forms/Switch/Switch.tsx","webpack://@ringcentral/juno/./src/components/Forms/Switch/styles/SwitchStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/TextField/TextField.tsx","webpack://@ringcentral/juno/./src/components/Forms/TextField/styles/OutlineTextFieldStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/TextField/styles/TextFieldStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/TextField/utils/TextFieldUtils.ts","webpack://@ringcentral/juno/./src/components/Forms/Textarea/styles/TextareaStyle.tsx","webpack://@ringcentral/juno/./src/components/Forms/Textarea/Textarea.tsx","webpack://@ringcentral/juno/./src/components/Forms/utils/checkedStyles.tsx","webpack://@ringcentral/juno/./src/components/Grid/Grid.tsx","webpack://@ringcentral/juno/./src/components/Icon/styles/IconStyle.tsx","webpack://@ringcentral/juno/./src/components/Icon/Icon.tsx","webpack://@ringcentral/juno/./src/components/ImageView/ImageView.tsx","webpack://@ringcentral/juno/./src/components/InlineEditable/styles/textFieldStyle.tsx","webpack://@ringcentral/juno/./src/components/InlineEditable/styles/InlineEditableStyle.tsx","webpack://@ringcentral/juno/./src/components/InlineEditable/InlineEditable.tsx","webpack://@ringcentral/juno/./src/components/Link/styles/StyledLink.tsx","webpack://@ringcentral/juno/./src/components/Link/Link.tsx","webpack://@ringcentral/juno/./src/components/List/List/List.tsx","webpack://@ringcentral/juno/./src/components/List/ListItem/ListItem.tsx","webpack://@ringcentral/juno/./src/components/List/ListItem/styles/ListItemStyle.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemAvatar/styles/ListItemAvatarStyle.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemAvatar/ListItemAvatar.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemIcon/styles/ListItemIconStyle.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemIcon/ListItemIcon.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemSecondaryAction/styles/ListItemSecondaryActionStyle.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemSecondaryAction/ListItemSecondaryAction.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemText/styles/ListItemTextStyle.tsx","webpack://@ringcentral/juno/./src/components/List/ListItemText/ListItemText.tsx","webpack://@ringcentral/juno/./src/components/List/ListSubheader/styles/ListSubheaderStyle.tsx","webpack://@ringcentral/juno/./src/components/List/ListSubheader/ListSubheader.tsx","webpack://@ringcentral/juno/./src/components/Loading/styles/StyledLoadingPage.tsx","webpack://@ringcentral/juno/./src/components/Menu/Menu/styles/MenuStyle.tsx","webpack://@ringcentral/juno/./src/components/Menu/Menu/Menu.tsx","webpack://@ringcentral/juno/./src/components/Menu/MenuItem/styles/MenuItemStyle.tsx","webpack://@ringcentral/juno/./src/components/Menu/MenuItem/MenuItem.tsx","webpack://@ringcentral/juno/./src/components/Menu/MenuList/MenuList.tsx","webpack://@ringcentral/juno/./src/components/Menu/MenuList/styles/MenuListStyle.tsx","webpack://@ringcentral/juno/./src/components/Menu/SubMenu/styles/SubMenuStyle.tsx","webpack://@ringcentral/juno/./src/components/Menu/SubMenu/SubMenu.tsx","webpack://@ringcentral/juno/./src/components/Pagination/Pagination/Pagination.tsx","webpack://@ringcentral/juno/./src/components/Paper/Paper.tsx","webpack://@ringcentral/juno/./src/components/Popover/Popover.tsx","webpack://@ringcentral/juno/./src/components/Popper/styles/PopperStyle.tsx","webpack://@ringcentral/juno/./src/components/Popper/Popper.tsx","webpack://@ringcentral/juno/./src/components/Presence/styles/StyledDND.tsx","webpack://@ringcentral/juno/./src/components/Presence/styles/StyledPresence.tsx","webpack://@ringcentral/juno/./src/components/Progress/CircularProgress/styles/CircularProgressStyle.tsx","webpack://@ringcentral/juno/./src/components/Progress/CircularProgress/CircularProgress.tsx","webpack://@ringcentral/juno/./src/components/Progress/LinearProgress/styles/LinearProgressStyle.tsx","webpack://@ringcentral/juno/./src/components/Progress/LinearProgress/LinearProgress.tsx","webpack://@ringcentral/juno/./src/components/Rating/styles/RatingStyle.tsx","webpack://@ringcentral/juno/./src/components/Rating/Rating.tsx","webpack://@ringcentral/juno/./src/components/Snackbar/Snackbar.tsx","webpack://@ringcentral/juno/./src/components/Snackbar/SnackbarAction/styles/StyledSnackbarContent.tsx","webpack://@ringcentral/juno/./src/components/Snackbar/SnackbarAction/SnackbarAction.tsx","webpack://@ringcentral/juno/./src/components/Snackbar/SnackbarContent/styles/StyledSnackbarContent.tsx","webpack://@ringcentral/juno/./src/components/Snackbar/SnackbarContent/SnackbarContent.tsx","webpack://@ringcentral/juno/./src/components/Stepper/Step/styles/StepStyle.tsx","webpack://@ringcentral/juno/./src/components/Stepper/Step/Step.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepButton/styles/StepButtonStyle.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepButton/StepButton.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepConnector/styles/StepConnectorStyle.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepConnector/StepConnector.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepIcon/styles/StyledCircleIcon.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepIcon/StepIcon.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepIcon/styles/StepIconStyle.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepLabel/styles/StepLabelStyle.tsx","webpack://@ringcentral/juno/./src/components/Stepper/StepLabel/StepLabel.tsx","webpack://@ringcentral/juno/./src/components/Stepper/styles/StepperStyle.tsx","webpack://@ringcentral/juno/./src/components/Stepper/Stepper.tsx","webpack://@ringcentral/juno/./src/components/TablePagination/styles/TablePaginationActions.tsx","webpack://@ringcentral/juno/./src/components/TablePagination/styles/TablePaginationStyle.tsx","webpack://@ringcentral/juno/./src/components/TablePagination/TablePagination.tsx","webpack://@ringcentral/juno/./src/components/Tables/TableRow.tsx","webpack://@ringcentral/juno/./src/components/Tables/TableBodyCellContent.tsx","webpack://@ringcentral/juno/./src/components/Tables/styled.ts","webpack://@ringcentral/juno/./src/components/Tabs/Tab/styles/TabStyle.tsx","webpack://@ringcentral/juno/./src/components/Tabs/Tab/Tab.tsx","webpack://@ringcentral/juno/./src/components/Tabs/TabList/TabList.tsx","webpack://@ringcentral/juno/./src/components/Tabs/TabPanel/TabPanel.tsx","webpack://@ringcentral/juno/./src/components/Tabs/Tabs/MoreMenuTab/styles/MoreMenuTabStyle.tsx","webpack://@ringcentral/juno/./src/components/Tabs/Tabs/MoreMenuTab/MoreMenuTab.tsx","webpack://@ringcentral/juno/./src/components/Tabs/Tabs/styles/TabsStyle.tsx","webpack://@ringcentral/juno/./src/components/Tabs/Tabs/Tabs.tsx","webpack://@ringcentral/juno/./src/components/Tag/styles/TagStyle.tsx","webpack://@ringcentral/juno/./src/components/Tag/Tag.tsx","webpack://@ringcentral/juno/./src/components/Text/styles/StyledText.tsx","webpack://@ringcentral/juno/./src/components/Text/Text.tsx","webpack://@ringcentral/juno/./src/components/Text/TextWithEllipsis.tsx","webpack://@ringcentral/juno/./src/components/Thumbnail/styles/StyledThumbnail.tsx","webpack://@ringcentral/juno/./src/components/Tooltip/styles/StyledTooltip.tsx","webpack://@ringcentral/juno/./src/components/Tooltip/Tooltip.tsx","webpack://@ringcentral/juno/./src/components/Typography/Typography.tsx","webpack://@ringcentral/juno/./src/components/Typography/styles/StyledTypography.tsx","webpack://@ringcentral/juno/./src/components/VirtualizedMenu/VirtualizedDivider/VirtualizedDivider.tsx","webpack://@ringcentral/juno/./src/components/VirtualizedMenu/VirtualizedMenu.tsx","webpack://@ringcentral/juno/./src/components/VirtualizedMenu/styles/StyledMenuPadding.tsx","webpack://@ringcentral/juno/./src/components/VirtualizedMenu/styles/VirtualizedMenuStyle.tsx","webpack://@ringcentral/juno/./src/components/VisuallyHidden/VisuallyHidden.tsx","webpack://@ringcentral/juno/./src/foundation/styles/GlobalScrollBarStyle/GlobalScrollBarStyle.tsx","webpack://@ringcentral/juno/./src/foundation/styles/fakeBorder.ts","webpack://@ringcentral/juno/./src/foundation/styles/flexWidth.ts","webpack://@ringcentral/juno/./src/foundation/styles/focusVisible.ts","webpack://@ringcentral/juno/./src/foundation/styles/rippleStyle.ts","webpack://@ringcentral/juno/./src/foundation/styles/lineClamp.ts","webpack://@ringcentral/juno/./src/foundation/styles/typography.ts","webpack://@ringcentral/juno/./src/storybook/components/Tag.tsx","webpack://@ringcentral/juno/./src/storybook/components/MainStoryView.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, palette2, styled } from '../../../../foundation';\\nimport { RcButton } from '../../../Buttons';\\nimport { RcHighlight } from '../Highlight';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/🌈Animations/Highlight',\\n} as Meta;\\n\\nconst Item = styled.div`\\n  height: 300px;\\n  width: 300px;\\n  color: ${palette2('neutral', 'f06')};\\n  ${flexCenterStyle};\\n`;\\n\\nexport const Highlight: Story<any> = () => {\\n  const highlightRef = useRef(() => {});\\n\\n  return (\\n    <>\\n      <RcButton\\n        onClick={() => {\\n          highlightRef.current();\\n        }}\\n      >\\n        Highlight\\n      </RcButton>\\n      <RcHighlight\\n        action={highlightRef}\\n        onEnter={() => console.log('Enter')}\\n        onEntering={() => console.log('Entering')}\\n        onEntered={() => console.log('Entered')}\\n        onExit={() => console.log('Exit')}\\n        onExiting={() => console.log('Exiting')}\\n        onExited={() => console.log('Exited')}\\n      >\\n        <Item>Highlight</Item>\\n      </RcHighlight>\\n    </>\\n  );\\n};\\n\\nHighlight.storyName = 'Highlight';\\n\\nHighlight.args = {};\\n\\nHighlight.argTypes = {};\\n\\nHighlight.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'react-transition-group',\\n      href: 'http://reactcommunity.org/react-transition-group/transition',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Highlight\":{\"startLoc\":{\"col\":37,\"line\":20},\"endLoc\":{\"col\":1,\"line\":45},\"startBody\":{\"col\":37,\"line\":20},\"endBody\":{\"col\":1,\"line\":45}}};\n    \nimport React, { useRef } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { flexCenterStyle, palette2, styled } from '../../../../foundation';\nimport { RcButton } from '../../../Buttons';\nimport { RcHighlight } from '../Highlight';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, palette2, styled } from '../../../../foundation';\\nimport { RcButton } from '../../../Buttons';\\nimport { RcHighlight } from '../Highlight';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/🌈Animations/Highlight',\\n} as Meta;\\n\\nconst Item = styled.div`\\n  height: 300px;\\n  width: 300px;\\n  color: ${palette2('neutral', 'f06')};\\n  ${flexCenterStyle};\\n`;\\n\\nexport const Highlight: Story<any> = () => {\\n  const highlightRef = useRef(() => {});\\n\\n  return (\\n    <>\\n      <RcButton\\n        onClick={() => {\\n          highlightRef.current();\\n        }}\\n      >\\n        Highlight\\n      </RcButton>\\n      <RcHighlight\\n        action={highlightRef}\\n        onEnter={() => console.log('Enter')}\\n        onEntering={() => console.log('Entering')}\\n        onEntered={() => console.log('Entered')}\\n        onExit={() => console.log('Exit')}\\n        onExiting={() => console.log('Exiting')}\\n        onExited={() => console.log('Exited')}\\n      >\\n        <Item>Highlight</Item>\\n      </RcHighlight>\\n    </>\\n  );\\n};\\n\\nHighlight.storyName = 'Highlight';\\n\\nHighlight.args = {};\\n\\nHighlight.argTypes = {};\\n\\nHighlight.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'react-transition-group',\\n      href: 'http://reactcommunity.org/react-transition-group/transition',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"highlight\":{\"startLoc\":{\"col\":37,\"line\":20},\"endLoc\":{\"col\":1,\"line\":45},\"startBody\":{\"col\":37,\"line\":20},\"endBody\":{\"col\":1,\"line\":45}}}},},\n  title: '🚀 Cleanup Components/🌈Animations/Highlight',\n} as Meta;\n\nconst Item = styled.div`\n  height: 300px;\n  width: 300px;\n  color: ${palette2('neutral', 'f06')};\n  ${flexCenterStyle};\n`;\n\nexport const Highlight: Story<any> = () => {\n  const highlightRef = useRef(() => {});\n\n  return (\n    <>\n      <RcButton\n        onClick={() => {\n          highlightRef.current();\n        }}\n      >\n        Highlight\n      </RcButton>\n      <RcHighlight\n        action={highlightRef}\n        onEnter={() => console.log('Enter')}\n        onEntering={() => console.log('Entering')}\n        onEntered={() => console.log('Entered')}\n        onExit={() => console.log('Exit')}\n        onExiting={() => console.log('Exiting')}\n        onExited={() => console.log('Exited')}\n      >\n        <Item>Highlight</Item>\n      </RcHighlight>\n    </>\n  );\n};\n\nHighlight.storyName = 'Highlight';\n\nHighlight.args = {};\n\nHighlight.argTypes = {};\n\nHighlight.parameters = {\n  tags: [\n    {\n      name: 'Source',\n      value: 'react-transition-group',\n      href: 'http://reactcommunity.org/react-transition-group/transition',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled, zIndex } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcCircularProgress } from '../../Progress/CircularProgress';\\nimport { RcBackdrop } from '../Backdrop';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Backdrop',\\n  component: RcBackdrop,\\n  argTypes: {\\n    ...sortInDocTable<keyof BackdropProps>([\\n      'open',\\n      'invisible',\\n      'timeout',\\n      'disableStrictModeCompat',\\n    ]),\\n    ...notControlInDocTable<keyof BackdropProps>([]),\\n    ...notShowInDocTable<keyof BackdropProps>(['in']),\\n  },\\n} as Meta;\\n\\nconst CustomZIndexBackdrop = styled(RcBackdrop)`\\n  z-index: ${zIndex('drawer')};\\n`;\\n\\ntype BackdropProps = ComponentProps<typeof RcBackdrop>;\\n\\nexport const Backdrop: Story<BackdropProps> = ({\\n  children,\\n  open: openProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = React.useState(openProp);\\n\\n  const handleClose = () => {\\n    setOpen(false);\\n  };\\n  const handleToggle = () => {\\n    setOpen(!open);\\n  };\\n  return (\\n    <>\\n      <RcButton\\n        variant=\\\"outlined\\\"\\n        color=\\\"interactive.f01\\\"\\n        onClick={handleToggle}\\n      >\\n        Show backdrop\\n      </RcButton>\\n      <CustomZIndexBackdrop {...args} open={open} onClick={handleClose}>\\n        <RcCircularProgress />\\n      </CustomZIndexBackdrop>\\n    </>\\n  );\\n};\\n\\nBackdrop.args = {\\n  open: false,\\n};\\n\\nBackdrop.argTypes = {\\n  ...notControlInDocTable<keyof BackdropProps>([]),\\n};\\n\\nBackdrop.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/backdrop/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Backdrop\":{\"startLoc\":{\"col\":46,\"line\":37},\"endLoc\":{\"col\":1,\"line\":66},\"startBody\":{\"col\":46,\"line\":37},\"endBody\":{\"col\":1,\"line\":66}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled, zIndex } from '../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcButton } from '../../Buttons/Button';\nimport { RcCircularProgress } from '../../Progress/CircularProgress';\nimport { RcBackdrop } from '../Backdrop';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled, zIndex } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcCircularProgress } from '../../Progress/CircularProgress';\\nimport { RcBackdrop } from '../Backdrop';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Backdrop',\\n  component: RcBackdrop,\\n  argTypes: {\\n    ...sortInDocTable<keyof BackdropProps>([\\n      'open',\\n      'invisible',\\n      'timeout',\\n      'disableStrictModeCompat',\\n    ]),\\n    ...notControlInDocTable<keyof BackdropProps>([]),\\n    ...notShowInDocTable<keyof BackdropProps>(['in']),\\n  },\\n} as Meta;\\n\\nconst CustomZIndexBackdrop = styled(RcBackdrop)`\\n  z-index: ${zIndex('drawer')};\\n`;\\n\\ntype BackdropProps = ComponentProps<typeof RcBackdrop>;\\n\\nexport const Backdrop: Story<BackdropProps> = ({\\n  children,\\n  open: openProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = React.useState(openProp);\\n\\n  const handleClose = () => {\\n    setOpen(false);\\n  };\\n  const handleToggle = () => {\\n    setOpen(!open);\\n  };\\n  return (\\n    <>\\n      <RcButton\\n        variant=\\\"outlined\\\"\\n        color=\\\"interactive.f01\\\"\\n        onClick={handleToggle}\\n      >\\n        Show backdrop\\n      </RcButton>\\n      <CustomZIndexBackdrop {...args} open={open} onClick={handleClose}>\\n        <RcCircularProgress />\\n      </CustomZIndexBackdrop>\\n    </>\\n  );\\n};\\n\\nBackdrop.args = {\\n  open: false,\\n};\\n\\nBackdrop.argTypes = {\\n  ...notControlInDocTable<keyof BackdropProps>([]),\\n};\\n\\nBackdrop.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/backdrop/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"backdrop\":{\"startLoc\":{\"col\":46,\"line\":37},\"endLoc\":{\"col\":1,\"line\":66},\"startBody\":{\"col\":46,\"line\":37},\"endBody\":{\"col\":1,\"line\":66}}}},},\n  title: '🚀 Cleanup Components/Backdrop',\n  component: RcBackdrop,\n  argTypes: {\n    ...sortInDocTable<keyof BackdropProps>([\n      'open',\n      'invisible',\n      'timeout',\n      'disableStrictModeCompat',\n    ]),\n    ...notControlInDocTable<keyof BackdropProps>([]),\n    ...notShowInDocTable<keyof BackdropProps>(['in']),\n  },\n} as Meta;\n\nconst CustomZIndexBackdrop = styled(RcBackdrop)`\n  z-index: ${zIndex('drawer')};\n`;\n\ntype BackdropProps = ComponentProps<typeof RcBackdrop>;\n\nexport const Backdrop: Story<BackdropProps> = ({\n  children,\n  open: openProp,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [open, setOpen] = React.useState(openProp);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleToggle = () => {\n    setOpen(!open);\n  };\n  return (\n    <>\n      <RcButton\n        variant=\"outlined\"\n        color=\"interactive.f01\"\n        onClick={handleToggle}\n      >\n        Show backdrop\n      </RcButton>\n      <CustomZIndexBackdrop {...args} open={open} onClick={handleClose}>\n        <RcCircularProgress />\n      </CustomZIndexBackdrop>\n    </>\n  );\n};\n\nBackdrop.args = {\n  open: false,\n};\n\nBackdrop.argTypes = {\n  ...notControlInDocTable<keyof BackdropProps>([]),\n};\n\nBackdrop.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/backdrop/',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled, useTheme } from '../../../../foundation';\\nimport { CallAdd, Leave, NewEmail, UserDefault } from '../../../../icon';\\nimport BubbleLinesBorder from '../../../../icon/BubbleLinesBorder';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  paletteChoice,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { Title } from '../../../../storybook/components';\\nimport { RcBox } from '../../../Box';\\nimport { RcIcon } from '../../../Icon';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcButton, RcButtonVariant } from '../Button';\\nimport { RcButtonHeights, RcButtonSize } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Buttons',\\n  component: RcButton,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...sortInDocTable<keyof ButtonProps>([\\n      'variant',\\n      'size',\\n      'radius',\\n      'children',\\n      'title',\\n      'useRcTooltip',\\n      'loading',\\n      'loadingMode',\\n      'disabled',\\n      'fullWidth',\\n      'startIcon',\\n      'endIcon',\\n    ]),\\n    ...notControlInDocTable<keyof ButtonProps>([]),\\n    ...notShowInDocTable<keyof ButtonProps>(['IconProps']),\\n  },\\n} as Meta;\\n\\ntype ButtonProps = ComponentProps<typeof RcButton>;\\n\\nexport const Button: Story<ButtonProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <RcButton {...args}>{children}</RcButton>;\\n};\\n\\nButton.args = {\\n  children: 'button',\\n  title: 'button',\\n};\\n\\nButton.argTypes = {\\n  ...notControlInDocTable<keyof ButtonProps>([]),\\n};\\n\\nButton.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/buttons/#button',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst Wrapper = styled.ul`\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  li {\\n    list-style: none;\\n    display: flex;\\n    > * + * {\\n      margin-left: 1em;\\n    }\\n  }\\n\\n  li + li {\\n    margin-top: 1em;\\n  }\\n`;\\n\\nconst variants = [\\n  'contained',\\n  'outlined',\\n  'text',\\n  'plain',\\n] as RcButtonVariant[];\\n\\nconst sizes = Object.keys(RcButtonHeights) as RcButtonSize[];\\n\\nexport const ButtonExamples: Story<ButtonProps> = ({ children, ...args }) => {\\n  return (\\n    <Wrapper>\\n      {variants.map((variant) => (\\n        <li key={variant}>\\n          <RcButton {...args} variant={variant}>\\n            {children}\\n          </RcButton>\\n          <RcButton\\n            {...args}\\n            variant={variant}\\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n          >\\n            {children}\\n          </RcButton>\\n          <RcButton\\n            {...args}\\n            variant={variant}\\n            endIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n          >\\n            {children}\\n          </RcButton>\\n          <RcButton\\n            {...args}\\n            variant={variant}\\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n            endIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n          >\\n            {children}\\n          </RcButton>\\n        </li>\\n      ))}\\n      <br />\\n      <br />\\n      <br />\\n      <Title variant=\\\"title1\\\">All Size button</Title>\\n      <Wrapper>\\n        <li>\\n          {sizes.map((size) => {\\n            return (\\n              <RcBox key={size} display=\\\"inline-block\\\">\\n                <Title variant=\\\"body1\\\">{size}</Title>\\n                <RcButton {...args} size={size}>\\n                  {children}\\n                </RcButton>\\n                <br />\\n                <br />\\n                <RcButton\\n                  {...args}\\n                  size={size}\\n                  startIcon={<RcIcon symbol={CallAdd} />}\\n                >\\n                  {children}\\n                </RcButton>\\n                <br />\\n                <br />\\n                <RcButton\\n                  {...args}\\n                  size={size}\\n                  startIcon={<RcIcon symbol={CallAdd} />}\\n                >\\n                  Start a conversation\\n                </RcButton>\\n              </RcBox>\\n            );\\n          })}\\n        </li>\\n      </Wrapper>\\n    </Wrapper>\\n  );\\n};\\n\\nButtonExamples.args = {\\n  children: 'button',\\n  title: 'button',\\n};\\n\\nButtonExamples.argTypes = {\\n  ...notShowInDocTable<keyof ButtonProps>(['variant']),\\n};\\n\\nexport const ButtonVariants: Story<ButtonProps> = () => {\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcButton variant=\\\"text\\\">click me</RcButton>\\n        <RcButton variant=\\\"outlined\\\">click me</RcButton>\\n        <RcButton variant=\\\"contained\\\">click me</RcButton>\\n        <RcButton variant=\\\"plain\\\">click me</RcButton>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonSizes: Story<ButtonProps> = () => {\\n  return (\\n    <Wrapper>\\n      <li>\\n        {sizes.map((size) => {\\n          return (\\n            <RcBox key={size} display=\\\"inline-block\\\">\\n              <Title variant=\\\"body1\\\">{size}</Title>\\n              <RcButton size={size}>click</RcButton>\\n              <br />\\n              <br />\\n              <RcButton size={size} startIcon={<RcIcon symbol={CallAdd} />}>\\n                Start a conversation\\n              </RcButton>\\n            </RcBox>\\n          );\\n        })}\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonWithLoading: Story<ButtonProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  return (\\n    <Wrapper>\\n      {variants.map((variant) => (\\n        <li key={variant}>\\n          <div>\\n            <Title variant=\\\"body1\\\">replace(default)</Title>\\n            <RcButton {...args} variant={variant}>\\n              click\\n            </RcButton>\\n          </div>\\n          <div>\\n            <Title variant=\\\"body1\\\">prefix</Title>\\n            <RcButton {...args} variant={variant} loadingMode=\\\"prefix\\\">\\n              click\\n            </RcButton>\\n          </div>\\n          <div>\\n            <Title variant=\\\"body1\\\">suffix</Title>\\n            <RcButton {...args} variant={variant} loadingMode=\\\"suffix\\\">\\n              click\\n            </RcButton>\\n          </div>\\n          <div>\\n            <Title variant=\\\"body1\\\">with custom loading props</Title>\\n            <RcButton\\n              {...args}\\n              variant={variant}\\n              loadingMode=\\\"suffix\\\"\\n              CircularProgressProps={{\\n                thickness: 10,\\n              }}\\n            >\\n              click\\n            </RcButton>\\n          </div>\\n        </li>\\n      ))}\\n    </Wrapper>\\n  );\\n};\\n\\nButtonWithLoading.args = {\\n  loading: true,\\n};\\n\\nButtonWithLoading.argTypes = {\\n  ...notControlInDocTable<keyof ButtonProps>(['variant']),\\n};\\n\\nexport const ButtonWithDisabled: Story<ButtonProps> = () => {\\n  return (\\n    <Wrapper>\\n      <li>\\n        <div>\\n          <Title variant=\\\"body1\\\">Normal</Title>\\n          <RcButton disabled>button</RcButton>\\n        </div>\\n        <div>\\n          <Title variant=\\\"body1\\\">Mask</Title>\\n          <RcButton disabled disabledVariant=\\\"mask\\\">\\n            button\\n          </RcButton>\\n        </div>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonWithCustomRadius: Story<ButtonProps> = () => {\\n  const theme = useTheme();\\n  return (\\n    <RcButton\\n      radius=\\\"round\\\"\\n      keepElevation\\n      color=\\\"neutral.elevation\\\"\\n      size=\\\"small\\\"\\n      style={{ minWidth: '104px' }}\\n      TouchRippleProps={{\\n        style: { color: theme.palette.interactive.b02 },\\n      }}\\n    >\\n      <RcTypography variant=\\\"caption1\\\" color=\\\"interactive.f01\\\">\\n        button\\n      </RcTypography>\\n    </RcButton>\\n  );\\n};\\n\\nexport const ButtonWithKeepElevation: Story<ButtonProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <RcBox bgcolor=\\\"neutral.elevation\\\" display=\\\"inline-block\\\" padding=\\\"1em\\\">\\n      <RcButton keepElevation>Keep</RcButton>\\n    </RcBox>\\n  );\\n};\\n\\nexport const ButtonWithIcon: Story<ButtonProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <div>\\n          <Title variant=\\\"body1\\\">startIcon</Title>\\n          <RcButton startIcon={<RcIcon symbol={UserDefault} />}>login</RcButton>\\n        </div>\\n        <div>\\n          <Title variant=\\\"body1\\\">endIcon</Title>\\n          <RcButton endIcon={<RcIcon symbol={Leave} />}>logout</RcButton>\\n        </div>\\n        <div>\\n          <Title variant=\\\"body1\\\">both</Title>\\n          <RcButton\\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n            endIcon={<RcIcon symbol={NewEmail} />}\\n          >\\n            logout\\n          </RcButton>\\n        </div>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonWithCustomColor: Story<ButtonProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcButton color=\\\"danger.b03\\\">logout</RcButton>\\n        <RcButton color=\\\"success.b03\\\">logout</RcButton>\\n        <RcButton color=\\\"highlight.b03\\\">logout</RcButton>\\n        <RcButton color=\\\"informative.b01\\\">logout</RcButton>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Button\":{\"startLoc\":{\"col\":42,\"line\":53},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":42,\"line\":53},\"endBody\":{\"col\":1,\"line\":57}},\"ButtonExamples\":{\"startLoc\":{\"col\":50,\"line\":108},\"endLoc\":{\"col\":1,\"line\":178},\"startBody\":{\"col\":50,\"line\":108},\"endBody\":{\"col\":1,\"line\":178}},\"ButtonVariants\":{\"startLoc\":{\"col\":50,\"line\":189},\"endLoc\":{\"col\":1,\"line\":200},\"startBody\":{\"col\":50,\"line\":189},\"endBody\":{\"col\":1,\"line\":200}},\"ButtonSizes\":{\"startLoc\":{\"col\":47,\"line\":202},\"endLoc\":{\"col\":1,\"line\":222},\"startBody\":{\"col\":47,\"line\":202},\"endBody\":{\"col\":1,\"line\":222}},\"ButtonWithLoading\":{\"startLoc\":{\"col\":53,\"line\":224},\"endLoc\":{\"col\":1,\"line\":267},\"startBody\":{\"col\":53,\"line\":224},\"endBody\":{\"col\":1,\"line\":267}},\"ButtonWithDisabled\":{\"startLoc\":{\"col\":54,\"line\":277},\"endLoc\":{\"col\":1,\"line\":294},\"startBody\":{\"col\":54,\"line\":277},\"endBody\":{\"col\":1,\"line\":294}},\"ButtonWithCustomRadius\":{\"startLoc\":{\"col\":58,\"line\":296},\"endLoc\":{\"col\":1,\"line\":314},\"startBody\":{\"col\":58,\"line\":296},\"endBody\":{\"col\":1,\"line\":314}},\"ButtonWithKeepElevation\":{\"startLoc\":{\"col\":59,\"line\":316},\"endLoc\":{\"col\":1,\"line\":324},\"startBody\":{\"col\":59,\"line\":316},\"endBody\":{\"col\":1,\"line\":324}},\"ButtonWithIcon\":{\"startLoc\":{\"col\":50,\"line\":326},\"endLoc\":{\"col\":1,\"line\":352},\"startBody\":{\"col\":50,\"line\":326},\"endBody\":{\"col\":1,\"line\":352}},\"ButtonWithCustomColor\":{\"startLoc\":{\"col\":57,\"line\":354},\"endLoc\":{\"col\":1,\"line\":367},\"startBody\":{\"col\":57,\"line\":354},\"endBody\":{\"col\":1,\"line\":367}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled, useTheme } from '../../../../foundation';\nimport { CallAdd, Leave, NewEmail, UserDefault } from '../../../../icon';\nimport BubbleLinesBorder from '../../../../icon/BubbleLinesBorder';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  paletteChoice,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { Title } from '../../../../storybook/components';\nimport { RcBox } from '../../../Box';\nimport { RcIcon } from '../../../Icon';\nimport { RcTypography } from '../../../Typography';\nimport { RcButton, RcButtonVariant } from '../Button';\nimport { RcButtonHeights, RcButtonSize } from '../utils';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled, useTheme } from '../../../../foundation';\\nimport { CallAdd, Leave, NewEmail, UserDefault } from '../../../../icon';\\nimport BubbleLinesBorder from '../../../../icon/BubbleLinesBorder';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  paletteChoice,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { Title } from '../../../../storybook/components';\\nimport { RcBox } from '../../../Box';\\nimport { RcIcon } from '../../../Icon';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcButton, RcButtonVariant } from '../Button';\\nimport { RcButtonHeights, RcButtonSize } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Buttons',\\n  component: RcButton,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...sortInDocTable<keyof ButtonProps>([\\n      'variant',\\n      'size',\\n      'radius',\\n      'children',\\n      'title',\\n      'useRcTooltip',\\n      'loading',\\n      'loadingMode',\\n      'disabled',\\n      'fullWidth',\\n      'startIcon',\\n      'endIcon',\\n    ]),\\n    ...notControlInDocTable<keyof ButtonProps>([]),\\n    ...notShowInDocTable<keyof ButtonProps>(['IconProps']),\\n  },\\n} as Meta;\\n\\ntype ButtonProps = ComponentProps<typeof RcButton>;\\n\\nexport const Button: Story<ButtonProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <RcButton {...args}>{children}</RcButton>;\\n};\\n\\nButton.args = {\\n  children: 'button',\\n  title: 'button',\\n};\\n\\nButton.argTypes = {\\n  ...notControlInDocTable<keyof ButtonProps>([]),\\n};\\n\\nButton.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/buttons/#button',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst Wrapper = styled.ul`\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  li {\\n    list-style: none;\\n    display: flex;\\n    > * + * {\\n      margin-left: 1em;\\n    }\\n  }\\n\\n  li + li {\\n    margin-top: 1em;\\n  }\\n`;\\n\\nconst variants = [\\n  'contained',\\n  'outlined',\\n  'text',\\n  'plain',\\n] as RcButtonVariant[];\\n\\nconst sizes = Object.keys(RcButtonHeights) as RcButtonSize[];\\n\\nexport const ButtonExamples: Story<ButtonProps> = ({ children, ...args }) => {\\n  return (\\n    <Wrapper>\\n      {variants.map((variant) => (\\n        <li key={variant}>\\n          <RcButton {...args} variant={variant}>\\n            {children}\\n          </RcButton>\\n          <RcButton\\n            {...args}\\n            variant={variant}\\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n          >\\n            {children}\\n          </RcButton>\\n          <RcButton\\n            {...args}\\n            variant={variant}\\n            endIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n          >\\n            {children}\\n          </RcButton>\\n          <RcButton\\n            {...args}\\n            variant={variant}\\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n            endIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n          >\\n            {children}\\n          </RcButton>\\n        </li>\\n      ))}\\n      <br />\\n      <br />\\n      <br />\\n      <Title variant=\\\"title1\\\">All Size button</Title>\\n      <Wrapper>\\n        <li>\\n          {sizes.map((size) => {\\n            return (\\n              <RcBox key={size} display=\\\"inline-block\\\">\\n                <Title variant=\\\"body1\\\">{size}</Title>\\n                <RcButton {...args} size={size}>\\n                  {children}\\n                </RcButton>\\n                <br />\\n                <br />\\n                <RcButton\\n                  {...args}\\n                  size={size}\\n                  startIcon={<RcIcon symbol={CallAdd} />}\\n                >\\n                  {children}\\n                </RcButton>\\n                <br />\\n                <br />\\n                <RcButton\\n                  {...args}\\n                  size={size}\\n                  startIcon={<RcIcon symbol={CallAdd} />}\\n                >\\n                  Start a conversation\\n                </RcButton>\\n              </RcBox>\\n            );\\n          })}\\n        </li>\\n      </Wrapper>\\n    </Wrapper>\\n  );\\n};\\n\\nButtonExamples.args = {\\n  children: 'button',\\n  title: 'button',\\n};\\n\\nButtonExamples.argTypes = {\\n  ...notShowInDocTable<keyof ButtonProps>(['variant']),\\n};\\n\\nexport const ButtonVariants: Story<ButtonProps> = () => {\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcButton variant=\\\"text\\\">click me</RcButton>\\n        <RcButton variant=\\\"outlined\\\">click me</RcButton>\\n        <RcButton variant=\\\"contained\\\">click me</RcButton>\\n        <RcButton variant=\\\"plain\\\">click me</RcButton>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonSizes: Story<ButtonProps> = () => {\\n  return (\\n    <Wrapper>\\n      <li>\\n        {sizes.map((size) => {\\n          return (\\n            <RcBox key={size} display=\\\"inline-block\\\">\\n              <Title variant=\\\"body1\\\">{size}</Title>\\n              <RcButton size={size}>click</RcButton>\\n              <br />\\n              <br />\\n              <RcButton size={size} startIcon={<RcIcon symbol={CallAdd} />}>\\n                Start a conversation\\n              </RcButton>\\n            </RcBox>\\n          );\\n        })}\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonWithLoading: Story<ButtonProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  return (\\n    <Wrapper>\\n      {variants.map((variant) => (\\n        <li key={variant}>\\n          <div>\\n            <Title variant=\\\"body1\\\">replace(default)</Title>\\n            <RcButton {...args} variant={variant}>\\n              click\\n            </RcButton>\\n          </div>\\n          <div>\\n            <Title variant=\\\"body1\\\">prefix</Title>\\n            <RcButton {...args} variant={variant} loadingMode=\\\"prefix\\\">\\n              click\\n            </RcButton>\\n          </div>\\n          <div>\\n            <Title variant=\\\"body1\\\">suffix</Title>\\n            <RcButton {...args} variant={variant} loadingMode=\\\"suffix\\\">\\n              click\\n            </RcButton>\\n          </div>\\n          <div>\\n            <Title variant=\\\"body1\\\">with custom loading props</Title>\\n            <RcButton\\n              {...args}\\n              variant={variant}\\n              loadingMode=\\\"suffix\\\"\\n              CircularProgressProps={{\\n                thickness: 10,\\n              }}\\n            >\\n              click\\n            </RcButton>\\n          </div>\\n        </li>\\n      ))}\\n    </Wrapper>\\n  );\\n};\\n\\nButtonWithLoading.args = {\\n  loading: true,\\n};\\n\\nButtonWithLoading.argTypes = {\\n  ...notControlInDocTable<keyof ButtonProps>(['variant']),\\n};\\n\\nexport const ButtonWithDisabled: Story<ButtonProps> = () => {\\n  return (\\n    <Wrapper>\\n      <li>\\n        <div>\\n          <Title variant=\\\"body1\\\">Normal</Title>\\n          <RcButton disabled>button</RcButton>\\n        </div>\\n        <div>\\n          <Title variant=\\\"body1\\\">Mask</Title>\\n          <RcButton disabled disabledVariant=\\\"mask\\\">\\n            button\\n          </RcButton>\\n        </div>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonWithCustomRadius: Story<ButtonProps> = () => {\\n  const theme = useTheme();\\n  return (\\n    <RcButton\\n      radius=\\\"round\\\"\\n      keepElevation\\n      color=\\\"neutral.elevation\\\"\\n      size=\\\"small\\\"\\n      style={{ minWidth: '104px' }}\\n      TouchRippleProps={{\\n        style: { color: theme.palette.interactive.b02 },\\n      }}\\n    >\\n      <RcTypography variant=\\\"caption1\\\" color=\\\"interactive.f01\\\">\\n        button\\n      </RcTypography>\\n    </RcButton>\\n  );\\n};\\n\\nexport const ButtonWithKeepElevation: Story<ButtonProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <RcBox bgcolor=\\\"neutral.elevation\\\" display=\\\"inline-block\\\" padding=\\\"1em\\\">\\n      <RcButton keepElevation>Keep</RcButton>\\n    </RcBox>\\n  );\\n};\\n\\nexport const ButtonWithIcon: Story<ButtonProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <div>\\n          <Title variant=\\\"body1\\\">startIcon</Title>\\n          <RcButton startIcon={<RcIcon symbol={UserDefault} />}>login</RcButton>\\n        </div>\\n        <div>\\n          <Title variant=\\\"body1\\\">endIcon</Title>\\n          <RcButton endIcon={<RcIcon symbol={Leave} />}>logout</RcButton>\\n        </div>\\n        <div>\\n          <Title variant=\\\"body1\\\">both</Title>\\n          <RcButton\\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\\n            endIcon={<RcIcon symbol={NewEmail} />}\\n          >\\n            logout\\n          </RcButton>\\n        </div>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const ButtonWithCustomColor: Story<ButtonProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcButton color=\\\"danger.b03\\\">logout</RcButton>\\n        <RcButton color=\\\"success.b03\\\">logout</RcButton>\\n        <RcButton color=\\\"highlight.b03\\\">logout</RcButton>\\n        <RcButton color=\\\"informative.b01\\\">logout</RcButton>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\",\"locationsMap\":{\"button\":{\"startLoc\":{\"col\":42,\"line\":53},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":42,\"line\":53},\"endBody\":{\"col\":1,\"line\":57}},\"button-examples\":{\"startLoc\":{\"col\":50,\"line\":108},\"endLoc\":{\"col\":1,\"line\":178},\"startBody\":{\"col\":50,\"line\":108},\"endBody\":{\"col\":1,\"line\":178}},\"button-variants\":{\"startLoc\":{\"col\":50,\"line\":189},\"endLoc\":{\"col\":1,\"line\":200},\"startBody\":{\"col\":50,\"line\":189},\"endBody\":{\"col\":1,\"line\":200}},\"button-sizes\":{\"startLoc\":{\"col\":47,\"line\":202},\"endLoc\":{\"col\":1,\"line\":222},\"startBody\":{\"col\":47,\"line\":202},\"endBody\":{\"col\":1,\"line\":222}},\"button-with-loading\":{\"startLoc\":{\"col\":53,\"line\":224},\"endLoc\":{\"col\":1,\"line\":267},\"startBody\":{\"col\":53,\"line\":224},\"endBody\":{\"col\":1,\"line\":267}},\"button-with-disabled\":{\"startLoc\":{\"col\":54,\"line\":277},\"endLoc\":{\"col\":1,\"line\":294},\"startBody\":{\"col\":54,\"line\":277},\"endBody\":{\"col\":1,\"line\":294}},\"button-with-custom-radius\":{\"startLoc\":{\"col\":58,\"line\":296},\"endLoc\":{\"col\":1,\"line\":314},\"startBody\":{\"col\":58,\"line\":296},\"endBody\":{\"col\":1,\"line\":314}},\"button-with-keep-elevation\":{\"startLoc\":{\"col\":59,\"line\":316},\"endLoc\":{\"col\":1,\"line\":324},\"startBody\":{\"col\":59,\"line\":316},\"endBody\":{\"col\":1,\"line\":324}},\"button-with-icon\":{\"startLoc\":{\"col\":50,\"line\":326},\"endLoc\":{\"col\":1,\"line\":352},\"startBody\":{\"col\":50,\"line\":326},\"endBody\":{\"col\":1,\"line\":352}},\"button-with-custom-color\":{\"startLoc\":{\"col\":57,\"line\":354},\"endLoc\":{\"col\":1,\"line\":367},\"startBody\":{\"col\":57,\"line\":354},\"endBody\":{\"col\":1,\"line\":367}}}},},\n  title: '🚀 Cleanup Components/Buttons',\n  component: RcButton,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n    ...sortInDocTable<keyof ButtonProps>([\n      'variant',\n      'size',\n      'radius',\n      'children',\n      'title',\n      'useRcTooltip',\n      'loading',\n      'loadingMode',\n      'disabled',\n      'fullWidth',\n      'startIcon',\n      'endIcon',\n    ]),\n    ...notControlInDocTable<keyof ButtonProps>([]),\n    ...notShowInDocTable<keyof ButtonProps>(['IconProps']),\n  },\n} as Meta;\n\ntype ButtonProps = ComponentProps<typeof RcButton>;\n\nexport const Button: Story<ButtonProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  return <RcButton {...args}>{children}</RcButton>;\n};;\n\nButton.args = {\n  children: 'button',\n  title: 'button',\n};\n\nButton.argTypes = {\n  ...notControlInDocTable<keyof ButtonProps>([]),\n};\n\nButton.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/buttons/#button',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst Wrapper = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  li {\n    list-style: none;\n    display: flex;\n    > * + * {\n      margin-left: 1em;\n    }\n  }\n\n  li + li {\n    margin-top: 1em;\n  }\n`;\n\nconst variants = [\n  'contained',\n  'outlined',\n  'text',\n  'plain',\n] as RcButtonVariant[];\n\nconst sizes = Object.keys(RcButtonHeights) as RcButtonSize[];\n\nexport const ButtonExamples: Story<ButtonProps> = ({ children, ...args }) => {\n  return (\n    <Wrapper>\n      {variants.map((variant) => (\n        <li key={variant}>\n          <RcButton {...args} variant={variant}>\n            {children}\n          </RcButton>\n          <RcButton\n            {...args}\n            variant={variant}\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\n          >\n            {children}\n          </RcButton>\n          <RcButton\n            {...args}\n            variant={variant}\n            endIcon={<RcIcon symbol={BubbleLinesBorder} />}\n          >\n            {children}\n          </RcButton>\n          <RcButton\n            {...args}\n            variant={variant}\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\n            endIcon={<RcIcon symbol={BubbleLinesBorder} />}\n          >\n            {children}\n          </RcButton>\n        </li>\n      ))}\n      <br />\n      <br />\n      <br />\n      <Title variant=\"title1\">All Size button</Title>\n      <Wrapper>\n        <li>\n          {sizes.map((size) => {\n            return (\n              <RcBox key={size} display=\"inline-block\">\n                <Title variant=\"body1\">{size}</Title>\n                <RcButton {...args} size={size}>\n                  {children}\n                </RcButton>\n                <br />\n                <br />\n                <RcButton\n                  {...args}\n                  size={size}\n                  startIcon={<RcIcon symbol={CallAdd} />}\n                >\n                  {children}\n                </RcButton>\n                <br />\n                <br />\n                <RcButton\n                  {...args}\n                  size={size}\n                  startIcon={<RcIcon symbol={CallAdd} />}\n                >\n                  Start a conversation\n                </RcButton>\n              </RcBox>\n            );\n          })}\n        </li>\n      </Wrapper>\n    </Wrapper>\n  );\n};;\n\nButtonExamples.args = {\n  children: 'button',\n  title: 'button',\n};\n\nButtonExamples.argTypes = {\n  ...notShowInDocTable<keyof ButtonProps>(['variant']),\n};\n\nexport const ButtonVariants: Story<ButtonProps> = () => {\n  return (\n    <Wrapper>\n      <li>\n        <RcButton variant=\"text\">click me</RcButton>\n        <RcButton variant=\"outlined\">click me</RcButton>\n        <RcButton variant=\"contained\">click me</RcButton>\n        <RcButton variant=\"plain\">click me</RcButton>\n      </li>\n    </Wrapper>\n  );\n};;\n\nexport const ButtonSizes: Story<ButtonProps> = () => {\n  return (\n    <Wrapper>\n      <li>\n        {sizes.map((size) => {\n          return (\n            <RcBox key={size} display=\"inline-block\">\n              <Title variant=\"body1\">{size}</Title>\n              <RcButton size={size}>click</RcButton>\n              <br />\n              <br />\n              <RcButton size={size} startIcon={<RcIcon symbol={CallAdd} />}>\n                Start a conversation\n              </RcButton>\n            </RcBox>\n          );\n        })}\n      </li>\n    </Wrapper>\n  );\n};;\n\nexport const ButtonWithLoading: Story<ButtonProps> = ({\n  children,\n  ...args\n}) => {\n  return (\n    <Wrapper>\n      {variants.map((variant) => (\n        <li key={variant}>\n          <div>\n            <Title variant=\"body1\">replace(default)</Title>\n            <RcButton {...args} variant={variant}>\n              click\n            </RcButton>\n          </div>\n          <div>\n            <Title variant=\"body1\">prefix</Title>\n            <RcButton {...args} variant={variant} loadingMode=\"prefix\">\n              click\n            </RcButton>\n          </div>\n          <div>\n            <Title variant=\"body1\">suffix</Title>\n            <RcButton {...args} variant={variant} loadingMode=\"suffix\">\n              click\n            </RcButton>\n          </div>\n          <div>\n            <Title variant=\"body1\">with custom loading props</Title>\n            <RcButton\n              {...args}\n              variant={variant}\n              loadingMode=\"suffix\"\n              CircularProgressProps={{\n                thickness: 10,\n              }}\n            >\n              click\n            </RcButton>\n          </div>\n        </li>\n      ))}\n    </Wrapper>\n  );\n};;\n\nButtonWithLoading.args = {\n  loading: true,\n};\n\nButtonWithLoading.argTypes = {\n  ...notControlInDocTable<keyof ButtonProps>(['variant']),\n};\n\nexport const ButtonWithDisabled: Story<ButtonProps> = () => {\n  return (\n    <Wrapper>\n      <li>\n        <div>\n          <Title variant=\"body1\">Normal</Title>\n          <RcButton disabled>button</RcButton>\n        </div>\n        <div>\n          <Title variant=\"body1\">Mask</Title>\n          <RcButton disabled disabledVariant=\"mask\">\n            button\n          </RcButton>\n        </div>\n      </li>\n    </Wrapper>\n  );\n};;\n\nexport const ButtonWithCustomRadius: Story<ButtonProps> = () => {\n  const theme = useTheme();\n  return (\n    <RcButton\n      radius=\"round\"\n      keepElevation\n      color=\"neutral.elevation\"\n      size=\"small\"\n      style={{ minWidth: '104px' }}\n      TouchRippleProps={{\n        style: { color: theme.palette.interactive.b02 },\n      }}\n    >\n      <RcTypography variant=\"caption1\" color=\"interactive.f01\">\n        button\n      </RcTypography>\n    </RcButton>\n  );\n};;\n\nexport const ButtonWithKeepElevation: Story<ButtonProps> = () => {\n  switchToControlKnobs();\n\n  return (\n    <RcBox bgcolor=\"neutral.elevation\" display=\"inline-block\" padding=\"1em\">\n      <RcButton keepElevation>Keep</RcButton>\n    </RcBox>\n  );\n};;\n\nexport const ButtonWithIcon: Story<ButtonProps> = () => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <li>\n        <div>\n          <Title variant=\"body1\">startIcon</Title>\n          <RcButton startIcon={<RcIcon symbol={UserDefault} />}>login</RcButton>\n        </div>\n        <div>\n          <Title variant=\"body1\">endIcon</Title>\n          <RcButton endIcon={<RcIcon symbol={Leave} />}>logout</RcButton>\n        </div>\n        <div>\n          <Title variant=\"body1\">both</Title>\n          <RcButton\n            startIcon={<RcIcon symbol={BubbleLinesBorder} />}\n            endIcon={<RcIcon symbol={NewEmail} />}\n          >\n            logout\n          </RcButton>\n        </div>\n      </li>\n    </Wrapper>\n  );\n};;\n\nexport const ButtonWithCustomColor: Story<ButtonProps> = () => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <li>\n        <RcButton color=\"danger.b03\">logout</RcButton>\n        <RcButton color=\"success.b03\">logout</RcButton>\n        <RcButton color=\"highlight.b03\">logout</RcButton>\n        <RcButton color=\"informative.b01\">logout</RcButton>\n      </li>\n    </Wrapper>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcButtonBase } from '../ButtonBase';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Buttons/ButtonBase',\\n  component: RcButtonBase,\\n  argTypes: {\\n    ...sortInDocTable<keyof ButtonBaseProps>([]),\\n    ...notControlInDocTable<keyof ButtonBaseProps>([]),\\n    ...notShowInDocTable<keyof ButtonBaseProps>([]),\\n  },\\n} as Meta;\\n\\ntype ButtonBaseProps = ComponentProps<typeof RcButtonBase>;\\n\\nconst Wrapper = styled.div`\\n  .ripple {\\n    color: red;\\n  }\\n`;\\n\\ntype ButtonBaseButtonProps = ComponentProps<typeof RcButtonBase>;\\n\\nexport const ButtonBase: Story<ButtonBaseButtonProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <RcButtonBase\\n        {...args}\\n        TouchRippleProps={{\\n          classes: {\\n            ripple: 'ripple',\\n          },\\n        }}\\n      >\\n        <RcTypography color=\\\"neutral.f06\\\">cool</RcTypography>\\n      </RcButtonBase>\\n    </Wrapper>\\n  );\\n};\\n\\nButtonBase.args = {};\\n\\nButtonBase.argTypes = {\\n  ...notControlInDocTable<keyof ButtonBaseProps>([]),\\n};\\n\\nButtonBase.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/api/button-base/',\\n    },\\n  ],\\n};\\n\\nButtonBase.storyName = 'ButtonBase';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ButtonBase\":{\"startLoc\":{\"col\":56,\"line\":35},\"endLoc\":{\"col\":1,\"line\":52},\"startBody\":{\"col\":56,\"line\":35},\"endBody\":{\"col\":1,\"line\":52}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { RcTypography } from '../../../Typography';\nimport { RcButtonBase } from '../ButtonBase';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcButtonBase } from '../ButtonBase';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Buttons/ButtonBase',\\n  component: RcButtonBase,\\n  argTypes: {\\n    ...sortInDocTable<keyof ButtonBaseProps>([]),\\n    ...notControlInDocTable<keyof ButtonBaseProps>([]),\\n    ...notShowInDocTable<keyof ButtonBaseProps>([]),\\n  },\\n} as Meta;\\n\\ntype ButtonBaseProps = ComponentProps<typeof RcButtonBase>;\\n\\nconst Wrapper = styled.div`\\n  .ripple {\\n    color: red;\\n  }\\n`;\\n\\ntype ButtonBaseButtonProps = ComponentProps<typeof RcButtonBase>;\\n\\nexport const ButtonBase: Story<ButtonBaseButtonProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <RcButtonBase\\n        {...args}\\n        TouchRippleProps={{\\n          classes: {\\n            ripple: 'ripple',\\n          },\\n        }}\\n      >\\n        <RcTypography color=\\\"neutral.f06\\\">cool</RcTypography>\\n      </RcButtonBase>\\n    </Wrapper>\\n  );\\n};\\n\\nButtonBase.args = {};\\n\\nButtonBase.argTypes = {\\n  ...notControlInDocTable<keyof ButtonBaseProps>([]),\\n};\\n\\nButtonBase.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/api/button-base/',\\n    },\\n  ],\\n};\\n\\nButtonBase.storyName = 'ButtonBase';\\n\",\"locationsMap\":{\"button-base\":{\"startLoc\":{\"col\":56,\"line\":35},\"endLoc\":{\"col\":1,\"line\":52},\"startBody\":{\"col\":56,\"line\":35},\"endBody\":{\"col\":1,\"line\":52}}}},},\n  title: '🚀 Cleanup Components/Buttons/ButtonBase',\n  component: RcButtonBase,\n  argTypes: {\n    ...sortInDocTable<keyof ButtonBaseProps>([]),\n    ...notControlInDocTable<keyof ButtonBaseProps>([]),\n    ...notShowInDocTable<keyof ButtonBaseProps>([]),\n  },\n} as Meta;\n\ntype ButtonBaseProps = ComponentProps<typeof RcButtonBase>;\n\nconst Wrapper = styled.div`\n  .ripple {\n    color: red;\n  }\n`;\n\ntype ButtonBaseButtonProps = ComponentProps<typeof RcButtonBase>;\n\nexport const ButtonBase: Story<ButtonBaseButtonProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <RcButtonBase\n        {...args}\n        TouchRippleProps={{\n          classes: {\n            ripple: 'ripple',\n          },\n        }}\n      >\n        <RcTypography color=\"neutral.f06\">cool</RcTypography>\n      </RcButtonBase>\n    </Wrapper>\n  );\n};\n\nButtonBase.args = {};\n\nButtonBase.argTypes = {\n  ...notControlInDocTable<keyof ButtonBaseProps>([]),\n};\n\nButtonBase.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/api/button-base/',\n    },\n  ],\n};\n\nButtonBase.storyName = 'ButtonBase';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, shadows, styled } from '../../../../foundation';\\nimport { Emoji } from '../../../../icon';\\nimport Quote from '../../../../icon/Quote';\\nimport Signal0 from '../../../../icon/Signal0';\\nimport Unpin from '../../../../icon/Unpin';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { Title } from '../../../../storybook/components';\\nimport { RcIconButton } from '../../IconButton';\\nimport { RcIconButtonGroup } from '../IconButtonGroup';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Buttons/IconButtonGroup',\\n  component: RcIconButtonGroup,\\n  argTypes: {\\n    ...sortInDocTable<keyof IconButtonGroupProps>([]),\\n    ...notControlInDocTable<keyof IconButtonGroupProps>([]),\\n    ...notShowInDocTable<keyof IconButtonGroupProps>([]),\\n  },\\n} as Meta;\\n\\nconst Wrapper = styled.div`\\n  .group {\\n    background: ${palette2('neutral', 'b03')};\\n    box-shadow: ${shadows('3')};\\n  }\\n`;\\n\\ntype IconButtonGroupProps = ComponentProps<typeof RcIconButtonGroup>;\\n\\nexport const IconButtonGroup: Story<IconButtonGroupProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <RcIconButtonGroup {...args} className=\\\"group\\\">\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n    </Wrapper>\\n  );\\n};\\n\\nIconButtonGroup.storyName = 'IconButtonGroup';\\n\\nIconButtonGroup.args = {\\n  gap: 5,\\n  space: 2,\\n  radius: 'round',\\n};\\n\\nIconButtonGroup.argTypes = {\\n  ...notControlInDocTable<keyof IconButtonGroupProps>([]),\\n};\\n\\nIconButtonGroup.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const IconButtonGroupExamples: Story<IconButtonGroupProps> = ({\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n  return (\\n    <Wrapper style={{ textAlign: 'center' }}>\\n      <Title>plain</Title>\\n      <RcIconButtonGroup\\n        {...args}\\n        className=\\\"group\\\"\\n        space={2}\\n        gap={3}\\n        radius=\\\"round\\\"\\n      >\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n\\n      <Title>round</Title>\\n\\n      <RcIconButtonGroup {...args} className=\\\"group\\\" radius=\\\"round\\\">\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n\\n      <Title>inverse</Title>\\n\\n      <RcIconButtonGroup {...args} className=\\\"group\\\" radius=\\\"round\\\">\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n\\n      <Title>outline</Title>\\n      <RcIconButtonGroup {...args} className=\\\"group\\\" radius=\\\"md\\\">\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n    </Wrapper>\\n  );\\n};\\n\\nIconButtonGroupExamples.storyName = 'IconButtonGroup Examples';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"IconButtonGroup\":{\"startLoc\":{\"col\":60,\"line\":39},\"endLoc\":{\"col\":1,\"line\":55},\"startBody\":{\"col\":60,\"line\":39},\"endBody\":{\"col\":1,\"line\":55}},\"IconButtonGroupExamples\":{\"startLoc\":{\"col\":68,\"line\":78},\"endLoc\":{\"col\":1,\"line\":125},\"startBody\":{\"col\":68,\"line\":78},\"endBody\":{\"col\":1,\"line\":125}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { palette2, shadows, styled } from '../../../../foundation';\nimport { Emoji } from '../../../../icon';\nimport Quote from '../../../../icon/Quote';\nimport Signal0 from '../../../../icon/Signal0';\nimport Unpin from '../../../../icon/Unpin';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { Title } from '../../../../storybook/components';\nimport { RcIconButton } from '../../IconButton';\nimport { RcIconButtonGroup } from '../IconButtonGroup';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, shadows, styled } from '../../../../foundation';\\nimport { Emoji } from '../../../../icon';\\nimport Quote from '../../../../icon/Quote';\\nimport Signal0 from '../../../../icon/Signal0';\\nimport Unpin from '../../../../icon/Unpin';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { Title } from '../../../../storybook/components';\\nimport { RcIconButton } from '../../IconButton';\\nimport { RcIconButtonGroup } from '../IconButtonGroup';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Buttons/IconButtonGroup',\\n  component: RcIconButtonGroup,\\n  argTypes: {\\n    ...sortInDocTable<keyof IconButtonGroupProps>([]),\\n    ...notControlInDocTable<keyof IconButtonGroupProps>([]),\\n    ...notShowInDocTable<keyof IconButtonGroupProps>([]),\\n  },\\n} as Meta;\\n\\nconst Wrapper = styled.div`\\n  .group {\\n    background: ${palette2('neutral', 'b03')};\\n    box-shadow: ${shadows('3')};\\n  }\\n`;\\n\\ntype IconButtonGroupProps = ComponentProps<typeof RcIconButtonGroup>;\\n\\nexport const IconButtonGroup: Story<IconButtonGroupProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <RcIconButtonGroup {...args} className=\\\"group\\\">\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n    </Wrapper>\\n  );\\n};\\n\\nIconButtonGroup.storyName = 'IconButtonGroup';\\n\\nIconButtonGroup.args = {\\n  gap: 5,\\n  space: 2,\\n  radius: 'round',\\n};\\n\\nIconButtonGroup.argTypes = {\\n  ...notControlInDocTable<keyof IconButtonGroupProps>([]),\\n};\\n\\nIconButtonGroup.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const IconButtonGroupExamples: Story<IconButtonGroupProps> = ({\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n  return (\\n    <Wrapper style={{ textAlign: 'center' }}>\\n      <Title>plain</Title>\\n      <RcIconButtonGroup\\n        {...args}\\n        className=\\\"group\\\"\\n        space={2}\\n        gap={3}\\n        radius=\\\"round\\\"\\n      >\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"plain\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n\\n      <Title>round</Title>\\n\\n      <RcIconButtonGroup {...args} className=\\\"group\\\" radius=\\\"round\\\">\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"round\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n\\n      <Title>inverse</Title>\\n\\n      <RcIconButtonGroup {...args} className=\\\"group\\\" radius=\\\"round\\\">\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"inverse\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n\\n      <Title>outline</Title>\\n      <RcIconButtonGroup {...args} className=\\\"group\\\" radius=\\\"md\\\">\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Emoji} />\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Quote} />\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Unpin} />\\n        <RcIconButton variant=\\\"outline\\\" title=\\\"like\\\" symbol={Signal0} />\\n      </RcIconButtonGroup>\\n    </Wrapper>\\n  );\\n};\\n\\nIconButtonGroupExamples.storyName = 'IconButtonGroup Examples';\\n\",\"locationsMap\":{\"icon-button-group\":{\"startLoc\":{\"col\":60,\"line\":39},\"endLoc\":{\"col\":1,\"line\":55},\"startBody\":{\"col\":60,\"line\":39},\"endBody\":{\"col\":1,\"line\":55}},\"icon-button-group-examples\":{\"startLoc\":{\"col\":68,\"line\":78},\"endLoc\":{\"col\":1,\"line\":125},\"startBody\":{\"col\":68,\"line\":78},\"endBody\":{\"col\":1,\"line\":125}}}},},\n  title: '🚀 Cleanup Components/Buttons/IconButtonGroup',\n  component: RcIconButtonGroup,\n  argTypes: {\n    ...sortInDocTable<keyof IconButtonGroupProps>([]),\n    ...notControlInDocTable<keyof IconButtonGroupProps>([]),\n    ...notShowInDocTable<keyof IconButtonGroupProps>([]),\n  },\n} as Meta;\n\nconst Wrapper = styled.div`\n  .group {\n    background: ${palette2('neutral', 'b03')};\n    box-shadow: ${shadows('3')};\n  }\n`;\n\ntype IconButtonGroupProps = ComponentProps<typeof RcIconButtonGroup>;\n\nexport const IconButtonGroup: Story<IconButtonGroupProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <RcIconButtonGroup {...args} className=\"group\">\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Emoji} />\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Quote} />\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Unpin} />\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Signal0} />\n      </RcIconButtonGroup>\n    </Wrapper>\n  );\n};;\n\nIconButtonGroup.storyName = 'IconButtonGroup';\n\nIconButtonGroup.args = {\n  gap: 5,\n  space: 2,\n  radius: 'round',\n};\n\nIconButtonGroup.argTypes = {\n  ...notControlInDocTable<keyof IconButtonGroupProps>([]),\n};\n\nIconButtonGroup.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nexport const IconButtonGroupExamples: Story<IconButtonGroupProps> = ({\n  ...args\n}) => {\n  switchToControlKnobs();\n  return (\n    <Wrapper style={{ textAlign: 'center' }}>\n      <Title>plain</Title>\n      <RcIconButtonGroup\n        {...args}\n        className=\"group\"\n        space={2}\n        gap={3}\n        radius=\"round\"\n      >\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Emoji} />\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Quote} />\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Unpin} />\n        <RcIconButton variant=\"plain\" title=\"like\" symbol={Signal0} />\n      </RcIconButtonGroup>\n\n      <Title>round</Title>\n\n      <RcIconButtonGroup {...args} className=\"group\" radius=\"round\">\n        <RcIconButton variant=\"round\" title=\"like\" symbol={Emoji} />\n        <RcIconButton variant=\"round\" title=\"like\" symbol={Quote} />\n        <RcIconButton variant=\"round\" title=\"like\" symbol={Unpin} />\n        <RcIconButton variant=\"round\" title=\"like\" symbol={Signal0} />\n      </RcIconButtonGroup>\n\n      <Title>inverse</Title>\n\n      <RcIconButtonGroup {...args} className=\"group\" radius=\"round\">\n        <RcIconButton variant=\"inverse\" title=\"like\" symbol={Emoji} />\n        <RcIconButton variant=\"inverse\" title=\"like\" symbol={Quote} />\n        <RcIconButton variant=\"inverse\" title=\"like\" symbol={Unpin} />\n        <RcIconButton variant=\"inverse\" title=\"like\" symbol={Signal0} />\n      </RcIconButtonGroup>\n\n      <Title>outline</Title>\n      <RcIconButtonGroup {...args} className=\"group\" radius=\"md\">\n        <RcIconButton variant=\"outline\" title=\"like\" symbol={Emoji} />\n        <RcIconButton variant=\"outline\" title=\"like\" symbol={Quote} />\n        <RcIconButton variant=\"outline\" title=\"like\" symbol={Unpin} />\n        <RcIconButton variant=\"outline\" title=\"like\" symbol={Signal0} />\n      </RcIconButtonGroup>\n    </Wrapper>\n  );\n};\n\nIconButtonGroupExamples.storyName = 'IconButtonGroup Examples';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { spacing, styled } from '../../../../foundation';\\nimport DateBorder from '../../../../icon/DateBorder';\\nimport Doc from '../../../../icon/Doc';\\nimport TimeBorder from '../../../../icon/TimeBorder';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcAvatar } from '../../../Avatar';\\nimport avatar from '../../../Avatar/__stories__/img/avatar.jpg';\\nimport { RcBox } from '../../../Box';\\nimport { RcDivider } from '../../../Divider';\\nimport { RcCheckbox, RcSelect, RcSwitch } from '../../../Forms';\\nimport { RcIcon } from '../../../Icon';\\nimport { RcLink } from '../../../Link';\\nimport { RcListItem, RcListItemIcon, RcListItemText } from '../../../List';\\nimport { RcMenuItem } from '../../../Menu/MenuItem';\\nimport { RcThumbnail } from '../../../Thumbnail';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcCardContent } from '../../CardContent';\\nimport { RcCard } from '../Card';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Cards/Card',\\n  component: RcCard,\\n  argTypes: {\\n    ...sortInDocTable<keyof RcCardProps>([\\n      'variant',\\n      'square',\\n      'elevation',\\n      'selected',\\n      'focusVisible',\\n    ]),\\n    ...notControlInDocTable<keyof RcCardProps>([]),\\n    ...notShowInDocTable<keyof RcCardProps>([]),\\n  },\\n} as Meta;\\n\\ntype RcCardProps = ComponentProps<typeof RcCard>;\\n\\nexport const Card: Story<RcCardProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <RcCard {...args}>\\n      <RcCardContent>\\n        <RcTypography gutterBottom variant=\\\"display1\\\">\\n          Lizard\\n        </RcTypography>\\n        <RcTypography gutterBottom variant=\\\"body1\\\">\\n          Lizards are a widespread group of squamate reptiles, with over 6,000\\n          species, ranging across all continents except Antarctica\\n        </RcTypography>\\n      </RcCardContent>\\n    </RcCard>\\n  );\\n};\\n\\nCard.storyName = 'Card';\\n\\nCard.args = {\\n  style: { width: 300 },\\n};\\n\\nCard.argTypes = {\\n  ...notControlInDocTable<keyof RcCardProps>([]),\\n};\\n\\nCard.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/cards/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst Container = styled(RcCard)`\\n  padding: ${spacing(4, 10)};\\n  max-width: 508px;\\n  box-sizing: border-box;\\n`;\\n\\nconst Header = styled.header`\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: ${spacing(4)};\\n`;\\n\\nconst Title = styled(RcTypography)``;\\nTitle.defaultProps = {\\n  color: 'neutral.f04',\\n};\\n\\nconst Content = styled(RcTypography)``;\\nContent.defaultProps = {\\n  color: 'neutral.f06',\\n  weight: 'bold',\\n  component: 'div',\\n};\\n\\nconst Item = styled.div<{ display?: string }>`\\n  margin-bottom: ${spacing(5)};\\n  display: ${({ display }) => display};\\n\\n  &:last-child {\\n    margin-bottom: unset;\\n  }\\n`;\\n\\nconst Main = styled.main``;\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-wrap: wrap;\\n  ${Container} + ${Container} {\\n    margin-left: 1em;\\n  }\\n\\n  .mr-2 {\\n    margin-right: ${spacing(2)};\\n  }\\n`;\\n\\nconst Container2 = styled(RcCard)`\\n  margin: ${spacing(2)};\\n  padding: ${spacing(4, 6)};\\n  max-width: 400px;\\n  box-sizing: border-box;\\n\\n  ${RcDivider} {\\n    margin-bottom: ${spacing(5)};\\n  }\\n`;\\n\\nconst AvatarWrapper = styled.div`\\n  display: inline-flex;\\n  align-items: center;\\n\\n  ${RcAvatar} {\\n    margin-right: ${spacing(1)};\\n  }\\n`;\\n\\nconst Container3 = styled(Container2)`\\n  margin: ${spacing(2)};\\n  padding: ${spacing(4, 6)};\\n  max-width: 800px;\\n  box-sizing: border-box;\\n`;\\n\\nconst menus = [\\n  { id: 0, value: 'All new messages' },\\n  { id: 1, value: 'Direct messages and mentions' },\\n  { id: 2, value: 'Off' },\\n];\\n\\nexport const CardExamples: Story<RcCardProps> = () => {\\n  switchToControlKnobs();\\n  return (\\n    <Wrapper>\\n      <Container variant=\\\"outlined\\\">\\n        <Header>\\n          <RcIcon\\n            className=\\\"mr-2\\\"\\n            symbol={DateBorder}\\n            color=\\\"informative.f02\\\"\\n          />\\n          <RcLink color=\\\"informative.f02\\\">\\n            <RcTypography weight=\\\"bold\\\" variant=\\\"subheading2\\\">\\n              Global presentation with marketing team\\n            </RcTypography>\\n          </RcLink>\\n        </Header>\\n        <Main>\\n          <Item>\\n            <Title>Date & time</Title>\\n            <Content>\\n              Thu, 12/05/2019 at 8:00 AM - 11:00AM, repeating every month\\n            </Content>\\n          </Item>\\n          <Item>\\n            <Title>Location</Title>\\n            <Content>XMN office - 10F</Content>\\n          </Item>\\n          <Item>\\n            <Title>Description</Title>\\n            <Content>\\n              This is description of note. Mauris non tempor quam, et lacinia\\n              sapien. Mauris accumsan eros eget libero posuere vulputate.\\n            </Content>\\n          </Item>\\n        </Main>\\n      </Container>\\n      <Container2 variant=\\\"outlined\\\">\\n        <Header>\\n          <RcLink color=\\\"danger.f02\\\">\\n            <RcTypography weight=\\\"bold\\\" variant=\\\"subheading2\\\">\\n              Global presentation with marketing team\\n            </RcTypography>\\n          </RcLink>\\n          <RcBox flex=\\\"1 1 auto\\\" />\\n          <div>\\n            <RcCheckbox color=\\\"danger.f02\\\" followColorWhenUnChecked />\\n          </div>\\n        </Header>\\n        <Main>\\n          <Item display=\\\"flex\\\">\\n            <RcIcon className=\\\"mr-2\\\" symbol={TimeBorder} color=\\\"neutral.f04\\\" />\\n            <Content display=\\\"inline\\\">\\n              Thu, 12/05/2019 at 8:00 AM - 11:00AM\\n            </Content>\\n          </Item>\\n          <Item>\\n            <Title>Assignee</Title>\\n            <Content>\\n              <AvatarWrapper className=\\\"mr-2\\\">\\n                <RcAvatar src={avatar} size=\\\"xsmall\\\" />\\n                Jesse\\n              </AvatarWrapper>\\n              <AvatarWrapper>\\n                <RcAvatar src={avatar} size=\\\"xsmall\\\" />\\n                Tomas\\n              </AvatarWrapper>\\n            </Content>\\n          </Item>\\n          <Item>\\n            <Title>Section</Title>\\n            <Content>\\n              This is description of note. Mauris non tempor quam, et lacinia\\n              sapien.\\n            </Content>\\n          </Item>\\n\\n          <Item>\\n            <Title>Attachments</Title>\\n            <Content>\\n              <RcListItem button>\\n                <RcListItemIcon>\\n                  <RcThumbnail symbol={Doc} />\\n                </RcListItemIcon>\\n                <RcListItemText\\n                  primary=\\\"RCB Press Relate.docx\\\"\\n                  secondary=\\\"Michael Peachey 4/2/2020\\\"\\n                />\\n              </RcListItem>\\n            </Content>\\n          </Item>\\n        </Main>\\n      </Container2>\\n\\n      <Container3 variant=\\\"outlined\\\">\\n        <Main>\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>Desktop notifications for browser</Content>\\n              <Title>\\n                Receive notifications in your web browser when the RingCentral\\n                app is not open (browser permission needed)\\n              </Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" textAlign=\\\"right\\\">\\n              <RcSwitch defaultChecked />\\n            </RcBox>\\n          </Item>\\n          <RcDivider />\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>New messages</Content>\\n              <Title>\\n                Choose your preference for desktop notifications for new\\n                messages\\n              </Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" display=\\\"flex\\\" justifyContent=\\\"flex-end\\\">\\n              <RcSelect id=\\\"line-select\\\" value={0} variant=\\\"box\\\">\\n                {menus.map((item) => (\\n                  <RcMenuItem value={item.id} key={item.id}>\\n                    {item.value}\\n                  </RcMenuItem>\\n                ))}\\n              </RcSelect>\\n            </RcBox>\\n          </Item>\\n          <RcDivider />\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>Incoming calls</Content>\\n              <Title>Receive notifications for incoming calls</Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" textAlign=\\\"right\\\">\\n              <RcSwitch defaultChecked />\\n            </RcBox>\\n          </Item>\\n          <RcDivider />\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>Missed calls and new voicemails</Content>\\n              <Title>\\n                Receive notifications for missed calls and new voicemails\\n              </Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" textAlign=\\\"right\\\">\\n              <RcSwitch />\\n            </RcBox>\\n          </Item>\\n        </Main>\\n      </Container3>\\n    </Wrapper>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Card\":{\"startLoc\":{\"col\":40,\"line\":47},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":40,\"line\":47},\"endBody\":{\"col\":1,\"line\":63}},\"CardExamples\":{\"startLoc\":{\"col\":48,\"line\":168},\"endLoc\":{\"col\":1,\"line\":321},\"startBody\":{\"col\":48,\"line\":168},\"endBody\":{\"col\":1,\"line\":321}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { spacing, styled } from '../../../../foundation';\nimport DateBorder from '../../../../icon/DateBorder';\nimport Doc from '../../../../icon/Doc';\nimport TimeBorder from '../../../../icon/TimeBorder';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { RcAvatar } from '../../../Avatar';\nimport avatar from '../../../Avatar/__stories__/img/avatar.jpg';\nimport { RcBox } from '../../../Box';\nimport { RcDivider } from '../../../Divider';\nimport { RcCheckbox, RcSelect, RcSwitch } from '../../../Forms';\nimport { RcIcon } from '../../../Icon';\nimport { RcLink } from '../../../Link';\nimport { RcListItem, RcListItemIcon, RcListItemText } from '../../../List';\nimport { RcMenuItem } from '../../../Menu/MenuItem';\nimport { RcThumbnail } from '../../../Thumbnail';\nimport { RcTypography } from '../../../Typography';\nimport { RcCardContent } from '../../CardContent';\nimport { RcCard } from '../Card';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { spacing, styled } from '../../../../foundation';\\nimport DateBorder from '../../../../icon/DateBorder';\\nimport Doc from '../../../../icon/Doc';\\nimport TimeBorder from '../../../../icon/TimeBorder';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcAvatar } from '../../../Avatar';\\nimport avatar from '../../../Avatar/__stories__/img/avatar.jpg';\\nimport { RcBox } from '../../../Box';\\nimport { RcDivider } from '../../../Divider';\\nimport { RcCheckbox, RcSelect, RcSwitch } from '../../../Forms';\\nimport { RcIcon } from '../../../Icon';\\nimport { RcLink } from '../../../Link';\\nimport { RcListItem, RcListItemIcon, RcListItemText } from '../../../List';\\nimport { RcMenuItem } from '../../../Menu/MenuItem';\\nimport { RcThumbnail } from '../../../Thumbnail';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcCardContent } from '../../CardContent';\\nimport { RcCard } from '../Card';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Cards/Card',\\n  component: RcCard,\\n  argTypes: {\\n    ...sortInDocTable<keyof RcCardProps>([\\n      'variant',\\n      'square',\\n      'elevation',\\n      'selected',\\n      'focusVisible',\\n    ]),\\n    ...notControlInDocTable<keyof RcCardProps>([]),\\n    ...notShowInDocTable<keyof RcCardProps>([]),\\n  },\\n} as Meta;\\n\\ntype RcCardProps = ComponentProps<typeof RcCard>;\\n\\nexport const Card: Story<RcCardProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <RcCard {...args}>\\n      <RcCardContent>\\n        <RcTypography gutterBottom variant=\\\"display1\\\">\\n          Lizard\\n        </RcTypography>\\n        <RcTypography gutterBottom variant=\\\"body1\\\">\\n          Lizards are a widespread group of squamate reptiles, with over 6,000\\n          species, ranging across all continents except Antarctica\\n        </RcTypography>\\n      </RcCardContent>\\n    </RcCard>\\n  );\\n};\\n\\nCard.storyName = 'Card';\\n\\nCard.args = {\\n  style: { width: 300 },\\n};\\n\\nCard.argTypes = {\\n  ...notControlInDocTable<keyof RcCardProps>([]),\\n};\\n\\nCard.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/cards/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst Container = styled(RcCard)`\\n  padding: ${spacing(4, 10)};\\n  max-width: 508px;\\n  box-sizing: border-box;\\n`;\\n\\nconst Header = styled.header`\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: ${spacing(4)};\\n`;\\n\\nconst Title = styled(RcTypography)``;\\nTitle.defaultProps = {\\n  color: 'neutral.f04',\\n};\\n\\nconst Content = styled(RcTypography)``;\\nContent.defaultProps = {\\n  color: 'neutral.f06',\\n  weight: 'bold',\\n  component: 'div',\\n};\\n\\nconst Item = styled.div<{ display?: string }>`\\n  margin-bottom: ${spacing(5)};\\n  display: ${({ display }) => display};\\n\\n  &:last-child {\\n    margin-bottom: unset;\\n  }\\n`;\\n\\nconst Main = styled.main``;\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-wrap: wrap;\\n  ${Container} + ${Container} {\\n    margin-left: 1em;\\n  }\\n\\n  .mr-2 {\\n    margin-right: ${spacing(2)};\\n  }\\n`;\\n\\nconst Container2 = styled(RcCard)`\\n  margin: ${spacing(2)};\\n  padding: ${spacing(4, 6)};\\n  max-width: 400px;\\n  box-sizing: border-box;\\n\\n  ${RcDivider} {\\n    margin-bottom: ${spacing(5)};\\n  }\\n`;\\n\\nconst AvatarWrapper = styled.div`\\n  display: inline-flex;\\n  align-items: center;\\n\\n  ${RcAvatar} {\\n    margin-right: ${spacing(1)};\\n  }\\n`;\\n\\nconst Container3 = styled(Container2)`\\n  margin: ${spacing(2)};\\n  padding: ${spacing(4, 6)};\\n  max-width: 800px;\\n  box-sizing: border-box;\\n`;\\n\\nconst menus = [\\n  { id: 0, value: 'All new messages' },\\n  { id: 1, value: 'Direct messages and mentions' },\\n  { id: 2, value: 'Off' },\\n];\\n\\nexport const CardExamples: Story<RcCardProps> = () => {\\n  switchToControlKnobs();\\n  return (\\n    <Wrapper>\\n      <Container variant=\\\"outlined\\\">\\n        <Header>\\n          <RcIcon\\n            className=\\\"mr-2\\\"\\n            symbol={DateBorder}\\n            color=\\\"informative.f02\\\"\\n          />\\n          <RcLink color=\\\"informative.f02\\\">\\n            <RcTypography weight=\\\"bold\\\" variant=\\\"subheading2\\\">\\n              Global presentation with marketing team\\n            </RcTypography>\\n          </RcLink>\\n        </Header>\\n        <Main>\\n          <Item>\\n            <Title>Date & time</Title>\\n            <Content>\\n              Thu, 12/05/2019 at 8:00 AM - 11:00AM, repeating every month\\n            </Content>\\n          </Item>\\n          <Item>\\n            <Title>Location</Title>\\n            <Content>XMN office - 10F</Content>\\n          </Item>\\n          <Item>\\n            <Title>Description</Title>\\n            <Content>\\n              This is description of note. Mauris non tempor quam, et lacinia\\n              sapien. Mauris accumsan eros eget libero posuere vulputate.\\n            </Content>\\n          </Item>\\n        </Main>\\n      </Container>\\n      <Container2 variant=\\\"outlined\\\">\\n        <Header>\\n          <RcLink color=\\\"danger.f02\\\">\\n            <RcTypography weight=\\\"bold\\\" variant=\\\"subheading2\\\">\\n              Global presentation with marketing team\\n            </RcTypography>\\n          </RcLink>\\n          <RcBox flex=\\\"1 1 auto\\\" />\\n          <div>\\n            <RcCheckbox color=\\\"danger.f02\\\" followColorWhenUnChecked />\\n          </div>\\n        </Header>\\n        <Main>\\n          <Item display=\\\"flex\\\">\\n            <RcIcon className=\\\"mr-2\\\" symbol={TimeBorder} color=\\\"neutral.f04\\\" />\\n            <Content display=\\\"inline\\\">\\n              Thu, 12/05/2019 at 8:00 AM - 11:00AM\\n            </Content>\\n          </Item>\\n          <Item>\\n            <Title>Assignee</Title>\\n            <Content>\\n              <AvatarWrapper className=\\\"mr-2\\\">\\n                <RcAvatar src={avatar} size=\\\"xsmall\\\" />\\n                Jesse\\n              </AvatarWrapper>\\n              <AvatarWrapper>\\n                <RcAvatar src={avatar} size=\\\"xsmall\\\" />\\n                Tomas\\n              </AvatarWrapper>\\n            </Content>\\n          </Item>\\n          <Item>\\n            <Title>Section</Title>\\n            <Content>\\n              This is description of note. Mauris non tempor quam, et lacinia\\n              sapien.\\n            </Content>\\n          </Item>\\n\\n          <Item>\\n            <Title>Attachments</Title>\\n            <Content>\\n              <RcListItem button>\\n                <RcListItemIcon>\\n                  <RcThumbnail symbol={Doc} />\\n                </RcListItemIcon>\\n                <RcListItemText\\n                  primary=\\\"RCB Press Relate.docx\\\"\\n                  secondary=\\\"Michael Peachey 4/2/2020\\\"\\n                />\\n              </RcListItem>\\n            </Content>\\n          </Item>\\n        </Main>\\n      </Container2>\\n\\n      <Container3 variant=\\\"outlined\\\">\\n        <Main>\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>Desktop notifications for browser</Content>\\n              <Title>\\n                Receive notifications in your web browser when the RingCentral\\n                app is not open (browser permission needed)\\n              </Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" textAlign=\\\"right\\\">\\n              <RcSwitch defaultChecked />\\n            </RcBox>\\n          </Item>\\n          <RcDivider />\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>New messages</Content>\\n              <Title>\\n                Choose your preference for desktop notifications for new\\n                messages\\n              </Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" display=\\\"flex\\\" justifyContent=\\\"flex-end\\\">\\n              <RcSelect id=\\\"line-select\\\" value={0} variant=\\\"box\\\">\\n                {menus.map((item) => (\\n                  <RcMenuItem value={item.id} key={item.id}>\\n                    {item.value}\\n                  </RcMenuItem>\\n                ))}\\n              </RcSelect>\\n            </RcBox>\\n          </Item>\\n          <RcDivider />\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>Incoming calls</Content>\\n              <Title>Receive notifications for incoming calls</Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" textAlign=\\\"right\\\">\\n              <RcSwitch defaultChecked />\\n            </RcBox>\\n          </Item>\\n          <RcDivider />\\n          <Item display=\\\"flex\\\">\\n            <RcBox flex=\\\"2 1 0\\\">\\n              <Content>Missed calls and new voicemails</Content>\\n              <Title>\\n                Receive notifications for missed calls and new voicemails\\n              </Title>\\n            </RcBox>\\n            <RcBox flex=\\\"1 1 0\\\" textAlign=\\\"right\\\">\\n              <RcSwitch />\\n            </RcBox>\\n          </Item>\\n        </Main>\\n      </Container3>\\n    </Wrapper>\\n  );\\n};\\n\",\"locationsMap\":{\"card\":{\"startLoc\":{\"col\":40,\"line\":47},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":40,\"line\":47},\"endBody\":{\"col\":1,\"line\":63}},\"card-examples\":{\"startLoc\":{\"col\":48,\"line\":168},\"endLoc\":{\"col\":1,\"line\":321},\"startBody\":{\"col\":48,\"line\":168},\"endBody\":{\"col\":1,\"line\":321}}}},},\n  title: '🚀 Cleanup Components/Cards/Card',\n  component: RcCard,\n  argTypes: {\n    ...sortInDocTable<keyof RcCardProps>([\n      'variant',\n      'square',\n      'elevation',\n      'selected',\n      'focusVisible',\n    ]),\n    ...notControlInDocTable<keyof RcCardProps>([]),\n    ...notShowInDocTable<keyof RcCardProps>([]),\n  },\n} as Meta;\n\ntype RcCardProps = ComponentProps<typeof RcCard>;\n\nexport const Card: Story<RcCardProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  return (\n    <RcCard {...args}>\n      <RcCardContent>\n        <RcTypography gutterBottom variant=\"display1\">\n          Lizard\n        </RcTypography>\n        <RcTypography gutterBottom variant=\"body1\">\n          Lizards are a widespread group of squamate reptiles, with over 6,000\n          species, ranging across all continents except Antarctica\n        </RcTypography>\n      </RcCardContent>\n    </RcCard>\n  );\n};;\n\nCard.storyName = 'Card';\n\nCard.args = {\n  style: { width: 300 },\n};\n\nCard.argTypes = {\n  ...notControlInDocTable<keyof RcCardProps>([]),\n};\n\nCard.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/cards/',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst Container = styled(RcCard)`\n  padding: ${spacing(4, 10)};\n  max-width: 508px;\n  box-sizing: border-box;\n`;\n\nconst Header = styled.header`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${spacing(4)};\n`;\n\nconst Title = styled(RcTypography)``;\nTitle.defaultProps = {\n  color: 'neutral.f04',\n};\n\nconst Content = styled(RcTypography)``;\nContent.defaultProps = {\n  color: 'neutral.f06',\n  weight: 'bold',\n  component: 'div',\n};\n\nconst Item = styled.div<{ display?: string }>`\n  margin-bottom: ${spacing(5)};\n  display: ${({ display }) => display};\n\n  &:last-child {\n    margin-bottom: unset;\n  }\n`;\n\nconst Main = styled.main``;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  ${Container} + ${Container} {\n    margin-left: 1em;\n  }\n\n  .mr-2 {\n    margin-right: ${spacing(2)};\n  }\n`;\n\nconst Container2 = styled(RcCard)`\n  margin: ${spacing(2)};\n  padding: ${spacing(4, 6)};\n  max-width: 400px;\n  box-sizing: border-box;\n\n  ${RcDivider} {\n    margin-bottom: ${spacing(5)};\n  }\n`;\n\nconst AvatarWrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n\n  ${RcAvatar} {\n    margin-right: ${spacing(1)};\n  }\n`;\n\nconst Container3 = styled(Container2)`\n  margin: ${spacing(2)};\n  padding: ${spacing(4, 6)};\n  max-width: 800px;\n  box-sizing: border-box;\n`;\n\nconst menus = [\n  { id: 0, value: 'All new messages' },\n  { id: 1, value: 'Direct messages and mentions' },\n  { id: 2, value: 'Off' },\n];\n\nexport const CardExamples: Story<RcCardProps> = () => {\n  switchToControlKnobs();\n  return (\n    <Wrapper>\n      <Container variant=\"outlined\">\n        <Header>\n          <RcIcon\n            className=\"mr-2\"\n            symbol={DateBorder}\n            color=\"informative.f02\"\n          />\n          <RcLink color=\"informative.f02\">\n            <RcTypography weight=\"bold\" variant=\"subheading2\">\n              Global presentation with marketing team\n            </RcTypography>\n          </RcLink>\n        </Header>\n        <Main>\n          <Item>\n            <Title>Date & time</Title>\n            <Content>\n              Thu, 12/05/2019 at 8:00 AM - 11:00AM, repeating every month\n            </Content>\n          </Item>\n          <Item>\n            <Title>Location</Title>\n            <Content>XMN office - 10F</Content>\n          </Item>\n          <Item>\n            <Title>Description</Title>\n            <Content>\n              This is description of note. Mauris non tempor quam, et lacinia\n              sapien. Mauris accumsan eros eget libero posuere vulputate.\n            </Content>\n          </Item>\n        </Main>\n      </Container>\n      <Container2 variant=\"outlined\">\n        <Header>\n          <RcLink color=\"danger.f02\">\n            <RcTypography weight=\"bold\" variant=\"subheading2\">\n              Global presentation with marketing team\n            </RcTypography>\n          </RcLink>\n          <RcBox flex=\"1 1 auto\" />\n          <div>\n            <RcCheckbox color=\"danger.f02\" followColorWhenUnChecked />\n          </div>\n        </Header>\n        <Main>\n          <Item display=\"flex\">\n            <RcIcon className=\"mr-2\" symbol={TimeBorder} color=\"neutral.f04\" />\n            <Content display=\"inline\">\n              Thu, 12/05/2019 at 8:00 AM - 11:00AM\n            </Content>\n          </Item>\n          <Item>\n            <Title>Assignee</Title>\n            <Content>\n              <AvatarWrapper className=\"mr-2\">\n                <RcAvatar src={avatar} size=\"xsmall\" />\n                Jesse\n              </AvatarWrapper>\n              <AvatarWrapper>\n                <RcAvatar src={avatar} size=\"xsmall\" />\n                Tomas\n              </AvatarWrapper>\n            </Content>\n          </Item>\n          <Item>\n            <Title>Section</Title>\n            <Content>\n              This is description of note. Mauris non tempor quam, et lacinia\n              sapien.\n            </Content>\n          </Item>\n\n          <Item>\n            <Title>Attachments</Title>\n            <Content>\n              <RcListItem button>\n                <RcListItemIcon>\n                  <RcThumbnail symbol={Doc} />\n                </RcListItemIcon>\n                <RcListItemText\n                  primary=\"RCB Press Relate.docx\"\n                  secondary=\"Michael Peachey 4/2/2020\"\n                />\n              </RcListItem>\n            </Content>\n          </Item>\n        </Main>\n      </Container2>\n\n      <Container3 variant=\"outlined\">\n        <Main>\n          <Item display=\"flex\">\n            <RcBox flex=\"2 1 0\">\n              <Content>Desktop notifications for browser</Content>\n              <Title>\n                Receive notifications in your web browser when the RingCentral\n                app is not open (browser permission needed)\n              </Title>\n            </RcBox>\n            <RcBox flex=\"1 1 0\" textAlign=\"right\">\n              <RcSwitch defaultChecked />\n            </RcBox>\n          </Item>\n          <RcDivider />\n          <Item display=\"flex\">\n            <RcBox flex=\"2 1 0\">\n              <Content>New messages</Content>\n              <Title>\n                Choose your preference for desktop notifications for new\n                messages\n              </Title>\n            </RcBox>\n            <RcBox flex=\"1 1 0\" display=\"flex\" justifyContent=\"flex-end\">\n              <RcSelect id=\"line-select\" value={0} variant=\"box\">\n                {menus.map((item) => (\n                  <RcMenuItem value={item.id} key={item.id}>\n                    {item.value}\n                  </RcMenuItem>\n                ))}\n              </RcSelect>\n            </RcBox>\n          </Item>\n          <RcDivider />\n          <Item display=\"flex\">\n            <RcBox flex=\"2 1 0\">\n              <Content>Incoming calls</Content>\n              <Title>Receive notifications for incoming calls</Title>\n            </RcBox>\n            <RcBox flex=\"1 1 0\" textAlign=\"right\">\n              <RcSwitch defaultChecked />\n            </RcBox>\n          </Item>\n          <RcDivider />\n          <Item display=\"flex\">\n            <RcBox flex=\"2 1 0\">\n              <Content>Missed calls and new voicemails</Content>\n              <Title>\n                Receive notifications for missed calls and new voicemails\n              </Title>\n            </RcBox>\n            <RcBox flex=\"1 1 0\" textAlign=\"right\">\n              <RcSwitch />\n            </RcBox>\n          </Item>\n        </Main>\n      </Container3>\n    </Wrapper>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { FunctionComponent, useCallback, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, px, spacing, styled } from '../../../foundation';\\nimport {\\n  Delete,\\n  Edit,\\n  ExternalLink,\\n  GoogleDoc,\\n  MoreVert,\\n  Pin,\\n} from '../../../icon';\\nimport { switchToControlKnobs } from '../../../storybook';\\nimport { RcButton, RcIconButton, RcIconButtonProps } from '../../Buttons';\\nimport { RcGrid } from '../../Grid';\\nimport { RcIcon } from '../../Icon';\\nimport { RcMenu, RcMenuItem, RcMenuItemProps, RcMenuProps } from '../../Menu';\\nimport { RcTypography } from '../../Typography';\\nimport { RcCard, RcCardProps } from '../Card';\\nimport { RcCardActionArea, RcCardActionAreaProps } from '../CardActionArea';\\nimport { RcCardActions } from '../CardActions';\\nimport { RcCardContent } from '../CardContent';\\nimport { RcCardHoverActions } from '../CardHoverActions';\\nimport { RcCardMedia } from '../CardMedia';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Cards/CardExample',\\n} as Meta;\\n\\nconst CardCtaArea = styled.div`\\n  ${RcTypography} {\\n    display: flex;\\n    flex-wrap: nowrap;\\n    margin-top: ${spacing(4)};\\n    ${RcIcon} {\\n      margin-left: ${spacing(1)};\\n      font-size: 14px;\\n    }\\n  }\\n`;\\n\\nconst CardSubTitle = styled(RcTypography)`\\n  margin-bottom: ${spacing(2)};\\n`;\\n\\nconst CardTitle = styled(RcTypography)``;\\n\\nconst CardBody = styled(RcTypography)`\\n  margin-top: ${spacing(2)};\\n  min-height: 44px;\\n`;\\n\\nexport const SimpleCardExample: Story<{}> = () => {\\n  switchToControlKnobs();\\n\\n  const onClick = () =>\\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\\n\\n  return (\\n    <div style={{ width: 360 }}>\\n      <RcCard>\\n        <RcCardActionArea onClick={onClick}>\\n          <RcCardContent>\\n            <CardSubTitle variant=\\\"caption2\\\" color=\\\"neutral.f04\\\">\\n              in its simplest form\\n            </CardSubTitle>\\n            <CardTitle variant=\\\"title2\\\" color=\\\"neutral.f06\\\">\\n              Simple\\n            </CardTitle>\\n            <CardBody variant=\\\"body1\\\" color=\\\"neutral.f04\\\">\\n              This is a simple card. It has everything a card has except media\\n              and an icon.\\n            </CardBody>\\n            <CardCtaArea>\\n              <RcTypography variant=\\\"caption2\\\" color=\\\"neutral.f05\\\">\\n                Simple CTA\\n                <RcIcon symbol={ExternalLink} color=\\\"neutral.f04\\\" />\\n              </RcTypography>\\n            </CardCtaArea>\\n          </RcCardContent>\\n        </RcCardActionArea>\\n      </RcCard>\\n    </div>\\n  );\\n};\\n\\nconst stopPropagation = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\\n  event.stopPropagation();\\n};\\n\\nconst logAndStopPropagation = (text: string) => {\\n  return (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\\n    console.log(text);\\n    stopPropagation(e);\\n  };\\n};\\n\\nconst RcCardWithHoverActions = styled(RcCard)`\\n  width: 314px;\\n  ${RcCardHoverActions} {\\n    display: flex-end;\\n    align-content: right;\\n    ${RcIconButton} {\\n      background-color: ${palette2('neutral', 'b01')};\\n      border-radius: 50%;\\n      margin-left: auto;\\n      margin-right: ${spacing(2)};\\n    }\\n  }\\n`;\\n\\nconst CardWithHoverActions: FunctionComponent<\\n  RcCardProps & RcCardActionAreaProps\\n> = (props) => {\\n  const { onClick, children } = props;\\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\\n\\n  const moreMenusItemProps = [\\n    {\\n      symbol: Pin,\\n      tooltip: 'Pin',\\n      onClick: logAndStopPropagation('Pin'),\\n    },\\n    {\\n      symbol: Delete,\\n      tooltip: 'Delete',\\n      onClick: logAndStopPropagation('Delete'),\\n    },\\n  ];\\n\\n  const onEnter = useCallback(() => {\\n    setIsMoreMenuOpen(true);\\n  }, [setIsMoreMenuOpen]);\\n  const onExit = useCallback(() => {\\n    setIsMoreMenuOpen(false);\\n  }, [setIsMoreMenuOpen]);\\n\\n  return (\\n    <RcCardWithHoverActions variant=\\\"outlined\\\">\\n      <RcCardActionArea component=\\\"div\\\" onClick={onClick}>\\n        <RcCardHoverActions\\n          visible={isMoreMenuOpen}\\n          onClick={stopPropagation}\\n          onMouseDown={stopPropagation}\\n        >\\n          <RcIconButton\\n            onMouseDown={stopPropagation}\\n            size=\\\"small\\\"\\n            variant=\\\"contained\\\"\\n            color=\\\"neutral.b01\\\"\\n            title=\\\"Edit\\\"\\n            onClick={logAndStopPropagation('HoverActionButton:onEditClick')}\\n            symbol={Edit}\\n          />\\n          <CardHoverMoreButton\\n            title=\\\"More\\\"\\n            symbol={MoreVert}\\n            onExit={onExit}\\n            onEnter={onEnter}\\n            menuItemProps={moreMenusItemProps}\\n          />\\n        </RcCardHoverActions>\\n        {children}\\n        <RcCardActions>\\n          <RcButton\\n            onClick={logAndStopPropagation('Toast')}\\n            onMouseDown={stopPropagation}\\n            color=\\\"interactive.f01\\\"\\n          >\\n            Toast\\n          </RcButton>\\n          <RcButton\\n            onClick={logAndStopPropagation('Boast')}\\n            onMouseDown={stopPropagation}\\n            variant=\\\"outlined\\\"\\n          >\\n            Boast\\n          </RcButton>\\n        </RcCardActions>\\n      </RcCardActionArea>\\n    </RcCardWithHoverActions>\\n  );\\n};\\n\\ntype CardHoverMoreButtonProps = RcIconButtonProps & {\\n  menuItemProps: RcMenuItemProps & { tooltip: string }[];\\n} & Pick<RcMenuProps, 'onEnter' | 'onExit'>;\\n\\nconst CardHoverMoreButton: FunctionComponent<CardHoverMoreButtonProps> = (\\n  props,\\n) => {\\n  const { menuItemProps, onEnter, onExit, ...rest } = props;\\n\\n  const menuItemComps = menuItemProps.map(({ tooltip, ...rests }) => (\\n    <RcMenuItem {...rests} key={tooltip}>\\n      {tooltip}\\n    </RcMenuItem>\\n  ));\\n\\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\\n\\n  const handleClose = () => setAnchorEl(null);\\n\\n  const handleClick = (\\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\\n  ) => {\\n    stopPropagation(event);\\n    setAnchorEl(event.currentTarget);\\n  };\\n\\n  return (\\n    <>\\n      <RcIconButton\\n        onMouseDown={stopPropagation}\\n        size=\\\"small\\\"\\n        variant=\\\"contained\\\"\\n        color=\\\"neutral.b01\\\"\\n        onClick={handleClick}\\n        {...rest}\\n      />\\n      <RcMenu\\n        open={Boolean(anchorEl)}\\n        anchorEl={anchorEl}\\n        onClose={handleClose}\\n        TransitionProps={{\\n          onExit,\\n          onEnter,\\n        }}\\n        autoClose\\n      >\\n        {menuItemComps}\\n      </RcMenu>\\n    </>\\n  );\\n};\\n\\nexport const MediaCardExample: Story<{}> = () => {\\n  switchToControlKnobs();\\n\\n  const onClick = () =>\\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\\n\\n  return (\\n    <>\\n      <CardWithHoverActions onClick={onClick}>\\n        <RcCardMedia\\n          image=\\\"https://live.staticflickr.com/5126/5369581593_b9e2ec903c_n.jpg\\\"\\n          style={{ height: 160 }}\\n        />\\n        <RcCardContent>\\n          <CardSubTitle variant=\\\"caption2\\\" color=\\\"neutral.f04\\\">\\n            A boat afloat\\n          </CardSubTitle>\\n          <CardTitle variant=\\\"title2\\\" color=\\\"neutral.f06\\\">\\n            Boat\\n          </CardTitle>\\n          <CardBody variant=\\\"body1\\\" color=\\\"neutral.f04\\\">\\n            Note this boat afloat a moat. And dote and gloat this boat which\\n            totes. I quote devote a toast to boats.\\n          </CardBody>\\n        </RcCardContent>\\n      </CardWithHoverActions>\\n    </>\\n  );\\n};\\n\\nconst CardIcon = styled(RcIcon)`\\n  padding: ${spacing(4, 0, 0, 4)};\\n  font-size: 64px;\\n`;\\n\\nexport const IconCardExample: Story<{}> = () => {\\n  switchToControlKnobs();\\n\\n  const onClick = () =>\\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\\n\\n  return (\\n    <>\\n      <CardWithHoverActions onClick={onClick}>\\n        <CardIcon symbol={GoogleDoc} />\\n        <RcCardContent>\\n          <CardSubTitle variant=\\\"caption2\\\" color=\\\"neutral.f04\\\">\\n            A boat afloat\\n          </CardSubTitle>\\n          <CardTitle variant=\\\"title2\\\" color=\\\"neutral.f06\\\">\\n            Boat\\n          </CardTitle>\\n          <CardBody variant=\\\"body1\\\" color=\\\"neutral.f04\\\">\\n            Note this boat afloat a moat. And dote and gloat this boat which\\n            totes. I quote devote a toast to boats.\\n          </CardBody>\\n        </RcCardContent>\\n      </CardWithHoverActions>\\n    </>\\n  );\\n};\\n\\nconst CardExample = () => {\\n  let bodyText = 'This is the body text.';\\n  if (Math.random() > 0.5) {\\n    bodyText += \\\" Let's make it two lines long.\\\";\\n  }\\n  return (\\n    <RcCard>\\n      <RcCardActionArea>\\n        <RcCardMedia\\n          image=\\\"https://live.staticflickr.com/5126/5369581593_b9e2ec903c_n.jpg\\\"\\n          style={{ height: 160 }}\\n        />\\n        <RcCardContent>\\n          <CardTitle>Title</CardTitle>\\n          <CardBody>{bodyText}</CardBody>\\n        </RcCardContent>\\n      </RcCardActionArea>\\n    </RcCard>\\n  );\\n};\\n\\nconst RcGridContainer = styled(RcGrid)`\\n  width: ${px(960)};\\n`;\\n\\nexport const CardResponsiveExample: Story<RcCardProps> = () => {\\n  const noOfCards = 6;\\n\\n  return (\\n    <RcGridContainer container spacing={2}>\\n      {Array(noOfCards)\\n        .fill(null)\\n        .map((x, i) => (\\n          \\n          <RcGrid key={i} item xs={12} sm={6} md={4} lg={3} xl={2}>\\n            <CardExample />\\n          </RcGrid>\\n        ))}\\n    </RcGridContainer>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"SimpleCardExample\":{\"startLoc\":{\"col\":44,\"line\":54},\"endLoc\":{\"col\":1,\"line\":86},\"startBody\":{\"col\":44,\"line\":54},\"endBody\":{\"col\":1,\"line\":86}},\"MediaCardExample\":{\"startLoc\":{\"col\":43,\"line\":238},\"endLoc\":{\"col\":1,\"line\":266},\"startBody\":{\"col\":43,\"line\":238},\"endBody\":{\"col\":1,\"line\":266}},\"IconCardExample\":{\"startLoc\":{\"col\":42,\"line\":273},\"endLoc\":{\"col\":1,\"line\":298},\"startBody\":{\"col\":42,\"line\":273},\"endBody\":{\"col\":1,\"line\":298}},\"CardResponsiveExample\":{\"startLoc\":{\"col\":57,\"line\":325},\"endLoc\":{\"col\":1,\"line\":340},\"startBody\":{\"col\":57,\"line\":325},\"endBody\":{\"col\":1,\"line\":340}}};\n    \nimport React, { FunctionComponent, useCallback, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { palette2, px, spacing, styled } from '../../../foundation';\nimport {\n  Delete,\n  Edit,\n  ExternalLink,\n  GoogleDoc,\n  MoreVert,\n  Pin,\n} from '../../../icon';\nimport { switchToControlKnobs } from '../../../storybook';\nimport { RcButton, RcIconButton, RcIconButtonProps } from '../../Buttons';\nimport { RcGrid } from '../../Grid';\nimport { RcIcon } from '../../Icon';\nimport { RcMenu, RcMenuItem, RcMenuItemProps, RcMenuProps } from '../../Menu';\nimport { RcTypography } from '../../Typography';\nimport { RcCard, RcCardProps } from '../Card';\nimport { RcCardActionArea, RcCardActionAreaProps } from '../CardActionArea';\nimport { RcCardActions } from '../CardActions';\nimport { RcCardContent } from '../CardContent';\nimport { RcCardHoverActions } from '../CardHoverActions';\nimport { RcCardMedia } from '../CardMedia';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { FunctionComponent, useCallback, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, px, spacing, styled } from '../../../foundation';\\nimport {\\n  Delete,\\n  Edit,\\n  ExternalLink,\\n  GoogleDoc,\\n  MoreVert,\\n  Pin,\\n} from '../../../icon';\\nimport { switchToControlKnobs } from '../../../storybook';\\nimport { RcButton, RcIconButton, RcIconButtonProps } from '../../Buttons';\\nimport { RcGrid } from '../../Grid';\\nimport { RcIcon } from '../../Icon';\\nimport { RcMenu, RcMenuItem, RcMenuItemProps, RcMenuProps } from '../../Menu';\\nimport { RcTypography } from '../../Typography';\\nimport { RcCard, RcCardProps } from '../Card';\\nimport { RcCardActionArea, RcCardActionAreaProps } from '../CardActionArea';\\nimport { RcCardActions } from '../CardActions';\\nimport { RcCardContent } from '../CardContent';\\nimport { RcCardHoverActions } from '../CardHoverActions';\\nimport { RcCardMedia } from '../CardMedia';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Cards/CardExample',\\n} as Meta;\\n\\nconst CardCtaArea = styled.div`\\n  ${RcTypography} {\\n    display: flex;\\n    flex-wrap: nowrap;\\n    margin-top: ${spacing(4)};\\n    ${RcIcon} {\\n      margin-left: ${spacing(1)};\\n      font-size: 14px;\\n    }\\n  }\\n`;\\n\\nconst CardSubTitle = styled(RcTypography)`\\n  margin-bottom: ${spacing(2)};\\n`;\\n\\nconst CardTitle = styled(RcTypography)``;\\n\\nconst CardBody = styled(RcTypography)`\\n  margin-top: ${spacing(2)};\\n  min-height: 44px;\\n`;\\n\\nexport const SimpleCardExample: Story<{}> = () => {\\n  switchToControlKnobs();\\n\\n  const onClick = () =>\\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\\n\\n  return (\\n    <div style={{ width: 360 }}>\\n      <RcCard>\\n        <RcCardActionArea onClick={onClick}>\\n          <RcCardContent>\\n            <CardSubTitle variant=\\\"caption2\\\" color=\\\"neutral.f04\\\">\\n              in its simplest form\\n            </CardSubTitle>\\n            <CardTitle variant=\\\"title2\\\" color=\\\"neutral.f06\\\">\\n              Simple\\n            </CardTitle>\\n            <CardBody variant=\\\"body1\\\" color=\\\"neutral.f04\\\">\\n              This is a simple card. It has everything a card has except media\\n              and an icon.\\n            </CardBody>\\n            <CardCtaArea>\\n              <RcTypography variant=\\\"caption2\\\" color=\\\"neutral.f05\\\">\\n                Simple CTA\\n                <RcIcon symbol={ExternalLink} color=\\\"neutral.f04\\\" />\\n              </RcTypography>\\n            </CardCtaArea>\\n          </RcCardContent>\\n        </RcCardActionArea>\\n      </RcCard>\\n    </div>\\n  );\\n};\\n\\nconst stopPropagation = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\\n  event.stopPropagation();\\n};\\n\\nconst logAndStopPropagation = (text: string) => {\\n  return (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\\n    console.log(text);\\n    stopPropagation(e);\\n  };\\n};\\n\\nconst RcCardWithHoverActions = styled(RcCard)`\\n  width: 314px;\\n  ${RcCardHoverActions} {\\n    display: flex-end;\\n    align-content: right;\\n    ${RcIconButton} {\\n      background-color: ${palette2('neutral', 'b01')};\\n      border-radius: 50%;\\n      margin-left: auto;\\n      margin-right: ${spacing(2)};\\n    }\\n  }\\n`;\\n\\nconst CardWithHoverActions: FunctionComponent<\\n  RcCardProps & RcCardActionAreaProps\\n> = (props) => {\\n  const { onClick, children } = props;\\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\\n\\n  const moreMenusItemProps = [\\n    {\\n      symbol: Pin,\\n      tooltip: 'Pin',\\n      onClick: logAndStopPropagation('Pin'),\\n    },\\n    {\\n      symbol: Delete,\\n      tooltip: 'Delete',\\n      onClick: logAndStopPropagation('Delete'),\\n    },\\n  ];\\n\\n  const onEnter = useCallback(() => {\\n    setIsMoreMenuOpen(true);\\n  }, [setIsMoreMenuOpen]);\\n  const onExit = useCallback(() => {\\n    setIsMoreMenuOpen(false);\\n  }, [setIsMoreMenuOpen]);\\n\\n  return (\\n    <RcCardWithHoverActions variant=\\\"outlined\\\">\\n      <RcCardActionArea component=\\\"div\\\" onClick={onClick}>\\n        <RcCardHoverActions\\n          visible={isMoreMenuOpen}\\n          onClick={stopPropagation}\\n          onMouseDown={stopPropagation}\\n        >\\n          <RcIconButton\\n            onMouseDown={stopPropagation}\\n            size=\\\"small\\\"\\n            variant=\\\"contained\\\"\\n            color=\\\"neutral.b01\\\"\\n            title=\\\"Edit\\\"\\n            onClick={logAndStopPropagation('HoverActionButton:onEditClick')}\\n            symbol={Edit}\\n          />\\n          <CardHoverMoreButton\\n            title=\\\"More\\\"\\n            symbol={MoreVert}\\n            onExit={onExit}\\n            onEnter={onEnter}\\n            menuItemProps={moreMenusItemProps}\\n          />\\n        </RcCardHoverActions>\\n        {children}\\n        <RcCardActions>\\n          <RcButton\\n            onClick={logAndStopPropagation('Toast')}\\n            onMouseDown={stopPropagation}\\n            color=\\\"interactive.f01\\\"\\n          >\\n            Toast\\n          </RcButton>\\n          <RcButton\\n            onClick={logAndStopPropagation('Boast')}\\n            onMouseDown={stopPropagation}\\n            variant=\\\"outlined\\\"\\n          >\\n            Boast\\n          </RcButton>\\n        </RcCardActions>\\n      </RcCardActionArea>\\n    </RcCardWithHoverActions>\\n  );\\n};\\n\\ntype CardHoverMoreButtonProps = RcIconButtonProps & {\\n  menuItemProps: RcMenuItemProps & { tooltip: string }[];\\n} & Pick<RcMenuProps, 'onEnter' | 'onExit'>;\\n\\nconst CardHoverMoreButton: FunctionComponent<CardHoverMoreButtonProps> = (\\n  props,\\n) => {\\n  const { menuItemProps, onEnter, onExit, ...rest } = props;\\n\\n  const menuItemComps = menuItemProps.map(({ tooltip, ...rests }) => (\\n    <RcMenuItem {...rests} key={tooltip}>\\n      {tooltip}\\n    </RcMenuItem>\\n  ));\\n\\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\\n\\n  const handleClose = () => setAnchorEl(null);\\n\\n  const handleClick = (\\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\\n  ) => {\\n    stopPropagation(event);\\n    setAnchorEl(event.currentTarget);\\n  };\\n\\n  return (\\n    <>\\n      <RcIconButton\\n        onMouseDown={stopPropagation}\\n        size=\\\"small\\\"\\n        variant=\\\"contained\\\"\\n        color=\\\"neutral.b01\\\"\\n        onClick={handleClick}\\n        {...rest}\\n      />\\n      <RcMenu\\n        open={Boolean(anchorEl)}\\n        anchorEl={anchorEl}\\n        onClose={handleClose}\\n        TransitionProps={{\\n          onExit,\\n          onEnter,\\n        }}\\n        autoClose\\n      >\\n        {menuItemComps}\\n      </RcMenu>\\n    </>\\n  );\\n};\\n\\nexport const MediaCardExample: Story<{}> = () => {\\n  switchToControlKnobs();\\n\\n  const onClick = () =>\\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\\n\\n  return (\\n    <>\\n      <CardWithHoverActions onClick={onClick}>\\n        <RcCardMedia\\n          image=\\\"https://live.staticflickr.com/5126/5369581593_b9e2ec903c_n.jpg\\\"\\n          style={{ height: 160 }}\\n        />\\n        <RcCardContent>\\n          <CardSubTitle variant=\\\"caption2\\\" color=\\\"neutral.f04\\\">\\n            A boat afloat\\n          </CardSubTitle>\\n          <CardTitle variant=\\\"title2\\\" color=\\\"neutral.f06\\\">\\n            Boat\\n          </CardTitle>\\n          <CardBody variant=\\\"body1\\\" color=\\\"neutral.f04\\\">\\n            Note this boat afloat a moat. And dote and gloat this boat which\\n            totes. I quote devote a toast to boats.\\n          </CardBody>\\n        </RcCardContent>\\n      </CardWithHoverActions>\\n    </>\\n  );\\n};\\n\\nconst CardIcon = styled(RcIcon)`\\n  padding: ${spacing(4, 0, 0, 4)};\\n  font-size: 64px;\\n`;\\n\\nexport const IconCardExample: Story<{}> = () => {\\n  switchToControlKnobs();\\n\\n  const onClick = () =>\\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\\n\\n  return (\\n    <>\\n      <CardWithHoverActions onClick={onClick}>\\n        <CardIcon symbol={GoogleDoc} />\\n        <RcCardContent>\\n          <CardSubTitle variant=\\\"caption2\\\" color=\\\"neutral.f04\\\">\\n            A boat afloat\\n          </CardSubTitle>\\n          <CardTitle variant=\\\"title2\\\" color=\\\"neutral.f06\\\">\\n            Boat\\n          </CardTitle>\\n          <CardBody variant=\\\"body1\\\" color=\\\"neutral.f04\\\">\\n            Note this boat afloat a moat. And dote and gloat this boat which\\n            totes. I quote devote a toast to boats.\\n          </CardBody>\\n        </RcCardContent>\\n      </CardWithHoverActions>\\n    </>\\n  );\\n};\\n\\nconst CardExample = () => {\\n  let bodyText = 'This is the body text.';\\n  if (Math.random() > 0.5) {\\n    bodyText += \\\" Let's make it two lines long.\\\";\\n  }\\n  return (\\n    <RcCard>\\n      <RcCardActionArea>\\n        <RcCardMedia\\n          image=\\\"https://live.staticflickr.com/5126/5369581593_b9e2ec903c_n.jpg\\\"\\n          style={{ height: 160 }}\\n        />\\n        <RcCardContent>\\n          <CardTitle>Title</CardTitle>\\n          <CardBody>{bodyText}</CardBody>\\n        </RcCardContent>\\n      </RcCardActionArea>\\n    </RcCard>\\n  );\\n};\\n\\nconst RcGridContainer = styled(RcGrid)`\\n  width: ${px(960)};\\n`;\\n\\nexport const CardResponsiveExample: Story<RcCardProps> = () => {\\n  const noOfCards = 6;\\n\\n  return (\\n    <RcGridContainer container spacing={2}>\\n      {Array(noOfCards)\\n        .fill(null)\\n        .map((x, i) => (\\n          \\n          <RcGrid key={i} item xs={12} sm={6} md={4} lg={3} xl={2}>\\n            <CardExample />\\n          </RcGrid>\\n        ))}\\n    </RcGridContainer>\\n  );\\n};\\n\",\"locationsMap\":{\"simple-card-example\":{\"startLoc\":{\"col\":44,\"line\":54},\"endLoc\":{\"col\":1,\"line\":86},\"startBody\":{\"col\":44,\"line\":54},\"endBody\":{\"col\":1,\"line\":86}},\"media-card-example\":{\"startLoc\":{\"col\":43,\"line\":238},\"endLoc\":{\"col\":1,\"line\":266},\"startBody\":{\"col\":43,\"line\":238},\"endBody\":{\"col\":1,\"line\":266}},\"icon-card-example\":{\"startLoc\":{\"col\":42,\"line\":273},\"endLoc\":{\"col\":1,\"line\":298},\"startBody\":{\"col\":42,\"line\":273},\"endBody\":{\"col\":1,\"line\":298}},\"card-responsive-example\":{\"startLoc\":{\"col\":57,\"line\":325},\"endLoc\":{\"col\":1,\"line\":340},\"startBody\":{\"col\":57,\"line\":325},\"endBody\":{\"col\":1,\"line\":340}}}},},\n  title: '🚀 Cleanup Components/Cards/CardExample',\n} as Meta;\n\nconst CardCtaArea = styled.div`\n  ${RcTypography} {\n    display: flex;\n    flex-wrap: nowrap;\n    margin-top: ${spacing(4)};\n    ${RcIcon} {\n      margin-left: ${spacing(1)};\n      font-size: 14px;\n    }\n  }\n`;\n\nconst CardSubTitle = styled(RcTypography)`\n  margin-bottom: ${spacing(2)};\n`;\n\nconst CardTitle = styled(RcTypography)``;\n\nconst CardBody = styled(RcTypography)`\n  margin-top: ${spacing(2)};\n  min-height: 44px;\n`;\n\nexport const SimpleCardExample: Story<{}> = () => {\n  switchToControlKnobs();\n\n  const onClick = () =>\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\n\n  return (\n    <div style={{ width: 360 }}>\n      <RcCard>\n        <RcCardActionArea onClick={onClick}>\n          <RcCardContent>\n            <CardSubTitle variant=\"caption2\" color=\"neutral.f04\">\n              in its simplest form\n            </CardSubTitle>\n            <CardTitle variant=\"title2\" color=\"neutral.f06\">\n              Simple\n            </CardTitle>\n            <CardBody variant=\"body1\" color=\"neutral.f04\">\n              This is a simple card. It has everything a card has except media\n              and an icon.\n            </CardBody>\n            <CardCtaArea>\n              <RcTypography variant=\"caption2\" color=\"neutral.f05\">\n                Simple CTA\n                <RcIcon symbol={ExternalLink} color=\"neutral.f04\" />\n              </RcTypography>\n            </CardCtaArea>\n          </RcCardContent>\n        </RcCardActionArea>\n      </RcCard>\n    </div>\n  );\n};;\n\nconst stopPropagation = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n  event.stopPropagation();\n};\n\nconst logAndStopPropagation = (text: string) => {\n  return (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    console.log(text);\n    stopPropagation(e);\n  };\n};\n\nconst RcCardWithHoverActions = styled(RcCard)`\n  width: 314px;\n  ${RcCardHoverActions} {\n    display: flex-end;\n    align-content: right;\n    ${RcIconButton} {\n      background-color: ${palette2('neutral', 'b01')};\n      border-radius: 50%;\n      margin-left: auto;\n      margin-right: ${spacing(2)};\n    }\n  }\n`;\n\nconst CardWithHoverActions: FunctionComponent<\n  RcCardProps & RcCardActionAreaProps\n> = (props) => {\n  const { onClick, children } = props;\n  const [isMoreMenuOpen, setIsMoreMenuOpen] = useState(false);\n\n  const moreMenusItemProps = [\n    {\n      symbol: Pin,\n      tooltip: 'Pin',\n      onClick: logAndStopPropagation('Pin'),\n    },\n    {\n      symbol: Delete,\n      tooltip: 'Delete',\n      onClick: logAndStopPropagation('Delete'),\n    },\n  ];\n\n  const onEnter = useCallback(() => {\n    setIsMoreMenuOpen(true);\n  }, [setIsMoreMenuOpen]);\n  const onExit = useCallback(() => {\n    setIsMoreMenuOpen(false);\n  }, [setIsMoreMenuOpen]);\n\n  return (\n    <RcCardWithHoverActions variant=\"outlined\">\n      <RcCardActionArea component=\"div\" onClick={onClick}>\n        <RcCardHoverActions\n          visible={isMoreMenuOpen}\n          onClick={stopPropagation}\n          onMouseDown={stopPropagation}\n        >\n          <RcIconButton\n            onMouseDown={stopPropagation}\n            size=\"small\"\n            variant=\"contained\"\n            color=\"neutral.b01\"\n            title=\"Edit\"\n            onClick={logAndStopPropagation('HoverActionButton:onEditClick')}\n            symbol={Edit}\n          />\n          <CardHoverMoreButton\n            title=\"More\"\n            symbol={MoreVert}\n            onExit={onExit}\n            onEnter={onEnter}\n            menuItemProps={moreMenusItemProps}\n          />\n        </RcCardHoverActions>\n        {children}\n        <RcCardActions>\n          <RcButton\n            onClick={logAndStopPropagation('Toast')}\n            onMouseDown={stopPropagation}\n            color=\"interactive.f01\"\n          >\n            Toast\n          </RcButton>\n          <RcButton\n            onClick={logAndStopPropagation('Boast')}\n            onMouseDown={stopPropagation}\n            variant=\"outlined\"\n          >\n            Boast\n          </RcButton>\n        </RcCardActions>\n      </RcCardActionArea>\n    </RcCardWithHoverActions>\n  );\n};\n\ntype CardHoverMoreButtonProps = RcIconButtonProps & {\n  menuItemProps: RcMenuItemProps & { tooltip: string }[];\n} & Pick<RcMenuProps, 'onEnter' | 'onExit'>;\n\nconst CardHoverMoreButton: FunctionComponent<CardHoverMoreButtonProps> = (\n  props,\n) => {\n  const { menuItemProps, onEnter, onExit, ...rest } = props;\n\n  const menuItemComps = menuItemProps.map(({ tooltip, ...rests }) => (\n    <RcMenuItem {...rests} key={tooltip}>\n      {tooltip}\n    </RcMenuItem>\n  ));\n\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const handleClose = () => setAnchorEl(null);\n\n  const handleClick = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    stopPropagation(event);\n    setAnchorEl(event.currentTarget);\n  };\n\n  return (\n    <>\n      <RcIconButton\n        onMouseDown={stopPropagation}\n        size=\"small\"\n        variant=\"contained\"\n        color=\"neutral.b01\"\n        onClick={handleClick}\n        {...rest}\n      />\n      <RcMenu\n        open={Boolean(anchorEl)}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        TransitionProps={{\n          onExit,\n          onEnter,\n        }}\n        autoClose\n      >\n        {menuItemComps}\n      </RcMenu>\n    </>\n  );\n};\n\nexport const MediaCardExample: Story<{}> = () => {\n  switchToControlKnobs();\n\n  const onClick = () =>\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\n\n  return (\n    <>\n      <CardWithHoverActions onClick={onClick}>\n        <RcCardMedia\n          image=\"https://live.staticflickr.com/5126/5369581593_b9e2ec903c_n.jpg\"\n          style={{ height: 160 }}\n        />\n        <RcCardContent>\n          <CardSubTitle variant=\"caption2\" color=\"neutral.f04\">\n            A boat afloat\n          </CardSubTitle>\n          <CardTitle variant=\"title2\" color=\"neutral.f06\">\n            Boat\n          </CardTitle>\n          <CardBody variant=\"body1\" color=\"neutral.f04\">\n            Note this boat afloat a moat. And dote and gloat this boat which\n            totes. I quote devote a toast to boats.\n          </CardBody>\n        </RcCardContent>\n      </CardWithHoverActions>\n    </>\n  );\n};;\n\nconst CardIcon = styled(RcIcon)`\n  padding: ${spacing(4, 0, 0, 4)};\n  font-size: 64px;\n`;\n\nexport const IconCardExample: Story<{}> = () => {\n  switchToControlKnobs();\n\n  const onClick = () =>\n    window.open('https://en.wikipedia.org/wiki/Boat', '_blank');\n\n  return (\n    <>\n      <CardWithHoverActions onClick={onClick}>\n        <CardIcon symbol={GoogleDoc} />\n        <RcCardContent>\n          <CardSubTitle variant=\"caption2\" color=\"neutral.f04\">\n            A boat afloat\n          </CardSubTitle>\n          <CardTitle variant=\"title2\" color=\"neutral.f06\">\n            Boat\n          </CardTitle>\n          <CardBody variant=\"body1\" color=\"neutral.f04\">\n            Note this boat afloat a moat. And dote and gloat this boat which\n            totes. I quote devote a toast to boats.\n          </CardBody>\n        </RcCardContent>\n      </CardWithHoverActions>\n    </>\n  );\n};;\n\nconst CardExample = () => {\n  let bodyText = 'This is the body text.';\n  if (Math.random() > 0.5) {\n    bodyText += \" Let's make it two lines long.\";\n  }\n  return (\n    <RcCard>\n      <RcCardActionArea>\n        <RcCardMedia\n          image=\"https://live.staticflickr.com/5126/5369581593_b9e2ec903c_n.jpg\"\n          style={{ height: 160 }}\n        />\n        <RcCardContent>\n          <CardTitle>Title</CardTitle>\n          <CardBody>{bodyText}</CardBody>\n        </RcCardContent>\n      </RcCardActionArea>\n    </RcCard>\n  );\n};\n\nconst RcGridContainer = styled(RcGrid)`\n  width: ${px(960)};\n`;\n\nexport const CardResponsiveExample: Story<RcCardProps> = () => {\n  const noOfCards = 6;\n\n  return (\n    <RcGridContainer container spacing={2}>\n      {Array(noOfCards)\n        .fill(null)\n        .map((x, i) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <RcGrid key={i} item xs={12} sm={6} md={4} lg={3} xl={2}>\n            <CardExample />\n          </RcGrid>\n        ))}\n    </RcGridContainer>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {\\n  ComponentProps,\\n  FunctionComponent,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport styled from '../../../foundation/styled-components';\\nimport { Close } from '../../../icon';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcIconButton } from '../../Buttons/IconButton';\\nimport {\\n  DialogExampleComponent,\\n  DialogWithResponsiveExample,\\n} from '../../Dialog/__stories__/Dialog.story';\\nimport { RcDivider } from '../../Divider';\\nimport { DownshiftExamples } from '../../Downshift/__stories__/Downshift.story';\\nimport { MultiDrawer } from '../../Drawer/__stories__/Drawer.story';\\nimport { RcGrid } from '../../Grid';\\n// import { MenuExampleComponent } from '../../Menu/Menu/__stories__/Menu.story';\\nimport { SubMenuExampleComponent } from '../../Menu/SubMenu/__stories__/SubMenu.story';\\nimport { RcPaper } from '../../Paper';\\nimport { Popover } from '../../Popover/__stories__/Popover.story';\\nimport { Popper } from '../../Popper/__stories__/Popper.story';\\nimport { TabsExampleComponent } from '../../Tabs/Tabs/__stories__/Tabs.story';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\n// @ts-ignore\\n\\n// import polyfill from '!raw-loader!./ResizeObserver.global.js';\\nimport { VirtualizedMenu } from '../../VirtualizedMenu/__stories__/VirtualizedMenu.story';\\nimport { VirtuosoExample } from '../../Virtuoso/__stories__/Virtuoso.story';\\nimport { RcDetachedWindow, RcDetachedWindowRef } from '../DetachedWindow';\\n\\nconst Box = styled.div<any>`\\n  width: 50px;\\n  height: 50px;\\n  background: pink;\\n  transform: translateX(${({ v }) => v}px);\\n`;\\n\\nexport default {\\n  title: '🚀 Cleanup Components/DetachedWindow',\\n  component: RcDetachedWindow,\\n  argTypes: {\\n    ...sortInDocTable<keyof DetachedWindowProps>(['keep']),\\n    ...notControlInDocTable<keyof DetachedWindowProps>(['open', 'onUnload']),\\n    ...notShowInDocTable<keyof DetachedWindowProps>([]),\\n  },\\n} as Meta;\\n\\ntype DetachedWindowProps = ComponentProps<typeof RcDetachedWindow>;\\n\\nexport const DetachedWindow: Story<DetachedWindowProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n  const [value, setValue] = useState(1);\\n  const ref = useRef<RcDetachedWindowRef>(null);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"neutral.f06\\\">\\n        That can make render element on new window, and can shared state easy.\\n        <br />\\n        Also you can get window use <RcText highlight>ref</RcText>,{' '}\\n        <RcText highlight>ref.current.window</RcText>, you can get that after{' '}\\n        <RcText highlight>onload</RcText>, or get that in{' '}\\n        <RcText highlight>onOpen={`{(window) => ... }`}</RcText> trigger arg\\n        <br />\\n        count: {value}\\n      </RcTypography>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n        +1\\n      </RcButton>\\n      <RcButton\\n        style={{ float: 'right' }}\\n        title=\\\"This is tooltip\\\"\\n        useRcTooltip\\n        onClick={() => {\\n          setOpen((detached) => !detached);\\n        }}\\n      >\\n        {open ? 'Close' : 'Open'} this block\\n      </RcButton>\\n      <RcDetachedWindow\\n        {...args}\\n        ref={ref}\\n        open={open}\\n        onUnload={(e) => {\\n          // * must need for trigger open change to show children when user close window directly\\n          setOpen(false);\\n          console.dir('[onUnload] current ref', ref.current);\\n        }}\\n        onOpen={(targetWindow) => {\\n          console.log('[onOpen] current ref', targetWindow, ref.current);\\n          if (targetWindow && !targetWindow['ResizeObserver']) {\\n            const s = targetWindow.document.createElement('script');\\n            s.type = 'text/javascript';\\n            // s.innerHTML = `${polyfill}`;\\n            targetWindow.document.head.appendChild(s);\\n          }\\n        }}\\n        onload={(e) => {\\n          console.dir('[onload] current ref', ref.current);\\n        }}\\n        onBeforeunload={(e) => {\\n          console.dir('[onBeforeunload] current ref', ref.current);\\n        }}\\n      >\\n        <RcPaper>\\n          <RcGrid container>\\n            <RcGrid item xs>\\n              <RcTypography variant=\\\"display1\\\" color=\\\"neutral.f06\\\">\\n                Block\\n              </RcTypography>\\n            </RcGrid>\\n            <RcGrid item>\\n              <RcIconButton\\n                symbol={Close}\\n                variant=\\\"inverse\\\"\\n                title=\\\"Close window\\\"\\n                onClick={() => {\\n                  setOpen(false);\\n                }}\\n              />\\n            </RcGrid>\\n          </RcGrid>\\n          <br />\\n          <RcButton title=\\\"+1\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n            +1\\n          </RcButton>\\n          <RcButton\\n            title=\\\"I'm disabled\\\"\\n            useRcTooltip\\n            TooltipProps={{ ignorePointer: true }}\\n            disabled\\n          >\\n            disabled button with tooltip\\n          </RcButton>\\n          count: {value}\\n          <Box v={value} />\\n          <VirtualizedMenu />\\n          <RcDivider />\\n          <VirtuosoExample />\\n          <RcDivider />\\n          <TabsExampleComponent />\\n          <RcDivider />\\n          <SubMenuExampleComponent />\\n          <RcDivider />\\n          <DialogExampleComponent />\\n          <RcDivider />\\n          <DialogWithResponsiveExample />\\n          <RcDivider />\\n          <Popper />\\n          <RcDivider />\\n          <Popover />\\n          <RcDivider />\\n          <DownshiftExamples />\\n          <RcDivider />\\n          <MultiDrawer anchor=\\\"bottom\\\" />\\n        </RcPaper>\\n      </RcDetachedWindow>\\n    </>\\n  );\\n};\\nDetachedWindow.storyName = 'DetachedWindow';\\n\\nDetachedWindow.args = {\\n  title: 'new window',\\n  name: 'window',\\n  specs:\\n    'toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=1200,width=400,height=400',\\n};\\n\\nDetachedWindow.argTypes = {\\n  ...notControlInDocTable<keyof DetachedWindowProps>([]),\\n};\\n\\nDetachedWindow.parameters = {\\n  tags: [],\\n};\\n\\ntype ContentProps = {\\n  setOpen: any;\\n  value: number;\\n};\\n\\nconst Content: FunctionComponent<ContentProps> = ({ setOpen, value }) => {\\n  return (\\n    <RcPaper>\\n      <RcGrid container>\\n        <RcGrid item xs>\\n          <RcTypography variant=\\\"display1\\\" color=\\\"neutral.f06\\\">\\n            Block\\n          </RcTypography>\\n        </RcGrid>\\n        <RcGrid item>\\n          <RcIconButton\\n            symbol={Close}\\n            variant=\\\"inverse\\\"\\n            title=\\\"Close window\\\"\\n            onClick={() => {\\n              setOpen(false);\\n            }}\\n          />\\n        </RcGrid>\\n      </RcGrid>\\n      <br />\\n      count: {value}\\n    </RcPaper>\\n  );\\n};\\n\\nexport const DetachedWindowExamples: Story<DetachedWindowProps> = () => {\\n  const [value, setValue] = useState(1);\\n\\n  const [open, setOpen] = useState(false);\\n  const [open2, setOpen2] = useState(false);\\n  const [open3, setOpen3] = useState(false);\\n  const ref = useRef<RcDetachedWindowRef>(null);\\n  const ref2 = useRef<RcDetachedWindowRef>(null);\\n  const ref3 = useRef<RcDetachedWindowRef>(null);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"neutral.f06\\\">\\n        Control window in another window\\n        <br />\\n        count: {value}\\n      </RcTypography>\\n      <RcButton title=\\\"+1\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n        +1\\n      </RcButton>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setOpen((o) => !o)}>\\n        {open ? 'close' : 'open'} 1\\n      </RcButton>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setOpen2((o) => !o)}>\\n        {open2 ? 'close' : 'open'} 2\\n      </RcButton>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setOpen3((o) => !o)}>\\n        {open3 ? 'close' : 'open'} 3\\n      </RcButton>\\n      <br />\\n      <RcDetachedWindow\\n        ref={ref}\\n        open={open}\\n        onUnload={() => setOpen(false)}\\n        title=\\\"new window\\\"\\n        name=\\\"window1\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=800,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen} value={value} />\\n        <RcButton\\n          title=\\\"window 2\\\"\\n          useRcTooltip\\n          onClick={() => setOpen2((o) => !o)}\\n        >\\n          {open2 ? 'close' : 'open'} window 2\\n        </RcButton>\\n      </RcDetachedWindow>\\n      <RcDetachedWindow\\n        ref={ref2}\\n        open={open2}\\n        onUnload={() => setOpen2(false)}\\n        title=\\\"new window2\\\"\\n        name=\\\"window2\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=1200,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen2} value={value} />\\n        <RcButton\\n          title=\\\"window 1\\\"\\n          useRcTooltip\\n          onClick={() => setOpen((o) => !o)}\\n        >\\n          {open ? 'close' : 'open'} window 1\\n        </RcButton>\\n        <RcButton\\n          title=\\\"window 3\\\"\\n          useRcTooltip\\n          onClick={() => setOpen3((o) => !o)}\\n        >\\n          {open ? 'close' : 'open'} window 3\\n        </RcButton>\\n      </RcDetachedWindow>\\n      <RcDetachedWindow\\n        ref={ref3}\\n        open={open3}\\n        onUnload={() => setOpen3(false)}\\n        title=\\\"new window3\\\"\\n        name=\\\"window3\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=400,left=1200,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen3} value={value} />\\n        <RcButton\\n          title=\\\"window 1\\\"\\n          useRcTooltip\\n          onClick={() => setOpen((o) => !o)}\\n        >\\n          {open ? 'close' : 'open'} window 1\\n        </RcButton>\\n      </RcDetachedWindow>\\n    </>\\n  );\\n};\\n\\nDetachedWindowExamples.storyName = 'DetachedWindow Examples';\\n\\nexport const DetachedWindowGetWindow: Story<DetachedWindowProps> = () => {\\n  const [value, setValue] = useState(1);\\n\\n  const [open, setOpen] = useState(false);\\n  const ref = useRef<RcDetachedWindowRef>(null);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"neutral.f06\\\">\\n        Open window with getWindow\\n        <br />\\n        count: {value}\\n      </RcTypography>\\n      <RcButton title=\\\"+1\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n        +1\\n      </RcButton>\\n      <RcButton\\n        style={{ float: 'right' }}\\n        title=\\\"This is tooltip\\\"\\n        useRcTooltip\\n        onClick={() => {\\n          setOpen((detached) => !detached);\\n        }}\\n      >\\n        {open ? 'Close' : 'Open'} this block\\n      </RcButton>\\n      <br />\\n      <RcDetachedWindow\\n        ref={ref}\\n        open={open}\\n        onUnload={() => setOpen(false)}\\n        getWindow={({ url, name, specs, replace, title }) => {\\n          \\n          const win = window.open(url, name, specs, replace);\\n\\n          if (win) {\\n            win.document.title = title!;\\n\\n            return win;\\n          }\\n          return null;\\n        }}\\n        title=\\\"new window\\\"\\n        name=\\\"window1\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=800,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen} value={value} />\\n      </RcDetachedWindow>\\n    </>\\n  );\\n};\\n\\nDetachedWindowGetWindow.storyName = 'open window by yourself';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DetachedWindow\":{\"startLoc\":{\"col\":58,\"line\":62},\"endLoc\":{\"col\":1,\"line\":177},\"startBody\":{\"col\":58,\"line\":62},\"endBody\":{\"col\":1,\"line\":177}},\"DetachedWindowExamples\":{\"startLoc\":{\"col\":66,\"line\":226},\"endLoc\":{\"col\":1,\"line\":316},\"startBody\":{\"col\":66,\"line\":226},\"endBody\":{\"col\":1,\"line\":316}},\"DetachedWindowGetWindow\":{\"startLoc\":{\"col\":67,\"line\":320},\"endLoc\":{\"col\":1,\"line\":370},\"startBody\":{\"col\":67,\"line\":320},\"endBody\":{\"col\":1,\"line\":370}}};\n    \nimport React, {\n  ComponentProps,\n  FunctionComponent,\n  useRef,\n  useState,\n} from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport styled from '../../../foundation/styled-components';\nimport { Close } from '../../../icon';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcButton } from '../../Buttons/Button';\nimport { RcIconButton } from '../../Buttons/IconButton';\nimport {\n  DialogExampleComponent,\n  DialogWithResponsiveExample,\n} from '../../Dialog/__stories__/Dialog.story';\nimport { RcDivider } from '../../Divider';\nimport { DownshiftExamples } from '../../Downshift/__stories__/Downshift.story';\nimport { MultiDrawer } from '../../Drawer/__stories__/Drawer.story';\nimport { RcGrid } from '../../Grid';\n// import { MenuExampleComponent } from '../../Menu/Menu/__stories__/Menu.story';\nimport { SubMenuExampleComponent } from '../../Menu/SubMenu/__stories__/SubMenu.story';\nimport { RcPaper } from '../../Paper';\nimport { Popover } from '../../Popover/__stories__/Popover.story';\nimport { Popper } from '../../Popper/__stories__/Popper.story';\nimport { TabsExampleComponent } from '../../Tabs/Tabs/__stories__/Tabs.story';\nimport { RcText } from '../../Text';\nimport { RcTypography } from '../../Typography';\n// @ts-ignore\n// eslint-disable-next-line\n// import polyfill from '!raw-loader!./ResizeObserver.global.js';\nimport { VirtualizedMenu } from '../../VirtualizedMenu/__stories__/VirtualizedMenu.story';\nimport { VirtuosoExample } from '../../Virtuoso/__stories__/Virtuoso.story';\nimport { RcDetachedWindow, RcDetachedWindowRef } from '../DetachedWindow';\n\nconst Box = styled.div<any>`\n  width: 50px;\n  height: 50px;\n  background: pink;\n  transform: translateX(${({ v }) => v}px);\n`;\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, {\\n  ComponentProps,\\n  FunctionComponent,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport styled from '../../../foundation/styled-components';\\nimport { Close } from '../../../icon';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcIconButton } from '../../Buttons/IconButton';\\nimport {\\n  DialogExampleComponent,\\n  DialogWithResponsiveExample,\\n} from '../../Dialog/__stories__/Dialog.story';\\nimport { RcDivider } from '../../Divider';\\nimport { DownshiftExamples } from '../../Downshift/__stories__/Downshift.story';\\nimport { MultiDrawer } from '../../Drawer/__stories__/Drawer.story';\\nimport { RcGrid } from '../../Grid';\\n// import { MenuExampleComponent } from '../../Menu/Menu/__stories__/Menu.story';\\nimport { SubMenuExampleComponent } from '../../Menu/SubMenu/__stories__/SubMenu.story';\\nimport { RcPaper } from '../../Paper';\\nimport { Popover } from '../../Popover/__stories__/Popover.story';\\nimport { Popper } from '../../Popper/__stories__/Popper.story';\\nimport { TabsExampleComponent } from '../../Tabs/Tabs/__stories__/Tabs.story';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\n// @ts-ignore\\n\\n// import polyfill from '!raw-loader!./ResizeObserver.global.js';\\nimport { VirtualizedMenu } from '../../VirtualizedMenu/__stories__/VirtualizedMenu.story';\\nimport { VirtuosoExample } from '../../Virtuoso/__stories__/Virtuoso.story';\\nimport { RcDetachedWindow, RcDetachedWindowRef } from '../DetachedWindow';\\n\\nconst Box = styled.div<any>`\\n  width: 50px;\\n  height: 50px;\\n  background: pink;\\n  transform: translateX(${({ v }) => v}px);\\n`;\\n\\nexport default {\\n  title: '🚀 Cleanup Components/DetachedWindow',\\n  component: RcDetachedWindow,\\n  argTypes: {\\n    ...sortInDocTable<keyof DetachedWindowProps>(['keep']),\\n    ...notControlInDocTable<keyof DetachedWindowProps>(['open', 'onUnload']),\\n    ...notShowInDocTable<keyof DetachedWindowProps>([]),\\n  },\\n} as Meta;\\n\\ntype DetachedWindowProps = ComponentProps<typeof RcDetachedWindow>;\\n\\nexport const DetachedWindow: Story<DetachedWindowProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n  const [value, setValue] = useState(1);\\n  const ref = useRef<RcDetachedWindowRef>(null);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"neutral.f06\\\">\\n        That can make render element on new window, and can shared state easy.\\n        <br />\\n        Also you can get window use <RcText highlight>ref</RcText>,{' '}\\n        <RcText highlight>ref.current.window</RcText>, you can get that after{' '}\\n        <RcText highlight>onload</RcText>, or get that in{' '}\\n        <RcText highlight>onOpen={`{(window) => ... }`}</RcText> trigger arg\\n        <br />\\n        count: {value}\\n      </RcTypography>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n        +1\\n      </RcButton>\\n      <RcButton\\n        style={{ float: 'right' }}\\n        title=\\\"This is tooltip\\\"\\n        useRcTooltip\\n        onClick={() => {\\n          setOpen((detached) => !detached);\\n        }}\\n      >\\n        {open ? 'Close' : 'Open'} this block\\n      </RcButton>\\n      <RcDetachedWindow\\n        {...args}\\n        ref={ref}\\n        open={open}\\n        onUnload={(e) => {\\n          // * must need for trigger open change to show children when user close window directly\\n          setOpen(false);\\n          console.dir('[onUnload] current ref', ref.current);\\n        }}\\n        onOpen={(targetWindow) => {\\n          console.log('[onOpen] current ref', targetWindow, ref.current);\\n          if (targetWindow && !targetWindow['ResizeObserver']) {\\n            const s = targetWindow.document.createElement('script');\\n            s.type = 'text/javascript';\\n            // s.innerHTML = `${polyfill}`;\\n            targetWindow.document.head.appendChild(s);\\n          }\\n        }}\\n        onload={(e) => {\\n          console.dir('[onload] current ref', ref.current);\\n        }}\\n        onBeforeunload={(e) => {\\n          console.dir('[onBeforeunload] current ref', ref.current);\\n        }}\\n      >\\n        <RcPaper>\\n          <RcGrid container>\\n            <RcGrid item xs>\\n              <RcTypography variant=\\\"display1\\\" color=\\\"neutral.f06\\\">\\n                Block\\n              </RcTypography>\\n            </RcGrid>\\n            <RcGrid item>\\n              <RcIconButton\\n                symbol={Close}\\n                variant=\\\"inverse\\\"\\n                title=\\\"Close window\\\"\\n                onClick={() => {\\n                  setOpen(false);\\n                }}\\n              />\\n            </RcGrid>\\n          </RcGrid>\\n          <br />\\n          <RcButton title=\\\"+1\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n            +1\\n          </RcButton>\\n          <RcButton\\n            title=\\\"I'm disabled\\\"\\n            useRcTooltip\\n            TooltipProps={{ ignorePointer: true }}\\n            disabled\\n          >\\n            disabled button with tooltip\\n          </RcButton>\\n          count: {value}\\n          <Box v={value} />\\n          <VirtualizedMenu />\\n          <RcDivider />\\n          <VirtuosoExample />\\n          <RcDivider />\\n          <TabsExampleComponent />\\n          <RcDivider />\\n          <SubMenuExampleComponent />\\n          <RcDivider />\\n          <DialogExampleComponent />\\n          <RcDivider />\\n          <DialogWithResponsiveExample />\\n          <RcDivider />\\n          <Popper />\\n          <RcDivider />\\n          <Popover />\\n          <RcDivider />\\n          <DownshiftExamples />\\n          <RcDivider />\\n          <MultiDrawer anchor=\\\"bottom\\\" />\\n        </RcPaper>\\n      </RcDetachedWindow>\\n    </>\\n  );\\n};\\nDetachedWindow.storyName = 'DetachedWindow';\\n\\nDetachedWindow.args = {\\n  title: 'new window',\\n  name: 'window',\\n  specs:\\n    'toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=1200,width=400,height=400',\\n};\\n\\nDetachedWindow.argTypes = {\\n  ...notControlInDocTable<keyof DetachedWindowProps>([]),\\n};\\n\\nDetachedWindow.parameters = {\\n  tags: [],\\n};\\n\\ntype ContentProps = {\\n  setOpen: any;\\n  value: number;\\n};\\n\\nconst Content: FunctionComponent<ContentProps> = ({ setOpen, value }) => {\\n  return (\\n    <RcPaper>\\n      <RcGrid container>\\n        <RcGrid item xs>\\n          <RcTypography variant=\\\"display1\\\" color=\\\"neutral.f06\\\">\\n            Block\\n          </RcTypography>\\n        </RcGrid>\\n        <RcGrid item>\\n          <RcIconButton\\n            symbol={Close}\\n            variant=\\\"inverse\\\"\\n            title=\\\"Close window\\\"\\n            onClick={() => {\\n              setOpen(false);\\n            }}\\n          />\\n        </RcGrid>\\n      </RcGrid>\\n      <br />\\n      count: {value}\\n    </RcPaper>\\n  );\\n};\\n\\nexport const DetachedWindowExamples: Story<DetachedWindowProps> = () => {\\n  const [value, setValue] = useState(1);\\n\\n  const [open, setOpen] = useState(false);\\n  const [open2, setOpen2] = useState(false);\\n  const [open3, setOpen3] = useState(false);\\n  const ref = useRef<RcDetachedWindowRef>(null);\\n  const ref2 = useRef<RcDetachedWindowRef>(null);\\n  const ref3 = useRef<RcDetachedWindowRef>(null);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"neutral.f06\\\">\\n        Control window in another window\\n        <br />\\n        count: {value}\\n      </RcTypography>\\n      <RcButton title=\\\"+1\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n        +1\\n      </RcButton>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setOpen((o) => !o)}>\\n        {open ? 'close' : 'open'} 1\\n      </RcButton>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setOpen2((o) => !o)}>\\n        {open2 ? 'close' : 'open'} 2\\n      </RcButton>\\n      <RcButton title=\\\"cool\\\" useRcTooltip onClick={() => setOpen3((o) => !o)}>\\n        {open3 ? 'close' : 'open'} 3\\n      </RcButton>\\n      <br />\\n      <RcDetachedWindow\\n        ref={ref}\\n        open={open}\\n        onUnload={() => setOpen(false)}\\n        title=\\\"new window\\\"\\n        name=\\\"window1\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=800,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen} value={value} />\\n        <RcButton\\n          title=\\\"window 2\\\"\\n          useRcTooltip\\n          onClick={() => setOpen2((o) => !o)}\\n        >\\n          {open2 ? 'close' : 'open'} window 2\\n        </RcButton>\\n      </RcDetachedWindow>\\n      <RcDetachedWindow\\n        ref={ref2}\\n        open={open2}\\n        onUnload={() => setOpen2(false)}\\n        title=\\\"new window2\\\"\\n        name=\\\"window2\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=1200,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen2} value={value} />\\n        <RcButton\\n          title=\\\"window 1\\\"\\n          useRcTooltip\\n          onClick={() => setOpen((o) => !o)}\\n        >\\n          {open ? 'close' : 'open'} window 1\\n        </RcButton>\\n        <RcButton\\n          title=\\\"window 3\\\"\\n          useRcTooltip\\n          onClick={() => setOpen3((o) => !o)}\\n        >\\n          {open ? 'close' : 'open'} window 3\\n        </RcButton>\\n      </RcDetachedWindow>\\n      <RcDetachedWindow\\n        ref={ref3}\\n        open={open3}\\n        onUnload={() => setOpen3(false)}\\n        title=\\\"new window3\\\"\\n        name=\\\"window3\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=400,left=1200,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen3} value={value} />\\n        <RcButton\\n          title=\\\"window 1\\\"\\n          useRcTooltip\\n          onClick={() => setOpen((o) => !o)}\\n        >\\n          {open ? 'close' : 'open'} window 1\\n        </RcButton>\\n      </RcDetachedWindow>\\n    </>\\n  );\\n};\\n\\nDetachedWindowExamples.storyName = 'DetachedWindow Examples';\\n\\nexport const DetachedWindowGetWindow: Story<DetachedWindowProps> = () => {\\n  const [value, setValue] = useState(1);\\n\\n  const [open, setOpen] = useState(false);\\n  const ref = useRef<RcDetachedWindowRef>(null);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"neutral.f06\\\">\\n        Open window with getWindow\\n        <br />\\n        count: {value}\\n      </RcTypography>\\n      <RcButton title=\\\"+1\\\" useRcTooltip onClick={() => setValue(value + 1)}>\\n        +1\\n      </RcButton>\\n      <RcButton\\n        style={{ float: 'right' }}\\n        title=\\\"This is tooltip\\\"\\n        useRcTooltip\\n        onClick={() => {\\n          setOpen((detached) => !detached);\\n        }}\\n      >\\n        {open ? 'Close' : 'Open'} this block\\n      </RcButton>\\n      <br />\\n      <RcDetachedWindow\\n        ref={ref}\\n        open={open}\\n        onUnload={() => setOpen(false)}\\n        getWindow={({ url, name, specs, replace, title }) => {\\n          \\n          const win = window.open(url, name, specs, replace);\\n\\n          if (win) {\\n            win.document.title = title!;\\n\\n            return win;\\n          }\\n          return null;\\n        }}\\n        title=\\\"new window\\\"\\n        name=\\\"window1\\\"\\n        specs=\\\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=800,width=400,height=400\\\"\\n      >\\n        <Content setOpen={setOpen} value={value} />\\n      </RcDetachedWindow>\\n    </>\\n  );\\n};\\n\\nDetachedWindowGetWindow.storyName = 'open window by yourself';\\n\",\"locationsMap\":{\"detached-window\":{\"startLoc\":{\"col\":58,\"line\":62},\"endLoc\":{\"col\":1,\"line\":177},\"startBody\":{\"col\":58,\"line\":62},\"endBody\":{\"col\":1,\"line\":177}},\"detached-window-examples\":{\"startLoc\":{\"col\":66,\"line\":226},\"endLoc\":{\"col\":1,\"line\":316},\"startBody\":{\"col\":66,\"line\":226},\"endBody\":{\"col\":1,\"line\":316}},\"detached-window-get-window\":{\"startLoc\":{\"col\":67,\"line\":320},\"endLoc\":{\"col\":1,\"line\":370},\"startBody\":{\"col\":67,\"line\":320},\"endBody\":{\"col\":1,\"line\":370}}}},},\n  title: '🚀 Cleanup Components/DetachedWindow',\n  component: RcDetachedWindow,\n  argTypes: {\n    ...sortInDocTable<keyof DetachedWindowProps>(['keep']),\n    ...notControlInDocTable<keyof DetachedWindowProps>(['open', 'onUnload']),\n    ...notShowInDocTable<keyof DetachedWindowProps>([]),\n  },\n} as Meta;\n\ntype DetachedWindowProps = ComponentProps<typeof RcDetachedWindow>;\n\nexport const DetachedWindow: Story<DetachedWindowProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(1);\n  const ref = useRef<RcDetachedWindowRef>(null);\n\n  return (\n    <>\n      <RcTypography color=\"neutral.f06\">\n        That can make render element on new window, and can shared state easy.\n        <br />\n        Also you can get window use <RcText highlight>ref</RcText>,{' '}\n        <RcText highlight>ref.current.window</RcText>, you can get that after{' '}\n        <RcText highlight>onload</RcText>, or get that in{' '}\n        <RcText highlight>onOpen={`{(window) => ... }`}</RcText> trigger arg\n        <br />\n        count: {value}\n      </RcTypography>\n      <RcButton title=\"cool\" useRcTooltip onClick={() => setValue(value + 1)}>\n        +1\n      </RcButton>\n      <RcButton\n        style={{ float: 'right' }}\n        title=\"This is tooltip\"\n        useRcTooltip\n        onClick={() => {\n          setOpen((detached) => !detached);\n        }}\n      >\n        {open ? 'Close' : 'Open'} this block\n      </RcButton>\n      <RcDetachedWindow\n        {...args}\n        ref={ref}\n        open={open}\n        onUnload={(e) => {\n          // * must need for trigger open change to show children when user close window directly\n          setOpen(false);\n          console.dir('[onUnload] current ref', ref.current);\n        }}\n        onOpen={(targetWindow) => {\n          console.log('[onOpen] current ref', targetWindow, ref.current);\n          if (targetWindow && !targetWindow['ResizeObserver']) {\n            const s = targetWindow.document.createElement('script');\n            s.type = 'text/javascript';\n            // s.innerHTML = `${polyfill}`;\n            targetWindow.document.head.appendChild(s);\n          }\n        }}\n        onload={(e) => {\n          console.dir('[onload] current ref', ref.current);\n        }}\n        onBeforeunload={(e) => {\n          console.dir('[onBeforeunload] current ref', ref.current);\n        }}\n      >\n        <RcPaper>\n          <RcGrid container>\n            <RcGrid item xs>\n              <RcTypography variant=\"display1\" color=\"neutral.f06\">\n                Block\n              </RcTypography>\n            </RcGrid>\n            <RcGrid item>\n              <RcIconButton\n                symbol={Close}\n                variant=\"inverse\"\n                title=\"Close window\"\n                onClick={() => {\n                  setOpen(false);\n                }}\n              />\n            </RcGrid>\n          </RcGrid>\n          <br />\n          <RcButton title=\"+1\" useRcTooltip onClick={() => setValue(value + 1)}>\n            +1\n          </RcButton>\n          <RcButton\n            title=\"I'm disabled\"\n            useRcTooltip\n            TooltipProps={{ ignorePointer: true }}\n            disabled\n          >\n            disabled button with tooltip\n          </RcButton>\n          count: {value}\n          <Box v={value} />\n          <VirtualizedMenu />\n          <RcDivider />\n          <VirtuosoExample />\n          <RcDivider />\n          <TabsExampleComponent />\n          <RcDivider />\n          <SubMenuExampleComponent />\n          <RcDivider />\n          <DialogExampleComponent />\n          <RcDivider />\n          <DialogWithResponsiveExample />\n          <RcDivider />\n          <Popper />\n          <RcDivider />\n          <Popover />\n          <RcDivider />\n          <DownshiftExamples />\n          <RcDivider />\n          <MultiDrawer anchor=\"bottom\" />\n        </RcPaper>\n      </RcDetachedWindow>\n    </>\n  );\n};;\nDetachedWindow.storyName = 'DetachedWindow';\n\nDetachedWindow.args = {\n  title: 'new window',\n  name: 'window',\n  specs:\n    'toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=1200,width=400,height=400',\n};\n\nDetachedWindow.argTypes = {\n  ...notControlInDocTable<keyof DetachedWindowProps>([]),\n};\n\nDetachedWindow.parameters = {\n  tags: [],\n};\n\ntype ContentProps = {\n  setOpen: any;\n  value: number;\n};\n\nconst Content: FunctionComponent<ContentProps> = ({ setOpen, value }) => {\n  return (\n    <RcPaper>\n      <RcGrid container>\n        <RcGrid item xs>\n          <RcTypography variant=\"display1\" color=\"neutral.f06\">\n            Block\n          </RcTypography>\n        </RcGrid>\n        <RcGrid item>\n          <RcIconButton\n            symbol={Close}\n            variant=\"inverse\"\n            title=\"Close window\"\n            onClick={() => {\n              setOpen(false);\n            }}\n          />\n        </RcGrid>\n      </RcGrid>\n      <br />\n      count: {value}\n    </RcPaper>\n  );\n};\n\nexport const DetachedWindowExamples: Story<DetachedWindowProps> = () => {\n  const [value, setValue] = useState(1);\n\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n  const [open3, setOpen3] = useState(false);\n  const ref = useRef<RcDetachedWindowRef>(null);\n  const ref2 = useRef<RcDetachedWindowRef>(null);\n  const ref3 = useRef<RcDetachedWindowRef>(null);\n\n  return (\n    <>\n      <RcTypography color=\"neutral.f06\">\n        Control window in another window\n        <br />\n        count: {value}\n      </RcTypography>\n      <RcButton title=\"+1\" useRcTooltip onClick={() => setValue(value + 1)}>\n        +1\n      </RcButton>\n      <RcButton title=\"cool\" useRcTooltip onClick={() => setOpen((o) => !o)}>\n        {open ? 'close' : 'open'} 1\n      </RcButton>\n      <RcButton title=\"cool\" useRcTooltip onClick={() => setOpen2((o) => !o)}>\n        {open2 ? 'close' : 'open'} 2\n      </RcButton>\n      <RcButton title=\"cool\" useRcTooltip onClick={() => setOpen3((o) => !o)}>\n        {open3 ? 'close' : 'open'} 3\n      </RcButton>\n      <br />\n      <RcDetachedWindow\n        ref={ref}\n        open={open}\n        onUnload={() => setOpen(false)}\n        title=\"new window\"\n        name=\"window1\"\n        specs=\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=800,width=400,height=400\"\n      >\n        <Content setOpen={setOpen} value={value} />\n        <RcButton\n          title=\"window 2\"\n          useRcTooltip\n          onClick={() => setOpen2((o) => !o)}\n        >\n          {open2 ? 'close' : 'open'} window 2\n        </RcButton>\n      </RcDetachedWindow>\n      <RcDetachedWindow\n        ref={ref2}\n        open={open2}\n        onUnload={() => setOpen2(false)}\n        title=\"new window2\"\n        name=\"window2\"\n        specs=\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=1200,width=400,height=400\"\n      >\n        <Content setOpen={setOpen2} value={value} />\n        <RcButton\n          title=\"window 1\"\n          useRcTooltip\n          onClick={() => setOpen((o) => !o)}\n        >\n          {open ? 'close' : 'open'} window 1\n        </RcButton>\n        <RcButton\n          title=\"window 3\"\n          useRcTooltip\n          onClick={() => setOpen3((o) => !o)}\n        >\n          {open ? 'close' : 'open'} window 3\n        </RcButton>\n      </RcDetachedWindow>\n      <RcDetachedWindow\n        ref={ref3}\n        open={open3}\n        onUnload={() => setOpen3(false)}\n        title=\"new window3\"\n        name=\"window3\"\n        specs=\"toolbar=yes,scrollbars=yes,resizable=yes,top=400,left=1200,width=400,height=400\"\n      >\n        <Content setOpen={setOpen3} value={value} />\n        <RcButton\n          title=\"window 1\"\n          useRcTooltip\n          onClick={() => setOpen((o) => !o)}\n        >\n          {open ? 'close' : 'open'} window 1\n        </RcButton>\n      </RcDetachedWindow>\n    </>\n  );\n};;\n\nDetachedWindowExamples.storyName = 'DetachedWindow Examples';\n\nexport const DetachedWindowGetWindow: Story<DetachedWindowProps> = () => {\n  const [value, setValue] = useState(1);\n\n  const [open, setOpen] = useState(false);\n  const ref = useRef<RcDetachedWindowRef>(null);\n\n  return (\n    <>\n      <RcTypography color=\"neutral.f06\">\n        Open window with getWindow\n        <br />\n        count: {value}\n      </RcTypography>\n      <RcButton title=\"+1\" useRcTooltip onClick={() => setValue(value + 1)}>\n        +1\n      </RcButton>\n      <RcButton\n        style={{ float: 'right' }}\n        title=\"This is tooltip\"\n        useRcTooltip\n        onClick={() => {\n          setOpen((detached) => !detached);\n        }}\n      >\n        {open ? 'Close' : 'Open'} this block\n      </RcButton>\n      <br />\n      <RcDetachedWindow\n        ref={ref}\n        open={open}\n        onUnload={() => setOpen(false)}\n        getWindow={({ url, name, specs, replace, title }) => {\n          // eslint-disable-next-line security/detect-non-literal-fs-filename\n          const win = window.open(url, name, specs, replace);\n\n          if (win) {\n            win.document.title = title!;\n\n            return win;\n          }\n          return null;\n        }}\n        title=\"new window\"\n        name=\"window1\"\n        specs=\"toolbar=yes,scrollbars=yes,resizable=yes,top=0,left=800,width=400,height=400\"\n      >\n        <Content setOpen={setOpen} value={value} />\n      </RcDetachedWindow>\n    </>\n  );\n};\n\nDetachedWindowGetWindow.storyName = 'open window by yourself';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcDialerPadSounds } from '../assets';\\nimport { RcDialPad } from '../DialPad';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Dialer/DialPad',\\n  component: RcDialPad,\\n  argTypes: {\\n    ...sortInDocTable<keyof DialPadProps>([]),\\n    ...notControlInDocTable<keyof DialPadProps>([]),\\n    ...notShowInDocTable<keyof DialPadProps>([]),\\n  },\\n} as Meta;\\n\\ntype DialPadProps = ComponentProps<typeof RcDialPad>;\\n\\nconst Wrapper = styled.div`\\n  width: 280px;\\n  resize: horizontal;\\n  overflow: hidden;\\n`;\\n\\nexport const DialPad: Story<DialPadProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <RcDialPad\\n        sounds={RcDialerPadSounds}\\n        getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\\n        {...args}\\n      />\\n    </Wrapper>\\n  );\\n};\\n\\nDialPad.storyName = 'DialPad';\\n\\nDialPad.args = {};\\n\\nDialPad.argTypes = {\\n  ...notControlInDocTable<keyof DialPadProps>([]),\\n};\\n\\nDialPad.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DialPad\":{\"startLoc\":{\"col\":44,\"line\":33},\"endLoc\":{\"col\":1,\"line\":45},\"startBody\":{\"col\":44,\"line\":33},\"endBody\":{\"col\":1,\"line\":45}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { RcDialerPadSounds } from '../assets';\nimport { RcDialPad } from '../DialPad';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcDialerPadSounds } from '../assets';\\nimport { RcDialPad } from '../DialPad';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Dialer/DialPad',\\n  component: RcDialPad,\\n  argTypes: {\\n    ...sortInDocTable<keyof DialPadProps>([]),\\n    ...notControlInDocTable<keyof DialPadProps>([]),\\n    ...notShowInDocTable<keyof DialPadProps>([]),\\n  },\\n} as Meta;\\n\\ntype DialPadProps = ComponentProps<typeof RcDialPad>;\\n\\nconst Wrapper = styled.div`\\n  width: 280px;\\n  resize: horizontal;\\n  overflow: hidden;\\n`;\\n\\nexport const DialPad: Story<DialPadProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <RcDialPad\\n        sounds={RcDialerPadSounds}\\n        getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\\n        {...args}\\n      />\\n    </Wrapper>\\n  );\\n};\\n\\nDialPad.storyName = 'DialPad';\\n\\nDialPad.args = {};\\n\\nDialPad.argTypes = {\\n  ...notControlInDocTable<keyof DialPadProps>([]),\\n};\\n\\nDialPad.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"dial-pad\":{\"startLoc\":{\"col\":44,\"line\":33},\"endLoc\":{\"col\":1,\"line\":45},\"startBody\":{\"col\":44,\"line\":33},\"endBody\":{\"col\":1,\"line\":45}}}},},\n  title: '🚀 Cleanup Components/Dialer/DialPad',\n  component: RcDialPad,\n  argTypes: {\n    ...sortInDocTable<keyof DialPadProps>([]),\n    ...notControlInDocTable<keyof DialPadProps>([]),\n    ...notShowInDocTable<keyof DialPadProps>([]),\n  },\n} as Meta;\n\ntype DialPadProps = ComponentProps<typeof RcDialPad>;\n\nconst Wrapper = styled.div`\n  width: 280px;\n  resize: horizontal;\n  overflow: hidden;\n`;\n\nexport const DialPad: Story<DialPadProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <RcDialPad\n        sounds={RcDialerPadSounds}\n        getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\n        {...args}\n      />\n    </Wrapper>\n  );\n};\n\nDialPad.storyName = 'DialPad';\n\nDialPad.args = {};\n\nDialPad.argTypes = {\n  ...notControlInDocTable<keyof DialPadProps>([]),\n};\n\nDialPad.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {\\n  ComponentProps,\\n  FunctionComponent,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport uniqueId from 'lodash/uniqueId';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  flexCenterStyle,\\n  flexWidth,\\n  palette2,\\n  radius,\\n  RcClasses,\\n  RcGlobalScrollBarStyle,\\n  setOpacity,\\n  shadows,\\n  spacing,\\n  styled,\\n  typography,\\n  UseLongPressEventReason,\\n} from '../../../foundation';\\nimport { Close, IncallBorder, Keypad, TimeBorder } from '../../../icon';\\nimport Deletenumber from '../../../icon/Deletenumber';\\nimport DialerSvg from '../../../icon/Dialer';\\nimport Minimize from '../../../icon/Minimize';\\nimport Phone from '../../../icon/Phone';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcAvatar } from '../../Avatar';\\nimport avatar from '../../Avatar/__stories__/img/avatar.jpg';\\nimport { RcBox } from '../../Box';\\nimport { RcIconButton } from '../../Buttons';\\nimport { RcDownshiftDefaultFilterOptions, useDownshift } from '../../Downshift';\\nimport { options } from '../../Downshift/__stories__/options';\\nimport { RcDownshiftInput } from '../../Downshift/styles';\\nimport { RcSuggestionList } from '../../Downshift/SuggestionList';\\nimport { RcSelect, RcSelectProps } from '../../Forms';\\nimport { RcIcon } from '../../Icon';\\nimport { RcListItemSecondaryAction } from '../../List/ListItemSecondaryAction';\\nimport { RcListItemText } from '../../List/ListItemText';\\nimport { RcMenuItem } from '../../Menu';\\nimport { RcPaper } from '../../Paper';\\nimport { RcText } from '../../Text';\\nimport { RcTooltip } from '../../Tooltip';\\nimport { RcCollapse, RcFade, RcSlide } from '../../Transitions';\\nimport { RcDialDelete } from '../DialDelete';\\nimport { RcDialer } from '../Dialer';\\nimport { RcDialerPadSounds, RcDialPad } from '../DialPad';\\nimport { useDialKeyboard } from '../DialPad/utils/useDialKeyboard';\\nimport { RcDialTextField } from '../DialTextField';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Dialer',\\n  argTypes: {\\n    ...sortInDocTable<keyof DialerProps>([]),\\n    ...notControlInDocTable<keyof DialerProps>([\\n      'sounds',\\n      'control',\\n      'onChange',\\n    ]),\\n    ...notShowInDocTable<keyof DialerProps>([]),\\n  },\\n} as Meta;\\n\\ntype DialerProps = ComponentProps<typeof RcDialPad>;\\n\\nconst DialerWrapper = styled.div`\\n  width: 280px;\\n  margin: ${spacing(5)};\\n  overflow: hidden;\\n  box-shadow: ${shadows('16')};\\n  background: ${palette2('neutral', 'elevation')};\\n  border-radius: ${radius('xl')};\\n`;\\n\\nconst Header = styled.header`\\n  background-color: ${palette2('dialHeader', 'bg')};\\n\\n  color: ${palette2('dialHeader', 'text')};\\n  padding: ${spacing(0, 4)};\\n`;\\n\\nconst HeaderTitle = styled.div`\\n  display: flex;\\n  align-items: center;\\n  height: 36px;\\n`;\\n\\nconst Body = styled.main`\\n  position: relative;\\n  padding: ${spacing(0, 6, 6)};\\n`;\\n\\nconst TextFieldWrapper = styled.div<{ isHaveValue: boolean }>`\\n  display: flex;\\n  align-items: center;\\n  padding: ${spacing(1, 0, 3)};\\n\\n  ${RcDialTextField} {\\n    padding-left: ${({ isHaveValue }) => isHaveValue && spacing(6)};\\n\\n    margin: ${spacing(0, 3)};\\n    position: relative;\\n\\n    input {\\n      color: ${palette2('dialHeader', 'text')};\\n      caret-color: ${palette2('dialHeader', 'text')};\\n\\n      &::placeholder {\\n        color: ${palette2('dialHeader', 'textHint')};\\n        ${typography('subheading1')}\\n        ${flexCenterStyle};\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n      }\\n    }\\n  }\\n\\n  ${RcIconButton} {\\n    align-self: flex-start;\\n  }\\n`;\\n\\nconst customSelectInputClasses = RcClasses<RcSelectProps['InputProps']>(\\n  ['root'],\\n  'custom-select-input',\\n);\\n\\nconst BodyTop = styled.div`\\n  ${flexCenterStyle};\\n  padding-top: ${spacing(1.5)};\\n\\n  ${RcSelect} {\\n    width: auto;\\n\\n    .${customSelectInputClasses.root} {\\n      &,\\n      &:hover {\\n        background-color: transparent;\\n      }\\n    }\\n  }\\n`;\\n\\nconst BodyBottom = styled.div`\\n  ${flexCenterStyle};\\n  margin-top: ${spacing(6)};\\n\\n  && {\\n    ${RcIcon} {\\n      font-size: 28px;\\n    }\\n  }\\n`;\\n\\nconst SearchWrapper = styled.div`\\n  overflow: hidden;\\n  position: absolute;\\n  display: flex;\\n  flex-direction: column;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  background: ${palette2('neutral', 'elevation')};\\n\\n  ${RcListItemSecondaryAction} {\\n    ${flexWidth('88px')};\\n    justify-content: space-between;\\n  }\\n`;\\n\\nconst DialerActionIconButton = styled(RcIconButton)`\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  margin-right: ${spacing(4)};\\n  transform: translateY(-50%);\\n  z-index: 1;\\n`;\\n\\nconst menus = [\\n  { id: 1, value: '(000) 000-0000' },\\n  { id: 2, value: '(000) 000-0000' },\\n  { id: 3, value: '(000) 000-0000' },\\n  { id: 4, value: '(000) 000-0000' },\\n];\\n\\nconst FullDialer: FunctionComponent<DialerProps> = ({ children, ...rest }) => {\\n  const [value, setValue] = useState('');\\n  const dialKeyboardProps = useDialKeyboard();\\n\\n  const isHaveValue = value.length > 0;\\n\\n  const inputRef = useRef<HTMLInputElement>(null);\\n\\n  const {\\n    optionItems,\\n    highlightedIndex,\\n    getToggleButtonProps,\\n    getTagListBoxProps,\\n    getMenuProps,\\n    getInputProps,\\n    getInputAriaProps,\\n    getLabelProps,\\n    getItemProps,\\n    isOpen,\\n    inputValue,\\n    changeHighlightedIndexReason,\\n    isKeepHighlightedIndex,\\n    // setHighlightedIndex,\\n    // keepHighlightedIndex,\\n    // closeMenu,\\n    // openMenu,\\n    // reset,\\n  } = useDownshift({\\n    inputRef,\\n    value: [],\\n    inputValue: value,\\n    options,\\n    freeSolo: true,\\n    keyToTags: ['-'],\\n    autoHighlight: true,\\n    addNoOptionItem: 'first',\\n    onChange: ([e]) => {\\n      // trigger action\\n      console.log('select item', e);\\n    },\\n    onInputChange: (e) => {\\n      console.log('inputChange', e);\\n      setValue(e || '');\\n    },\\n    filterOptions: RcDownshiftDefaultFilterOptions,\\n  });\\n\\n  const { onBlur, ...InputProps } = getInputProps();\\n\\n  return (\\n    <RcDialer {...rest}>\\n      <RcGlobalScrollBarStyle />\\n      <DialerWrapper>\\n        <Header>\\n          <HeaderTitle>\\n            <RcText variant=\\\"body1\\\" color=\\\"dialHeader.text\\\">\\n              New Call\\n            </RcText>\\n            <RcBox flex=\\\"1 1 auto\\\" />\\n            <RcIconButton\\n              variant=\\\"plain\\\"\\n              symbol={Minimize}\\n              size=\\\"small\\\"\\n              color=\\\"dialHeader.icon\\\"\\n            />\\n          </HeaderTitle>\\n          <TextFieldWrapper isHaveValue={isHaveValue}>\\n            <RcDialTextField\\n              inputRef={inputRef}\\n              InputLabelProps={getLabelProps()}\\n              InputProps={{\\n                inputComponent: RcDownshiftInput,\\n                ...(getTagListBoxProps() as any),\\n                ...InputProps,\\n              }}\\n              inputProps={{\\n                maxLength: 30,\\n                ...getInputAriaProps(),\\n              }}\\n              value={value}\\n              fullWidth\\n              align=\\\"center\\\"\\n              onChange={setValue}\\n              placeholder=\\\"Enter a number\\\"\\n            />\\n            {isHaveValue && (\\n              <RcDialDelete>\\n                <RcIconButton\\n                  symbol={Deletenumber}\\n                  data-sign=\\\"deleteButton\\\"\\n                  color=\\\"dialHeader.icon\\\"\\n                  title=\\\"delete\\\"\\n                  variant=\\\"plain\\\"\\n                  size=\\\"large\\\"\\n                />\\n              </RcDialDelete>\\n            )}\\n          </TextFieldWrapper>\\n        </Header>\\n        <Body>\\n          <BodyTop>\\n            <RcText color=\\\"neutral.f02\\\" variant=\\\"caption2\\\">\\n              Call from:\\n            </RcText>\\n            <RcSelect\\n              value={1}\\n              variant=\\\"box\\\"\\n              textVariant=\\\"caption1\\\"\\n              InputProps={{\\n                classes: customSelectInputClasses,\\n              }}\\n            >\\n              {menus.map((item) => (\\n                <RcMenuItem value={item.id} key={item.id}>\\n                  {item.value}\\n                </RcMenuItem>\\n              ))}\\n            </RcSelect>\\n          </BodyTop>\\n          <RcDialPad\\n            sounds={RcDialerPadSounds}\\n            getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\\n            {...dialKeyboardProps}\\n          />\\n          <BodyBottom>\\n            <RcIconButton\\n              color=\\\"success.b03\\\"\\n              symbol={Phone}\\n              size=\\\"xxlarge\\\"\\n              variant=\\\"contained\\\"\\n              elevation=\\\"0\\\"\\n              activeElevation=\\\"0\\\"\\n            />\\n          </BodyBottom>\\n\\n          <DialerActionIconButton\\n            variant=\\\"contained\\\"\\n            activeElevation=\\\"1\\\"\\n            color=\\\"neutral.elevation\\\"\\n            size=\\\"small\\\"\\n            symbol={isOpen ? DialerSvg : TimeBorder}\\n            {...getToggleButtonProps()}\\n          />\\n\\n          {isOpen && (\\n            <SearchWrapper>\\n              <div>\\n                <BodyTop>\\n                  <RcText color=\\\"neutral.f02\\\" variant=\\\"caption2\\\">\\n                    Call from:\\n                  </RcText>\\n                  <RcSelect\\n                    value={1}\\n                    variant=\\\"box\\\"\\n                    textVariant=\\\"caption1\\\"\\n                    InputProps={{\\n                      classes: customSelectInputClasses,\\n                    }}\\n                  >\\n                    {menus.map((item) => (\\n                      <RcMenuItem value={item.id} key={item.id}>\\n                        {item.value}\\n                      </RcMenuItem>\\n                    ))}\\n                  </RcSelect>\\n                </BodyTop>\\n              </div>\\n\\n              <RcBox flex=\\\"1 1 auto\\\">\\n                <RcSuggestionList\\n                  highlightedIndex={highlightedIndex}\\n                  options={optionItems}\\n                  // * you can custom render with render Option\\n                  inputValue={inputValue}\\n                  getItemProps={getItemProps}\\n                  getMenuProps={getMenuProps}\\n                  changeHighlightedIndexReason={changeHighlightedIndexReason}\\n                  isKeepHighlightedIndex={isKeepHighlightedIndex}\\n                  renderOption={(\\n                    {\\n                      label,\\n                      freeSolo,\\n                      id,\\n                      error,\\n                      unSelectable,\\n                      isSuggestion,\\n                      isError,\\n                      ...restProps\\n                    },\\n                    state,\\n                  ) => {\\n                    return (\\n                      <RcMenuItem\\n                        id={`${id}`}\\n                        component=\\\"div\\\"\\n                        selected={state.selected}\\n                        avatar={<RcAvatar src={avatar} size=\\\"small\\\" />}\\n                        {...restProps}\\n                      >\\n                        <RcListItemText primary={label} secondary=\\\"ext. 000\\\" />\\n                        <RcListItemSecondaryAction>\\n                          <RcIcon size=\\\"medium\\\" symbol={IncallBorder} />\\n                          2021/6/11\\n                        </RcListItemSecondaryAction>\\n                      </RcMenuItem>\\n                    );\\n                  }}\\n                />\\n              </RcBox>\\n            </SearchWrapper>\\n          )}\\n        </Body>\\n      </DialerWrapper>\\n    </RcDialer>\\n  );\\n};\\n\\nconst Wrapper = styled.div`\\n  width: 280px;\\n  resize: horizontal;\\n  overflow: hidden;\\n  box-shadow: ${shadows('16')};\\n\\n  ${RcDialTextField} {\\n    .${customSelectInputClasses.root} {\\n      padding: 1em;\\n    }\\n  }\\n`;\\n\\nconst SimpleDialer: FunctionComponent<DialerProps> = ({ ...args }) => {\\n  const [value, setValue] = useState('');\\n  const dialKeyboardProps = useDialKeyboard();\\n\\n  return (\\n    <RcDialer {...args}>\\n      <Wrapper>\\n        <RcDialTextField\\n          value={value}\\n          align=\\\"center\\\"\\n          fullWidth\\n          onChange={setValue}\\n          placeholder=\\\"Enter a number\\\"\\n          InputProps={{\\n            classes: customSelectInputClasses,\\n            endAdornment: value.length > 0 && (\\n              <RcDialDelete>\\n                <RcIconButton\\n                  symbol={Deletenumber}\\n                  data-sign=\\\"deleteButton\\\"\\n                  title=\\\"delete\\\"\\n                  variant=\\\"plain\\\"\\n                  size=\\\"large\\\"\\n                />\\n              </RcDialDelete>\\n            ),\\n          }}\\n        />\\n\\n        <RcDialPad\\n          sounds={RcDialerPadSounds}\\n          getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\\n          {...dialKeyboardProps}\\n        />\\n      </Wrapper>\\n    </RcDialer>\\n  );\\n};\\n\\nexport const Dialer: Story<DialerProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <SimpleDialer {...args} />;\\n};\\n\\nexport const DialerExamples: Story<DialerProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <FullDialer {...args} />;\\n};\\n\\nDialer.storyName = 'Dialer';\\n\\nDialer.args = {};\\n\\nDialer.argTypes = {\\n  ...notControlInDocTable<keyof DialerProps>([]),\\n};\\n\\nDialer.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst KeypadModeWrapper = styled.div`\\n  position: relative;\\n  width: 300px;\\n  height: 450px;\\n  overflow: hidden;\\n  border: 1px solid ${palette2('neutral', 'l03')};\\n`;\\n\\nconst Backdrop = styled.div`\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  background: ${setOpacity(palette2('neutral', 'b05'), '80')};\\n`;\\n\\nconst StyledCollapse = styled(RcCollapse)`\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  box-shadow: ${shadows('16')};\\n\\n  ${RcPaper} {\\n    border-radius: ${radius('zero')};\\n  }\\n\\n  ${RcDialTextField} {\\n    input {\\n      margin: ${spacing(0, 4)};\\n    }\\n  }\\n`;\\n\\nconst Footer = styled.div<{ open: boolean }>`\\n  display: flex;\\n  flex-direction: column;\\n  padding: ${({ open }) => {\\n    return open && spacing(2, 4, 0, 0);\\n  }};\\n  align-items: ${({ open }) => (open ? 'flex-end' : 'center')};\\n`;\\n\\nconst footHeight = 28;\\n\\nconst OpenWrapper = styled.div`\\n  ${flexCenterStyle}\\n\\n  height: ${footHeight}px;\\n  width: 100%;\\n  cursor: pointer;\\n`;\\n\\nexport const KeypadMode: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n  const [value, setValue] = useState('');\\n\\n  const inputRef = useRef<HTMLInputElement>(null);\\n  const openButtonRef = useRef<HTMLButtonElement>(null);\\n\\n  const [history, setHistory] = useState<\\n    { id: string; value: string; reason: UseLongPressEventReason }[]\\n  >([]);\\n\\n  return (\\n    <RcBox display=\\\"flex\\\">\\n      <KeypadModeWrapper\\n        onKeyDown={(e) => {\\n          if (e.key === 'Escape') {\\n            setOpen(false);\\n          }\\n        }}\\n      >\\n        <RcFade in={open}>\\n          <Backdrop onClick={() => setOpen(false)} />\\n        </RcFade>\\n        <StyledCollapse\\n          in={open}\\n          collapsedSize={`${footHeight}px`}\\n          onEntered={() => {\\n            inputRef.current?.focus();\\n          }}\\n          onExited={() => {\\n            setValue('');\\n            openButtonRef.current?.focus();\\n          }}\\n        >\\n          <RcPaper elevation={16}>\\n            <Footer open={open}>\\n              {open ? (\\n                <RcIconButton\\n                  variant=\\\"plain\\\"\\n                  size=\\\"medium\\\"\\n                  symbol={Close}\\n                  onClick={() => setOpen(!open)}\\n                  title=\\\"Close\\\"\\n                />\\n              ) : (\\n                <RcTooltip title=\\\"Open\\\">\\n                  <OpenWrapper onClick={() => setOpen(!open)}>\\n                    <RcIconButton\\n                      ref={openButtonRef}\\n                      variant=\\\"plain\\\"\\n                      size=\\\"xsmall\\\"\\n                      symbol={Keypad}\\n                    />\\n                  </OpenWrapper>\\n                </RcTooltip>\\n              )}\\n            </Footer>\\n\\n            <RcDialer>\\n              <RcDialTextField\\n                inputRef={inputRef}\\n                value={value}\\n                align=\\\"center\\\"\\n                fullWidth\\n                onlyAllowKeypadValue\\n                keypadMode\\n                onChange={setValue}\\n                onEmit={(newValue, reason) => {\\n                  console.log('Get value', newValue, reason);\\n                  setHistory(\\n                    [\\n                      { id: uniqueId('dial-'), value: newValue, reason },\\n                      ...history,\\n                    ].slice(0, 20),\\n                  );\\n                }}\\n                placeholder=\\\"Enter a number\\\"\\n              />\\n              <RcDialPad sounds={RcDialerPadSounds} />\\n            </RcDialer>\\n          </RcPaper>\\n        </StyledCollapse>\\n      </KeypadModeWrapper>\\n      <RcBox height=\\\"300px\\\" width=\\\"500px\\\" style={{ overflowX: 'hidden' }}>\\n        {history.map((x) => (\\n          <RcSlide in key={x.id} direction=\\\"left\\\">\\n            <RcText color=\\\"neutral.f06\\\">\\n              value: {x.value}, reason: {x.reason}\\n            </RcText>\\n          </RcSlide>\\n        ))}\\n      </RcBox>\\n    </RcBox>\\n  );\\n};\\n\\nKeypadMode.storyName = 'Keypad mode';\\n\\nKeypadMode.args = {};\\n\\nKeypadMode.argTypes = {};\\n\\nKeypadMode.parameters = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Dialer\":{\"startLoc\":{\"col\":42,\"line\":467},\"endLoc\":{\"col\":1,\"line\":471},\"startBody\":{\"col\":42,\"line\":467},\"endBody\":{\"col\":1,\"line\":471}},\"DialerExamples\":{\"startLoc\":{\"col\":50,\"line\":473},\"endLoc\":{\"col\":1,\"line\":477},\"startBody\":{\"col\":50,\"line\":473},\"endBody\":{\"col\":1,\"line\":477}},\"KeypadMode\":{\"startLoc\":{\"col\":38,\"line\":550},\"endLoc\":{\"col\":1,\"line\":644},\"startBody\":{\"col\":38,\"line\":550},\"endBody\":{\"col\":1,\"line\":644}}};\n    \nimport React, {\n  ComponentProps,\n  FunctionComponent,\n  useRef,\n  useState,\n} from 'react';\n\nimport uniqueId from 'lodash/uniqueId';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport {\n  flexCenterStyle,\n  flexWidth,\n  palette2,\n  radius,\n  RcClasses,\n  RcGlobalScrollBarStyle,\n  setOpacity,\n  shadows,\n  spacing,\n  styled,\n  typography,\n  UseLongPressEventReason,\n} from '../../../foundation';\nimport { Close, IncallBorder, Keypad, TimeBorder } from '../../../icon';\nimport Deletenumber from '../../../icon/Deletenumber';\nimport DialerSvg from '../../../icon/Dialer';\nimport Minimize from '../../../icon/Minimize';\nimport Phone from '../../../icon/Phone';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcAvatar } from '../../Avatar';\nimport avatar from '../../Avatar/__stories__/img/avatar.jpg';\nimport { RcBox } from '../../Box';\nimport { RcIconButton } from '../../Buttons';\nimport { RcDownshiftDefaultFilterOptions, useDownshift } from '../../Downshift';\nimport { options } from '../../Downshift/__stories__/options';\nimport { RcDownshiftInput } from '../../Downshift/styles';\nimport { RcSuggestionList } from '../../Downshift/SuggestionList';\nimport { RcSelect, RcSelectProps } from '../../Forms';\nimport { RcIcon } from '../../Icon';\nimport { RcListItemSecondaryAction } from '../../List/ListItemSecondaryAction';\nimport { RcListItemText } from '../../List/ListItemText';\nimport { RcMenuItem } from '../../Menu';\nimport { RcPaper } from '../../Paper';\nimport { RcText } from '../../Text';\nimport { RcTooltip } from '../../Tooltip';\nimport { RcCollapse, RcFade, RcSlide } from '../../Transitions';\nimport { RcDialDelete } from '../DialDelete';\nimport { RcDialer } from '../Dialer';\nimport { RcDialerPadSounds, RcDialPad } from '../DialPad';\nimport { useDialKeyboard } from '../DialPad/utils/useDialKeyboard';\nimport { RcDialTextField } from '../DialTextField';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, {\\n  ComponentProps,\\n  FunctionComponent,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport uniqueId from 'lodash/uniqueId';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  flexCenterStyle,\\n  flexWidth,\\n  palette2,\\n  radius,\\n  RcClasses,\\n  RcGlobalScrollBarStyle,\\n  setOpacity,\\n  shadows,\\n  spacing,\\n  styled,\\n  typography,\\n  UseLongPressEventReason,\\n} from '../../../foundation';\\nimport { Close, IncallBorder, Keypad, TimeBorder } from '../../../icon';\\nimport Deletenumber from '../../../icon/Deletenumber';\\nimport DialerSvg from '../../../icon/Dialer';\\nimport Minimize from '../../../icon/Minimize';\\nimport Phone from '../../../icon/Phone';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcAvatar } from '../../Avatar';\\nimport avatar from '../../Avatar/__stories__/img/avatar.jpg';\\nimport { RcBox } from '../../Box';\\nimport { RcIconButton } from '../../Buttons';\\nimport { RcDownshiftDefaultFilterOptions, useDownshift } from '../../Downshift';\\nimport { options } from '../../Downshift/__stories__/options';\\nimport { RcDownshiftInput } from '../../Downshift/styles';\\nimport { RcSuggestionList } from '../../Downshift/SuggestionList';\\nimport { RcSelect, RcSelectProps } from '../../Forms';\\nimport { RcIcon } from '../../Icon';\\nimport { RcListItemSecondaryAction } from '../../List/ListItemSecondaryAction';\\nimport { RcListItemText } from '../../List/ListItemText';\\nimport { RcMenuItem } from '../../Menu';\\nimport { RcPaper } from '../../Paper';\\nimport { RcText } from '../../Text';\\nimport { RcTooltip } from '../../Tooltip';\\nimport { RcCollapse, RcFade, RcSlide } from '../../Transitions';\\nimport { RcDialDelete } from '../DialDelete';\\nimport { RcDialer } from '../Dialer';\\nimport { RcDialerPadSounds, RcDialPad } from '../DialPad';\\nimport { useDialKeyboard } from '../DialPad/utils/useDialKeyboard';\\nimport { RcDialTextField } from '../DialTextField';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Dialer',\\n  argTypes: {\\n    ...sortInDocTable<keyof DialerProps>([]),\\n    ...notControlInDocTable<keyof DialerProps>([\\n      'sounds',\\n      'control',\\n      'onChange',\\n    ]),\\n    ...notShowInDocTable<keyof DialerProps>([]),\\n  },\\n} as Meta;\\n\\ntype DialerProps = ComponentProps<typeof RcDialPad>;\\n\\nconst DialerWrapper = styled.div`\\n  width: 280px;\\n  margin: ${spacing(5)};\\n  overflow: hidden;\\n  box-shadow: ${shadows('16')};\\n  background: ${palette2('neutral', 'elevation')};\\n  border-radius: ${radius('xl')};\\n`;\\n\\nconst Header = styled.header`\\n  background-color: ${palette2('dialHeader', 'bg')};\\n\\n  color: ${palette2('dialHeader', 'text')};\\n  padding: ${spacing(0, 4)};\\n`;\\n\\nconst HeaderTitle = styled.div`\\n  display: flex;\\n  align-items: center;\\n  height: 36px;\\n`;\\n\\nconst Body = styled.main`\\n  position: relative;\\n  padding: ${spacing(0, 6, 6)};\\n`;\\n\\nconst TextFieldWrapper = styled.div<{ isHaveValue: boolean }>`\\n  display: flex;\\n  align-items: center;\\n  padding: ${spacing(1, 0, 3)};\\n\\n  ${RcDialTextField} {\\n    padding-left: ${({ isHaveValue }) => isHaveValue && spacing(6)};\\n\\n    margin: ${spacing(0, 3)};\\n    position: relative;\\n\\n    input {\\n      color: ${palette2('dialHeader', 'text')};\\n      caret-color: ${palette2('dialHeader', 'text')};\\n\\n      &::placeholder {\\n        color: ${palette2('dialHeader', 'textHint')};\\n        ${typography('subheading1')}\\n        ${flexCenterStyle};\\n        position: absolute;\\n        width: 100%;\\n        height: 100%;\\n      }\\n    }\\n  }\\n\\n  ${RcIconButton} {\\n    align-self: flex-start;\\n  }\\n`;\\n\\nconst customSelectInputClasses = RcClasses<RcSelectProps['InputProps']>(\\n  ['root'],\\n  'custom-select-input',\\n);\\n\\nconst BodyTop = styled.div`\\n  ${flexCenterStyle};\\n  padding-top: ${spacing(1.5)};\\n\\n  ${RcSelect} {\\n    width: auto;\\n\\n    .${customSelectInputClasses.root} {\\n      &,\\n      &:hover {\\n        background-color: transparent;\\n      }\\n    }\\n  }\\n`;\\n\\nconst BodyBottom = styled.div`\\n  ${flexCenterStyle};\\n  margin-top: ${spacing(6)};\\n\\n  && {\\n    ${RcIcon} {\\n      font-size: 28px;\\n    }\\n  }\\n`;\\n\\nconst SearchWrapper = styled.div`\\n  overflow: hidden;\\n  position: absolute;\\n  display: flex;\\n  flex-direction: column;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  background: ${palette2('neutral', 'elevation')};\\n\\n  ${RcListItemSecondaryAction} {\\n    ${flexWidth('88px')};\\n    justify-content: space-between;\\n  }\\n`;\\n\\nconst DialerActionIconButton = styled(RcIconButton)`\\n  position: absolute;\\n  right: 0;\\n  top: 0;\\n  margin-right: ${spacing(4)};\\n  transform: translateY(-50%);\\n  z-index: 1;\\n`;\\n\\nconst menus = [\\n  { id: 1, value: '(000) 000-0000' },\\n  { id: 2, value: '(000) 000-0000' },\\n  { id: 3, value: '(000) 000-0000' },\\n  { id: 4, value: '(000) 000-0000' },\\n];\\n\\nconst FullDialer: FunctionComponent<DialerProps> = ({ children, ...rest }) => {\\n  const [value, setValue] = useState('');\\n  const dialKeyboardProps = useDialKeyboard();\\n\\n  const isHaveValue = value.length > 0;\\n\\n  const inputRef = useRef<HTMLInputElement>(null);\\n\\n  const {\\n    optionItems,\\n    highlightedIndex,\\n    getToggleButtonProps,\\n    getTagListBoxProps,\\n    getMenuProps,\\n    getInputProps,\\n    getInputAriaProps,\\n    getLabelProps,\\n    getItemProps,\\n    isOpen,\\n    inputValue,\\n    changeHighlightedIndexReason,\\n    isKeepHighlightedIndex,\\n    // setHighlightedIndex,\\n    // keepHighlightedIndex,\\n    // closeMenu,\\n    // openMenu,\\n    // reset,\\n  } = useDownshift({\\n    inputRef,\\n    value: [],\\n    inputValue: value,\\n    options,\\n    freeSolo: true,\\n    keyToTags: ['-'],\\n    autoHighlight: true,\\n    addNoOptionItem: 'first',\\n    onChange: ([e]) => {\\n      // trigger action\\n      console.log('select item', e);\\n    },\\n    onInputChange: (e) => {\\n      console.log('inputChange', e);\\n      setValue(e || '');\\n    },\\n    filterOptions: RcDownshiftDefaultFilterOptions,\\n  });\\n\\n  const { onBlur, ...InputProps } = getInputProps();\\n\\n  return (\\n    <RcDialer {...rest}>\\n      <RcGlobalScrollBarStyle />\\n      <DialerWrapper>\\n        <Header>\\n          <HeaderTitle>\\n            <RcText variant=\\\"body1\\\" color=\\\"dialHeader.text\\\">\\n              New Call\\n            </RcText>\\n            <RcBox flex=\\\"1 1 auto\\\" />\\n            <RcIconButton\\n              variant=\\\"plain\\\"\\n              symbol={Minimize}\\n              size=\\\"small\\\"\\n              color=\\\"dialHeader.icon\\\"\\n            />\\n          </HeaderTitle>\\n          <TextFieldWrapper isHaveValue={isHaveValue}>\\n            <RcDialTextField\\n              inputRef={inputRef}\\n              InputLabelProps={getLabelProps()}\\n              InputProps={{\\n                inputComponent: RcDownshiftInput,\\n                ...(getTagListBoxProps() as any),\\n                ...InputProps,\\n              }}\\n              inputProps={{\\n                maxLength: 30,\\n                ...getInputAriaProps(),\\n              }}\\n              value={value}\\n              fullWidth\\n              align=\\\"center\\\"\\n              onChange={setValue}\\n              placeholder=\\\"Enter a number\\\"\\n            />\\n            {isHaveValue && (\\n              <RcDialDelete>\\n                <RcIconButton\\n                  symbol={Deletenumber}\\n                  data-sign=\\\"deleteButton\\\"\\n                  color=\\\"dialHeader.icon\\\"\\n                  title=\\\"delete\\\"\\n                  variant=\\\"plain\\\"\\n                  size=\\\"large\\\"\\n                />\\n              </RcDialDelete>\\n            )}\\n          </TextFieldWrapper>\\n        </Header>\\n        <Body>\\n          <BodyTop>\\n            <RcText color=\\\"neutral.f02\\\" variant=\\\"caption2\\\">\\n              Call from:\\n            </RcText>\\n            <RcSelect\\n              value={1}\\n              variant=\\\"box\\\"\\n              textVariant=\\\"caption1\\\"\\n              InputProps={{\\n                classes: customSelectInputClasses,\\n              }}\\n            >\\n              {menus.map((item) => (\\n                <RcMenuItem value={item.id} key={item.id}>\\n                  {item.value}\\n                </RcMenuItem>\\n              ))}\\n            </RcSelect>\\n          </BodyTop>\\n          <RcDialPad\\n            sounds={RcDialerPadSounds}\\n            getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\\n            {...dialKeyboardProps}\\n          />\\n          <BodyBottom>\\n            <RcIconButton\\n              color=\\\"success.b03\\\"\\n              symbol={Phone}\\n              size=\\\"xxlarge\\\"\\n              variant=\\\"contained\\\"\\n              elevation=\\\"0\\\"\\n              activeElevation=\\\"0\\\"\\n            />\\n          </BodyBottom>\\n\\n          <DialerActionIconButton\\n            variant=\\\"contained\\\"\\n            activeElevation=\\\"1\\\"\\n            color=\\\"neutral.elevation\\\"\\n            size=\\\"small\\\"\\n            symbol={isOpen ? DialerSvg : TimeBorder}\\n            {...getToggleButtonProps()}\\n          />\\n\\n          {isOpen && (\\n            <SearchWrapper>\\n              <div>\\n                <BodyTop>\\n                  <RcText color=\\\"neutral.f02\\\" variant=\\\"caption2\\\">\\n                    Call from:\\n                  </RcText>\\n                  <RcSelect\\n                    value={1}\\n                    variant=\\\"box\\\"\\n                    textVariant=\\\"caption1\\\"\\n                    InputProps={{\\n                      classes: customSelectInputClasses,\\n                    }}\\n                  >\\n                    {menus.map((item) => (\\n                      <RcMenuItem value={item.id} key={item.id}>\\n                        {item.value}\\n                      </RcMenuItem>\\n                    ))}\\n                  </RcSelect>\\n                </BodyTop>\\n              </div>\\n\\n              <RcBox flex=\\\"1 1 auto\\\">\\n                <RcSuggestionList\\n                  highlightedIndex={highlightedIndex}\\n                  options={optionItems}\\n                  // * you can custom render with render Option\\n                  inputValue={inputValue}\\n                  getItemProps={getItemProps}\\n                  getMenuProps={getMenuProps}\\n                  changeHighlightedIndexReason={changeHighlightedIndexReason}\\n                  isKeepHighlightedIndex={isKeepHighlightedIndex}\\n                  renderOption={(\\n                    {\\n                      label,\\n                      freeSolo,\\n                      id,\\n                      error,\\n                      unSelectable,\\n                      isSuggestion,\\n                      isError,\\n                      ...restProps\\n                    },\\n                    state,\\n                  ) => {\\n                    return (\\n                      <RcMenuItem\\n                        id={`${id}`}\\n                        component=\\\"div\\\"\\n                        selected={state.selected}\\n                        avatar={<RcAvatar src={avatar} size=\\\"small\\\" />}\\n                        {...restProps}\\n                      >\\n                        <RcListItemText primary={label} secondary=\\\"ext. 000\\\" />\\n                        <RcListItemSecondaryAction>\\n                          <RcIcon size=\\\"medium\\\" symbol={IncallBorder} />\\n                          2021/6/11\\n                        </RcListItemSecondaryAction>\\n                      </RcMenuItem>\\n                    );\\n                  }}\\n                />\\n              </RcBox>\\n            </SearchWrapper>\\n          )}\\n        </Body>\\n      </DialerWrapper>\\n    </RcDialer>\\n  );\\n};\\n\\nconst Wrapper = styled.div`\\n  width: 280px;\\n  resize: horizontal;\\n  overflow: hidden;\\n  box-shadow: ${shadows('16')};\\n\\n  ${RcDialTextField} {\\n    .${customSelectInputClasses.root} {\\n      padding: 1em;\\n    }\\n  }\\n`;\\n\\nconst SimpleDialer: FunctionComponent<DialerProps> = ({ ...args }) => {\\n  const [value, setValue] = useState('');\\n  const dialKeyboardProps = useDialKeyboard();\\n\\n  return (\\n    <RcDialer {...args}>\\n      <Wrapper>\\n        <RcDialTextField\\n          value={value}\\n          align=\\\"center\\\"\\n          fullWidth\\n          onChange={setValue}\\n          placeholder=\\\"Enter a number\\\"\\n          InputProps={{\\n            classes: customSelectInputClasses,\\n            endAdornment: value.length > 0 && (\\n              <RcDialDelete>\\n                <RcIconButton\\n                  symbol={Deletenumber}\\n                  data-sign=\\\"deleteButton\\\"\\n                  title=\\\"delete\\\"\\n                  variant=\\\"plain\\\"\\n                  size=\\\"large\\\"\\n                />\\n              </RcDialDelete>\\n            ),\\n          }}\\n        />\\n\\n        <RcDialPad\\n          sounds={RcDialerPadSounds}\\n          getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\\n          {...dialKeyboardProps}\\n        />\\n      </Wrapper>\\n    </RcDialer>\\n  );\\n};\\n\\nexport const Dialer: Story<DialerProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <SimpleDialer {...args} />;\\n};\\n\\nexport const DialerExamples: Story<DialerProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <FullDialer {...args} />;\\n};\\n\\nDialer.storyName = 'Dialer';\\n\\nDialer.args = {};\\n\\nDialer.argTypes = {\\n  ...notControlInDocTable<keyof DialerProps>([]),\\n};\\n\\nDialer.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst KeypadModeWrapper = styled.div`\\n  position: relative;\\n  width: 300px;\\n  height: 450px;\\n  overflow: hidden;\\n  border: 1px solid ${palette2('neutral', 'l03')};\\n`;\\n\\nconst Backdrop = styled.div`\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  background: ${setOpacity(palette2('neutral', 'b05'), '80')};\\n`;\\n\\nconst StyledCollapse = styled(RcCollapse)`\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  box-shadow: ${shadows('16')};\\n\\n  ${RcPaper} {\\n    border-radius: ${radius('zero')};\\n  }\\n\\n  ${RcDialTextField} {\\n    input {\\n      margin: ${spacing(0, 4)};\\n    }\\n  }\\n`;\\n\\nconst Footer = styled.div<{ open: boolean }>`\\n  display: flex;\\n  flex-direction: column;\\n  padding: ${({ open }) => {\\n    return open && spacing(2, 4, 0, 0);\\n  }};\\n  align-items: ${({ open }) => (open ? 'flex-end' : 'center')};\\n`;\\n\\nconst footHeight = 28;\\n\\nconst OpenWrapper = styled.div`\\n  ${flexCenterStyle}\\n\\n  height: ${footHeight}px;\\n  width: 100%;\\n  cursor: pointer;\\n`;\\n\\nexport const KeypadMode: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n  const [value, setValue] = useState('');\\n\\n  const inputRef = useRef<HTMLInputElement>(null);\\n  const openButtonRef = useRef<HTMLButtonElement>(null);\\n\\n  const [history, setHistory] = useState<\\n    { id: string; value: string; reason: UseLongPressEventReason }[]\\n  >([]);\\n\\n  return (\\n    <RcBox display=\\\"flex\\\">\\n      <KeypadModeWrapper\\n        onKeyDown={(e) => {\\n          if (e.key === 'Escape') {\\n            setOpen(false);\\n          }\\n        }}\\n      >\\n        <RcFade in={open}>\\n          <Backdrop onClick={() => setOpen(false)} />\\n        </RcFade>\\n        <StyledCollapse\\n          in={open}\\n          collapsedSize={`${footHeight}px`}\\n          onEntered={() => {\\n            inputRef.current?.focus();\\n          }}\\n          onExited={() => {\\n            setValue('');\\n            openButtonRef.current?.focus();\\n          }}\\n        >\\n          <RcPaper elevation={16}>\\n            <Footer open={open}>\\n              {open ? (\\n                <RcIconButton\\n                  variant=\\\"plain\\\"\\n                  size=\\\"medium\\\"\\n                  symbol={Close}\\n                  onClick={() => setOpen(!open)}\\n                  title=\\\"Close\\\"\\n                />\\n              ) : (\\n                <RcTooltip title=\\\"Open\\\">\\n                  <OpenWrapper onClick={() => setOpen(!open)}>\\n                    <RcIconButton\\n                      ref={openButtonRef}\\n                      variant=\\\"plain\\\"\\n                      size=\\\"xsmall\\\"\\n                      symbol={Keypad}\\n                    />\\n                  </OpenWrapper>\\n                </RcTooltip>\\n              )}\\n            </Footer>\\n\\n            <RcDialer>\\n              <RcDialTextField\\n                inputRef={inputRef}\\n                value={value}\\n                align=\\\"center\\\"\\n                fullWidth\\n                onlyAllowKeypadValue\\n                keypadMode\\n                onChange={setValue}\\n                onEmit={(newValue, reason) => {\\n                  console.log('Get value', newValue, reason);\\n                  setHistory(\\n                    [\\n                      { id: uniqueId('dial-'), value: newValue, reason },\\n                      ...history,\\n                    ].slice(0, 20),\\n                  );\\n                }}\\n                placeholder=\\\"Enter a number\\\"\\n              />\\n              <RcDialPad sounds={RcDialerPadSounds} />\\n            </RcDialer>\\n          </RcPaper>\\n        </StyledCollapse>\\n      </KeypadModeWrapper>\\n      <RcBox height=\\\"300px\\\" width=\\\"500px\\\" style={{ overflowX: 'hidden' }}>\\n        {history.map((x) => (\\n          <RcSlide in key={x.id} direction=\\\"left\\\">\\n            <RcText color=\\\"neutral.f06\\\">\\n              value: {x.value}, reason: {x.reason}\\n            </RcText>\\n          </RcSlide>\\n        ))}\\n      </RcBox>\\n    </RcBox>\\n  );\\n};\\n\\nKeypadMode.storyName = 'Keypad mode';\\n\\nKeypadMode.args = {};\\n\\nKeypadMode.argTypes = {};\\n\\nKeypadMode.parameters = {};\\n\",\"locationsMap\":{\"dialer\":{\"startLoc\":{\"col\":42,\"line\":467},\"endLoc\":{\"col\":1,\"line\":471},\"startBody\":{\"col\":42,\"line\":467},\"endBody\":{\"col\":1,\"line\":471}},\"dialer-examples\":{\"startLoc\":{\"col\":50,\"line\":473},\"endLoc\":{\"col\":1,\"line\":477},\"startBody\":{\"col\":50,\"line\":473},\"endBody\":{\"col\":1,\"line\":477}},\"keypad-mode\":{\"startLoc\":{\"col\":38,\"line\":550},\"endLoc\":{\"col\":1,\"line\":644},\"startBody\":{\"col\":38,\"line\":550},\"endBody\":{\"col\":1,\"line\":644}}}},},\n  title: '🚀 Cleanup Components/Dialer',\n  argTypes: {\n    ...sortInDocTable<keyof DialerProps>([]),\n    ...notControlInDocTable<keyof DialerProps>([\n      'sounds',\n      'control',\n      'onChange',\n    ]),\n    ...notShowInDocTable<keyof DialerProps>([]),\n  },\n} as Meta;\n\ntype DialerProps = ComponentProps<typeof RcDialPad>;\n\nconst DialerWrapper = styled.div`\n  width: 280px;\n  margin: ${spacing(5)};\n  overflow: hidden;\n  box-shadow: ${shadows('16')};\n  background: ${palette2('neutral', 'elevation')};\n  border-radius: ${radius('xl')};\n`;\n\nconst Header = styled.header`\n  background-color: ${palette2('dialHeader', 'bg')};\n\n  color: ${palette2('dialHeader', 'text')};\n  padding: ${spacing(0, 4)};\n`;\n\nconst HeaderTitle = styled.div`\n  display: flex;\n  align-items: center;\n  height: 36px;\n`;\n\nconst Body = styled.main`\n  position: relative;\n  padding: ${spacing(0, 6, 6)};\n`;\n\nconst TextFieldWrapper = styled.div<{ isHaveValue: boolean }>`\n  display: flex;\n  align-items: center;\n  padding: ${spacing(1, 0, 3)};\n\n  ${RcDialTextField} {\n    padding-left: ${({ isHaveValue }) => isHaveValue && spacing(6)};\n\n    margin: ${spacing(0, 3)};\n    position: relative;\n\n    input {\n      color: ${palette2('dialHeader', 'text')};\n      caret-color: ${palette2('dialHeader', 'text')};\n\n      &::placeholder {\n        color: ${palette2('dialHeader', 'textHint')};\n        ${typography('subheading1')}\n        ${flexCenterStyle};\n        position: absolute;\n        width: 100%;\n        height: 100%;\n      }\n    }\n  }\n\n  ${RcIconButton} {\n    align-self: flex-start;\n  }\n`;\n\nconst customSelectInputClasses = RcClasses<RcSelectProps['InputProps']>(\n  ['root'],\n  'custom-select-input',\n);\n\nconst BodyTop = styled.div`\n  ${flexCenterStyle};\n  padding-top: ${spacing(1.5)};\n\n  ${RcSelect} {\n    width: auto;\n\n    .${customSelectInputClasses.root} {\n      &,\n      &:hover {\n        background-color: transparent;\n      }\n    }\n  }\n`;\n\nconst BodyBottom = styled.div`\n  ${flexCenterStyle};\n  margin-top: ${spacing(6)};\n\n  && {\n    ${RcIcon} {\n      font-size: 28px;\n    }\n  }\n`;\n\nconst SearchWrapper = styled.div`\n  overflow: hidden;\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  background: ${palette2('neutral', 'elevation')};\n\n  ${RcListItemSecondaryAction} {\n    ${flexWidth('88px')};\n    justify-content: space-between;\n  }\n`;\n\nconst DialerActionIconButton = styled(RcIconButton)`\n  position: absolute;\n  right: 0;\n  top: 0;\n  margin-right: ${spacing(4)};\n  transform: translateY(-50%);\n  z-index: 1;\n`;\n\nconst menus = [\n  { id: 1, value: '(000) 000-0000' },\n  { id: 2, value: '(000) 000-0000' },\n  { id: 3, value: '(000) 000-0000' },\n  { id: 4, value: '(000) 000-0000' },\n];\n\nconst FullDialer: FunctionComponent<DialerProps> = ({ children, ...rest }) => {\n  const [value, setValue] = useState('');\n  const dialKeyboardProps = useDialKeyboard();\n\n  const isHaveValue = value.length > 0;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const {\n    optionItems,\n    highlightedIndex,\n    getToggleButtonProps,\n    getTagListBoxProps,\n    getMenuProps,\n    getInputProps,\n    getInputAriaProps,\n    getLabelProps,\n    getItemProps,\n    isOpen,\n    inputValue,\n    changeHighlightedIndexReason,\n    isKeepHighlightedIndex,\n    // setHighlightedIndex,\n    // keepHighlightedIndex,\n    // closeMenu,\n    // openMenu,\n    // reset,\n  } = useDownshift({\n    inputRef,\n    value: [],\n    inputValue: value,\n    options,\n    freeSolo: true,\n    keyToTags: ['-'],\n    autoHighlight: true,\n    addNoOptionItem: 'first',\n    onChange: ([e]) => {\n      // trigger action\n      console.log('select item', e);\n    },\n    onInputChange: (e) => {\n      console.log('inputChange', e);\n      setValue(e || '');\n    },\n    filterOptions: RcDownshiftDefaultFilterOptions,\n  });\n\n  const { onBlur, ...InputProps } = getInputProps();\n\n  return (\n    <RcDialer {...rest}>\n      <RcGlobalScrollBarStyle />\n      <DialerWrapper>\n        <Header>\n          <HeaderTitle>\n            <RcText variant=\"body1\" color=\"dialHeader.text\">\n              New Call\n            </RcText>\n            <RcBox flex=\"1 1 auto\" />\n            <RcIconButton\n              variant=\"plain\"\n              symbol={Minimize}\n              size=\"small\"\n              color=\"dialHeader.icon\"\n            />\n          </HeaderTitle>\n          <TextFieldWrapper isHaveValue={isHaveValue}>\n            <RcDialTextField\n              inputRef={inputRef}\n              InputLabelProps={getLabelProps()}\n              InputProps={{\n                inputComponent: RcDownshiftInput,\n                ...(getTagListBoxProps() as any),\n                ...InputProps,\n              }}\n              inputProps={{\n                maxLength: 30,\n                ...getInputAriaProps(),\n              }}\n              value={value}\n              fullWidth\n              align=\"center\"\n              onChange={setValue}\n              placeholder=\"Enter a number\"\n            />\n            {isHaveValue && (\n              <RcDialDelete>\n                <RcIconButton\n                  symbol={Deletenumber}\n                  data-sign=\"deleteButton\"\n                  color=\"dialHeader.icon\"\n                  title=\"delete\"\n                  variant=\"plain\"\n                  size=\"large\"\n                />\n              </RcDialDelete>\n            )}\n          </TextFieldWrapper>\n        </Header>\n        <Body>\n          <BodyTop>\n            <RcText color=\"neutral.f02\" variant=\"caption2\">\n              Call from:\n            </RcText>\n            <RcSelect\n              value={1}\n              variant=\"box\"\n              textVariant=\"caption1\"\n              InputProps={{\n                classes: customSelectInputClasses,\n              }}\n            >\n              {menus.map((item) => (\n                <RcMenuItem value={item.id} key={item.id}>\n                  {item.value}\n                </RcMenuItem>\n              ))}\n            </RcSelect>\n          </BodyTop>\n          <RcDialPad\n            sounds={RcDialerPadSounds}\n            getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\n            {...dialKeyboardProps}\n          />\n          <BodyBottom>\n            <RcIconButton\n              color=\"success.b03\"\n              symbol={Phone}\n              size=\"xxlarge\"\n              variant=\"contained\"\n              elevation=\"0\"\n              activeElevation=\"0\"\n            />\n          </BodyBottom>\n\n          <DialerActionIconButton\n            variant=\"contained\"\n            activeElevation=\"1\"\n            color=\"neutral.elevation\"\n            size=\"small\"\n            symbol={isOpen ? DialerSvg : TimeBorder}\n            {...getToggleButtonProps()}\n          />\n\n          {isOpen && (\n            <SearchWrapper>\n              <div>\n                <BodyTop>\n                  <RcText color=\"neutral.f02\" variant=\"caption2\">\n                    Call from:\n                  </RcText>\n                  <RcSelect\n                    value={1}\n                    variant=\"box\"\n                    textVariant=\"caption1\"\n                    InputProps={{\n                      classes: customSelectInputClasses,\n                    }}\n                  >\n                    {menus.map((item) => (\n                      <RcMenuItem value={item.id} key={item.id}>\n                        {item.value}\n                      </RcMenuItem>\n                    ))}\n                  </RcSelect>\n                </BodyTop>\n              </div>\n\n              <RcBox flex=\"1 1 auto\">\n                <RcSuggestionList\n                  highlightedIndex={highlightedIndex}\n                  options={optionItems}\n                  // * you can custom render with render Option\n                  inputValue={inputValue}\n                  getItemProps={getItemProps}\n                  getMenuProps={getMenuProps}\n                  changeHighlightedIndexReason={changeHighlightedIndexReason}\n                  isKeepHighlightedIndex={isKeepHighlightedIndex}\n                  renderOption={(\n                    {\n                      label,\n                      freeSolo,\n                      id,\n                      error,\n                      unSelectable,\n                      isSuggestion,\n                      isError,\n                      ...restProps\n                    },\n                    state,\n                  ) => {\n                    return (\n                      <RcMenuItem\n                        id={`${id}`}\n                        component=\"div\"\n                        selected={state.selected}\n                        avatar={<RcAvatar src={avatar} size=\"small\" />}\n                        {...restProps}\n                      >\n                        <RcListItemText primary={label} secondary=\"ext. 000\" />\n                        <RcListItemSecondaryAction>\n                          <RcIcon size=\"medium\" symbol={IncallBorder} />\n                          2021/6/11\n                        </RcListItemSecondaryAction>\n                      </RcMenuItem>\n                    );\n                  }}\n                />\n              </RcBox>\n            </SearchWrapper>\n          )}\n        </Body>\n      </DialerWrapper>\n    </RcDialer>\n  );\n};\n\nconst Wrapper = styled.div`\n  width: 280px;\n  resize: horizontal;\n  overflow: hidden;\n  box-shadow: ${shadows('16')};\n\n  ${RcDialTextField} {\n    .${customSelectInputClasses.root} {\n      padding: 1em;\n    }\n  }\n`;\n\nconst SimpleDialer: FunctionComponent<DialerProps> = ({ ...args }) => {\n  const [value, setValue] = useState('');\n  const dialKeyboardProps = useDialKeyboard();\n\n  return (\n    <RcDialer {...args}>\n      <Wrapper>\n        <RcDialTextField\n          value={value}\n          align=\"center\"\n          fullWidth\n          onChange={setValue}\n          placeholder=\"Enter a number\"\n          InputProps={{\n            classes: customSelectInputClasses,\n            endAdornment: value.length > 0 && (\n              <RcDialDelete>\n                <RcIconButton\n                  symbol={Deletenumber}\n                  data-sign=\"deleteButton\"\n                  title=\"delete\"\n                  variant=\"plain\"\n                  size=\"large\"\n                />\n              </RcDialDelete>\n            ),\n          }}\n        />\n\n        <RcDialPad\n          sounds={RcDialerPadSounds}\n          getDialPadButtonProps={(v) => ({ 'data-test-id': `${v}` })}\n          {...dialKeyboardProps}\n        />\n      </Wrapper>\n    </RcDialer>\n  );\n};\n\nexport const Dialer: Story<DialerProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  return <SimpleDialer {...args} />;\n};;\n\nexport const DialerExamples: Story<DialerProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  return <FullDialer {...args} />;\n};;\n\nDialer.storyName = 'Dialer';\n\nDialer.args = {};\n\nDialer.argTypes = {\n  ...notControlInDocTable<keyof DialerProps>([]),\n};\n\nDialer.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst KeypadModeWrapper = styled.div`\n  position: relative;\n  width: 300px;\n  height: 450px;\n  overflow: hidden;\n  border: 1px solid ${palette2('neutral', 'l03')};\n`;\n\nconst Backdrop = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  background: ${setOpacity(palette2('neutral', 'b05'), '80')};\n`;\n\nconst StyledCollapse = styled(RcCollapse)`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  box-shadow: ${shadows('16')};\n\n  ${RcPaper} {\n    border-radius: ${radius('zero')};\n  }\n\n  ${RcDialTextField} {\n    input {\n      margin: ${spacing(0, 4)};\n    }\n  }\n`;\n\nconst Footer = styled.div<{ open: boolean }>`\n  display: flex;\n  flex-direction: column;\n  padding: ${({ open }) => {\n    return open && spacing(2, 4, 0, 0);\n  }};\n  align-items: ${({ open }) => (open ? 'flex-end' : 'center')};\n`;\n\nconst footHeight = 28;\n\nconst OpenWrapper = styled.div`\n  ${flexCenterStyle}\n\n  height: ${footHeight}px;\n  width: 100%;\n  cursor: pointer;\n`;\n\nexport const KeypadMode: Story<any> = () => {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const openButtonRef = useRef<HTMLButtonElement>(null);\n\n  const [history, setHistory] = useState<\n    { id: string; value: string; reason: UseLongPressEventReason }[]\n  >([]);\n\n  return (\n    <RcBox display=\"flex\">\n      <KeypadModeWrapper\n        onKeyDown={(e) => {\n          if (e.key === 'Escape') {\n            setOpen(false);\n          }\n        }}\n      >\n        <RcFade in={open}>\n          <Backdrop onClick={() => setOpen(false)} />\n        </RcFade>\n        <StyledCollapse\n          in={open}\n          collapsedSize={`${footHeight}px`}\n          onEntered={() => {\n            inputRef.current?.focus();\n          }}\n          onExited={() => {\n            setValue('');\n            openButtonRef.current?.focus();\n          }}\n        >\n          <RcPaper elevation={16}>\n            <Footer open={open}>\n              {open ? (\n                <RcIconButton\n                  variant=\"plain\"\n                  size=\"medium\"\n                  symbol={Close}\n                  onClick={() => setOpen(!open)}\n                  title=\"Close\"\n                />\n              ) : (\n                <RcTooltip title=\"Open\">\n                  <OpenWrapper onClick={() => setOpen(!open)}>\n                    <RcIconButton\n                      ref={openButtonRef}\n                      variant=\"plain\"\n                      size=\"xsmall\"\n                      symbol={Keypad}\n                    />\n                  </OpenWrapper>\n                </RcTooltip>\n              )}\n            </Footer>\n\n            <RcDialer>\n              <RcDialTextField\n                inputRef={inputRef}\n                value={value}\n                align=\"center\"\n                fullWidth\n                onlyAllowKeypadValue\n                keypadMode\n                onChange={setValue}\n                onEmit={(newValue, reason) => {\n                  console.log('Get value', newValue, reason);\n                  setHistory(\n                    [\n                      { id: uniqueId('dial-'), value: newValue, reason },\n                      ...history,\n                    ].slice(0, 20),\n                  );\n                }}\n                placeholder=\"Enter a number\"\n              />\n              <RcDialPad sounds={RcDialerPadSounds} />\n            </RcDialer>\n          </RcPaper>\n        </StyledCollapse>\n      </KeypadModeWrapper>\n      <RcBox height=\"300px\" width=\"500px\" style={{ overflowX: 'hidden' }}>\n        {history.map((x) => (\n          <RcSlide in key={x.id} direction=\"left\">\n            <RcText color=\"neutral.f06\">\n              value: {x.value}, reason: {x.reason}\n            </RcText>\n          </RcSlide>\n        ))}\n      </RcBox>\n    </RcBox>\n  );\n};\n\nKeypadMode.storyName = 'Keypad mode';\n\nKeypadMode.args = {};\n\nKeypadMode.argTypes = {};\n\nKeypadMode.parameters = {};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, FunctionComponent, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  styled,\\n  useResponsiveContext,\\n  useResponsiveMatch,\\n} from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcBox } from '../../Box';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcDrawer } from '../../Drawer';\\nimport { RcFormControlLabel, RcSwitch } from '../../Forms';\\nimport { RcCheckbox } from '../../Forms/Checkbox';\\nimport { RcRadio } from '../../Forms/Radio';\\nimport { RcRadioGroup } from '../../Forms/RadioGroup';\\nimport { RcResponsive } from '../../Responsive';\\nimport { RcTypography } from '../../Typography';\\nimport { RcDialog, RcDialogContext, RcDialogProps } from '../Dialog';\\nimport { RcDialogActions } from '../DialogActions';\\nimport { RcDialogContent, RcDialogContentProps } from '../DialogContent';\\nimport { RcDialogContentText } from '../DialogContentText';\\nimport { RcDialogTitle } from '../DialogTitle';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Dialog/Dialog',\\n  component: RcDialog,\\n  excludeStories: /DialogExampleComponent|DialogWithResponsiveExample/,\\n  argTypes: {\\n    ...sortInDocTable<keyof DialogProps>([\\n      'size',\\n      'scroll',\\n      'fullWidth',\\n      'fullScreen',\\n    ]),\\n    ...notControlInDocTable<keyof DialogProps>([]),\\n    ...notShowInDocTable<keyof DialogProps>([]),\\n  },\\n} as Meta;\\n\\ntype DialogProps = ComponentProps<typeof RcDialog>;\\n\\nconst Content: FunctionComponent<DialogExampleComponentProps> = ({\\n  children,\\n  childrenSize,\\n  dividers,\\n  onClick,\\n}) => {\\n  const isSmall = childrenSize === 'small';\\n\\n  return (\\n    <>\\n      <RcDialogTitle>Title</RcDialogTitle>\\n      <RcDialogContent dividers={dividers}>\\n        <RcDialogContentText>some content</RcDialogContentText>\\n        {children}\\n      </RcDialogContent>\\n      <RcDialogActions>\\n        <RcButton fullWidth={isSmall} variant=\\\"text\\\" onClick={onClick as any}>\\n          Cancel\\n        </RcButton>\\n        <RcButton fullWidth={isSmall} onClick={onClick as any}>\\n          Ok\\n        </RcButton>\\n      </RcDialogActions>\\n    </>\\n  );\\n};\\n\\ntype DialogExampleComponentProps = Partial<\\n  DialogProps & Pick<RcDialogContentProps, 'dividers'>\\n>;\\n\\nexport const DialogExampleComponent: FunctionComponent<DialogExampleComponentProps> =\\n  (props) => {\\n    const { children, childrenSize, dividers, ...rest } = props;\\n    const [openState, setOpenState] = useState(false);\\n\\n    return (\\n      <>\\n        <RcButton\\n          type=\\\"button\\\"\\n          onClick={() => {\\n            setOpenState(true);\\n          }}\\n        >\\n          Open Children Modal\\n          {childrenSize && <span>(childrenSize: {childrenSize})</span>}\\n        </RcButton>\\n        <RcDialog\\n          childrenSize={childrenSize}\\n          {...rest}\\n          open={openState}\\n          onClose={(e: any, reason) => {\\n            setOpenState(false);\\n            console.log('onClose', e, reason);\\n          }}\\n          TransitionProps={{\\n            onExited: (e) => console.log('onExited', e),\\n          }}\\n        >\\n          <Content {...props} onClick={() => setOpenState(false)}>\\n            <RcCheckbox title=\\\"Go\\\" label=\\\"Do something\\\" />\\n            <RcCheckbox label=\\\"Custom Field\\\" />\\n            <RcRadioGroup defaultValue=\\\"mail\\\">\\n              <RcRadio label=\\\"mail\\\" value=\\\"mail\\\" />\\n              <RcRadio label=\\\"address\\\" value=\\\"address\\\" />\\n            </RcRadioGroup>\\n          </Content>\\n        </RcDialog>\\n      </>\\n    );\\n  };\\n\\nexport const Dialog: Story<DialogProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <DialogExampleComponent {...args} />;\\n};\\n\\nDialog.storyName = 'Dialog';\\n\\nDialog.args = {};\\n\\nDialog.argTypes = {\\n  ...notControlInDocTable<keyof DialogProps>([]),\\n};\\n\\nDialog.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/dialogs/#dialog',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst ResponsiveDialogExample = ({ ...args }) => {\\n  const [openState, setOpenState] = useState(false);\\n  const [enableRes, setEnableRes] = useState(false);\\n\\n  const bp = useResponsiveContext();\\n  const matchResult = useResponsiveMatch();\\n\\n  console.log(bp, matchResult);\\n  const { ltSM, xs, gtXS } = matchResult;\\n\\n  return (\\n    <>\\n      <RcButton\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setOpenState(true);\\n        }}\\n      >\\n        Open Responsive Dialog\\n      </RcButton>\\n      <RcDialog {...args} open={openState} fullScreen={ltSM}>\\n        <RcDialogTitle>{bp} Size</RcDialogTitle>\\n        <RcDialogContent>\\n          <RcTypography>try to resize screen</RcTypography>\\n          <RcFormControlLabel\\n            control={\\n              <RcSwitch\\n                name=\\\"enable component responsive\\\"\\n                value={enableRes}\\n                onChange={(evt, checked) => setEnableRes(checked)}\\n              />\\n            }\\n            label=\\\"Enable Comp Responsive\\\"\\n          />\\n          <RcRadioGroup row={enableRes && gtXS}>\\n            <RcRadio\\n              label={enableRes && gtXS ? 'horizontal radio' : 'vertical radio'}\\n            />\\n            <RcRadio\\n              label={enableRes && gtXS ? 'horizontal radio' : 'vertical radio'}\\n            />\\n          </RcRadioGroup>\\n        </RcDialogContent>\\n        <RcDialogActions\\n          direction={enableRes && xs ? 'vertical' : 'horizontal'}\\n        >\\n          <RcButton\\n            onClick={() => setOpenState(false)}\\n            color=\\\"danger.b04\\\"\\n            fullWidth={enableRes && xs}\\n          >\\n            Cancel\\n          </RcButton>\\n          <RcButton fullWidth={enableRes && xs}>OK</RcButton>\\n        </RcDialogActions>\\n      </RcDialog>\\n    </>\\n  );\\n};\\n\\nexport const DialogWithResponsiveExample: FunctionComponent<\\n  Partial<DialogProps>\\n> = ({ children, ...args }) => {\\n  return (\\n    <>\\n      <RcResponsive>\\n        <ResponsiveDialogExample {...args}>{children}</ResponsiveDialogExample>\\n      </RcResponsive>\\n    </>\\n  );\\n};\\n\\nexport const DialogWithResponsive: Story<DialogProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <DialogWithResponsiveExample {...args}>\\n      {children}\\n    </DialogWithResponsiveExample>\\n  );\\n};\\n\\nDialogWithResponsive.storyName = 'Dialog with responsive';\\n\\nDialogWithResponsive.args = {};\\n\\nDialogWithResponsive.argTypes = {\\n  ...notControlInDocTable<keyof DialogProps>([]),\\n};\\n\\nconst DrawerWrapper = styled.div`\\n  ${RcDialogContent} {\\n    max-height: 200px;\\n    overflow: auto;\\n  }\\n`;\\n\\nexport const DialogChildrenSizes: Story<DialogProps> = ({\\n  children,\\n  childrenSize: childrenSizeProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [dividers, setDividers] = useState(false);\\n  const [openState, setOpenState] = useState(false);\\n  const [mode, setMode] = useState('dialog');\\n  const [childrenSize, setChildrenSize] = useState(\\n    childrenSizeProp || 'medium',\\n  );\\n\\n  const handleClose: RcDialogProps['onClose'] = (e, reason) => {\\n    setOpenState(false);\\n    console.log('onClose', e, reason);\\n  };\\n\\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    setMode(event.target.value);\\n  };\\n\\n  const handleChildrenSize = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    setChildrenSize(event.target.value as any);\\n  };\\n\\n  const content = (\\n    <Content\\n      childrenSize={childrenSize}\\n      dividers={dividers}\\n      onClick={() => setOpenState(false)}\\n    >\\n      <RcDialogContentText gutterBottom={false}>\\n        Show in dialog\\n      </RcDialogContentText>\\n      <RcBox height=\\\"1000px\\\" />\\n      <RcDialogContentText gutterBottom={false}>bottom</RcDialogContentText>\\n    </Content>\\n  );\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        label=\\\"dividers\\\"\\n        value={dividers}\\n        onChange={() => setDividers(!dividers)}\\n      />\\n      <br />\\n      <RcRadioGroup row value={mode} onChange={handleChange}>\\n        <RcRadio label=\\\"dialog\\\" value=\\\"dialog\\\" />\\n        <RcRadio label=\\\"drawer\\\" value=\\\"drawer\\\" />\\n      </RcRadioGroup>\\n      <br />\\n      <RcRadioGroup row value={childrenSize} onChange={handleChildrenSize}>\\n        <RcRadio label=\\\"small\\\" value=\\\"small\\\" />\\n        <RcRadio label=\\\"medium\\\" value=\\\"medium\\\" />\\n      </RcRadioGroup>\\n      <br />\\n      <RcButton\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setOpenState(true);\\n        }}\\n      >\\n        Open Children Modal\\n      </RcButton>\\n      {mode === 'drawer' ? (\\n        <RcDrawer\\n          {...args}\\n          anchor=\\\"bottom\\\"\\n          radius=\\\"xl\\\"\\n          open={openState}\\n          onClose={handleClose}\\n        >\\n          <RcDialogContext.Provider value={{ size: childrenSize }}>\\n            <DrawerWrapper>{content}</DrawerWrapper>\\n          </RcDialogContext.Provider>\\n        </RcDrawer>\\n      ) : (\\n        <RcDialog\\n          {...args}\\n          childrenSize={childrenSize}\\n          open={openState}\\n          onClose={handleClose}\\n          TransitionProps={{\\n            onExited: (e) => console.log('onExited', e),\\n          }}\\n        >\\n          {content}\\n        </RcDialog>\\n      )}\\n    </>\\n  );\\n};\\n\\nDialogChildrenSizes.storyName = 'Dialog with different children sizes';\\n\\nDialogChildrenSizes.args = {};\\n\\nDialogChildrenSizes.argTypes = {\\n  ...notControlInDocTable<keyof DialogProps>([]),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DialogExampleComponent\":{\"startLoc\":{\"col\":2,\"line\":81},\"endLoc\":{\"col\":3,\"line\":119},\"startBody\":{\"col\":2,\"line\":81},\"endBody\":{\"col\":3,\"line\":119}},\"Dialog\":{\"startLoc\":{\"col\":42,\"line\":121},\"endLoc\":{\"col\":1,\"line\":125},\"startBody\":{\"col\":42,\"line\":121},\"endBody\":{\"col\":1,\"line\":125}},\"DialogWithResponsiveExample\":{\"startLoc\":{\"col\":4,\"line\":210},\"endLoc\":{\"col\":1,\"line\":218},\"startBody\":{\"col\":4,\"line\":210},\"endBody\":{\"col\":1,\"line\":218}},\"DialogWithResponsive\":{\"startLoc\":{\"col\":56,\"line\":220},\"endLoc\":{\"col\":1,\"line\":231},\"startBody\":{\"col\":56,\"line\":220},\"endBody\":{\"col\":1,\"line\":231}},\"DialogChildrenSizes\":{\"startLoc\":{\"col\":55,\"line\":248},\"endLoc\":{\"col\":1,\"line\":342},\"startBody\":{\"col\":55,\"line\":248},\"endBody\":{\"col\":1,\"line\":342}}};\n    \nimport React, { ComponentProps, FunctionComponent, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport {\n  styled,\n  useResponsiveContext,\n  useResponsiveMatch,\n} from '../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcBox } from '../../Box';\nimport { RcButton } from '../../Buttons/Button';\nimport { RcDrawer } from '../../Drawer';\nimport { RcFormControlLabel, RcSwitch } from '../../Forms';\nimport { RcCheckbox } from '../../Forms/Checkbox';\nimport { RcRadio } from '../../Forms/Radio';\nimport { RcRadioGroup } from '../../Forms/RadioGroup';\nimport { RcResponsive } from '../../Responsive';\nimport { RcTypography } from '../../Typography';\nimport { RcDialog, RcDialogContext, RcDialogProps } from '../Dialog';\nimport { RcDialogActions } from '../DialogActions';\nimport { RcDialogContent, RcDialogContentProps } from '../DialogContent';\nimport { RcDialogContentText } from '../DialogContentText';\nimport { RcDialogTitle } from '../DialogTitle';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, FunctionComponent, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  styled,\\n  useResponsiveContext,\\n  useResponsiveMatch,\\n} from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcBox } from '../../Box';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcDrawer } from '../../Drawer';\\nimport { RcFormControlLabel, RcSwitch } from '../../Forms';\\nimport { RcCheckbox } from '../../Forms/Checkbox';\\nimport { RcRadio } from '../../Forms/Radio';\\nimport { RcRadioGroup } from '../../Forms/RadioGroup';\\nimport { RcResponsive } from '../../Responsive';\\nimport { RcTypography } from '../../Typography';\\nimport { RcDialog, RcDialogContext, RcDialogProps } from '../Dialog';\\nimport { RcDialogActions } from '../DialogActions';\\nimport { RcDialogContent, RcDialogContentProps } from '../DialogContent';\\nimport { RcDialogContentText } from '../DialogContentText';\\nimport { RcDialogTitle } from '../DialogTitle';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Dialog/Dialog',\\n  component: RcDialog,\\n  excludeStories: /DialogExampleComponent|DialogWithResponsiveExample/,\\n  argTypes: {\\n    ...sortInDocTable<keyof DialogProps>([\\n      'size',\\n      'scroll',\\n      'fullWidth',\\n      'fullScreen',\\n    ]),\\n    ...notControlInDocTable<keyof DialogProps>([]),\\n    ...notShowInDocTable<keyof DialogProps>([]),\\n  },\\n} as Meta;\\n\\ntype DialogProps = ComponentProps<typeof RcDialog>;\\n\\nconst Content: FunctionComponent<DialogExampleComponentProps> = ({\\n  children,\\n  childrenSize,\\n  dividers,\\n  onClick,\\n}) => {\\n  const isSmall = childrenSize === 'small';\\n\\n  return (\\n    <>\\n      <RcDialogTitle>Title</RcDialogTitle>\\n      <RcDialogContent dividers={dividers}>\\n        <RcDialogContentText>some content</RcDialogContentText>\\n        {children}\\n      </RcDialogContent>\\n      <RcDialogActions>\\n        <RcButton fullWidth={isSmall} variant=\\\"text\\\" onClick={onClick as any}>\\n          Cancel\\n        </RcButton>\\n        <RcButton fullWidth={isSmall} onClick={onClick as any}>\\n          Ok\\n        </RcButton>\\n      </RcDialogActions>\\n    </>\\n  );\\n};\\n\\ntype DialogExampleComponentProps = Partial<\\n  DialogProps & Pick<RcDialogContentProps, 'dividers'>\\n>;\\n\\nexport const DialogExampleComponent: FunctionComponent<DialogExampleComponentProps> =\\n  (props) => {\\n    const { children, childrenSize, dividers, ...rest } = props;\\n    const [openState, setOpenState] = useState(false);\\n\\n    return (\\n      <>\\n        <RcButton\\n          type=\\\"button\\\"\\n          onClick={() => {\\n            setOpenState(true);\\n          }}\\n        >\\n          Open Children Modal\\n          {childrenSize && <span>(childrenSize: {childrenSize})</span>}\\n        </RcButton>\\n        <RcDialog\\n          childrenSize={childrenSize}\\n          {...rest}\\n          open={openState}\\n          onClose={(e: any, reason) => {\\n            setOpenState(false);\\n            console.log('onClose', e, reason);\\n          }}\\n          TransitionProps={{\\n            onExited: (e) => console.log('onExited', e),\\n          }}\\n        >\\n          <Content {...props} onClick={() => setOpenState(false)}>\\n            <RcCheckbox title=\\\"Go\\\" label=\\\"Do something\\\" />\\n            <RcCheckbox label=\\\"Custom Field\\\" />\\n            <RcRadioGroup defaultValue=\\\"mail\\\">\\n              <RcRadio label=\\\"mail\\\" value=\\\"mail\\\" />\\n              <RcRadio label=\\\"address\\\" value=\\\"address\\\" />\\n            </RcRadioGroup>\\n          </Content>\\n        </RcDialog>\\n      </>\\n    );\\n  };\\n\\nexport const Dialog: Story<DialogProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <DialogExampleComponent {...args} />;\\n};\\n\\nDialog.storyName = 'Dialog';\\n\\nDialog.args = {};\\n\\nDialog.argTypes = {\\n  ...notControlInDocTable<keyof DialogProps>([]),\\n};\\n\\nDialog.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/dialogs/#dialog',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst ResponsiveDialogExample = ({ ...args }) => {\\n  const [openState, setOpenState] = useState(false);\\n  const [enableRes, setEnableRes] = useState(false);\\n\\n  const bp = useResponsiveContext();\\n  const matchResult = useResponsiveMatch();\\n\\n  console.log(bp, matchResult);\\n  const { ltSM, xs, gtXS } = matchResult;\\n\\n  return (\\n    <>\\n      <RcButton\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setOpenState(true);\\n        }}\\n      >\\n        Open Responsive Dialog\\n      </RcButton>\\n      <RcDialog {...args} open={openState} fullScreen={ltSM}>\\n        <RcDialogTitle>{bp} Size</RcDialogTitle>\\n        <RcDialogContent>\\n          <RcTypography>try to resize screen</RcTypography>\\n          <RcFormControlLabel\\n            control={\\n              <RcSwitch\\n                name=\\\"enable component responsive\\\"\\n                value={enableRes}\\n                onChange={(evt, checked) => setEnableRes(checked)}\\n              />\\n            }\\n            label=\\\"Enable Comp Responsive\\\"\\n          />\\n          <RcRadioGroup row={enableRes && gtXS}>\\n            <RcRadio\\n              label={enableRes && gtXS ? 'horizontal radio' : 'vertical radio'}\\n            />\\n            <RcRadio\\n              label={enableRes && gtXS ? 'horizontal radio' : 'vertical radio'}\\n            />\\n          </RcRadioGroup>\\n        </RcDialogContent>\\n        <RcDialogActions\\n          direction={enableRes && xs ? 'vertical' : 'horizontal'}\\n        >\\n          <RcButton\\n            onClick={() => setOpenState(false)}\\n            color=\\\"danger.b04\\\"\\n            fullWidth={enableRes && xs}\\n          >\\n            Cancel\\n          </RcButton>\\n          <RcButton fullWidth={enableRes && xs}>OK</RcButton>\\n        </RcDialogActions>\\n      </RcDialog>\\n    </>\\n  );\\n};\\n\\nexport const DialogWithResponsiveExample: FunctionComponent<\\n  Partial<DialogProps>\\n> = ({ children, ...args }) => {\\n  return (\\n    <>\\n      <RcResponsive>\\n        <ResponsiveDialogExample {...args}>{children}</ResponsiveDialogExample>\\n      </RcResponsive>\\n    </>\\n  );\\n};\\n\\nexport const DialogWithResponsive: Story<DialogProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <DialogWithResponsiveExample {...args}>\\n      {children}\\n    </DialogWithResponsiveExample>\\n  );\\n};\\n\\nDialogWithResponsive.storyName = 'Dialog with responsive';\\n\\nDialogWithResponsive.args = {};\\n\\nDialogWithResponsive.argTypes = {\\n  ...notControlInDocTable<keyof DialogProps>([]),\\n};\\n\\nconst DrawerWrapper = styled.div`\\n  ${RcDialogContent} {\\n    max-height: 200px;\\n    overflow: auto;\\n  }\\n`;\\n\\nexport const DialogChildrenSizes: Story<DialogProps> = ({\\n  children,\\n  childrenSize: childrenSizeProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [dividers, setDividers] = useState(false);\\n  const [openState, setOpenState] = useState(false);\\n  const [mode, setMode] = useState('dialog');\\n  const [childrenSize, setChildrenSize] = useState(\\n    childrenSizeProp || 'medium',\\n  );\\n\\n  const handleClose: RcDialogProps['onClose'] = (e, reason) => {\\n    setOpenState(false);\\n    console.log('onClose', e, reason);\\n  };\\n\\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    setMode(event.target.value);\\n  };\\n\\n  const handleChildrenSize = (event: React.ChangeEvent<HTMLInputElement>) => {\\n    setChildrenSize(event.target.value as any);\\n  };\\n\\n  const content = (\\n    <Content\\n      childrenSize={childrenSize}\\n      dividers={dividers}\\n      onClick={() => setOpenState(false)}\\n    >\\n      <RcDialogContentText gutterBottom={false}>\\n        Show in dialog\\n      </RcDialogContentText>\\n      <RcBox height=\\\"1000px\\\" />\\n      <RcDialogContentText gutterBottom={false}>bottom</RcDialogContentText>\\n    </Content>\\n  );\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        label=\\\"dividers\\\"\\n        value={dividers}\\n        onChange={() => setDividers(!dividers)}\\n      />\\n      <br />\\n      <RcRadioGroup row value={mode} onChange={handleChange}>\\n        <RcRadio label=\\\"dialog\\\" value=\\\"dialog\\\" />\\n        <RcRadio label=\\\"drawer\\\" value=\\\"drawer\\\" />\\n      </RcRadioGroup>\\n      <br />\\n      <RcRadioGroup row value={childrenSize} onChange={handleChildrenSize}>\\n        <RcRadio label=\\\"small\\\" value=\\\"small\\\" />\\n        <RcRadio label=\\\"medium\\\" value=\\\"medium\\\" />\\n      </RcRadioGroup>\\n      <br />\\n      <RcButton\\n        type=\\\"button\\\"\\n        onClick={() => {\\n          setOpenState(true);\\n        }}\\n      >\\n        Open Children Modal\\n      </RcButton>\\n      {mode === 'drawer' ? (\\n        <RcDrawer\\n          {...args}\\n          anchor=\\\"bottom\\\"\\n          radius=\\\"xl\\\"\\n          open={openState}\\n          onClose={handleClose}\\n        >\\n          <RcDialogContext.Provider value={{ size: childrenSize }}>\\n            <DrawerWrapper>{content}</DrawerWrapper>\\n          </RcDialogContext.Provider>\\n        </RcDrawer>\\n      ) : (\\n        <RcDialog\\n          {...args}\\n          childrenSize={childrenSize}\\n          open={openState}\\n          onClose={handleClose}\\n          TransitionProps={{\\n            onExited: (e) => console.log('onExited', e),\\n          }}\\n        >\\n          {content}\\n        </RcDialog>\\n      )}\\n    </>\\n  );\\n};\\n\\nDialogChildrenSizes.storyName = 'Dialog with different children sizes';\\n\\nDialogChildrenSizes.args = {};\\n\\nDialogChildrenSizes.argTypes = {\\n  ...notControlInDocTable<keyof DialogProps>([]),\\n};\\n\",\"locationsMap\":{\"dialog-example-component\":{\"startLoc\":{\"col\":2,\"line\":81},\"endLoc\":{\"col\":3,\"line\":119},\"startBody\":{\"col\":2,\"line\":81},\"endBody\":{\"col\":3,\"line\":119}},\"dialog\":{\"startLoc\":{\"col\":42,\"line\":121},\"endLoc\":{\"col\":1,\"line\":125},\"startBody\":{\"col\":42,\"line\":121},\"endBody\":{\"col\":1,\"line\":125}},\"dialog-with-responsive-example\":{\"startLoc\":{\"col\":4,\"line\":210},\"endLoc\":{\"col\":1,\"line\":218},\"startBody\":{\"col\":4,\"line\":210},\"endBody\":{\"col\":1,\"line\":218}},\"dialog-with-responsive\":{\"startLoc\":{\"col\":56,\"line\":220},\"endLoc\":{\"col\":1,\"line\":231},\"startBody\":{\"col\":56,\"line\":220},\"endBody\":{\"col\":1,\"line\":231}},\"dialog-children-sizes\":{\"startLoc\":{\"col\":55,\"line\":248},\"endLoc\":{\"col\":1,\"line\":342},\"startBody\":{\"col\":55,\"line\":248},\"endBody\":{\"col\":1,\"line\":342}}}},},\n  title: '🚀 Cleanup Components/Dialog/Dialog',\n  component: RcDialog,\n  excludeStories: /DialogExampleComponent|DialogWithResponsiveExample/,\n  argTypes: {\n    ...sortInDocTable<keyof DialogProps>([\n      'size',\n      'scroll',\n      'fullWidth',\n      'fullScreen',\n    ]),\n    ...notControlInDocTable<keyof DialogProps>([]),\n    ...notShowInDocTable<keyof DialogProps>([]),\n  },\n} as Meta;\n\ntype DialogProps = ComponentProps<typeof RcDialog>;\n\nconst Content: FunctionComponent<DialogExampleComponentProps> = ({\n  children,\n  childrenSize,\n  dividers,\n  onClick,\n}) => {\n  const isSmall = childrenSize === 'small';\n\n  return (\n    <>\n      <RcDialogTitle>Title</RcDialogTitle>\n      <RcDialogContent dividers={dividers}>\n        <RcDialogContentText>some content</RcDialogContentText>\n        {children}\n      </RcDialogContent>\n      <RcDialogActions>\n        <RcButton fullWidth={isSmall} variant=\"text\" onClick={onClick as any}>\n          Cancel\n        </RcButton>\n        <RcButton fullWidth={isSmall} onClick={onClick as any}>\n          Ok\n        </RcButton>\n      </RcDialogActions>\n    </>\n  );\n};\n\ntype DialogExampleComponentProps = Partial<\n  DialogProps & Pick<RcDialogContentProps, 'dividers'>\n>;\n\nexport const DialogExampleComponent: FunctionComponent<DialogExampleComponentProps> =\n  (props) => {\n    const { children, childrenSize, dividers, ...rest } = props;\n    const [openState, setOpenState] = useState(false);\n\n    return (\n      <>\n        <RcButton\n          type=\"button\"\n          onClick={() => {\n            setOpenState(true);\n          }}\n        >\n          Open Children Modal\n          {childrenSize && <span>(childrenSize: {childrenSize})</span>}\n        </RcButton>\n        <RcDialog\n          childrenSize={childrenSize}\n          {...rest}\n          open={openState}\n          onClose={(e: any, reason) => {\n            setOpenState(false);\n            console.log('onClose', e, reason);\n          }}\n          TransitionProps={{\n            onExited: (e) => console.log('onExited', e),\n          }}\n        >\n          <Content {...props} onClick={() => setOpenState(false)}>\n            <RcCheckbox title=\"Go\" label=\"Do something\" />\n            <RcCheckbox label=\"Custom Field\" />\n            <RcRadioGroup defaultValue=\"mail\">\n              <RcRadio label=\"mail\" value=\"mail\" />\n              <RcRadio label=\"address\" value=\"address\" />\n            </RcRadioGroup>\n          </Content>\n        </RcDialog>\n      </>\n    );\n  };;\n\nexport const Dialog: Story<DialogProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  return <DialogExampleComponent {...args} />;\n};;\n\nDialog.storyName = 'Dialog';\n\nDialog.args = {};\n\nDialog.argTypes = {\n  ...notControlInDocTable<keyof DialogProps>([]),\n};\n\nDialog.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/dialogs/#dialog',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst ResponsiveDialogExample = ({ ...args }) => {\n  const [openState, setOpenState] = useState(false);\n  const [enableRes, setEnableRes] = useState(false);\n\n  const bp = useResponsiveContext();\n  const matchResult = useResponsiveMatch();\n\n  console.log(bp, matchResult);\n  const { ltSM, xs, gtXS } = matchResult;\n\n  return (\n    <>\n      <RcButton\n        type=\"button\"\n        onClick={() => {\n          setOpenState(true);\n        }}\n      >\n        Open Responsive Dialog\n      </RcButton>\n      <RcDialog {...args} open={openState} fullScreen={ltSM}>\n        <RcDialogTitle>{bp} Size</RcDialogTitle>\n        <RcDialogContent>\n          <RcTypography>try to resize screen</RcTypography>\n          <RcFormControlLabel\n            control={\n              <RcSwitch\n                name=\"enable component responsive\"\n                value={enableRes}\n                onChange={(evt, checked) => setEnableRes(checked)}\n              />\n            }\n            label=\"Enable Comp Responsive\"\n          />\n          <RcRadioGroup row={enableRes && gtXS}>\n            <RcRadio\n              label={enableRes && gtXS ? 'horizontal radio' : 'vertical radio'}\n            />\n            <RcRadio\n              label={enableRes && gtXS ? 'horizontal radio' : 'vertical radio'}\n            />\n          </RcRadioGroup>\n        </RcDialogContent>\n        <RcDialogActions\n          direction={enableRes && xs ? 'vertical' : 'horizontal'}\n        >\n          <RcButton\n            onClick={() => setOpenState(false)}\n            color=\"danger.b04\"\n            fullWidth={enableRes && xs}\n          >\n            Cancel\n          </RcButton>\n          <RcButton fullWidth={enableRes && xs}>OK</RcButton>\n        </RcDialogActions>\n      </RcDialog>\n    </>\n  );\n};\n\nexport const DialogWithResponsiveExample: FunctionComponent<\n  Partial<DialogProps>\n> = ({ children, ...args }) => {\n  return (\n    <>\n      <RcResponsive>\n        <ResponsiveDialogExample {...args}>{children}</ResponsiveDialogExample>\n      </RcResponsive>\n    </>\n  );\n};;\n\nexport const DialogWithResponsive: Story<DialogProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  return (\n    <DialogWithResponsiveExample {...args}>\n      {children}\n    </DialogWithResponsiveExample>\n  );\n};;\n\nDialogWithResponsive.storyName = 'Dialog with responsive';\n\nDialogWithResponsive.args = {};\n\nDialogWithResponsive.argTypes = {\n  ...notControlInDocTable<keyof DialogProps>([]),\n};\n\nconst DrawerWrapper = styled.div`\n  ${RcDialogContent} {\n    max-height: 200px;\n    overflow: auto;\n  }\n`;\n\nexport const DialogChildrenSizes: Story<DialogProps> = ({\n  children,\n  childrenSize: childrenSizeProp,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [dividers, setDividers] = useState(false);\n  const [openState, setOpenState] = useState(false);\n  const [mode, setMode] = useState('dialog');\n  const [childrenSize, setChildrenSize] = useState(\n    childrenSizeProp || 'medium',\n  );\n\n  const handleClose: RcDialogProps['onClose'] = (e, reason) => {\n    setOpenState(false);\n    console.log('onClose', e, reason);\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMode(event.target.value);\n  };\n\n  const handleChildrenSize = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChildrenSize(event.target.value as any);\n  };\n\n  const content = (\n    <Content\n      childrenSize={childrenSize}\n      dividers={dividers}\n      onClick={() => setOpenState(false)}\n    >\n      <RcDialogContentText gutterBottom={false}>\n        Show in dialog\n      </RcDialogContentText>\n      <RcBox height=\"1000px\" />\n      <RcDialogContentText gutterBottom={false}>bottom</RcDialogContentText>\n    </Content>\n  );\n\n  return (\n    <>\n      <RcSwitch\n        label=\"dividers\"\n        value={dividers}\n        onChange={() => setDividers(!dividers)}\n      />\n      <br />\n      <RcRadioGroup row value={mode} onChange={handleChange}>\n        <RcRadio label=\"dialog\" value=\"dialog\" />\n        <RcRadio label=\"drawer\" value=\"drawer\" />\n      </RcRadioGroup>\n      <br />\n      <RcRadioGroup row value={childrenSize} onChange={handleChildrenSize}>\n        <RcRadio label=\"small\" value=\"small\" />\n        <RcRadio label=\"medium\" value=\"medium\" />\n      </RcRadioGroup>\n      <br />\n      <RcButton\n        type=\"button\"\n        onClick={() => {\n          setOpenState(true);\n        }}\n      >\n        Open Children Modal\n      </RcButton>\n      {mode === 'drawer' ? (\n        <RcDrawer\n          {...args}\n          anchor=\"bottom\"\n          radius=\"xl\"\n          open={openState}\n          onClose={handleClose}\n        >\n          <RcDialogContext.Provider value={{ size: childrenSize }}>\n            <DrawerWrapper>{content}</DrawerWrapper>\n          </RcDialogContext.Provider>\n        </RcDrawer>\n      ) : (\n        <RcDialog\n          {...args}\n          childrenSize={childrenSize}\n          open={openState}\n          onClose={handleClose}\n          TransitionProps={{\n            onExited: (e) => console.log('onExited', e),\n          }}\n        >\n          {content}\n        </RcDialog>\n      )}\n    </>\n  );\n};\n\nDialogChildrenSizes.storyName = 'Dialog with different children sizes';\n\nDialogChildrenSizes.args = {};\n\nDialogChildrenSizes.argTypes = {\n  ...notControlInDocTable<keyof DialogProps>([]),\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, styled } from '../../../foundation';\\nimport { paletteChoice, switchToControlKnobs } from '../../../storybook';\\nimport { RcDivider } from '../Divider';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Divider',\\n  component: RcDivider,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    titleBgColor: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n  },\\n} as Meta;\\n\\nconst P = styled.p`\\n  padding: 10px;\\n  margin: 0;\\n  color: ${palette2('interactive', 'f01')};\\n`;\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n`;\\n\\ntype DividerProps = ComponentProps<typeof RcDivider>;\\n\\nexport const Divider: Story<DividerProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n  return (\\n    <Wrapper\\n      style={{\\n        flexDirection: args.vertical ? 'row' : 'column',\\n        height: args.vertical ? '3em' : 'auto',\\n      }}\\n    >\\n      <P>test test test test test</P>\\n      <RcDivider {...args} />\\n      <P>test test test test test</P>\\n      <RcDivider {...args} />\\n      <P>test test test test test</P>\\n      <RcDivider {...args} />\\n    </Wrapper>\\n  );\\n};\\n\\nDivider.args = {};\\n\\nDivider.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const DividerExamples: Story<DividerProps> = () => {\\n  return (\\n    <>\\n      <Wrapper\\n        style={{\\n          flexDirection: 'column',\\n        }}\\n      >\\n        <P>test test test test test</P>\\n        <RcDivider title=\\\"divider title\\\" />\\n        <P>test test test test test</P>\\n        <RcDivider title=\\\"divider title\\\" />\\n        <P>test test test test test</P>\\n        <RcDivider title=\\\"divider title\\\" />\\n      </Wrapper>\\n      <br />\\n      <Wrapper\\n        style={{\\n          flexDirection: 'row',\\n          height: '3em',\\n        }}\\n      >\\n        <P>test test test test test</P>\\n        <RcDivider vertical />\\n        <P>test test test test test</P>\\n        <RcDivider vertical />\\n        <P>test test test test test</P>\\n        <RcDivider vertical />\\n      </Wrapper>\\n    </>\\n  );\\n};\\n\\nDividerExamples.argTypes = {\\n  color: {\\n    control: {\\n      type: null,\\n    },\\n  },\\n  titleBgColor: {\\n    control: {\\n      type: null,\\n    },\\n  },\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Divider\":{\"startLoc\":{\"col\":44,\"line\":42},\"endLoc\":{\"col\":1,\"line\":59},\"startBody\":{\"col\":44,\"line\":42},\"endBody\":{\"col\":1,\"line\":59}},\"DividerExamples\":{\"startLoc\":{\"col\":52,\"line\":72},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":52,\"line\":72},\"endBody\":{\"col\":1,\"line\":103}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { palette2, styled } from '../../../foundation';\nimport { paletteChoice, switchToControlKnobs } from '../../../storybook';\nimport { RcDivider } from '../Divider';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, styled } from '../../../foundation';\\nimport { paletteChoice, switchToControlKnobs } from '../../../storybook';\\nimport { RcDivider } from '../Divider';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Divider',\\n  component: RcDivider,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    titleBgColor: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n  },\\n} as Meta;\\n\\nconst P = styled.p`\\n  padding: 10px;\\n  margin: 0;\\n  color: ${palette2('interactive', 'f01')};\\n`;\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n`;\\n\\ntype DividerProps = ComponentProps<typeof RcDivider>;\\n\\nexport const Divider: Story<DividerProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n  return (\\n    <Wrapper\\n      style={{\\n        flexDirection: args.vertical ? 'row' : 'column',\\n        height: args.vertical ? '3em' : 'auto',\\n      }}\\n    >\\n      <P>test test test test test</P>\\n      <RcDivider {...args} />\\n      <P>test test test test test</P>\\n      <RcDivider {...args} />\\n      <P>test test test test test</P>\\n      <RcDivider {...args} />\\n    </Wrapper>\\n  );\\n};\\n\\nDivider.args = {};\\n\\nDivider.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const DividerExamples: Story<DividerProps> = () => {\\n  return (\\n    <>\\n      <Wrapper\\n        style={{\\n          flexDirection: 'column',\\n        }}\\n      >\\n        <P>test test test test test</P>\\n        <RcDivider title=\\\"divider title\\\" />\\n        <P>test test test test test</P>\\n        <RcDivider title=\\\"divider title\\\" />\\n        <P>test test test test test</P>\\n        <RcDivider title=\\\"divider title\\\" />\\n      </Wrapper>\\n      <br />\\n      <Wrapper\\n        style={{\\n          flexDirection: 'row',\\n          height: '3em',\\n        }}\\n      >\\n        <P>test test test test test</P>\\n        <RcDivider vertical />\\n        <P>test test test test test</P>\\n        <RcDivider vertical />\\n        <P>test test test test test</P>\\n        <RcDivider vertical />\\n      </Wrapper>\\n    </>\\n  );\\n};\\n\\nDividerExamples.argTypes = {\\n  color: {\\n    control: {\\n      type: null,\\n    },\\n  },\\n  titleBgColor: {\\n    control: {\\n      type: null,\\n    },\\n  },\\n};\\n\",\"locationsMap\":{\"divider\":{\"startLoc\":{\"col\":44,\"line\":42},\"endLoc\":{\"col\":1,\"line\":59},\"startBody\":{\"col\":44,\"line\":42},\"endBody\":{\"col\":1,\"line\":59}},\"divider-examples\":{\"startLoc\":{\"col\":52,\"line\":72},\"endLoc\":{\"col\":1,\"line\":103},\"startBody\":{\"col\":52,\"line\":72},\"endBody\":{\"col\":1,\"line\":103}}}},},\n  title: '🚀 Cleanup Components/Divider',\n  component: RcDivider,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n    titleBgColor: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n  },\n} as Meta;\n\nconst P = styled.p`\n  padding: 10px;\n  margin: 0;\n  color: ${palette2('interactive', 'f01')};\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\ntype DividerProps = ComponentProps<typeof RcDivider>;\n\nexport const Divider: Story<DividerProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n  return (\n    <Wrapper\n      style={{\n        flexDirection: args.vertical ? 'row' : 'column',\n        height: args.vertical ? '3em' : 'auto',\n      }}\n    >\n      <P>test test test test test</P>\n      <RcDivider {...args} />\n      <P>test test test test test</P>\n      <RcDivider {...args} />\n      <P>test test test test test</P>\n      <RcDivider {...args} />\n    </Wrapper>\n  );\n};;\n\nDivider.args = {};\n\nDivider.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nexport const DividerExamples: Story<DividerProps> = () => {\n  return (\n    <>\n      <Wrapper\n        style={{\n          flexDirection: 'column',\n        }}\n      >\n        <P>test test test test test</P>\n        <RcDivider title=\"divider title\" />\n        <P>test test test test test</P>\n        <RcDivider title=\"divider title\" />\n        <P>test test test test test</P>\n        <RcDivider title=\"divider title\" />\n      </Wrapper>\n      <br />\n      <Wrapper\n        style={{\n          flexDirection: 'row',\n          height: '3em',\n        }}\n      >\n        <P>test test test test test</P>\n        <RcDivider vertical />\n        <P>test test test test test</P>\n        <RcDivider vertical />\n        <P>test test test test test</P>\n        <RcDivider vertical />\n      </Wrapper>\n    </>\n  );\n};\n\nDividerExamples.argTypes = {\n  color: {\n    control: {\n      type: null,\n    },\n  },\n  titleBgColor: {\n    control: {\n      type: null,\n    },\n  },\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { forwardRef, FunctionComponent, useState } from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nimport { DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd';\\n\\nimport { select } from '@storybook/addon-knobs';\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  RcDragDropContext,\\n  RcDragDropContextProps,\\n  RcDraggable,\\n  RcDroppable,\\n} from '..';\\nimport { css, styled } from '../../../foundation';\\nimport {\\n  RcList,\\n  RcListItem,\\n  RcListItemProps,\\n  RcListSubheader,\\n} from '../../List';\\nimport { RcCollapse } from '../../Transitions';\\nimport { DataType, GroupType, initialData, ItemType } from './DnDExampleData';\\n\\nexport default {\\n  title:\\n    '🚀 Cleanup Components/DnD/Dnd Examples/Multiple list/Multiple DnD List(Portal)',\\n} as Meta;\\n\\nconst portal: HTMLElement = document.createElement('div');\\nportal.classList.add('my-super-cool-portal');\\n\\nif (!document.body) {\\n  throw new Error('body not ready for portal creation!');\\n}\\n\\ndocument.body.appendChild(portal);\\n\\ntype StyledListItemProps = RcListItemProps & { inPortal: boolean };\\n\\nconst _StyledListItem = forwardRef<any, StyledListItemProps>(\\n  ({ inPortal, ...rest }, ref) => {\\n    return <RcListItem {...rest} ref={ref} />;\\n  },\\n);\\n\\nconst StyledListItem = styled(_StyledListItem)`\\n  position: relative;\\n  ${({ inPortal }) =>\\n    inPortal\\n      ? css`\\n          & ::after {\\n            position: absolute;\\n            background: lightgreen;\\n            left: none;\\n            top: none;\\n            bottom: 0;\\n            right: 0;\\n            content: 'in portal';\\n          }\\n        `\\n      : ''}\\n`;\\n\\nconst PortalAwareListItem: FunctionComponent<{\\n  provider: DraggableProvided;\\n  snapshot: DraggableStateSnapshot;\\n}> = (props) => {\\n  const { provider, snapshot, children } = props;\\n\\n  const usePortal: boolean = snapshot.isDragging;\\n\\n  const child = (\\n    <StyledListItem\\n      ref={provider.innerRef}\\n      {...provider.draggableProps}\\n      {...provider.dragHandleProps}\\n      inPortal={usePortal}\\n    >\\n      {children}\\n    </StyledListItem>\\n  );\\n\\n  if (!usePortal) {\\n    return <>{child}</>;\\n  }\\n\\n  // if dragging - put the item in a portal\\n  return ReactDOM.createPortal(child, portal);\\n};\\n\\ntype StyledGroupProps = {\\n  inPortal: boolean;\\n};\\n\\nconst StyledGroup = styled.div<StyledGroupProps>`\\n  position: relative;\\n\\n  ${({ inPortal }) =>\\n    inPortal\\n      ? css`\\n          & > ::after {\\n            position: absolute;\\n            background: lightgreen;\\n            left: none;\\n            top: none;\\n            bottom: 0;\\n            right: 0;\\n            content: 'in portal';\\n          }\\n        `\\n      : ''}\\n`;\\n\\nconst PortalAwareGroup: FunctionComponent<{\\n  provider: DraggableProvided;\\n  snapshot: DraggableStateSnapshot;\\n}> = (props) => {\\n  const { provider, snapshot, children } = props;\\n\\n  const usePortal: boolean = snapshot.isDragging;\\n\\n  const child = (\\n    <StyledGroup\\n      ref={provider.innerRef}\\n      {...provider.draggableProps}\\n      {...provider.dragHandleProps}\\n      inPortal={usePortal}\\n    >\\n      {children}\\n    </StyledGroup>\\n  );\\n\\n  if (!usePortal) {\\n    return <>{child}</>;\\n  }\\n\\n  // if dragging - put the item in a portal\\n  return ReactDOM.createPortal(child, portal);\\n};\\n\\nconst Item: FunctionComponent<{\\n  item: ItemType;\\n  index: number;\\n}> = (props) => {\\n  return (\\n    <RcDraggable draggableId={props.item.id} index={props.index}>\\n      {(provider, snapshot) => {\\n        return (\\n          <PortalAwareListItem provider={provider} snapshot={snapshot}>\\n            {props.item.content}\\n          </PortalAwareListItem>\\n        );\\n      }}\\n    </RcDraggable>\\n  );\\n};\\nconst Items: FunctionComponent<{\\n  items: ItemType[];\\n}> = (props) => {\\n  return (\\n    <>\\n      {props.items.map((item, index) => (\\n        <Item key={item.id} item={item} index={index} />\\n      ))}\\n    </>\\n  );\\n};\\n\\nconst Group: FunctionComponent<{\\n  group: GroupType;\\n  items: ItemType[];\\n  index: number;\\n}> = (props) => {\\n  return (\\n    <RcDraggable\\n      draggableId={props.group.id}\\n      index={props.index}\\n      classes={{\\n        root: 'my-custom-root',\\n        isDragging: 'my-custom-dragging',\\n      }}\\n    >\\n      {(provider, snapshot) => (\\n        <PortalAwareGroup provider={provider} snapshot={snapshot}>\\n          <RcListSubheader disableSticky {...provider.dragHandleProps}>\\n            {props.group.title}\\n          </RcListSubheader>\\n          <RcCollapse in timeout=\\\"auto\\\" unmountOnExit>\\n            <RcDroppable\\n              droppableId={props.group.id}\\n              direction=\\\"vertical\\\"\\n              type=\\\"items\\\"\\n            >\\n              {(provider) => {\\n                return (\\n                  <RcList\\n                    innerRef={provider.innerRef}\\n                    {...provider.droppableProps}\\n                    style={{ minHeight: '1px' }}\\n                  >\\n                    <Items items={props.items} />\\n                    {provider.placeholder}\\n                  </RcList>\\n                );\\n              }}\\n            </RcDroppable>\\n          </RcCollapse>\\n        </PortalAwareGroup>\\n      )}\\n    </RcDraggable>\\n  );\\n};\\nconst Groups: FunctionComponent<DataType> = (props) => {\\n  return (\\n    <>\\n      {props.groupOrder.map((groupId, index) => {\\n        const group = props.groups[groupId];\\n        const items = group.itemIds.map((itemsId) => props.items[itemsId]);\\n        return (\\n          <Group key={group.id} group={group} items={items} index={index} />\\n        );\\n      })}\\n    </>\\n  );\\n};\\n\\nexport const DnDListPortal: Story<{}> = () => {\\n  const [data, setData] = useState(initialData);\\n\\n  const direction = select(\\n    'direction',\\n    {\\n      vertical: 'vertical',\\n      horizontal: 'horizontal',\\n    },\\n    'vertical',\\n  );\\n\\n  const handleDragEnd: RcDragDropContextProps['onDragEnd'] = (result) => {\\n    const { destination, source, draggableId, type } = result;\\n\\n    if (!destination) {\\n      return;\\n    }\\n\\n    if (\\n      destination.droppableId === source.droppableId &&\\n      destination.index === source.index\\n    ) {\\n      return;\\n    }\\n\\n    if (type === 'groups') {\\n      const newGroupOrder = Array.from(data.groupOrder);\\n      newGroupOrder.splice(source.index, 1);\\n      newGroupOrder.splice(destination.index, 0, draggableId);\\n\\n      const newState = {\\n        ...data,\\n        groupOrder: newGroupOrder,\\n      };\\n      setData(newState);\\n      return;\\n    }\\n\\n    const start = data.groups[source.droppableId];\\n    const finish = data.groups[destination.droppableId];\\n\\n    if (start === finish) {\\n      const group = data.groups[source.droppableId];\\n      const newItemIds = Array.from(group.itemIds);\\n      newItemIds.splice(source.index, 1);\\n      newItemIds.splice(destination.index, 0, draggableId);\\n\\n      const newGroup = {\\n        ...group,\\n        itemIds: newItemIds,\\n      };\\n\\n      const newState = {\\n        ...data,\\n        groups: {\\n          ...data.groups,\\n          [newGroup.id]: newGroup,\\n        },\\n      };\\n\\n      setData(newState);\\n      return;\\n    }\\n\\n    const startItemIds = Array.from(start.itemIds);\\n    startItemIds.splice(source.index, 1);\\n    const newStart = {\\n      ...start,\\n      itemIds: startItemIds,\\n    };\\n\\n    const finishItemIds = Array.from(finish.itemIds);\\n    finishItemIds.splice(destination.index, 0, draggableId);\\n    const newFinish = {\\n      ...finish,\\n      itemIds: finishItemIds,\\n    };\\n\\n    const newState = {\\n      ...data,\\n      groups: {\\n        ...data.groups,\\n        [newStart.id]: newStart,\\n        [newFinish.id]: newFinish,\\n      },\\n    };\\n    setData(newState);\\n  };\\n\\n  return (\\n    <div\\n      style={{\\n        display: 'flex',\\n        left: '80px',\\n        top: '20px',\\n        transform: 'translate3d(0,0,0)',\\n      }}\\n    >\\n      <RcDragDropContext onDragEnd={handleDragEnd}>\\n        <RcDroppable\\n          droppableId=\\\"all-groups\\\"\\n          direction={direction}\\n          type=\\\"groups\\\"\\n        >\\n          {(provider) => (\\n            <div\\n              {...provider.droppableProps}\\n              ref={provider.innerRef}\\n              style={{\\n                display: 'flex',\\n                flexDirection: direction === 'vertical' ? 'column' : 'row',\\n              }}\\n            >\\n              <Groups\\n                groups={data.groups}\\n                groupOrder={data.groupOrder}\\n                items={data.items}\\n              />\\n              {provider.placeholder}\\n            </div>\\n          )}\\n        </RcDroppable>\\n      </RcDragDropContext>\\n    </div>\\n  );\\n};\\n\\nDnDListPortal.args = {};\\nDnDListPortal.storyName = 'Multiple DnD List(Portal)';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DnDListPortal\":{\"startLoc\":{\"col\":40,\"line\":228},\"endLoc\":{\"col\":1,\"line\":354},\"startBody\":{\"col\":40,\"line\":228},\"endBody\":{\"col\":1,\"line\":354}}};\n    \nimport React, { forwardRef, FunctionComponent, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd';\n\nimport { select } from '@storybook/addon-knobs';\nimport { Meta, Story } from '@storybook/react';\n\nimport {\n  RcDragDropContext,\n  RcDragDropContextProps,\n  RcDraggable,\n  RcDroppable,\n} from '..';\nimport { css, styled } from '../../../foundation';\nimport {\n  RcList,\n  RcListItem,\n  RcListItemProps,\n  RcListSubheader,\n} from '../../List';\nimport { RcCollapse } from '../../Transitions';\nimport { DataType, GroupType, initialData, ItemType } from './DnDExampleData';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { forwardRef, FunctionComponent, useState } from 'react';\\nimport ReactDOM from 'react-dom';\\n\\nimport { DraggableProvided, DraggableStateSnapshot } from 'react-beautiful-dnd';\\n\\nimport { select } from '@storybook/addon-knobs';\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  RcDragDropContext,\\n  RcDragDropContextProps,\\n  RcDraggable,\\n  RcDroppable,\\n} from '..';\\nimport { css, styled } from '../../../foundation';\\nimport {\\n  RcList,\\n  RcListItem,\\n  RcListItemProps,\\n  RcListSubheader,\\n} from '../../List';\\nimport { RcCollapse } from '../../Transitions';\\nimport { DataType, GroupType, initialData, ItemType } from './DnDExampleData';\\n\\nexport default {\\n  title:\\n    '🚀 Cleanup Components/DnD/Dnd Examples/Multiple list/Multiple DnD List(Portal)',\\n} as Meta;\\n\\nconst portal: HTMLElement = document.createElement('div');\\nportal.classList.add('my-super-cool-portal');\\n\\nif (!document.body) {\\n  throw new Error('body not ready for portal creation!');\\n}\\n\\ndocument.body.appendChild(portal);\\n\\ntype StyledListItemProps = RcListItemProps & { inPortal: boolean };\\n\\nconst _StyledListItem = forwardRef<any, StyledListItemProps>(\\n  ({ inPortal, ...rest }, ref) => {\\n    return <RcListItem {...rest} ref={ref} />;\\n  },\\n);\\n\\nconst StyledListItem = styled(_StyledListItem)`\\n  position: relative;\\n  ${({ inPortal }) =>\\n    inPortal\\n      ? css`\\n          & ::after {\\n            position: absolute;\\n            background: lightgreen;\\n            left: none;\\n            top: none;\\n            bottom: 0;\\n            right: 0;\\n            content: 'in portal';\\n          }\\n        `\\n      : ''}\\n`;\\n\\nconst PortalAwareListItem: FunctionComponent<{\\n  provider: DraggableProvided;\\n  snapshot: DraggableStateSnapshot;\\n}> = (props) => {\\n  const { provider, snapshot, children } = props;\\n\\n  const usePortal: boolean = snapshot.isDragging;\\n\\n  const child = (\\n    <StyledListItem\\n      ref={provider.innerRef}\\n      {...provider.draggableProps}\\n      {...provider.dragHandleProps}\\n      inPortal={usePortal}\\n    >\\n      {children}\\n    </StyledListItem>\\n  );\\n\\n  if (!usePortal) {\\n    return <>{child}</>;\\n  }\\n\\n  // if dragging - put the item in a portal\\n  return ReactDOM.createPortal(child, portal);\\n};\\n\\ntype StyledGroupProps = {\\n  inPortal: boolean;\\n};\\n\\nconst StyledGroup = styled.div<StyledGroupProps>`\\n  position: relative;\\n\\n  ${({ inPortal }) =>\\n    inPortal\\n      ? css`\\n          & > ::after {\\n            position: absolute;\\n            background: lightgreen;\\n            left: none;\\n            top: none;\\n            bottom: 0;\\n            right: 0;\\n            content: 'in portal';\\n          }\\n        `\\n      : ''}\\n`;\\n\\nconst PortalAwareGroup: FunctionComponent<{\\n  provider: DraggableProvided;\\n  snapshot: DraggableStateSnapshot;\\n}> = (props) => {\\n  const { provider, snapshot, children } = props;\\n\\n  const usePortal: boolean = snapshot.isDragging;\\n\\n  const child = (\\n    <StyledGroup\\n      ref={provider.innerRef}\\n      {...provider.draggableProps}\\n      {...provider.dragHandleProps}\\n      inPortal={usePortal}\\n    >\\n      {children}\\n    </StyledGroup>\\n  );\\n\\n  if (!usePortal) {\\n    return <>{child}</>;\\n  }\\n\\n  // if dragging - put the item in a portal\\n  return ReactDOM.createPortal(child, portal);\\n};\\n\\nconst Item: FunctionComponent<{\\n  item: ItemType;\\n  index: number;\\n}> = (props) => {\\n  return (\\n    <RcDraggable draggableId={props.item.id} index={props.index}>\\n      {(provider, snapshot) => {\\n        return (\\n          <PortalAwareListItem provider={provider} snapshot={snapshot}>\\n            {props.item.content}\\n          </PortalAwareListItem>\\n        );\\n      }}\\n    </RcDraggable>\\n  );\\n};\\nconst Items: FunctionComponent<{\\n  items: ItemType[];\\n}> = (props) => {\\n  return (\\n    <>\\n      {props.items.map((item, index) => (\\n        <Item key={item.id} item={item} index={index} />\\n      ))}\\n    </>\\n  );\\n};\\n\\nconst Group: FunctionComponent<{\\n  group: GroupType;\\n  items: ItemType[];\\n  index: number;\\n}> = (props) => {\\n  return (\\n    <RcDraggable\\n      draggableId={props.group.id}\\n      index={props.index}\\n      classes={{\\n        root: 'my-custom-root',\\n        isDragging: 'my-custom-dragging',\\n      }}\\n    >\\n      {(provider, snapshot) => (\\n        <PortalAwareGroup provider={provider} snapshot={snapshot}>\\n          <RcListSubheader disableSticky {...provider.dragHandleProps}>\\n            {props.group.title}\\n          </RcListSubheader>\\n          <RcCollapse in timeout=\\\"auto\\\" unmountOnExit>\\n            <RcDroppable\\n              droppableId={props.group.id}\\n              direction=\\\"vertical\\\"\\n              type=\\\"items\\\"\\n            >\\n              {(provider) => {\\n                return (\\n                  <RcList\\n                    innerRef={provider.innerRef}\\n                    {...provider.droppableProps}\\n                    style={{ minHeight: '1px' }}\\n                  >\\n                    <Items items={props.items} />\\n                    {provider.placeholder}\\n                  </RcList>\\n                );\\n              }}\\n            </RcDroppable>\\n          </RcCollapse>\\n        </PortalAwareGroup>\\n      )}\\n    </RcDraggable>\\n  );\\n};\\nconst Groups: FunctionComponent<DataType> = (props) => {\\n  return (\\n    <>\\n      {props.groupOrder.map((groupId, index) => {\\n        const group = props.groups[groupId];\\n        const items = group.itemIds.map((itemsId) => props.items[itemsId]);\\n        return (\\n          <Group key={group.id} group={group} items={items} index={index} />\\n        );\\n      })}\\n    </>\\n  );\\n};\\n\\nexport const DnDListPortal: Story<{}> = () => {\\n  const [data, setData] = useState(initialData);\\n\\n  const direction = select(\\n    'direction',\\n    {\\n      vertical: 'vertical',\\n      horizontal: 'horizontal',\\n    },\\n    'vertical',\\n  );\\n\\n  const handleDragEnd: RcDragDropContextProps['onDragEnd'] = (result) => {\\n    const { destination, source, draggableId, type } = result;\\n\\n    if (!destination) {\\n      return;\\n    }\\n\\n    if (\\n      destination.droppableId === source.droppableId &&\\n      destination.index === source.index\\n    ) {\\n      return;\\n    }\\n\\n    if (type === 'groups') {\\n      const newGroupOrder = Array.from(data.groupOrder);\\n      newGroupOrder.splice(source.index, 1);\\n      newGroupOrder.splice(destination.index, 0, draggableId);\\n\\n      const newState = {\\n        ...data,\\n        groupOrder: newGroupOrder,\\n      };\\n      setData(newState);\\n      return;\\n    }\\n\\n    const start = data.groups[source.droppableId];\\n    const finish = data.groups[destination.droppableId];\\n\\n    if (start === finish) {\\n      const group = data.groups[source.droppableId];\\n      const newItemIds = Array.from(group.itemIds);\\n      newItemIds.splice(source.index, 1);\\n      newItemIds.splice(destination.index, 0, draggableId);\\n\\n      const newGroup = {\\n        ...group,\\n        itemIds: newItemIds,\\n      };\\n\\n      const newState = {\\n        ...data,\\n        groups: {\\n          ...data.groups,\\n          [newGroup.id]: newGroup,\\n        },\\n      };\\n\\n      setData(newState);\\n      return;\\n    }\\n\\n    const startItemIds = Array.from(start.itemIds);\\n    startItemIds.splice(source.index, 1);\\n    const newStart = {\\n      ...start,\\n      itemIds: startItemIds,\\n    };\\n\\n    const finishItemIds = Array.from(finish.itemIds);\\n    finishItemIds.splice(destination.index, 0, draggableId);\\n    const newFinish = {\\n      ...finish,\\n      itemIds: finishItemIds,\\n    };\\n\\n    const newState = {\\n      ...data,\\n      groups: {\\n        ...data.groups,\\n        [newStart.id]: newStart,\\n        [newFinish.id]: newFinish,\\n      },\\n    };\\n    setData(newState);\\n  };\\n\\n  return (\\n    <div\\n      style={{\\n        display: 'flex',\\n        left: '80px',\\n        top: '20px',\\n        transform: 'translate3d(0,0,0)',\\n      }}\\n    >\\n      <RcDragDropContext onDragEnd={handleDragEnd}>\\n        <RcDroppable\\n          droppableId=\\\"all-groups\\\"\\n          direction={direction}\\n          type=\\\"groups\\\"\\n        >\\n          {(provider) => (\\n            <div\\n              {...provider.droppableProps}\\n              ref={provider.innerRef}\\n              style={{\\n                display: 'flex',\\n                flexDirection: direction === 'vertical' ? 'column' : 'row',\\n              }}\\n            >\\n              <Groups\\n                groups={data.groups}\\n                groupOrder={data.groupOrder}\\n                items={data.items}\\n              />\\n              {provider.placeholder}\\n            </div>\\n          )}\\n        </RcDroppable>\\n      </RcDragDropContext>\\n    </div>\\n  );\\n};\\n\\nDnDListPortal.args = {};\\nDnDListPortal.storyName = 'Multiple DnD List(Portal)';\\n\",\"locationsMap\":{\"dn-d-list-portal\":{\"startLoc\":{\"col\":40,\"line\":228},\"endLoc\":{\"col\":1,\"line\":354},\"startBody\":{\"col\":40,\"line\":228},\"endBody\":{\"col\":1,\"line\":354}}}},},\n  title:\n    '🚀 Cleanup Components/DnD/Dnd Examples/Multiple list/Multiple DnD List(Portal)',\n} as Meta;\n\nconst portal: HTMLElement = document.createElement('div');\nportal.classList.add('my-super-cool-portal');\n\nif (!document.body) {\n  throw new Error('body not ready for portal creation!');\n}\n\ndocument.body.appendChild(portal);\n\ntype StyledListItemProps = RcListItemProps & { inPortal: boolean };\n\nconst _StyledListItem = forwardRef<any, StyledListItemProps>(\n  ({ inPortal, ...rest }, ref) => {\n    return <RcListItem {...rest} ref={ref} />;\n  },\n);\n\nconst StyledListItem = styled(_StyledListItem)`\n  position: relative;\n  ${({ inPortal }) =>\n    inPortal\n      ? css`\n          & ::after {\n            position: absolute;\n            background: lightgreen;\n            left: none;\n            top: none;\n            bottom: 0;\n            right: 0;\n            content: 'in portal';\n          }\n        `\n      : ''}\n`;\n\nconst PortalAwareListItem: FunctionComponent<{\n  provider: DraggableProvided;\n  snapshot: DraggableStateSnapshot;\n}> = (props) => {\n  const { provider, snapshot, children } = props;\n\n  const usePortal: boolean = snapshot.isDragging;\n\n  const child = (\n    <StyledListItem\n      ref={provider.innerRef}\n      {...provider.draggableProps}\n      {...provider.dragHandleProps}\n      inPortal={usePortal}\n    >\n      {children}\n    </StyledListItem>\n  );\n\n  if (!usePortal) {\n    return <>{child}</>;\n  }\n\n  // if dragging - put the item in a portal\n  return ReactDOM.createPortal(child, portal);\n};\n\ntype StyledGroupProps = {\n  inPortal: boolean;\n};\n\nconst StyledGroup = styled.div<StyledGroupProps>`\n  position: relative;\n\n  ${({ inPortal }) =>\n    inPortal\n      ? css`\n          & > ::after {\n            position: absolute;\n            background: lightgreen;\n            left: none;\n            top: none;\n            bottom: 0;\n            right: 0;\n            content: 'in portal';\n          }\n        `\n      : ''}\n`;\n\nconst PortalAwareGroup: FunctionComponent<{\n  provider: DraggableProvided;\n  snapshot: DraggableStateSnapshot;\n}> = (props) => {\n  const { provider, snapshot, children } = props;\n\n  const usePortal: boolean = snapshot.isDragging;\n\n  const child = (\n    <StyledGroup\n      ref={provider.innerRef}\n      {...provider.draggableProps}\n      {...provider.dragHandleProps}\n      inPortal={usePortal}\n    >\n      {children}\n    </StyledGroup>\n  );\n\n  if (!usePortal) {\n    return <>{child}</>;\n  }\n\n  // if dragging - put the item in a portal\n  return ReactDOM.createPortal(child, portal);\n};\n\nconst Item: FunctionComponent<{\n  item: ItemType;\n  index: number;\n}> = (props) => {\n  return (\n    <RcDraggable draggableId={props.item.id} index={props.index}>\n      {(provider, snapshot) => {\n        return (\n          <PortalAwareListItem provider={provider} snapshot={snapshot}>\n            {props.item.content}\n          </PortalAwareListItem>\n        );\n      }}\n    </RcDraggable>\n  );\n};\nconst Items: FunctionComponent<{\n  items: ItemType[];\n}> = (props) => {\n  return (\n    <>\n      {props.items.map((item, index) => (\n        <Item key={item.id} item={item} index={index} />\n      ))}\n    </>\n  );\n};\n\nconst Group: FunctionComponent<{\n  group: GroupType;\n  items: ItemType[];\n  index: number;\n}> = (props) => {\n  return (\n    <RcDraggable\n      draggableId={props.group.id}\n      index={props.index}\n      classes={{\n        root: 'my-custom-root',\n        isDragging: 'my-custom-dragging',\n      }}\n    >\n      {(provider, snapshot) => (\n        <PortalAwareGroup provider={provider} snapshot={snapshot}>\n          <RcListSubheader disableSticky {...provider.dragHandleProps}>\n            {props.group.title}\n          </RcListSubheader>\n          <RcCollapse in timeout=\"auto\" unmountOnExit>\n            <RcDroppable\n              droppableId={props.group.id}\n              direction=\"vertical\"\n              type=\"items\"\n            >\n              {(provider) => {\n                return (\n                  <RcList\n                    innerRef={provider.innerRef}\n                    {...provider.droppableProps}\n                    style={{ minHeight: '1px' }}\n                  >\n                    <Items items={props.items} />\n                    {provider.placeholder}\n                  </RcList>\n                );\n              }}\n            </RcDroppable>\n          </RcCollapse>\n        </PortalAwareGroup>\n      )}\n    </RcDraggable>\n  );\n};\nconst Groups: FunctionComponent<DataType> = (props) => {\n  return (\n    <>\n      {props.groupOrder.map((groupId, index) => {\n        const group = props.groups[groupId];\n        const items = group.itemIds.map((itemsId) => props.items[itemsId]);\n        return (\n          <Group key={group.id} group={group} items={items} index={index} />\n        );\n      })}\n    </>\n  );\n};\n\nexport const DnDListPortal: Story<{}> = () => {\n  const [data, setData] = useState(initialData);\n\n  const direction = select(\n    'direction',\n    {\n      vertical: 'vertical',\n      horizontal: 'horizontal',\n    },\n    'vertical',\n  );\n\n  const handleDragEnd: RcDragDropContextProps['onDragEnd'] = (result) => {\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === 'groups') {\n      const newGroupOrder = Array.from(data.groupOrder);\n      newGroupOrder.splice(source.index, 1);\n      newGroupOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...data,\n        groupOrder: newGroupOrder,\n      };\n      setData(newState);\n      return;\n    }\n\n    const start = data.groups[source.droppableId];\n    const finish = data.groups[destination.droppableId];\n\n    if (start === finish) {\n      const group = data.groups[source.droppableId];\n      const newItemIds = Array.from(group.itemIds);\n      newItemIds.splice(source.index, 1);\n      newItemIds.splice(destination.index, 0, draggableId);\n\n      const newGroup = {\n        ...group,\n        itemIds: newItemIds,\n      };\n\n      const newState = {\n        ...data,\n        groups: {\n          ...data.groups,\n          [newGroup.id]: newGroup,\n        },\n      };\n\n      setData(newState);\n      return;\n    }\n\n    const startItemIds = Array.from(start.itemIds);\n    startItemIds.splice(source.index, 1);\n    const newStart = {\n      ...start,\n      itemIds: startItemIds,\n    };\n\n    const finishItemIds = Array.from(finish.itemIds);\n    finishItemIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finish,\n      itemIds: finishItemIds,\n    };\n\n    const newState = {\n      ...data,\n      groups: {\n        ...data.groups,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    setData(newState);\n  };\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        left: '80px',\n        top: '20px',\n        transform: 'translate3d(0,0,0)',\n      }}\n    >\n      <RcDragDropContext onDragEnd={handleDragEnd}>\n        <RcDroppable\n          droppableId=\"all-groups\"\n          direction={direction}\n          type=\"groups\"\n        >\n          {(provider) => (\n            <div\n              {...provider.droppableProps}\n              ref={provider.innerRef}\n              style={{\n                display: 'flex',\n                flexDirection: direction === 'vertical' ? 'column' : 'row',\n              }}\n            >\n              <Groups\n                groups={data.groups}\n                groupOrder={data.groupOrder}\n                items={data.items}\n              />\n              {provider.placeholder}\n            </div>\n          )}\n        </RcDroppable>\n      </RcDragDropContext>\n    </div>\n  );\n};\n\nDnDListPortal.args = {};\nDnDListPortal.storyName = 'Multiple DnD List(Portal)';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {\\n  ComponentProps,\\n  useCallback,\\n  useEffect,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  combineProps,\\n  RcClasses,\\n  spacing,\\n  styled,\\n  useEventCallback,\\n} from '../../../foundation';\\nimport ArrowDown2 from '../../../icon/ArrowDown2';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcAvatar } from '../../Avatar';\\nimport { RcBox } from '../../Box';\\nimport { RcButton, RcIconButton } from '../../Buttons';\\nimport { RcChip } from '../../Chip';\\nimport { DialogExampleComponent } from '../../Dialog/__stories__/Dialog.story';\\nimport { RcTextField } from '../../Forms/TextField';\\nimport { RcListItemText } from '../../List';\\nimport { RcMenuItem } from '../../Menu';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\nimport { RcDownshift, RcDownshiftProps, RcDownshiftRef } from '../Downshift';\\nimport {\\n  DEFAULT_KEY_TO_CHIPS,\\n  RcDownshiftDefaultFilterOptions,\\n  RcDownshiftFilterOptions,\\n  RcDownshiftSelectedItem,\\n} from '../utils';\\nimport { DownshiftDoc } from './Downshift.doc';\\nimport { options } from './options';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Downshift',\\n  component: DownshiftDoc,\\n  argTypes: {\\n    ...sortInDocTable<keyof DownshiftProps>([\\n      'options',\\n      'value',\\n      'onChange',\\n      'onInputChange',\\n      'multiple',\\n      'freeSolo',\\n      'autoSelect',\\n      'getOptionLabel',\\n      'renderOption',\\n      'renderTags',\\n      'inputValue',\\n      'label',\\n      'placeholder',\\n      'action',\\n      'toggleButton',\\n      'keyToTags',\\n      'maxFreeSolo',\\n      'onMaxFreeSolo',\\n      'onKeyDown',\\n      'disabled',\\n      'error',\\n      'defaultIsOpen',\\n      'initialIsOpen',\\n      'ToggleButtonProps',\\n      'PopperProps',\\n    ]),\\n    ...notControlInDocTable<keyof DownshiftProps>([]),\\n    ...notShowInDocTable<keyof DownshiftProps>([\\n      'style',\\n      'onSelectChange',\\n      'itemToString',\\n      'keyToChips',\\n      'limitOfFreeChips',\\n      'suggestionItems',\\n      'messageRef',\\n      'MenuItem',\\n      'inputLabel',\\n      'nameError',\\n      'maxLength',\\n      'InputItem',\\n      'emailError',\\n      'autoSwitchEmail',\\n      'enableFreeChips',\\n      'inputPlaceholder',\\n      'errorSelectedItems',\\n      'enableAutoTransform',\\n      'allowPlainHelperText',\\n      'TextFieldProps',\\n      'selectedItems',\\n      'automationId',\\n      'minRowHeight',\\n    ]),\\n  },\\n  args: {\\n    keyToTags: DEFAULT_KEY_TO_CHIPS,\\n  },\\n} as Meta;\\n\\ntype DownshiftProps = Partial<ComponentProps<typeof RcDownshift>>;\\n\\nexport const Downshift: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const ref = useRef(null);\\n  const inputRef = useRef(null);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  useEffect(() => {\\n    console.log(ref, inputRef);\\n  }, []);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      ref={ref}\\n      options={options}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      onInputChange={(e) => {\\n        console.log('textChange', e);\\n      }}\\n      onMaxFreeSolo={(max) => {\\n        alert(`you get the max free sole count ${max}`);\\n      }}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      renderTags={(selectedItems, getTagProps) => {\\n        return selectedItems.map((selectedItem, index) => {\\n          const tagProps = getTagProps(selectedItem, index);\\n\\n          return (\\n            <RcChip\\n              {...tagProps}\\n              deleteIconProps={{\\n                title: 'remove',\\n              }}\\n            />\\n          );\\n        });\\n      }}\\n    />\\n  );\\n};\\n\\nDownshift.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  freeSolo: true,\\n  toggleButton: true,\\n  autoSelect: true,\\n  gutterBottom: true,\\n  multiple: true,\\n  clearBtn: true,\\n};\\n\\nDownshift.argTypes = {\\n  ...notControlInDocTable<keyof DownshiftProps>([]),\\n};\\n\\nDownshift.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'virtuoso',\\n      href: 'https://virtuoso.dev/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const DownshiftDebug: Story<DownshiftProps> = ({ ...args }) => {\\n  return <Downshift {...args} />;\\n};\\n\\nDownshiftDebug.args = { ...Downshift.args, debug: true };\\n\\nexport const DownshiftFixedItemHeight: Story<DownshiftProps> = ({\\n  ...args\\n}) => {\\n  return <Downshift {...args} />;\\n};\\nDownshiftFixedItemHeight.args = {\\n  ...Downshift.args,\\n  SuggestionListProps: { fixedItemHeight: 32 },\\n};\\n\\nconst DownshiftExample = ({ actionRef, additionValue = [], ...rest }: any) => {\\n  const inputRef = useRef(null);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([\\n    options[0],\\n    options[1],\\n    ...additionValue,\\n  ]);\\n\\n  useEffect(() => {\\n    console.log(inputRef, actionRef);\\n    \\n  }, []);\\n\\n  return (\\n    <RcDownshift\\n      gutterBottom\\n      action={actionRef}\\n      label=\\\"Country\\\"\\n      toggleButton\\n      multiple\\n      clearBtn\\n      helperText=\\\"please select country\\\"\\n      placeholder=\\\"What country have you been to?\\\"\\n      onInputChange={(e) => console.log('textChange')}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      onFocus={(e) => console.log('focus')}\\n      onKeyDown={(e, highlightedIndex) =>\\n        console.log('onKeyDown', highlightedIndex)\\n      }\\n      inputRef={inputRef}\\n      onMaxFreeSolo={(max) => {\\n        alert(`you get the max free sole count ${max}`);\\n      }}\\n      options={options}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      {...rest}\\n      renderOption={(\\n        { label, id, error, unSelectable, isSuggestion, isError, ...restProps },\\n        state,\\n      ) => (\\n        <RcMenuItem\\n          id={`${id}`}\\n          {...{ ...restProps, component: 'div' }}\\n          selected={state.selected}\\n          key={`${id || label}-${state.index}`}\\n        >\\n          {label}\\n        </RcMenuItem>\\n      )}\\n    />\\n  );\\n};\\n\\nexport const DownshiftExamples: Story<DownshiftProps> = () => {\\n  const actionRef = useRef<RcDownshiftRef>(null);\\n\\n  return (\\n    <>\\n      <DownshiftExample\\n        actionRef={actionRef}\\n        additionValue={[\\n          {\\n            id: 'free',\\n            label:\\n              'If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input. Callback fired when the popup requests to be closed. Use in controlled mode (see open).',\\n            freeSolo: true,\\n          },\\n        ]}\\n      />\\n      <DownshiftExample disabled />\\n      <DownshiftExample error />\\n      <DialogExampleComponent>\\n        <DownshiftExample />\\n      </DialogExampleComponent>\\n      {'  '}\\n      <RcButton\\n        onClick={() => {\\n          if (actionRef.current) {\\n            actionRef.current.focus();\\n            actionRef.current.openMenu();\\n          }\\n        }}\\n      >\\n        Focus Downshift And Open Outside\\n      </RcButton>\\n      {'  '}\\n      <RcButton\\n        onClick={() => {\\n          actionRef.current?.reset();\\n        }}\\n      >\\n        Reset Downshift\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nconst showNumber = 20;\\nconst toLoadCount = 10;\\n\\nconst lazyLoadOptions = options.slice(0, showNumber);\\n\\nexport const DownshiftLazyLoadExamples: Story<DownshiftProps> = () => {\\n  const setMapRef = useRef<any>({});\\n  const actionRef = useRef<RcDownshiftRef>(null);\\n  const [currOptions, setOptions] = useState(lazyLoadOptions);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <RcDownshift\\n      gutterBottom\\n      options={currOptions}\\n      label=\\\"Country\\\"\\n      value={value}\\n      action={actionRef}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n      }}\\n      toggleButton\\n      multiple\\n      clearBtn\\n      helperText=\\\"please select country\\\"\\n      placeholder=\\\"What country have you been to?\\\"\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      SuggestionListProps={{\\n        rangeChanged: (e) => {\\n          const endIndex = e.endIndex;\\n\\n          const currentStep = Math.floor(endIndex / (showNumber - 5));\\n\\n          if (\\n            currentStep > 0 &&\\n            (endIndex % (showNumber - 5)) % toLoadCount > 0\\n          ) {\\n            const currLatest =\\n              currentStep * showNumber + (showNumber - toLoadCount);\\n\\n            if (!setMapRef.current[currLatest]) {\\n              setMapRef.current[currLatest] = true;\\n\\n              const result = [\\n                ...currOptions,\\n                ...options.slice(currLatest, currLatest + showNumber),\\n              ];\\n              // console.log('load', result);\\n\\n              actionRef.current?.keepHighlightedIndex();\\n              setOptions(result);\\n            }\\n          }\\n        },\\n      }}\\n    />\\n  );\\n};\\n\\nexport const DownshiftGroupBy: Story<DownshiftProps> = () => {\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  const [groupExpanded, setGroupExpanded] = useState<Record<string, boolean>>(\\n    {},\\n  );\\n\\n  const getExpandIconProps = useCallback<\\n    NonNullable<DownshiftProps['getExpandIconProps']>\\n  >(({ group, expanded }) => {\\n    const showMessage = expanded ? 'less' : 'more';\\n\\n    return {\\n      'aria-label': `${group} group, use Shift F10 to show ${showMessage} emails`,\\n      title: showMessage,\\n    };\\n  }, []);\\n\\n  const handleChange = useEventCallback(\\n    (selectedItems: RcDownshiftSelectedItem[]) => {\\n      setValue(selectedItems);\\n    },\\n  );\\n\\n  const groupBy = useCallback(\\n    (option: RcDownshiftSelectedItem) => option.label?.[0] || '',\\n    [],\\n  );\\n\\n  const filterOptions: RcDownshiftFilterOptions<RcDownshiftSelectedItem> = (\\n    options,\\n    { inputValue, getOptionLabel, selectedItems },\\n  ): RcDownshiftSelectedItem[] => {\\n    return options.filter(\\n      (item) =>\\n        !selectedItems.some((selectedItem) => item.id === selectedItem.id) &&\\n        getOptionLabel?.(item)\\n          .toLowerCase()\\n          .startsWith(inputValue?.toLowerCase() || ''),\\n    );\\n  };\\n  return (\\n    /**\\n     * When have some country or address label or others chrome support autofill\\n     * that will support auto fill address in input\\n     * if you not need should use autoComplete=\\\"chrome-off\\\"\\n     * more detail https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\\n     */\\n    <>\\n      <Title>Normal Group</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Country\\\"\\n        value={value}\\n        onChange={handleChange}\\n        groupExpanded={groupExpanded}\\n        getExpandIconProps={getExpandIconProps}\\n        onGroupExpanded={(group, groupStateMap) => {\\n          console.log(group, groupStateMap);\\n          setGroupExpanded(groupStateMap);\\n        }}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        toggleButton\\n        groupBy={groupBy}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n      <Title>Expanded Group</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Address\\\"\\n        value={value}\\n        onChange={handleChange}\\n        groupVariant=\\\"expanded\\\"\\n        groupExpanded={groupExpanded}\\n        getExpandIconProps={getExpandIconProps}\\n        onGroupExpanded={(group, groupStateMap) => {\\n          console.log(group, groupStateMap);\\n          setGroupExpanded(groupStateMap);\\n        }}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        toggleButton\\n        groupBy={groupBy}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n      <Title>Normal Group (Custom render)</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Country\\\"\\n        value={value}\\n        onChange={handleChange}\\n        getExpandIconProps={getExpandIconProps}\\n        toggleButton\\n        groupBy={groupBy}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        renderGroup={(\\n          {\\n            label,\\n            id,\\n            error,\\n            unSelectable,\\n            isSuggestion,\\n            isError,\\n            group,\\n            ...restProps\\n          },\\n          { selected, expanded, expandIconProps },\\n        ) => {\\n          return (\\n            <RcBox margin=\\\"1em\\\" id={`${id}`} {...restProps}>\\n              <RcTypography color=\\\"neutral.b04\\\" variant=\\\"title2\\\">\\n                {label}\\n              </RcTypography>\\n            </RcBox>\\n          );\\n        }}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n      <Title>Expanded Group (Custom render)</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Country\\\"\\n        value={value}\\n        onChange={handleChange}\\n        groupVariant=\\\"expanded\\\"\\n        getExpandIconProps={getExpandIconProps}\\n        toggleButton\\n        groupBy={groupBy}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        renderGroup={(\\n          {\\n            label,\\n            id,\\n            error,\\n            unSelectable,\\n            isSuggestion,\\n            isError,\\n            group,\\n            ...restProps\\n          },\\n          { selected, expanded, expandIconProps },\\n        ) => {\\n          return (\\n            <RcMenuItem\\n              component=\\\"div\\\"\\n              id={`${id}`}\\n              selected={selected}\\n              {...restProps}\\n            >\\n              <RcListItemText\\n                primary={label}\\n                secondary={`(${expanded ? 'open' : 'close'})`}\\n              />\\n\\n              <RcBox flex=\\\"1 1 auto\\\" />\\n              {expandIconProps && (\\n                <RcIconButton\\n                  color=\\\"content.brand\\\"\\n                  {...expandIconProps}\\n                  symbol={ArrowDown2}\\n                />\\n              )}\\n            </RcMenuItem>\\n          );\\n        }}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const DownshiftDisabled: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const ref = useRef(null);\\n  const inputRef = useRef(null);\\n  const actionRef = useRef<RcDownshiftRef>(null);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  useEffect(() => {\\n    console.log(ref, inputRef, actionRef);\\n  }, []);\\n  // console.log(options);\\n\\n  return (\\n    <>\\n      <RcDownshift\\n        {...args}\\n        ref={ref}\\n        action={actionRef}\\n        options={options.slice(0, 10)}\\n        openOnFocus\\n        value={value}\\n        getOptionDisabled={(option) => option.label?.includes('e') || false}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        onInputChange={(e) => {\\n          console.log('textChange', e);\\n        }}\\n        onMaxFreeSolo={(max) => {\\n          alert(`you get the max free sole count ${max}`);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        renderTags={(selectedItems, getTagProps) => {\\n          return selectedItems.map((selectedItem, index) => {\\n            const tagProps = getTagProps(selectedItem, index);\\n\\n            return (\\n              <RcChip\\n                {...tagProps}\\n                deleteIconProps={{\\n                  title: 'remove',\\n                }}\\n              />\\n            );\\n          });\\n        }}\\n      />\\n      <Title>\\n        no skip disabled option highlight\\n        <br />\\n        <RcText component=\\\"span\\\" variant=\\\"subheading2\\\" color=\\\"neutral.f04\\\">\\n          (if you also like can be focus with mouse, use renderOption to custom\\n          your render)\\n        </RcText>\\n      </Title>\\n      <RcDownshift\\n        {...args}\\n        ref={ref}\\n        action={actionRef}\\n        options={options.slice(0, 10)}\\n        openOnFocus\\n        disabledItemsHighlightable\\n        value={value}\\n        getOptionDisabled={(option) => option.label?.includes('e') || false}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        onInputChange={(e) => {\\n          console.log('textChange', e);\\n        }}\\n        onMaxFreeSolo={(max) => {\\n          alert(`you get the max free sole count ${max}`);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        renderTags={(selectedItems, getTagProps) => {\\n          return selectedItems.map((selectedItem, index) => {\\n            const tagProps = getTagProps(selectedItem, index);\\n\\n            return (\\n              <RcChip\\n                {...tagProps}\\n                deleteIconProps={{\\n                  title: 'remove',\\n                }}\\n              />\\n            );\\n          });\\n        }}\\n      />\\n      <RcButton onClick={() => actionRef.current?.clearInput()}>\\n        Clear input value\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nDownshiftDisabled.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  freeSolo: true,\\n  toggleButton: true,\\n  autoSelect: true,\\n  gutterBottom: true,\\n  multiple: true,\\n};\\n\\nexport const DownshiftWithDynamic: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      options={options}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      renderOption={(\\n        { label, id, error, unSelectable, isSuggestion, isError, ...restProps },\\n        state,\\n      ) => (\\n        <RcMenuItem\\n          id={`${id}`}\\n          {...{ ...restProps, component: 'div' }}\\n          selected={state.selected}\\n          key={`${id || label}-${state.index}`}\\n        >\\n          {state.index % 2 === 0 ? (\\n            <RcBox bgcolor=\\\"neutral.b04\\\">\\n              <br />\\n              <br />\\n              {label}\\n              <br />\\n              <br />\\n            </RcBox>\\n          ) : (\\n            label\\n          )}\\n        </RcMenuItem>\\n      )}\\n    />\\n  );\\n};\\n\\nDownshiftWithDynamic.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: true,\\n  clearBtn: true,\\n  toggleButton: true,\\n};\\n\\nexport const DownshiftWithAvatar: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <>\\n      <RcDownshift\\n        {...args}\\n        options={options}\\n        value={value}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        getOptionLabel={(option) => `${option.label} (Custom String)`}\\n        gutterBottom\\n      />\\n      <RcDownshift\\n        {...args}\\n        options={options}\\n        value={value}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        renderOption={(\\n          {\\n            label,\\n            id,\\n            error,\\n            unSelectable,\\n            isSuggestion,\\n            isError,\\n            ...restProps\\n          },\\n          state,\\n        ) => (\\n          <RcMenuItem\\n            id={`${id}`}\\n            {...{ ...restProps, component: 'div' }}\\n            selected={state.selected}\\n            key={`${id || label}-${state.index}`}\\n          >\\n            <RcAvatar src={`https://placeimg.com/100/100/${state.index}`} />\\n            <RcBox marginLeft=\\\"2rem\\\">{label}</RcBox>\\n          </RcMenuItem>\\n        )}\\n      />\\n    </>\\n  );\\n};\\n\\nDownshiftWithAvatar.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: true,\\n  clearBtn: true,\\n  toggleButton: true,\\n};\\n\\nconst CustomDownshiftInputClasses = RcClasses<RcDownshiftProps['InputProps']>(\\n  ['root', 'input'],\\n  'CustomDownshiftInput',\\n);\\n\\nconst CustomTextField = styled(RcTextField)`\\n  .${CustomDownshiftInputClasses.root} {\\n    padding-left: ${spacing(2)};\\n    height: auto;\\n  }\\n\\n  .${CustomDownshiftInputClasses.input} {\\n    margin-left: 0;\\n  }\\n`;\\n\\nexport const DownshiftWithCustomInput: Story<DownshiftProps> = ({\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      options={options}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      renderInput={({ InputProps: InputPropsProp, ...params }) => {\\n        const InputProps = combineProps(\\n          { classes: CustomDownshiftInputClasses },\\n          InputPropsProp,\\n        );\\n\\n        return (\\n          <CustomTextField\\n            {...params}\\n            InputProps={InputProps}\\n            variant=\\\"outline\\\"\\n          />\\n        );\\n      }}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n    />\\n  );\\n};\\n\\nDownshiftWithCustomInput.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: true,\\n  clearBtn: true,\\n  toggleButton: true,\\n};\\n\\nexport const DownshiftAutocomplete: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [inputValue, setInputValue] = useState('');\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([options[0]]);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      variant=\\\"autocomplete\\\"\\n      options={options}\\n      onOpen={() => console.log('open')}\\n      onClose={(e, r) => console.log('close', r)}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      inputValue={inputValue}\\n      onInputChange={(value) => {\\n        setInputValue(value || '');\\n        console.log('input change', value);\\n      }}\\n      SuggestionListProps={{\\n        padding: true,\\n      }}\\n    />\\n  );\\n};\\n\\nDownshiftAutocomplete.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: false,\\n  clearBtn: true,\\n  toggleButton: true,\\n  disableCloseOnSelect: false,\\n  openOnFocus: true,\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Downshift\":{\"startLoc\":{\"col\":48,\"line\":111},\"endLoc\":{\"col\":1,\"line\":156},\"startBody\":{\"col\":48,\"line\":111},\"endBody\":{\"col\":1,\"line\":156}},\"DownshiftDebug\":{\"startLoc\":{\"col\":53,\"line\":187},\"endLoc\":{\"col\":1,\"line\":189},\"startBody\":{\"col\":53,\"line\":187},\"endBody\":{\"col\":1,\"line\":189}},\"DownshiftFixedItemHeight\":{\"startLoc\":{\"col\":63,\"line\":193},\"endLoc\":{\"col\":1,\"line\":197},\"startBody\":{\"col\":63,\"line\":193},\"endBody\":{\"col\":1,\"line\":197}},\"DownshiftExamples\":{\"startLoc\":{\"col\":56,\"line\":261},\"endLoc\":{\"col\":1,\"line\":303},\"startBody\":{\"col\":56,\"line\":261},\"endBody\":{\"col\":1,\"line\":303}},\"DownshiftLazyLoadExamples\":{\"startLoc\":{\"col\":64,\"line\":310},\"endLoc\":{\"col\":1,\"line\":363},\"startBody\":{\"col\":64,\"line\":310},\"endBody\":{\"col\":1,\"line\":363}},\"DownshiftGroupBy\":{\"startLoc\":{\"col\":55,\"line\":365},\"endLoc\":{\"col\":1,\"line\":561},\"startBody\":{\"col\":55,\"line\":365},\"endBody\":{\"col\":1,\"line\":561}},\"DownshiftDisabled\":{\"startLoc\":{\"col\":56,\"line\":563},\"endLoc\":{\"col\":1,\"line\":661},\"startBody\":{\"col\":56,\"line\":563},\"endBody\":{\"col\":1,\"line\":661}},\"DownshiftWithDynamic\":{\"startLoc\":{\"col\":59,\"line\":673},\"endLoc\":{\"col\":1,\"line\":713},\"startBody\":{\"col\":59,\"line\":673},\"endBody\":{\"col\":1,\"line\":713}},\"DownshiftWithAvatar\":{\"startLoc\":{\"col\":58,\"line\":723},\"endLoc\":{\"col\":1,\"line\":776},\"startBody\":{\"col\":58,\"line\":723},\"endBody\":{\"col\":1,\"line\":776}},\"DownshiftWithCustomInput\":{\"startLoc\":{\"col\":63,\"line\":802},\"endLoc\":{\"col\":1,\"line\":835},\"startBody\":{\"col\":63,\"line\":802},\"endBody\":{\"col\":1,\"line\":835}},\"DownshiftAutocomplete\":{\"startLoc\":{\"col\":60,\"line\":845},\"endLoc\":{\"col\":1,\"line\":873},\"startBody\":{\"col\":60,\"line\":845},\"endBody\":{\"col\":1,\"line\":873}}};\n    \nimport React, {\n  ComponentProps,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport {\n  combineProps,\n  RcClasses,\n  spacing,\n  styled,\n  useEventCallback,\n} from '../../../foundation';\nimport ArrowDown2 from '../../../icon/ArrowDown2';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { Title } from '../../../storybook/components';\nimport { RcAvatar } from '../../Avatar';\nimport { RcBox } from '../../Box';\nimport { RcButton, RcIconButton } from '../../Buttons';\nimport { RcChip } from '../../Chip';\nimport { DialogExampleComponent } from '../../Dialog/__stories__/Dialog.story';\nimport { RcTextField } from '../../Forms/TextField';\nimport { RcListItemText } from '../../List';\nimport { RcMenuItem } from '../../Menu';\nimport { RcText } from '../../Text';\nimport { RcTypography } from '../../Typography';\nimport { RcDownshift, RcDownshiftProps, RcDownshiftRef } from '../Downshift';\nimport {\n  DEFAULT_KEY_TO_CHIPS,\n  RcDownshiftDefaultFilterOptions,\n  RcDownshiftFilterOptions,\n  RcDownshiftSelectedItem,\n} from '../utils';\nimport { DownshiftDoc } from './Downshift.doc';\nimport { options } from './options';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, {\\n  ComponentProps,\\n  useCallback,\\n  useEffect,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  combineProps,\\n  RcClasses,\\n  spacing,\\n  styled,\\n  useEventCallback,\\n} from '../../../foundation';\\nimport ArrowDown2 from '../../../icon/ArrowDown2';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcAvatar } from '../../Avatar';\\nimport { RcBox } from '../../Box';\\nimport { RcButton, RcIconButton } from '../../Buttons';\\nimport { RcChip } from '../../Chip';\\nimport { DialogExampleComponent } from '../../Dialog/__stories__/Dialog.story';\\nimport { RcTextField } from '../../Forms/TextField';\\nimport { RcListItemText } from '../../List';\\nimport { RcMenuItem } from '../../Menu';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\nimport { RcDownshift, RcDownshiftProps, RcDownshiftRef } from '../Downshift';\\nimport {\\n  DEFAULT_KEY_TO_CHIPS,\\n  RcDownshiftDefaultFilterOptions,\\n  RcDownshiftFilterOptions,\\n  RcDownshiftSelectedItem,\\n} from '../utils';\\nimport { DownshiftDoc } from './Downshift.doc';\\nimport { options } from './options';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Downshift',\\n  component: DownshiftDoc,\\n  argTypes: {\\n    ...sortInDocTable<keyof DownshiftProps>([\\n      'options',\\n      'value',\\n      'onChange',\\n      'onInputChange',\\n      'multiple',\\n      'freeSolo',\\n      'autoSelect',\\n      'getOptionLabel',\\n      'renderOption',\\n      'renderTags',\\n      'inputValue',\\n      'label',\\n      'placeholder',\\n      'action',\\n      'toggleButton',\\n      'keyToTags',\\n      'maxFreeSolo',\\n      'onMaxFreeSolo',\\n      'onKeyDown',\\n      'disabled',\\n      'error',\\n      'defaultIsOpen',\\n      'initialIsOpen',\\n      'ToggleButtonProps',\\n      'PopperProps',\\n    ]),\\n    ...notControlInDocTable<keyof DownshiftProps>([]),\\n    ...notShowInDocTable<keyof DownshiftProps>([\\n      'style',\\n      'onSelectChange',\\n      'itemToString',\\n      'keyToChips',\\n      'limitOfFreeChips',\\n      'suggestionItems',\\n      'messageRef',\\n      'MenuItem',\\n      'inputLabel',\\n      'nameError',\\n      'maxLength',\\n      'InputItem',\\n      'emailError',\\n      'autoSwitchEmail',\\n      'enableFreeChips',\\n      'inputPlaceholder',\\n      'errorSelectedItems',\\n      'enableAutoTransform',\\n      'allowPlainHelperText',\\n      'TextFieldProps',\\n      'selectedItems',\\n      'automationId',\\n      'minRowHeight',\\n    ]),\\n  },\\n  args: {\\n    keyToTags: DEFAULT_KEY_TO_CHIPS,\\n  },\\n} as Meta;\\n\\ntype DownshiftProps = Partial<ComponentProps<typeof RcDownshift>>;\\n\\nexport const Downshift: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const ref = useRef(null);\\n  const inputRef = useRef(null);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  useEffect(() => {\\n    console.log(ref, inputRef);\\n  }, []);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      ref={ref}\\n      options={options}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      onInputChange={(e) => {\\n        console.log('textChange', e);\\n      }}\\n      onMaxFreeSolo={(max) => {\\n        alert(`you get the max free sole count ${max}`);\\n      }}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      renderTags={(selectedItems, getTagProps) => {\\n        return selectedItems.map((selectedItem, index) => {\\n          const tagProps = getTagProps(selectedItem, index);\\n\\n          return (\\n            <RcChip\\n              {...tagProps}\\n              deleteIconProps={{\\n                title: 'remove',\\n              }}\\n            />\\n          );\\n        });\\n      }}\\n    />\\n  );\\n};\\n\\nDownshift.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  freeSolo: true,\\n  toggleButton: true,\\n  autoSelect: true,\\n  gutterBottom: true,\\n  multiple: true,\\n  clearBtn: true,\\n};\\n\\nDownshift.argTypes = {\\n  ...notControlInDocTable<keyof DownshiftProps>([]),\\n};\\n\\nDownshift.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'virtuoso',\\n      href: 'https://virtuoso.dev/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const DownshiftDebug: Story<DownshiftProps> = ({ ...args }) => {\\n  return <Downshift {...args} />;\\n};\\n\\nDownshiftDebug.args = { ...Downshift.args, debug: true };\\n\\nexport const DownshiftFixedItemHeight: Story<DownshiftProps> = ({\\n  ...args\\n}) => {\\n  return <Downshift {...args} />;\\n};\\nDownshiftFixedItemHeight.args = {\\n  ...Downshift.args,\\n  SuggestionListProps: { fixedItemHeight: 32 },\\n};\\n\\nconst DownshiftExample = ({ actionRef, additionValue = [], ...rest }: any) => {\\n  const inputRef = useRef(null);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([\\n    options[0],\\n    options[1],\\n    ...additionValue,\\n  ]);\\n\\n  useEffect(() => {\\n    console.log(inputRef, actionRef);\\n    \\n  }, []);\\n\\n  return (\\n    <RcDownshift\\n      gutterBottom\\n      action={actionRef}\\n      label=\\\"Country\\\"\\n      toggleButton\\n      multiple\\n      clearBtn\\n      helperText=\\\"please select country\\\"\\n      placeholder=\\\"What country have you been to?\\\"\\n      onInputChange={(e) => console.log('textChange')}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      onFocus={(e) => console.log('focus')}\\n      onKeyDown={(e, highlightedIndex) =>\\n        console.log('onKeyDown', highlightedIndex)\\n      }\\n      inputRef={inputRef}\\n      onMaxFreeSolo={(max) => {\\n        alert(`you get the max free sole count ${max}`);\\n      }}\\n      options={options}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      {...rest}\\n      renderOption={(\\n        { label, id, error, unSelectable, isSuggestion, isError, ...restProps },\\n        state,\\n      ) => (\\n        <RcMenuItem\\n          id={`${id}`}\\n          {...{ ...restProps, component: 'div' }}\\n          selected={state.selected}\\n          key={`${id || label}-${state.index}`}\\n        >\\n          {label}\\n        </RcMenuItem>\\n      )}\\n    />\\n  );\\n};\\n\\nexport const DownshiftExamples: Story<DownshiftProps> = () => {\\n  const actionRef = useRef<RcDownshiftRef>(null);\\n\\n  return (\\n    <>\\n      <DownshiftExample\\n        actionRef={actionRef}\\n        additionValue={[\\n          {\\n            id: 'free',\\n            label:\\n              'If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input. Callback fired when the popup requests to be closed. Use in controlled mode (see open).',\\n            freeSolo: true,\\n          },\\n        ]}\\n      />\\n      <DownshiftExample disabled />\\n      <DownshiftExample error />\\n      <DialogExampleComponent>\\n        <DownshiftExample />\\n      </DialogExampleComponent>\\n      {'  '}\\n      <RcButton\\n        onClick={() => {\\n          if (actionRef.current) {\\n            actionRef.current.focus();\\n            actionRef.current.openMenu();\\n          }\\n        }}\\n      >\\n        Focus Downshift And Open Outside\\n      </RcButton>\\n      {'  '}\\n      <RcButton\\n        onClick={() => {\\n          actionRef.current?.reset();\\n        }}\\n      >\\n        Reset Downshift\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nconst showNumber = 20;\\nconst toLoadCount = 10;\\n\\nconst lazyLoadOptions = options.slice(0, showNumber);\\n\\nexport const DownshiftLazyLoadExamples: Story<DownshiftProps> = () => {\\n  const setMapRef = useRef<any>({});\\n  const actionRef = useRef<RcDownshiftRef>(null);\\n  const [currOptions, setOptions] = useState(lazyLoadOptions);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <RcDownshift\\n      gutterBottom\\n      options={currOptions}\\n      label=\\\"Country\\\"\\n      value={value}\\n      action={actionRef}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n      }}\\n      toggleButton\\n      multiple\\n      clearBtn\\n      helperText=\\\"please select country\\\"\\n      placeholder=\\\"What country have you been to?\\\"\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      SuggestionListProps={{\\n        rangeChanged: (e) => {\\n          const endIndex = e.endIndex;\\n\\n          const currentStep = Math.floor(endIndex / (showNumber - 5));\\n\\n          if (\\n            currentStep > 0 &&\\n            (endIndex % (showNumber - 5)) % toLoadCount > 0\\n          ) {\\n            const currLatest =\\n              currentStep * showNumber + (showNumber - toLoadCount);\\n\\n            if (!setMapRef.current[currLatest]) {\\n              setMapRef.current[currLatest] = true;\\n\\n              const result = [\\n                ...currOptions,\\n                ...options.slice(currLatest, currLatest + showNumber),\\n              ];\\n              // console.log('load', result);\\n\\n              actionRef.current?.keepHighlightedIndex();\\n              setOptions(result);\\n            }\\n          }\\n        },\\n      }}\\n    />\\n  );\\n};\\n\\nexport const DownshiftGroupBy: Story<DownshiftProps> = () => {\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  const [groupExpanded, setGroupExpanded] = useState<Record<string, boolean>>(\\n    {},\\n  );\\n\\n  const getExpandIconProps = useCallback<\\n    NonNullable<DownshiftProps['getExpandIconProps']>\\n  >(({ group, expanded }) => {\\n    const showMessage = expanded ? 'less' : 'more';\\n\\n    return {\\n      'aria-label': `${group} group, use Shift F10 to show ${showMessage} emails`,\\n      title: showMessage,\\n    };\\n  }, []);\\n\\n  const handleChange = useEventCallback(\\n    (selectedItems: RcDownshiftSelectedItem[]) => {\\n      setValue(selectedItems);\\n    },\\n  );\\n\\n  const groupBy = useCallback(\\n    (option: RcDownshiftSelectedItem) => option.label?.[0] || '',\\n    [],\\n  );\\n\\n  const filterOptions: RcDownshiftFilterOptions<RcDownshiftSelectedItem> = (\\n    options,\\n    { inputValue, getOptionLabel, selectedItems },\\n  ): RcDownshiftSelectedItem[] => {\\n    return options.filter(\\n      (item) =>\\n        !selectedItems.some((selectedItem) => item.id === selectedItem.id) &&\\n        getOptionLabel?.(item)\\n          .toLowerCase()\\n          .startsWith(inputValue?.toLowerCase() || ''),\\n    );\\n  };\\n  return (\\n    /**\\n     * When have some country or address label or others chrome support autofill\\n     * that will support auto fill address in input\\n     * if you not need should use autoComplete=\\\"chrome-off\\\"\\n     * more detail https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\\n     */\\n    <>\\n      <Title>Normal Group</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Country\\\"\\n        value={value}\\n        onChange={handleChange}\\n        groupExpanded={groupExpanded}\\n        getExpandIconProps={getExpandIconProps}\\n        onGroupExpanded={(group, groupStateMap) => {\\n          console.log(group, groupStateMap);\\n          setGroupExpanded(groupStateMap);\\n        }}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        toggleButton\\n        groupBy={groupBy}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n      <Title>Expanded Group</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Address\\\"\\n        value={value}\\n        onChange={handleChange}\\n        groupVariant=\\\"expanded\\\"\\n        groupExpanded={groupExpanded}\\n        getExpandIconProps={getExpandIconProps}\\n        onGroupExpanded={(group, groupStateMap) => {\\n          console.log(group, groupStateMap);\\n          setGroupExpanded(groupStateMap);\\n        }}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        toggleButton\\n        groupBy={groupBy}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n      <Title>Normal Group (Custom render)</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Country\\\"\\n        value={value}\\n        onChange={handleChange}\\n        getExpandIconProps={getExpandIconProps}\\n        toggleButton\\n        groupBy={groupBy}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        renderGroup={(\\n          {\\n            label,\\n            id,\\n            error,\\n            unSelectable,\\n            isSuggestion,\\n            isError,\\n            group,\\n            ...restProps\\n          },\\n          { selected, expanded, expandIconProps },\\n        ) => {\\n          return (\\n            <RcBox margin=\\\"1em\\\" id={`${id}`} {...restProps}>\\n              <RcTypography color=\\\"neutral.b04\\\" variant=\\\"title2\\\">\\n                {label}\\n              </RcTypography>\\n            </RcBox>\\n          );\\n        }}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n      <Title>Expanded Group (Custom render)</Title>\\n      <RcDownshift\\n        gutterBottom\\n        options={options}\\n        label=\\\"Country\\\"\\n        value={value}\\n        onChange={handleChange}\\n        groupVariant=\\\"expanded\\\"\\n        getExpandIconProps={getExpandIconProps}\\n        toggleButton\\n        groupBy={groupBy}\\n        InputProps={{\\n          autoComplete: 'chrome-off',\\n        }}\\n        renderGroup={(\\n          {\\n            label,\\n            id,\\n            error,\\n            unSelectable,\\n            isSuggestion,\\n            isError,\\n            group,\\n            ...restProps\\n          },\\n          { selected, expanded, expandIconProps },\\n        ) => {\\n          return (\\n            <RcMenuItem\\n              component=\\\"div\\\"\\n              id={`${id}`}\\n              selected={selected}\\n              {...restProps}\\n            >\\n              <RcListItemText\\n                primary={label}\\n                secondary={`(${expanded ? 'open' : 'close'})`}\\n              />\\n\\n              <RcBox flex=\\\"1 1 auto\\\" />\\n              {expandIconProps && (\\n                <RcIconButton\\n                  color=\\\"content.brand\\\"\\n                  {...expandIconProps}\\n                  symbol={ArrowDown2}\\n                />\\n              )}\\n            </RcMenuItem>\\n          );\\n        }}\\n        multiple\\n        clearBtn\\n        helperText=\\\"please select country\\\"\\n        placeholder=\\\"What country have you been to?\\\"\\n        filterOptions={filterOptions}\\n      />\\n    </>\\n  );\\n};\\n\\nexport const DownshiftDisabled: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const ref = useRef(null);\\n  const inputRef = useRef(null);\\n  const actionRef = useRef<RcDownshiftRef>(null);\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  useEffect(() => {\\n    console.log(ref, inputRef, actionRef);\\n  }, []);\\n  // console.log(options);\\n\\n  return (\\n    <>\\n      <RcDownshift\\n        {...args}\\n        ref={ref}\\n        action={actionRef}\\n        options={options.slice(0, 10)}\\n        openOnFocus\\n        value={value}\\n        getOptionDisabled={(option) => option.label?.includes('e') || false}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        onInputChange={(e) => {\\n          console.log('textChange', e);\\n        }}\\n        onMaxFreeSolo={(max) => {\\n          alert(`you get the max free sole count ${max}`);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        renderTags={(selectedItems, getTagProps) => {\\n          return selectedItems.map((selectedItem, index) => {\\n            const tagProps = getTagProps(selectedItem, index);\\n\\n            return (\\n              <RcChip\\n                {...tagProps}\\n                deleteIconProps={{\\n                  title: 'remove',\\n                }}\\n              />\\n            );\\n          });\\n        }}\\n      />\\n      <Title>\\n        no skip disabled option highlight\\n        <br />\\n        <RcText component=\\\"span\\\" variant=\\\"subheading2\\\" color=\\\"neutral.f04\\\">\\n          (if you also like can be focus with mouse, use renderOption to custom\\n          your render)\\n        </RcText>\\n      </Title>\\n      <RcDownshift\\n        {...args}\\n        ref={ref}\\n        action={actionRef}\\n        options={options.slice(0, 10)}\\n        openOnFocus\\n        disabledItemsHighlightable\\n        value={value}\\n        getOptionDisabled={(option) => option.label?.includes('e') || false}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        onInputChange={(e) => {\\n          console.log('textChange', e);\\n        }}\\n        onMaxFreeSolo={(max) => {\\n          alert(`you get the max free sole count ${max}`);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        renderTags={(selectedItems, getTagProps) => {\\n          return selectedItems.map((selectedItem, index) => {\\n            const tagProps = getTagProps(selectedItem, index);\\n\\n            return (\\n              <RcChip\\n                {...tagProps}\\n                deleteIconProps={{\\n                  title: 'remove',\\n                }}\\n              />\\n            );\\n          });\\n        }}\\n      />\\n      <RcButton onClick={() => actionRef.current?.clearInput()}>\\n        Clear input value\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nDownshiftDisabled.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  freeSolo: true,\\n  toggleButton: true,\\n  autoSelect: true,\\n  gutterBottom: true,\\n  multiple: true,\\n};\\n\\nexport const DownshiftWithDynamic: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      options={options}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n      renderOption={(\\n        { label, id, error, unSelectable, isSuggestion, isError, ...restProps },\\n        state,\\n      ) => (\\n        <RcMenuItem\\n          id={`${id}`}\\n          {...{ ...restProps, component: 'div' }}\\n          selected={state.selected}\\n          key={`${id || label}-${state.index}`}\\n        >\\n          {state.index % 2 === 0 ? (\\n            <RcBox bgcolor=\\\"neutral.b04\\\">\\n              <br />\\n              <br />\\n              {label}\\n              <br />\\n              <br />\\n            </RcBox>\\n          ) : (\\n            label\\n          )}\\n        </RcMenuItem>\\n      )}\\n    />\\n  );\\n};\\n\\nDownshiftWithDynamic.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: true,\\n  clearBtn: true,\\n  toggleButton: true,\\n};\\n\\nexport const DownshiftWithAvatar: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <>\\n      <RcDownshift\\n        {...args}\\n        options={options}\\n        value={value}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        getOptionLabel={(option) => `${option.label} (Custom String)`}\\n        gutterBottom\\n      />\\n      <RcDownshift\\n        {...args}\\n        options={options}\\n        value={value}\\n        onChange={(selectedItems) => {\\n          setValue(selectedItems);\\n          console.log('onChange', selectedItems);\\n        }}\\n        filterOptions={RcDownshiftDefaultFilterOptions}\\n        renderOption={(\\n          {\\n            label,\\n            id,\\n            error,\\n            unSelectable,\\n            isSuggestion,\\n            isError,\\n            ...restProps\\n          },\\n          state,\\n        ) => (\\n          <RcMenuItem\\n            id={`${id}`}\\n            {...{ ...restProps, component: 'div' }}\\n            selected={state.selected}\\n            key={`${id || label}-${state.index}`}\\n          >\\n            <RcAvatar src={`https://placeimg.com/100/100/${state.index}`} />\\n            <RcBox marginLeft=\\\"2rem\\\">{label}</RcBox>\\n          </RcMenuItem>\\n        )}\\n      />\\n    </>\\n  );\\n};\\n\\nDownshiftWithAvatar.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: true,\\n  clearBtn: true,\\n  toggleButton: true,\\n};\\n\\nconst CustomDownshiftInputClasses = RcClasses<RcDownshiftProps['InputProps']>(\\n  ['root', 'input'],\\n  'CustomDownshiftInput',\\n);\\n\\nconst CustomTextField = styled(RcTextField)`\\n  .${CustomDownshiftInputClasses.root} {\\n    padding-left: ${spacing(2)};\\n    height: auto;\\n  }\\n\\n  .${CustomDownshiftInputClasses.input} {\\n    margin-left: 0;\\n  }\\n`;\\n\\nexport const DownshiftWithCustomInput: Story<DownshiftProps> = ({\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      options={options}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      renderInput={({ InputProps: InputPropsProp, ...params }) => {\\n        const InputProps = combineProps(\\n          { classes: CustomDownshiftInputClasses },\\n          InputPropsProp,\\n        );\\n\\n        return (\\n          <CustomTextField\\n            {...params}\\n            InputProps={InputProps}\\n            variant=\\\"outline\\\"\\n          />\\n        );\\n      }}\\n      filterOptions={RcDownshiftDefaultFilterOptions}\\n    />\\n  );\\n};\\n\\nDownshiftWithCustomInput.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: true,\\n  clearBtn: true,\\n  toggleButton: true,\\n};\\n\\nexport const DownshiftAutocomplete: Story<DownshiftProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [inputValue, setInputValue] = useState('');\\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([options[0]]);\\n\\n  return (\\n    <RcDownshift\\n      {...args}\\n      variant=\\\"autocomplete\\\"\\n      options={options}\\n      onOpen={() => console.log('open')}\\n      onClose={(e, r) => console.log('close', r)}\\n      value={value}\\n      onChange={(selectedItems) => {\\n        setValue(selectedItems);\\n        console.log('onChange', selectedItems);\\n      }}\\n      inputValue={inputValue}\\n      onInputChange={(value) => {\\n        setInputValue(value || '');\\n        console.log('input change', value);\\n      }}\\n      SuggestionListProps={{\\n        padding: true,\\n      }}\\n    />\\n  );\\n};\\n\\nDownshiftAutocomplete.args = {\\n  label: 'Downshift',\\n  placeholder: 'Search and select',\\n  multiple: false,\\n  clearBtn: true,\\n  toggleButton: true,\\n  disableCloseOnSelect: false,\\n  openOnFocus: true,\\n};\\n\",\"locationsMap\":{\"downshift\":{\"startLoc\":{\"col\":48,\"line\":111},\"endLoc\":{\"col\":1,\"line\":156},\"startBody\":{\"col\":48,\"line\":111},\"endBody\":{\"col\":1,\"line\":156}},\"downshift-debug\":{\"startLoc\":{\"col\":53,\"line\":187},\"endLoc\":{\"col\":1,\"line\":189},\"startBody\":{\"col\":53,\"line\":187},\"endBody\":{\"col\":1,\"line\":189}},\"downshift-fixed-item-height\":{\"startLoc\":{\"col\":63,\"line\":193},\"endLoc\":{\"col\":1,\"line\":197},\"startBody\":{\"col\":63,\"line\":193},\"endBody\":{\"col\":1,\"line\":197}},\"downshift-examples\":{\"startLoc\":{\"col\":56,\"line\":261},\"endLoc\":{\"col\":1,\"line\":303},\"startBody\":{\"col\":56,\"line\":261},\"endBody\":{\"col\":1,\"line\":303}},\"downshift-lazy-load-examples\":{\"startLoc\":{\"col\":64,\"line\":310},\"endLoc\":{\"col\":1,\"line\":363},\"startBody\":{\"col\":64,\"line\":310},\"endBody\":{\"col\":1,\"line\":363}},\"downshift-group-by\":{\"startLoc\":{\"col\":55,\"line\":365},\"endLoc\":{\"col\":1,\"line\":561},\"startBody\":{\"col\":55,\"line\":365},\"endBody\":{\"col\":1,\"line\":561}},\"downshift-disabled\":{\"startLoc\":{\"col\":56,\"line\":563},\"endLoc\":{\"col\":1,\"line\":661},\"startBody\":{\"col\":56,\"line\":563},\"endBody\":{\"col\":1,\"line\":661}},\"downshift-with-dynamic\":{\"startLoc\":{\"col\":59,\"line\":673},\"endLoc\":{\"col\":1,\"line\":713},\"startBody\":{\"col\":59,\"line\":673},\"endBody\":{\"col\":1,\"line\":713}},\"downshift-with-avatar\":{\"startLoc\":{\"col\":58,\"line\":723},\"endLoc\":{\"col\":1,\"line\":776},\"startBody\":{\"col\":58,\"line\":723},\"endBody\":{\"col\":1,\"line\":776}},\"downshift-with-custom-input\":{\"startLoc\":{\"col\":63,\"line\":802},\"endLoc\":{\"col\":1,\"line\":835},\"startBody\":{\"col\":63,\"line\":802},\"endBody\":{\"col\":1,\"line\":835}},\"downshift-autocomplete\":{\"startLoc\":{\"col\":60,\"line\":845},\"endLoc\":{\"col\":1,\"line\":873},\"startBody\":{\"col\":60,\"line\":845},\"endBody\":{\"col\":1,\"line\":873}}}},},\n  title: '🚀 Cleanup Components/Downshift',\n  component: DownshiftDoc,\n  argTypes: {\n    ...sortInDocTable<keyof DownshiftProps>([\n      'options',\n      'value',\n      'onChange',\n      'onInputChange',\n      'multiple',\n      'freeSolo',\n      'autoSelect',\n      'getOptionLabel',\n      'renderOption',\n      'renderTags',\n      'inputValue',\n      'label',\n      'placeholder',\n      'action',\n      'toggleButton',\n      'keyToTags',\n      'maxFreeSolo',\n      'onMaxFreeSolo',\n      'onKeyDown',\n      'disabled',\n      'error',\n      'defaultIsOpen',\n      'initialIsOpen',\n      'ToggleButtonProps',\n      'PopperProps',\n    ]),\n    ...notControlInDocTable<keyof DownshiftProps>([]),\n    ...notShowInDocTable<keyof DownshiftProps>([\n      'style',\n      'onSelectChange',\n      'itemToString',\n      'keyToChips',\n      'limitOfFreeChips',\n      'suggestionItems',\n      'messageRef',\n      'MenuItem',\n      'inputLabel',\n      'nameError',\n      'maxLength',\n      'InputItem',\n      'emailError',\n      'autoSwitchEmail',\n      'enableFreeChips',\n      'inputPlaceholder',\n      'errorSelectedItems',\n      'enableAutoTransform',\n      'allowPlainHelperText',\n      'TextFieldProps',\n      'selectedItems',\n      'automationId',\n      'minRowHeight',\n    ]),\n  },\n  args: {\n    keyToTags: DEFAULT_KEY_TO_CHIPS,\n  },\n} as Meta;\n\ntype DownshiftProps = Partial<ComponentProps<typeof RcDownshift>>;\n\nexport const Downshift: Story<DownshiftProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  const ref = useRef(null);\n  const inputRef = useRef(null);\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  useEffect(() => {\n    console.log(ref, inputRef);\n  }, []);\n\n  return (\n    <RcDownshift\n      {...args}\n      ref={ref}\n      options={options}\n      value={value}\n      onChange={(selectedItems) => {\n        setValue(selectedItems);\n        console.log('onChange', selectedItems);\n      }}\n      onInputChange={(e) => {\n        console.log('textChange', e);\n      }}\n      onMaxFreeSolo={(max) => {\n        alert(`you get the max free sole count ${max}`);\n      }}\n      filterOptions={RcDownshiftDefaultFilterOptions}\n      renderTags={(selectedItems, getTagProps) => {\n        return selectedItems.map((selectedItem, index) => {\n          const tagProps = getTagProps(selectedItem, index);\n\n          return (\n            <RcChip\n              {...tagProps}\n              deleteIconProps={{\n                title: 'remove',\n              }}\n            />\n          );\n        });\n      }}\n    />\n  );\n};;\n\nDownshift.args = {\n  label: 'Downshift',\n  placeholder: 'Search and select',\n  freeSolo: true,\n  toggleButton: true,\n  autoSelect: true,\n  gutterBottom: true,\n  multiple: true,\n  clearBtn: true,\n};\n\nDownshift.argTypes = {\n  ...notControlInDocTable<keyof DownshiftProps>([]),\n};\n\nDownshift.parameters = {\n  tags: [\n    {\n      name: 'Source',\n      value: 'virtuoso',\n      href: 'https://virtuoso.dev/',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nexport const DownshiftDebug: Story<DownshiftProps> = ({ ...args }) => {\n  return <Downshift {...args} />;\n};;\n\nDownshiftDebug.args = { ...Downshift.args, debug: true };\n\nexport const DownshiftFixedItemHeight: Story<DownshiftProps> = ({\n  ...args\n}) => {\n  return <Downshift {...args} />;\n};;\nDownshiftFixedItemHeight.args = {\n  ...Downshift.args,\n  SuggestionListProps: { fixedItemHeight: 32 },\n};\n\nconst DownshiftExample = ({ actionRef, additionValue = [], ...rest }: any) => {\n  const inputRef = useRef(null);\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([\n    options[0],\n    options[1],\n    ...additionValue,\n  ]);\n\n  useEffect(() => {\n    console.log(inputRef, actionRef);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <RcDownshift\n      gutterBottom\n      action={actionRef}\n      label=\"Country\"\n      toggleButton\n      multiple\n      clearBtn\n      helperText=\"please select country\"\n      placeholder=\"What country have you been to?\"\n      onInputChange={(e) => console.log('textChange')}\n      value={value}\n      onChange={(selectedItems) => {\n        setValue(selectedItems);\n        console.log('onChange', selectedItems);\n      }}\n      onFocus={(e) => console.log('focus')}\n      onKeyDown={(e, highlightedIndex) =>\n        console.log('onKeyDown', highlightedIndex)\n      }\n      inputRef={inputRef}\n      onMaxFreeSolo={(max) => {\n        alert(`you get the max free sole count ${max}`);\n      }}\n      options={options}\n      filterOptions={RcDownshiftDefaultFilterOptions}\n      {...rest}\n      renderOption={(\n        { label, id, error, unSelectable, isSuggestion, isError, ...restProps },\n        state,\n      ) => (\n        <RcMenuItem\n          id={`${id}`}\n          {...{ ...restProps, component: 'div' }}\n          selected={state.selected}\n          key={`${id || label}-${state.index}`}\n        >\n          {label}\n        </RcMenuItem>\n      )}\n    />\n  );\n};\n\nexport const DownshiftExamples: Story<DownshiftProps> = () => {\n  const actionRef = useRef<RcDownshiftRef>(null);\n\n  return (\n    <>\n      <DownshiftExample\n        actionRef={actionRef}\n        additionValue={[\n          {\n            id: 'free',\n            label:\n              'If true, the selected option becomes the value of the input when the Autocomplete loses focus unless the user chooses a different option or changes the character string in the input. Callback fired when the popup requests to be closed. Use in controlled mode (see open).',\n            freeSolo: true,\n          },\n        ]}\n      />\n      <DownshiftExample disabled />\n      <DownshiftExample error />\n      <DialogExampleComponent>\n        <DownshiftExample />\n      </DialogExampleComponent>\n      {'  '}\n      <RcButton\n        onClick={() => {\n          if (actionRef.current) {\n            actionRef.current.focus();\n            actionRef.current.openMenu();\n          }\n        }}\n      >\n        Focus Downshift And Open Outside\n      </RcButton>\n      {'  '}\n      <RcButton\n        onClick={() => {\n          actionRef.current?.reset();\n        }}\n      >\n        Reset Downshift\n      </RcButton>\n    </>\n  );\n};;\n\nconst showNumber = 20;\nconst toLoadCount = 10;\n\nconst lazyLoadOptions = options.slice(0, showNumber);\n\nexport const DownshiftLazyLoadExamples: Story<DownshiftProps> = () => {\n  const setMapRef = useRef<any>({});\n  const actionRef = useRef<RcDownshiftRef>(null);\n  const [currOptions, setOptions] = useState(lazyLoadOptions);\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  return (\n    <RcDownshift\n      gutterBottom\n      options={currOptions}\n      label=\"Country\"\n      value={value}\n      action={actionRef}\n      onChange={(selectedItems) => {\n        setValue(selectedItems);\n      }}\n      toggleButton\n      multiple\n      clearBtn\n      helperText=\"please select country\"\n      placeholder=\"What country have you been to?\"\n      filterOptions={RcDownshiftDefaultFilterOptions}\n      SuggestionListProps={{\n        rangeChanged: (e) => {\n          const endIndex = e.endIndex;\n\n          const currentStep = Math.floor(endIndex / (showNumber - 5));\n\n          if (\n            currentStep > 0 &&\n            (endIndex % (showNumber - 5)) % toLoadCount > 0\n          ) {\n            const currLatest =\n              currentStep * showNumber + (showNumber - toLoadCount);\n\n            if (!setMapRef.current[currLatest]) {\n              setMapRef.current[currLatest] = true;\n\n              const result = [\n                ...currOptions,\n                ...options.slice(currLatest, currLatest + showNumber),\n              ];\n              // console.log('load', result);\n\n              actionRef.current?.keepHighlightedIndex();\n              setOptions(result);\n            }\n          }\n        },\n      }}\n    />\n  );\n};;\n\nexport const DownshiftGroupBy: Story<DownshiftProps> = () => {\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  const [groupExpanded, setGroupExpanded] = useState<Record<string, boolean>>(\n    {},\n  );\n\n  const getExpandIconProps = useCallback<\n    NonNullable<DownshiftProps['getExpandIconProps']>\n  >(({ group, expanded }) => {\n    const showMessage = expanded ? 'less' : 'more';\n\n    return {\n      'aria-label': `${group} group, use Shift F10 to show ${showMessage} emails`,\n      title: showMessage,\n    };\n  }, []);\n\n  const handleChange = useEventCallback(\n    (selectedItems: RcDownshiftSelectedItem[]) => {\n      setValue(selectedItems);\n    },\n  );\n\n  const groupBy = useCallback(\n    (option: RcDownshiftSelectedItem) => option.label?.[0] || '',\n    [],\n  );\n\n  const filterOptions: RcDownshiftFilterOptions<RcDownshiftSelectedItem> = (\n    options,\n    { inputValue, getOptionLabel, selectedItems },\n  ): RcDownshiftSelectedItem[] => {\n    return options.filter(\n      (item) =>\n        !selectedItems.some((selectedItem) => item.id === selectedItem.id) &&\n        getOptionLabel?.(item)\n          .toLowerCase()\n          .startsWith(inputValue?.toLowerCase() || ''),\n    );\n  };\n  return (\n    /**\n     * When have some country or address label or others chrome support autofill\n     * that will support auto fill address in input\n     * if you not need should use autoComplete=\"chrome-off\"\n     * more detail https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\n     */\n    <>\n      <Title>Normal Group</Title>\n      <RcDownshift\n        gutterBottom\n        options={options}\n        label=\"Country\"\n        value={value}\n        onChange={handleChange}\n        groupExpanded={groupExpanded}\n        getExpandIconProps={getExpandIconProps}\n        onGroupExpanded={(group, groupStateMap) => {\n          console.log(group, groupStateMap);\n          setGroupExpanded(groupStateMap);\n        }}\n        InputProps={{\n          autoComplete: 'chrome-off',\n        }}\n        toggleButton\n        groupBy={groupBy}\n        multiple\n        clearBtn\n        helperText=\"please select country\"\n        placeholder=\"What country have you been to?\"\n        filterOptions={filterOptions}\n      />\n      <Title>Expanded Group</Title>\n      <RcDownshift\n        gutterBottom\n        options={options}\n        label=\"Address\"\n        value={value}\n        onChange={handleChange}\n        groupVariant=\"expanded\"\n        groupExpanded={groupExpanded}\n        getExpandIconProps={getExpandIconProps}\n        onGroupExpanded={(group, groupStateMap) => {\n          console.log(group, groupStateMap);\n          setGroupExpanded(groupStateMap);\n        }}\n        InputProps={{\n          autoComplete: 'chrome-off',\n        }}\n        toggleButton\n        groupBy={groupBy}\n        multiple\n        clearBtn\n        helperText=\"please select country\"\n        placeholder=\"What country have you been to?\"\n        filterOptions={filterOptions}\n      />\n      <Title>Normal Group (Custom render)</Title>\n      <RcDownshift\n        gutterBottom\n        options={options}\n        label=\"Country\"\n        value={value}\n        onChange={handleChange}\n        getExpandIconProps={getExpandIconProps}\n        toggleButton\n        groupBy={groupBy}\n        InputProps={{\n          autoComplete: 'chrome-off',\n        }}\n        renderGroup={(\n          {\n            label,\n            id,\n            error,\n            unSelectable,\n            isSuggestion,\n            isError,\n            group,\n            ...restProps\n          },\n          { selected, expanded, expandIconProps },\n        ) => {\n          return (\n            <RcBox margin=\"1em\" id={`${id}`} {...restProps}>\n              <RcTypography color=\"neutral.b04\" variant=\"title2\">\n                {label}\n              </RcTypography>\n            </RcBox>\n          );\n        }}\n        multiple\n        clearBtn\n        helperText=\"please select country\"\n        placeholder=\"What country have you been to?\"\n        filterOptions={filterOptions}\n      />\n      <Title>Expanded Group (Custom render)</Title>\n      <RcDownshift\n        gutterBottom\n        options={options}\n        label=\"Country\"\n        value={value}\n        onChange={handleChange}\n        groupVariant=\"expanded\"\n        getExpandIconProps={getExpandIconProps}\n        toggleButton\n        groupBy={groupBy}\n        InputProps={{\n          autoComplete: 'chrome-off',\n        }}\n        renderGroup={(\n          {\n            label,\n            id,\n            error,\n            unSelectable,\n            isSuggestion,\n            isError,\n            group,\n            ...restProps\n          },\n          { selected, expanded, expandIconProps },\n        ) => {\n          return (\n            <RcMenuItem\n              component=\"div\"\n              id={`${id}`}\n              selected={selected}\n              {...restProps}\n            >\n              <RcListItemText\n                primary={label}\n                secondary={`(${expanded ? 'open' : 'close'})`}\n              />\n\n              <RcBox flex=\"1 1 auto\" />\n              {expandIconProps && (\n                <RcIconButton\n                  color=\"content.brand\"\n                  {...expandIconProps}\n                  symbol={ArrowDown2}\n                />\n              )}\n            </RcMenuItem>\n          );\n        }}\n        multiple\n        clearBtn\n        helperText=\"please select country\"\n        placeholder=\"What country have you been to?\"\n        filterOptions={filterOptions}\n      />\n    </>\n  );\n};;\n\nexport const DownshiftDisabled: Story<DownshiftProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  const ref = useRef(null);\n  const inputRef = useRef(null);\n  const actionRef = useRef<RcDownshiftRef>(null);\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  useEffect(() => {\n    console.log(ref, inputRef, actionRef);\n  }, []);\n  // console.log(options);\n\n  return (\n    <>\n      <RcDownshift\n        {...args}\n        ref={ref}\n        action={actionRef}\n        options={options.slice(0, 10)}\n        openOnFocus\n        value={value}\n        getOptionDisabled={(option) => option.label?.includes('e') || false}\n        onChange={(selectedItems) => {\n          setValue(selectedItems);\n          console.log('onChange', selectedItems);\n        }}\n        onInputChange={(e) => {\n          console.log('textChange', e);\n        }}\n        onMaxFreeSolo={(max) => {\n          alert(`you get the max free sole count ${max}`);\n        }}\n        filterOptions={RcDownshiftDefaultFilterOptions}\n        renderTags={(selectedItems, getTagProps) => {\n          return selectedItems.map((selectedItem, index) => {\n            const tagProps = getTagProps(selectedItem, index);\n\n            return (\n              <RcChip\n                {...tagProps}\n                deleteIconProps={{\n                  title: 'remove',\n                }}\n              />\n            );\n          });\n        }}\n      />\n      <Title>\n        no skip disabled option highlight\n        <br />\n        <RcText component=\"span\" variant=\"subheading2\" color=\"neutral.f04\">\n          (if you also like can be focus with mouse, use renderOption to custom\n          your render)\n        </RcText>\n      </Title>\n      <RcDownshift\n        {...args}\n        ref={ref}\n        action={actionRef}\n        options={options.slice(0, 10)}\n        openOnFocus\n        disabledItemsHighlightable\n        value={value}\n        getOptionDisabled={(option) => option.label?.includes('e') || false}\n        onChange={(selectedItems) => {\n          setValue(selectedItems);\n          console.log('onChange', selectedItems);\n        }}\n        onInputChange={(e) => {\n          console.log('textChange', e);\n        }}\n        onMaxFreeSolo={(max) => {\n          alert(`you get the max free sole count ${max}`);\n        }}\n        filterOptions={RcDownshiftDefaultFilterOptions}\n        renderTags={(selectedItems, getTagProps) => {\n          return selectedItems.map((selectedItem, index) => {\n            const tagProps = getTagProps(selectedItem, index);\n\n            return (\n              <RcChip\n                {...tagProps}\n                deleteIconProps={{\n                  title: 'remove',\n                }}\n              />\n            );\n          });\n        }}\n      />\n      <RcButton onClick={() => actionRef.current?.clearInput()}>\n        Clear input value\n      </RcButton>\n    </>\n  );\n};;\n\nDownshiftDisabled.args = {\n  label: 'Downshift',\n  placeholder: 'Search and select',\n  freeSolo: true,\n  toggleButton: true,\n  autoSelect: true,\n  gutterBottom: true,\n  multiple: true,\n};\n\nexport const DownshiftWithDynamic: Story<DownshiftProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  return (\n    <RcDownshift\n      {...args}\n      options={options}\n      value={value}\n      onChange={(selectedItems) => {\n        setValue(selectedItems);\n        console.log('onChange', selectedItems);\n      }}\n      filterOptions={RcDownshiftDefaultFilterOptions}\n      renderOption={(\n        { label, id, error, unSelectable, isSuggestion, isError, ...restProps },\n        state,\n      ) => (\n        <RcMenuItem\n          id={`${id}`}\n          {...{ ...restProps, component: 'div' }}\n          selected={state.selected}\n          key={`${id || label}-${state.index}`}\n        >\n          {state.index % 2 === 0 ? (\n            <RcBox bgcolor=\"neutral.b04\">\n              <br />\n              <br />\n              {label}\n              <br />\n              <br />\n            </RcBox>\n          ) : (\n            label\n          )}\n        </RcMenuItem>\n      )}\n    />\n  );\n};;\n\nDownshiftWithDynamic.args = {\n  label: 'Downshift',\n  placeholder: 'Search and select',\n  multiple: true,\n  clearBtn: true,\n  toggleButton: true,\n};\n\nexport const DownshiftWithAvatar: Story<DownshiftProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  return (\n    <>\n      <RcDownshift\n        {...args}\n        options={options}\n        value={value}\n        onChange={(selectedItems) => {\n          setValue(selectedItems);\n          console.log('onChange', selectedItems);\n        }}\n        filterOptions={RcDownshiftDefaultFilterOptions}\n        getOptionLabel={(option) => `${option.label} (Custom String)`}\n        gutterBottom\n      />\n      <RcDownshift\n        {...args}\n        options={options}\n        value={value}\n        onChange={(selectedItems) => {\n          setValue(selectedItems);\n          console.log('onChange', selectedItems);\n        }}\n        filterOptions={RcDownshiftDefaultFilterOptions}\n        renderOption={(\n          {\n            label,\n            id,\n            error,\n            unSelectable,\n            isSuggestion,\n            isError,\n            ...restProps\n          },\n          state,\n        ) => (\n          <RcMenuItem\n            id={`${id}`}\n            {...{ ...restProps, component: 'div' }}\n            selected={state.selected}\n            key={`${id || label}-${state.index}`}\n          >\n            <RcAvatar src={`https://placeimg.com/100/100/${state.index}`} />\n            <RcBox marginLeft=\"2rem\">{label}</RcBox>\n          </RcMenuItem>\n        )}\n      />\n    </>\n  );\n};;\n\nDownshiftWithAvatar.args = {\n  label: 'Downshift',\n  placeholder: 'Search and select',\n  multiple: true,\n  clearBtn: true,\n  toggleButton: true,\n};\n\nconst CustomDownshiftInputClasses = RcClasses<RcDownshiftProps['InputProps']>(\n  ['root', 'input'],\n  'CustomDownshiftInput',\n);\n\nconst CustomTextField = styled(RcTextField)`\n  .${CustomDownshiftInputClasses.root} {\n    padding-left: ${spacing(2)};\n    height: auto;\n  }\n\n  .${CustomDownshiftInputClasses.input} {\n    margin-left: 0;\n  }\n`;\n\nexport const DownshiftWithCustomInput: Story<DownshiftProps> = ({\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([]);\n\n  return (\n    <RcDownshift\n      {...args}\n      options={options}\n      value={value}\n      onChange={(selectedItems) => {\n        setValue(selectedItems);\n        console.log('onChange', selectedItems);\n      }}\n      renderInput={({ InputProps: InputPropsProp, ...params }) => {\n        const InputProps = combineProps(\n          { classes: CustomDownshiftInputClasses },\n          InputPropsProp,\n        );\n\n        return (\n          <CustomTextField\n            {...params}\n            InputProps={InputProps}\n            variant=\"outline\"\n          />\n        );\n      }}\n      filterOptions={RcDownshiftDefaultFilterOptions}\n    />\n  );\n};;\n\nDownshiftWithCustomInput.args = {\n  label: 'Downshift',\n  placeholder: 'Search and select',\n  multiple: true,\n  clearBtn: true,\n  toggleButton: true,\n};\n\nexport const DownshiftAutocomplete: Story<DownshiftProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  const [inputValue, setInputValue] = useState('');\n  const [value, setValue] = useState<RcDownshiftSelectedItem[]>([options[0]]);\n\n  return (\n    <RcDownshift\n      {...args}\n      variant=\"autocomplete\"\n      options={options}\n      onOpen={() => console.log('open')}\n      onClose={(e, r) => console.log('close', r)}\n      value={value}\n      onChange={(selectedItems) => {\n        setValue(selectedItems);\n        console.log('onChange', selectedItems);\n      }}\n      inputValue={inputValue}\n      onInputChange={(value) => {\n        setInputValue(value || '');\n        console.log('input change', value);\n      }}\n      SuggestionListProps={{\n        padding: true,\n      }}\n    />\n  );\n};\n\nDownshiftAutocomplete.args = {\n  label: 'Downshift',\n  placeholder: 'Search and select',\n  multiple: false,\n  clearBtn: true,\n  toggleButton: true,\n  disableCloseOnSelect: false,\n  openOnFocus: true,\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, FunctionComponent, useState } from 'react';\\n\\nimport range from 'lodash/range';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, radius, spacing, styled } from '../../../foundation';\\nimport {\\n  Delete,\\n  Draft,\\n  Email,\\n  Inbox,\\n  NewEmail,\\n  SendFilled,\\n  Voicemail,\\n} from '../../../icon';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcAvatar } from '../../Avatar';\\nimport avatar from '../../Avatar/__stories__/img/avatar.jpg';\\nimport { RcBox } from '../../Box';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcDialog, RcDialogContent, RcDialogTitle } from '../../Dialog';\\nimport { RcDivider } from '../../Divider';\\nimport { RcSelect, RcSwitch } from '../../Forms';\\nimport { RcIcon } from '../../Icon';\\nimport { RcList, RcListItem, RcListItemIcon, RcListItemText } from '../../List';\\nimport { RcMenuItem } from '../../Menu/MenuItem';\\nimport { RcMenuList } from '../../Menu/MenuList';\\nimport { RcPaper } from '../../Paper';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\nimport { RcDrawer } from '../Drawer';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Drawer',\\n  component: RcDrawer,\\n  argTypes: {\\n    ...sortInDocTable<keyof DrawerProps>([\\n      'anchor',\\n      'inlinePaper',\\n      'elevation',\\n    ]),\\n    ...notControlInDocTable<keyof DrawerProps>(['open', 'variant']),\\n    ...notShowInDocTable<keyof DrawerProps>([]),\\n  },\\n} as Meta;\\n\\ntype DrawerProps = ComponentProps<typeof RcDrawer>;\\n\\ntype Anchor = NonNullable<DrawerProps['anchor']>;\\n\\nconst CustomPaper = styled(RcPaper)`\\n  ${flexCenterStyle}\\n  flex-direction: column;\\n  padding: ${spacing(4, 6, 3, 6)};\\n\\n  .mt-2 {\\n    margin-top: ${spacing(2)};\\n  }\\n`;\\n\\nconst List: FunctionComponent<{\\n  onClick: React.MouseEventHandler<HTMLDivElement> | undefined;\\n}> = ({ onClick }) => (\\n  <RcList style={{ width: '100%' }}>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Inbox} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Inbox\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={NewEmail} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Starred\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={SendFilled} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Send email\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Draft} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Drafts\\\" />\\n    </RcListItem>\\n    <RcDivider component=\\\"li\\\" />\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Email} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"All mail\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Delete} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Trash\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Voicemail} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Voicemail\\\" />\\n    </RcListItem>\\n  </RcList>\\n);\\n\\nexport const Drawer: Story<DrawerProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpen(true)}>open</RcButton>\\n      <RcDrawer {...args} open={open} onClose={() => setOpen(false)}>\\n        <List onClick={() => setOpen(false)} />\\n      </RcDrawer>\\n    </>\\n  );\\n};\\n\\nDrawer.storyName = 'Drawer';\\n\\nDrawer.args = {};\\n\\nDrawer.argTypes = {\\n  ...notControlInDocTable<keyof DrawerProps>(['anchor', 'inlinePaper']),\\n};\\n\\nDrawer.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/drawers',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const DrawerExamples: Story<DrawerProps> = ({\\n  children,\\n  inlinePaper,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [state, setState] = React.useState({\\n    top: false,\\n    left: false,\\n    bottom: false,\\n    right: false,\\n  });\\n\\n  const toggleDrawer =\\n    (anchor: Anchor, open: boolean) =>\\n    (\\n      event: React.KeyboardEvent | React.MouseEvent,\\n      reason?: 'backdropClick' | 'escapeKeyDown',\\n    ) => {\\n      console.log(event, reason);\\n      setState({ ...state, [anchor]: open });\\n    };\\n\\n  return (\\n    <div>\\n      {(['left', 'right', 'top', 'bottom'] as Anchor[]).map((anchor) => (\\n        <React.Fragment key={anchor}>\\n          <RcButton onClick={toggleDrawer(anchor, true)}>{anchor}</RcButton>\\n          <RcDrawer\\n            anchor={anchor}\\n            open={state[anchor]}\\n            onClose={toggleDrawer(anchor, false)}\\n            inlinePaper={inlinePaper}\\n            {...args}\\n          >\\n            <RcBox maxWidth={inlinePaper ? '300px' : undefined} clone>\\n              <CustomPaper as={inlinePaper ? undefined : 'div'}>\\n                <List onClick={toggleDrawer(anchor, false)} />\\n              </CustomPaper>\\n            </RcBox>\\n          </RcDrawer>\\n        </React.Fragment>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nDrawerExamples.args = {};\\n\\nDrawerExamples.argTypes = {\\n  ...notControlInDocTable<keyof DrawerProps>(['anchor']),\\n};\\n\\nexport const DrawerWithInlinePaper: Story<DrawerProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpen(true)}>open</RcButton>\\n      <RcDrawer\\n        {...args}\\n        inlinePaper\\n        open={open}\\n        onClose={() => setOpen(false)}\\n      >\\n        <CustomPaper>\\n          <List onClick={() => setOpen(false)} />\\n        </CustomPaper>\\n      </RcDrawer>\\n    </>\\n  );\\n};\\n\\nDrawerWithInlinePaper.args = {\\n  anchor: 'bottom',\\n  radius: 'xl',\\n};\\n\\n// https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\\nfunction checkIsMobile() {\\n  let check = false;\\n  (function (a) {\\n    if (\\n      /(android|bb\\\\d+|meego).+mobile|avantgo|bada\\\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\\n        a,\\n      ) ||\\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\\n        a.substr(0, 4),\\n      )\\n    )\\n      check = true;\\n  })(navigator.userAgent || navigator.vendor || (window as any).opera);\\n  return check;\\n}\\n\\nconst isMobile = checkIsMobile();\\n\\nconst Text = styled(RcText)`\\n  margin: ${spacing(4)};\\n`;\\n\\nconst Button = styled(RcButton)`\\n  && {\\n    padding: ${spacing(5, 0)};\\n  }\\n`;\\n\\nconst CustomDrawer = styled(RcDrawer)`\\n  ${RcPaper}${RcPaper} {\\n    min-width: 360px;\\n    border-radius: ${radius('md')};\\n    margin-bottom: ${spacing(2)};\\n  }\\n`;\\n\\nconst DialogContent = styled(RcDialogContent)`\\n  && {\\n    padding: 0;\\n  }\\n`;\\n\\nconst ListTitle = styled(RcText)`\\n  margin: ${spacing(2, 4)};\\n`;\\n\\nListTitle.defaultProps = {\\n  color: 'neutral.f04',\\n  variant: 'caption1',\\n};\\n\\nconst items = range(0, 20);\\n\\nexport const DrawerAndModalSwitchInDevice: Story<DrawerProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n  const [open2, setOpen2] = useState(false);\\n\\n  const [mobile, setMobile] = useState(isMobile);\\n\\n  const handleClose = () => setOpen(false);\\n  const handleClose2 = () => setOpen2(false);\\n\\n  const header = (\\n    <>\\n      <Text align=\\\"center\\\" color=\\\"neutral.f04\\\" variant=\\\"caption1\\\">\\n        Are you sure you want to leave this webinar?\\n      </Text>\\n      <RcDivider />\\n    </>\\n  );\\n\\n  const confirm = (\\n    <Button onClick={handleClose} color=\\\"danger.f02\\\" variant=\\\"plain\\\" fullWidth>\\n      Leave\\n    </Button>\\n  );\\n\\n  const cancel = (\\n    <Button\\n      onClick={handleClose}\\n      color=\\\"interactive.f01\\\"\\n      variant=\\\"plain\\\"\\n      fullWidth\\n    >\\n      Cancel\\n    </Button>\\n  );\\n\\n  const content = (\\n    <>\\n      <RcDialogTitle>\\n        How Covid 19 has changed workplace permanently\\n      </RcDialogTitle>\\n      <DialogContent dividers>\\n        <RcMenuList maxHeight={300}>\\n          <ListTitle>Host</ListTitle>\\n          <RcMenuItem avatar={<RcAvatar src={avatar} size=\\\"small\\\" />}>\\n            <RcListItemText primary={'label'} />\\n          </RcMenuItem>\\n          <ListTitle>Panelists</ListTitle>\\n          {items.map((x) => (\\n            <RcMenuItem key={x} avatar={<RcAvatar src={avatar} size=\\\"small\\\" />}>\\n              <RcListItemText primary={`User Name ${x}`} />\\n            </RcMenuItem>\\n          ))}\\n        </RcMenuList>\\n      </DialogContent>\\n    </>\\n  );\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpen(true)}>open confirm</RcButton>\\n      <br />\\n      <br />\\n      <RcButton onClick={() => setOpen2(true)}>open details</RcButton>\\n      <Title>current is {mobile ? 'mobile' : 'desktop'}</Title>\\n      <RcButton color=\\\"highlight.b01\\\" onClick={() => setMobile(!mobile)}>\\n        switch to {mobile ? 'desktop' : 'mobile'}\\n      </RcButton>\\n      {mobile ? (\\n        <CustomDrawer\\n          {...args}\\n          inlinePaper\\n          open={open}\\n          onClose={handleClose}\\n          // if you don't what background add that\\n          // BackdropProps={{ invisible: true }}\\n        >\\n          <RcPaper>\\n            {header}\\n            {confirm}\\n          </RcPaper>\\n          <RcPaper>{cancel}</RcPaper>\\n        </CustomDrawer>\\n      ) : (\\n        <RcDialog maxWidth=\\\"xs\\\" open={open} onClose={handleClose}>\\n          {header}\\n          {confirm}\\n          {cancel}\\n        </RcDialog>\\n      )}\\n\\n      {mobile ? (\\n        <CustomDrawer\\n          {...args}\\n          open={open2}\\n          radius=\\\"md\\\"\\n          onClose={handleClose2}\\n          // if you don't what background add that\\n          // BackdropProps={{ invisible: true }}\\n        >\\n          {content}\\n        </CustomDrawer>\\n      ) : (\\n        <RcDialog maxWidth=\\\"xs\\\" open={open2} onClose={handleClose2}>\\n          {content}\\n        </RcDialog>\\n      )}\\n    </>\\n  );\\n};\\n\\nDrawerAndModalSwitchInDevice.args = {\\n  anchor: 'bottom',\\n  radius: 'xl',\\n};\\n\\nconst SelectDemo = () => {\\n  const [value, setValue] = useState(0);\\n  return (\\n    <RcSelect\\n      variant=\\\"box\\\"\\n      value={value}\\n      onChange={(evt) => setValue(evt.target.value as any)}\\n    >\\n      {Array.from(new Array(20).keys()).map((item) => (\\n        <RcMenuItem key={item} value={item}>\\n          MenuItem {item}\\n        </RcMenuItem>\\n      ))}\\n    </RcSelect>\\n  );\\n};\\n\\nexport const MultiDrawer: Story<DrawerProps> = ({ children, ...args }) => {\\n  const [opens, setOpens] = useState({});\\n  const [keepDrawer, setKeepDrawer] = useState(true);\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpens({ ...opens, level_0: true })}>\\n        open Drawer 0\\n      </RcButton>\\n      <RcSwitch\\n        label=\\\"Toggle Drawer Keep\\\"\\n        onChange={() => setKeepDrawer(!keepDrawer)}\\n      />\\n      <RcDrawer\\n        {...args}\\n        data-drawer-level=\\\"0\\\"\\n        open={opens['level_0']}\\n        onClose={() => setOpens({ ...opens, level_0: false })}\\n      >\\n        <RcTypography variant=\\\"headline1\\\">Drawer 0</RcTypography>\\n        <RcDivider />\\n        <SelectDemo />\\n        <RcDivider />\\n        <RcList>\\n          <RcListItem>ListItem 0 - 0</RcListItem>\\n          <RcListItem>ListItem 0 - 1</RcListItem>\\n          <RcListItem>ListItem 0 - 2</RcListItem>\\n          <RcListItem\\n            onClick={() =>\\n              setOpens({\\n                ...opens,\\n                level_1: true,\\n                level_0: !!keepDrawer,\\n              })\\n            }\\n          >\\n            Open Drawer 1\\n          </RcListItem>\\n          <RcListItem onClick={() => setOpens({ ...opens, level_0: false })}>\\n            Close Drawer 0\\n          </RcListItem>\\n        </RcList>\\n      </RcDrawer>\\n      <RcDrawer\\n        {...args}\\n        data-drawer-level=\\\"1\\\"\\n        open={opens['level_1']}\\n        onClose={() => setOpens({ ...opens, level_1: false })}\\n      >\\n        <RcTypography variant=\\\"headline1\\\">Drawer 1</RcTypography>\\n        <RcDivider />\\n        <RcList>\\n          <RcListItem>ListItem 1 - 0</RcListItem>\\n          <RcListItem>ListItem 1 - 1</RcListItem>\\n          <RcListItem\\n            onClick={() =>\\n              setOpens({ ...opens, level_2: true, level_1: !!keepDrawer })\\n            }\\n          >\\n            Open Drawer 2\\n          </RcListItem>\\n          <RcListItem onClick={() => setOpens({ ...opens, level_1: false })}>\\n            Close Drawer 1\\n          </RcListItem>\\n        </RcList>\\n      </RcDrawer>\\n      <RcDrawer\\n        {...args}\\n        data-drawer-level=\\\"2\\\"\\n        open={opens['level_2']}\\n        onClose={() => setOpens({ ...opens, level_2: false })}\\n      >\\n        <RcTypography variant=\\\"headline1\\\">Drawer 2</RcTypography>\\n        <RcDivider />\\n        <SelectDemo />\\n        <RcDivider />\\n        <RcList>\\n          <RcListItem>ListItem 2 - 0</RcListItem>\\n          <RcListItem>ListItem 2 - 1</RcListItem>\\n          <RcListItem onClick={() => setOpens({ ...opens, level_2: false })}>\\n            Close Drawer 2\\n          </RcListItem>\\n        </RcList>\\n      </RcDrawer>\\n    </>\\n  );\\n};\\n\\nMultiDrawer.args = {\\n  anchor: 'bottom',\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Drawer\":{\"startLoc\":{\"col\":42,\"line\":118},\"endLoc\":{\"col\":1,\"line\":131},\"startBody\":{\"col\":42,\"line\":118},\"endBody\":{\"col\":1,\"line\":131}},\"DrawerExamples\":{\"startLoc\":{\"col\":50,\"line\":154},\"endLoc\":{\"col\":1,\"line\":200},\"startBody\":{\"col\":50,\"line\":154},\"endBody\":{\"col\":1,\"line\":200}},\"DrawerWithInlinePaper\":{\"startLoc\":{\"col\":57,\"line\":208},\"endLoc\":{\"col\":1,\"line\":231},\"startBody\":{\"col\":57,\"line\":208},\"endBody\":{\"col\":1,\"line\":231}},\"DrawerAndModalSwitchInDevice\":{\"startLoc\":{\"col\":64,\"line\":292},\"endLoc\":{\"col\":1,\"line\":405},\"startBody\":{\"col\":64,\"line\":292},\"endBody\":{\"col\":1,\"line\":405}},\"MultiDrawer\":{\"startLoc\":{\"col\":47,\"line\":429},\"endLoc\":{\"col\":1,\"line\":515},\"startBody\":{\"col\":47,\"line\":429},\"endBody\":{\"col\":1,\"line\":515}}};\n    \nimport React, { ComponentProps, FunctionComponent, useState } from 'react';\n\nimport range from 'lodash/range';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { flexCenterStyle, radius, spacing, styled } from '../../../foundation';\nimport {\n  Delete,\n  Draft,\n  Email,\n  Inbox,\n  NewEmail,\n  SendFilled,\n  Voicemail,\n} from '../../../icon';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { Title } from '../../../storybook/components';\nimport { RcAvatar } from '../../Avatar';\nimport avatar from '../../Avatar/__stories__/img/avatar.jpg';\nimport { RcBox } from '../../Box';\nimport { RcButton } from '../../Buttons/Button';\nimport { RcDialog, RcDialogContent, RcDialogTitle } from '../../Dialog';\nimport { RcDivider } from '../../Divider';\nimport { RcSelect, RcSwitch } from '../../Forms';\nimport { RcIcon } from '../../Icon';\nimport { RcList, RcListItem, RcListItemIcon, RcListItemText } from '../../List';\nimport { RcMenuItem } from '../../Menu/MenuItem';\nimport { RcMenuList } from '../../Menu/MenuList';\nimport { RcPaper } from '../../Paper';\nimport { RcText } from '../../Text';\nimport { RcTypography } from '../../Typography';\nimport { RcDrawer } from '../Drawer';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, FunctionComponent, useState } from 'react';\\n\\nimport range from 'lodash/range';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, radius, spacing, styled } from '../../../foundation';\\nimport {\\n  Delete,\\n  Draft,\\n  Email,\\n  Inbox,\\n  NewEmail,\\n  SendFilled,\\n  Voicemail,\\n} from '../../../icon';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcAvatar } from '../../Avatar';\\nimport avatar from '../../Avatar/__stories__/img/avatar.jpg';\\nimport { RcBox } from '../../Box';\\nimport { RcButton } from '../../Buttons/Button';\\nimport { RcDialog, RcDialogContent, RcDialogTitle } from '../../Dialog';\\nimport { RcDivider } from '../../Divider';\\nimport { RcSelect, RcSwitch } from '../../Forms';\\nimport { RcIcon } from '../../Icon';\\nimport { RcList, RcListItem, RcListItemIcon, RcListItemText } from '../../List';\\nimport { RcMenuItem } from '../../Menu/MenuItem';\\nimport { RcMenuList } from '../../Menu/MenuList';\\nimport { RcPaper } from '../../Paper';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\nimport { RcDrawer } from '../Drawer';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Drawer',\\n  component: RcDrawer,\\n  argTypes: {\\n    ...sortInDocTable<keyof DrawerProps>([\\n      'anchor',\\n      'inlinePaper',\\n      'elevation',\\n    ]),\\n    ...notControlInDocTable<keyof DrawerProps>(['open', 'variant']),\\n    ...notShowInDocTable<keyof DrawerProps>([]),\\n  },\\n} as Meta;\\n\\ntype DrawerProps = ComponentProps<typeof RcDrawer>;\\n\\ntype Anchor = NonNullable<DrawerProps['anchor']>;\\n\\nconst CustomPaper = styled(RcPaper)`\\n  ${flexCenterStyle}\\n  flex-direction: column;\\n  padding: ${spacing(4, 6, 3, 6)};\\n\\n  .mt-2 {\\n    margin-top: ${spacing(2)};\\n  }\\n`;\\n\\nconst List: FunctionComponent<{\\n  onClick: React.MouseEventHandler<HTMLDivElement> | undefined;\\n}> = ({ onClick }) => (\\n  <RcList style={{ width: '100%' }}>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Inbox} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Inbox\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={NewEmail} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Starred\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={SendFilled} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Send email\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Draft} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Drafts\\\" />\\n    </RcListItem>\\n    <RcDivider component=\\\"li\\\" />\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Email} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"All mail\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Delete} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Trash\\\" />\\n    </RcListItem>\\n    <RcListItem onClick={onClick}>\\n      <RcListItemIcon>\\n        <RcIcon title=\\\"favorite\\\" symbol={Voicemail} size=\\\"small\\\" />\\n      </RcListItemIcon>\\n      <RcListItemText primary=\\\"Voicemail\\\" />\\n    </RcListItem>\\n  </RcList>\\n);\\n\\nexport const Drawer: Story<DrawerProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpen(true)}>open</RcButton>\\n      <RcDrawer {...args} open={open} onClose={() => setOpen(false)}>\\n        <List onClick={() => setOpen(false)} />\\n      </RcDrawer>\\n    </>\\n  );\\n};\\n\\nDrawer.storyName = 'Drawer';\\n\\nDrawer.args = {};\\n\\nDrawer.argTypes = {\\n  ...notControlInDocTable<keyof DrawerProps>(['anchor', 'inlinePaper']),\\n};\\n\\nDrawer.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/drawers',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const DrawerExamples: Story<DrawerProps> = ({\\n  children,\\n  inlinePaper,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [state, setState] = React.useState({\\n    top: false,\\n    left: false,\\n    bottom: false,\\n    right: false,\\n  });\\n\\n  const toggleDrawer =\\n    (anchor: Anchor, open: boolean) =>\\n    (\\n      event: React.KeyboardEvent | React.MouseEvent,\\n      reason?: 'backdropClick' | 'escapeKeyDown',\\n    ) => {\\n      console.log(event, reason);\\n      setState({ ...state, [anchor]: open });\\n    };\\n\\n  return (\\n    <div>\\n      {(['left', 'right', 'top', 'bottom'] as Anchor[]).map((anchor) => (\\n        <React.Fragment key={anchor}>\\n          <RcButton onClick={toggleDrawer(anchor, true)}>{anchor}</RcButton>\\n          <RcDrawer\\n            anchor={anchor}\\n            open={state[anchor]}\\n            onClose={toggleDrawer(anchor, false)}\\n            inlinePaper={inlinePaper}\\n            {...args}\\n          >\\n            <RcBox maxWidth={inlinePaper ? '300px' : undefined} clone>\\n              <CustomPaper as={inlinePaper ? undefined : 'div'}>\\n                <List onClick={toggleDrawer(anchor, false)} />\\n              </CustomPaper>\\n            </RcBox>\\n          </RcDrawer>\\n        </React.Fragment>\\n      ))}\\n    </div>\\n  );\\n};\\n\\nDrawerExamples.args = {};\\n\\nDrawerExamples.argTypes = {\\n  ...notControlInDocTable<keyof DrawerProps>(['anchor']),\\n};\\n\\nexport const DrawerWithInlinePaper: Story<DrawerProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpen(true)}>open</RcButton>\\n      <RcDrawer\\n        {...args}\\n        inlinePaper\\n        open={open}\\n        onClose={() => setOpen(false)}\\n      >\\n        <CustomPaper>\\n          <List onClick={() => setOpen(false)} />\\n        </CustomPaper>\\n      </RcDrawer>\\n    </>\\n  );\\n};\\n\\nDrawerWithInlinePaper.args = {\\n  anchor: 'bottom',\\n  radius: 'xl',\\n};\\n\\n// https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\\nfunction checkIsMobile() {\\n  let check = false;\\n  (function (a) {\\n    if (\\n      /(android|bb\\\\d+|meego).+mobile|avantgo|bada\\\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\\n        a,\\n      ) ||\\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\\n        a.substr(0, 4),\\n      )\\n    )\\n      check = true;\\n  })(navigator.userAgent || navigator.vendor || (window as any).opera);\\n  return check;\\n}\\n\\nconst isMobile = checkIsMobile();\\n\\nconst Text = styled(RcText)`\\n  margin: ${spacing(4)};\\n`;\\n\\nconst Button = styled(RcButton)`\\n  && {\\n    padding: ${spacing(5, 0)};\\n  }\\n`;\\n\\nconst CustomDrawer = styled(RcDrawer)`\\n  ${RcPaper}${RcPaper} {\\n    min-width: 360px;\\n    border-radius: ${radius('md')};\\n    margin-bottom: ${spacing(2)};\\n  }\\n`;\\n\\nconst DialogContent = styled(RcDialogContent)`\\n  && {\\n    padding: 0;\\n  }\\n`;\\n\\nconst ListTitle = styled(RcText)`\\n  margin: ${spacing(2, 4)};\\n`;\\n\\nListTitle.defaultProps = {\\n  color: 'neutral.f04',\\n  variant: 'caption1',\\n};\\n\\nconst items = range(0, 20);\\n\\nexport const DrawerAndModalSwitchInDevice: Story<DrawerProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [open, setOpen] = useState(false);\\n  const [open2, setOpen2] = useState(false);\\n\\n  const [mobile, setMobile] = useState(isMobile);\\n\\n  const handleClose = () => setOpen(false);\\n  const handleClose2 = () => setOpen2(false);\\n\\n  const header = (\\n    <>\\n      <Text align=\\\"center\\\" color=\\\"neutral.f04\\\" variant=\\\"caption1\\\">\\n        Are you sure you want to leave this webinar?\\n      </Text>\\n      <RcDivider />\\n    </>\\n  );\\n\\n  const confirm = (\\n    <Button onClick={handleClose} color=\\\"danger.f02\\\" variant=\\\"plain\\\" fullWidth>\\n      Leave\\n    </Button>\\n  );\\n\\n  const cancel = (\\n    <Button\\n      onClick={handleClose}\\n      color=\\\"interactive.f01\\\"\\n      variant=\\\"plain\\\"\\n      fullWidth\\n    >\\n      Cancel\\n    </Button>\\n  );\\n\\n  const content = (\\n    <>\\n      <RcDialogTitle>\\n        How Covid 19 has changed workplace permanently\\n      </RcDialogTitle>\\n      <DialogContent dividers>\\n        <RcMenuList maxHeight={300}>\\n          <ListTitle>Host</ListTitle>\\n          <RcMenuItem avatar={<RcAvatar src={avatar} size=\\\"small\\\" />}>\\n            <RcListItemText primary={'label'} />\\n          </RcMenuItem>\\n          <ListTitle>Panelists</ListTitle>\\n          {items.map((x) => (\\n            <RcMenuItem key={x} avatar={<RcAvatar src={avatar} size=\\\"small\\\" />}>\\n              <RcListItemText primary={`User Name ${x}`} />\\n            </RcMenuItem>\\n          ))}\\n        </RcMenuList>\\n      </DialogContent>\\n    </>\\n  );\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpen(true)}>open confirm</RcButton>\\n      <br />\\n      <br />\\n      <RcButton onClick={() => setOpen2(true)}>open details</RcButton>\\n      <Title>current is {mobile ? 'mobile' : 'desktop'}</Title>\\n      <RcButton color=\\\"highlight.b01\\\" onClick={() => setMobile(!mobile)}>\\n        switch to {mobile ? 'desktop' : 'mobile'}\\n      </RcButton>\\n      {mobile ? (\\n        <CustomDrawer\\n          {...args}\\n          inlinePaper\\n          open={open}\\n          onClose={handleClose}\\n          // if you don't what background add that\\n          // BackdropProps={{ invisible: true }}\\n        >\\n          <RcPaper>\\n            {header}\\n            {confirm}\\n          </RcPaper>\\n          <RcPaper>{cancel}</RcPaper>\\n        </CustomDrawer>\\n      ) : (\\n        <RcDialog maxWidth=\\\"xs\\\" open={open} onClose={handleClose}>\\n          {header}\\n          {confirm}\\n          {cancel}\\n        </RcDialog>\\n      )}\\n\\n      {mobile ? (\\n        <CustomDrawer\\n          {...args}\\n          open={open2}\\n          radius=\\\"md\\\"\\n          onClose={handleClose2}\\n          // if you don't what background add that\\n          // BackdropProps={{ invisible: true }}\\n        >\\n          {content}\\n        </CustomDrawer>\\n      ) : (\\n        <RcDialog maxWidth=\\\"xs\\\" open={open2} onClose={handleClose2}>\\n          {content}\\n        </RcDialog>\\n      )}\\n    </>\\n  );\\n};\\n\\nDrawerAndModalSwitchInDevice.args = {\\n  anchor: 'bottom',\\n  radius: 'xl',\\n};\\n\\nconst SelectDemo = () => {\\n  const [value, setValue] = useState(0);\\n  return (\\n    <RcSelect\\n      variant=\\\"box\\\"\\n      value={value}\\n      onChange={(evt) => setValue(evt.target.value as any)}\\n    >\\n      {Array.from(new Array(20).keys()).map((item) => (\\n        <RcMenuItem key={item} value={item}>\\n          MenuItem {item}\\n        </RcMenuItem>\\n      ))}\\n    </RcSelect>\\n  );\\n};\\n\\nexport const MultiDrawer: Story<DrawerProps> = ({ children, ...args }) => {\\n  const [opens, setOpens] = useState({});\\n  const [keepDrawer, setKeepDrawer] = useState(true);\\n\\n  return (\\n    <>\\n      <RcButton onClick={() => setOpens({ ...opens, level_0: true })}>\\n        open Drawer 0\\n      </RcButton>\\n      <RcSwitch\\n        label=\\\"Toggle Drawer Keep\\\"\\n        onChange={() => setKeepDrawer(!keepDrawer)}\\n      />\\n      <RcDrawer\\n        {...args}\\n        data-drawer-level=\\\"0\\\"\\n        open={opens['level_0']}\\n        onClose={() => setOpens({ ...opens, level_0: false })}\\n      >\\n        <RcTypography variant=\\\"headline1\\\">Drawer 0</RcTypography>\\n        <RcDivider />\\n        <SelectDemo />\\n        <RcDivider />\\n        <RcList>\\n          <RcListItem>ListItem 0 - 0</RcListItem>\\n          <RcListItem>ListItem 0 - 1</RcListItem>\\n          <RcListItem>ListItem 0 - 2</RcListItem>\\n          <RcListItem\\n            onClick={() =>\\n              setOpens({\\n                ...opens,\\n                level_1: true,\\n                level_0: !!keepDrawer,\\n              })\\n            }\\n          >\\n            Open Drawer 1\\n          </RcListItem>\\n          <RcListItem onClick={() => setOpens({ ...opens, level_0: false })}>\\n            Close Drawer 0\\n          </RcListItem>\\n        </RcList>\\n      </RcDrawer>\\n      <RcDrawer\\n        {...args}\\n        data-drawer-level=\\\"1\\\"\\n        open={opens['level_1']}\\n        onClose={() => setOpens({ ...opens, level_1: false })}\\n      >\\n        <RcTypography variant=\\\"headline1\\\">Drawer 1</RcTypography>\\n        <RcDivider />\\n        <RcList>\\n          <RcListItem>ListItem 1 - 0</RcListItem>\\n          <RcListItem>ListItem 1 - 1</RcListItem>\\n          <RcListItem\\n            onClick={() =>\\n              setOpens({ ...opens, level_2: true, level_1: !!keepDrawer })\\n            }\\n          >\\n            Open Drawer 2\\n          </RcListItem>\\n          <RcListItem onClick={() => setOpens({ ...opens, level_1: false })}>\\n            Close Drawer 1\\n          </RcListItem>\\n        </RcList>\\n      </RcDrawer>\\n      <RcDrawer\\n        {...args}\\n        data-drawer-level=\\\"2\\\"\\n        open={opens['level_2']}\\n        onClose={() => setOpens({ ...opens, level_2: false })}\\n      >\\n        <RcTypography variant=\\\"headline1\\\">Drawer 2</RcTypography>\\n        <RcDivider />\\n        <SelectDemo />\\n        <RcDivider />\\n        <RcList>\\n          <RcListItem>ListItem 2 - 0</RcListItem>\\n          <RcListItem>ListItem 2 - 1</RcListItem>\\n          <RcListItem onClick={() => setOpens({ ...opens, level_2: false })}>\\n            Close Drawer 2\\n          </RcListItem>\\n        </RcList>\\n      </RcDrawer>\\n    </>\\n  );\\n};\\n\\nMultiDrawer.args = {\\n  anchor: 'bottom',\\n};\\n\",\"locationsMap\":{\"drawer\":{\"startLoc\":{\"col\":42,\"line\":118},\"endLoc\":{\"col\":1,\"line\":131},\"startBody\":{\"col\":42,\"line\":118},\"endBody\":{\"col\":1,\"line\":131}},\"drawer-examples\":{\"startLoc\":{\"col\":50,\"line\":154},\"endLoc\":{\"col\":1,\"line\":200},\"startBody\":{\"col\":50,\"line\":154},\"endBody\":{\"col\":1,\"line\":200}},\"drawer-with-inline-paper\":{\"startLoc\":{\"col\":57,\"line\":208},\"endLoc\":{\"col\":1,\"line\":231},\"startBody\":{\"col\":57,\"line\":208},\"endBody\":{\"col\":1,\"line\":231}},\"drawer-and-modal-switch-in-device\":{\"startLoc\":{\"col\":64,\"line\":292},\"endLoc\":{\"col\":1,\"line\":405},\"startBody\":{\"col\":64,\"line\":292},\"endBody\":{\"col\":1,\"line\":405}},\"multi-drawer\":{\"startLoc\":{\"col\":47,\"line\":429},\"endLoc\":{\"col\":1,\"line\":515},\"startBody\":{\"col\":47,\"line\":429},\"endBody\":{\"col\":1,\"line\":515}}}},},\n  title: '🚀 Cleanup Components/Drawer',\n  component: RcDrawer,\n  argTypes: {\n    ...sortInDocTable<keyof DrawerProps>([\n      'anchor',\n      'inlinePaper',\n      'elevation',\n    ]),\n    ...notControlInDocTable<keyof DrawerProps>(['open', 'variant']),\n    ...notShowInDocTable<keyof DrawerProps>([]),\n  },\n} as Meta;\n\ntype DrawerProps = ComponentProps<typeof RcDrawer>;\n\ntype Anchor = NonNullable<DrawerProps['anchor']>;\n\nconst CustomPaper = styled(RcPaper)`\n  ${flexCenterStyle}\n  flex-direction: column;\n  padding: ${spacing(4, 6, 3, 6)};\n\n  .mt-2 {\n    margin-top: ${spacing(2)};\n  }\n`;\n\nconst List: FunctionComponent<{\n  onClick: React.MouseEventHandler<HTMLDivElement> | undefined;\n}> = ({ onClick }) => (\n  <RcList style={{ width: '100%' }}>\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={Inbox} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"Inbox\" />\n    </RcListItem>\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={NewEmail} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"Starred\" />\n    </RcListItem>\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={SendFilled} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"Send email\" />\n    </RcListItem>\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={Draft} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"Drafts\" />\n    </RcListItem>\n    <RcDivider component=\"li\" />\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={Email} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"All mail\" />\n    </RcListItem>\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={Delete} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"Trash\" />\n    </RcListItem>\n    <RcListItem onClick={onClick}>\n      <RcListItemIcon>\n        <RcIcon title=\"favorite\" symbol={Voicemail} size=\"small\" />\n      </RcListItemIcon>\n      <RcListItemText primary=\"Voicemail\" />\n    </RcListItem>\n  </RcList>\n);\n\nexport const Drawer: Story<DrawerProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <RcButton onClick={() => setOpen(true)}>open</RcButton>\n      <RcDrawer {...args} open={open} onClose={() => setOpen(false)}>\n        <List onClick={() => setOpen(false)} />\n      </RcDrawer>\n    </>\n  );\n};;\n\nDrawer.storyName = 'Drawer';\n\nDrawer.args = {};\n\nDrawer.argTypes = {\n  ...notControlInDocTable<keyof DrawerProps>(['anchor', 'inlinePaper']),\n};\n\nDrawer.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/drawers',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nexport const DrawerExamples: Story<DrawerProps> = ({\n  children,\n  inlinePaper,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [state, setState] = React.useState({\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  });\n\n  const toggleDrawer =\n    (anchor: Anchor, open: boolean) =>\n    (\n      event: React.KeyboardEvent | React.MouseEvent,\n      reason?: 'backdropClick' | 'escapeKeyDown',\n    ) => {\n      console.log(event, reason);\n      setState({ ...state, [anchor]: open });\n    };\n\n  return (\n    <div>\n      {(['left', 'right', 'top', 'bottom'] as Anchor[]).map((anchor) => (\n        <React.Fragment key={anchor}>\n          <RcButton onClick={toggleDrawer(anchor, true)}>{anchor}</RcButton>\n          <RcDrawer\n            anchor={anchor}\n            open={state[anchor]}\n            onClose={toggleDrawer(anchor, false)}\n            inlinePaper={inlinePaper}\n            {...args}\n          >\n            <RcBox maxWidth={inlinePaper ? '300px' : undefined} clone>\n              <CustomPaper as={inlinePaper ? undefined : 'div'}>\n                <List onClick={toggleDrawer(anchor, false)} />\n              </CustomPaper>\n            </RcBox>\n          </RcDrawer>\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};;\n\nDrawerExamples.args = {};\n\nDrawerExamples.argTypes = {\n  ...notControlInDocTable<keyof DrawerProps>(['anchor']),\n};\n\nexport const DrawerWithInlinePaper: Story<DrawerProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <RcButton onClick={() => setOpen(true)}>open</RcButton>\n      <RcDrawer\n        {...args}\n        inlinePaper\n        open={open}\n        onClose={() => setOpen(false)}\n      >\n        <CustomPaper>\n          <List onClick={() => setOpen(false)} />\n        </CustomPaper>\n      </RcDrawer>\n    </>\n  );\n};;\n\nDrawerWithInlinePaper.args = {\n  anchor: 'bottom',\n  radius: 'xl',\n};\n\n// https://stackoverflow.com/questions/11381673/detecting-a-mobile-browser\nfunction checkIsMobile() {\n  let check = false;\n  (function (a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n        a,\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(\n        a.substr(0, 4),\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || (window as any).opera);\n  return check;\n}\n\nconst isMobile = checkIsMobile();\n\nconst Text = styled(RcText)`\n  margin: ${spacing(4)};\n`;\n\nconst Button = styled(RcButton)`\n  && {\n    padding: ${spacing(5, 0)};\n  }\n`;\n\nconst CustomDrawer = styled(RcDrawer)`\n  ${RcPaper}${RcPaper} {\n    min-width: 360px;\n    border-radius: ${radius('md')};\n    margin-bottom: ${spacing(2)};\n  }\n`;\n\nconst DialogContent = styled(RcDialogContent)`\n  && {\n    padding: 0;\n  }\n`;\n\nconst ListTitle = styled(RcText)`\n  margin: ${spacing(2, 4)};\n`;\n\nListTitle.defaultProps = {\n  color: 'neutral.f04',\n  variant: 'caption1',\n};\n\nconst items = range(0, 20);\n\nexport const DrawerAndModalSwitchInDevice: Story<DrawerProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [open, setOpen] = useState(false);\n  const [open2, setOpen2] = useState(false);\n\n  const [mobile, setMobile] = useState(isMobile);\n\n  const handleClose = () => setOpen(false);\n  const handleClose2 = () => setOpen2(false);\n\n  const header = (\n    <>\n      <Text align=\"center\" color=\"neutral.f04\" variant=\"caption1\">\n        Are you sure you want to leave this webinar?\n      </Text>\n      <RcDivider />\n    </>\n  );\n\n  const confirm = (\n    <Button onClick={handleClose} color=\"danger.f02\" variant=\"plain\" fullWidth>\n      Leave\n    </Button>\n  );\n\n  const cancel = (\n    <Button\n      onClick={handleClose}\n      color=\"interactive.f01\"\n      variant=\"plain\"\n      fullWidth\n    >\n      Cancel\n    </Button>\n  );\n\n  const content = (\n    <>\n      <RcDialogTitle>\n        How Covid 19 has changed workplace permanently\n      </RcDialogTitle>\n      <DialogContent dividers>\n        <RcMenuList maxHeight={300}>\n          <ListTitle>Host</ListTitle>\n          <RcMenuItem avatar={<RcAvatar src={avatar} size=\"small\" />}>\n            <RcListItemText primary={'label'} />\n          </RcMenuItem>\n          <ListTitle>Panelists</ListTitle>\n          {items.map((x) => (\n            <RcMenuItem key={x} avatar={<RcAvatar src={avatar} size=\"small\" />}>\n              <RcListItemText primary={`User Name ${x}`} />\n            </RcMenuItem>\n          ))}\n        </RcMenuList>\n      </DialogContent>\n    </>\n  );\n\n  return (\n    <>\n      <RcButton onClick={() => setOpen(true)}>open confirm</RcButton>\n      <br />\n      <br />\n      <RcButton onClick={() => setOpen2(true)}>open details</RcButton>\n      <Title>current is {mobile ? 'mobile' : 'desktop'}</Title>\n      <RcButton color=\"highlight.b01\" onClick={() => setMobile(!mobile)}>\n        switch to {mobile ? 'desktop' : 'mobile'}\n      </RcButton>\n      {mobile ? (\n        <CustomDrawer\n          {...args}\n          inlinePaper\n          open={open}\n          onClose={handleClose}\n          // if you don't what background add that\n          // BackdropProps={{ invisible: true }}\n        >\n          <RcPaper>\n            {header}\n            {confirm}\n          </RcPaper>\n          <RcPaper>{cancel}</RcPaper>\n        </CustomDrawer>\n      ) : (\n        <RcDialog maxWidth=\"xs\" open={open} onClose={handleClose}>\n          {header}\n          {confirm}\n          {cancel}\n        </RcDialog>\n      )}\n\n      {mobile ? (\n        <CustomDrawer\n          {...args}\n          open={open2}\n          radius=\"md\"\n          onClose={handleClose2}\n          // if you don't what background add that\n          // BackdropProps={{ invisible: true }}\n        >\n          {content}\n        </CustomDrawer>\n      ) : (\n        <RcDialog maxWidth=\"xs\" open={open2} onClose={handleClose2}>\n          {content}\n        </RcDialog>\n      )}\n    </>\n  );\n};;\n\nDrawerAndModalSwitchInDevice.args = {\n  anchor: 'bottom',\n  radius: 'xl',\n};\n\nconst SelectDemo = () => {\n  const [value, setValue] = useState(0);\n  return (\n    <RcSelect\n      variant=\"box\"\n      value={value}\n      onChange={(evt) => setValue(evt.target.value as any)}\n    >\n      {Array.from(new Array(20).keys()).map((item) => (\n        <RcMenuItem key={item} value={item}>\n          MenuItem {item}\n        </RcMenuItem>\n      ))}\n    </RcSelect>\n  );\n};\n\nexport const MultiDrawer: Story<DrawerProps> = ({ children, ...args }) => {\n  const [opens, setOpens] = useState({});\n  const [keepDrawer, setKeepDrawer] = useState(true);\n\n  return (\n    <>\n      <RcButton onClick={() => setOpens({ ...opens, level_0: true })}>\n        open Drawer 0\n      </RcButton>\n      <RcSwitch\n        label=\"Toggle Drawer Keep\"\n        onChange={() => setKeepDrawer(!keepDrawer)}\n      />\n      <RcDrawer\n        {...args}\n        data-drawer-level=\"0\"\n        open={opens['level_0']}\n        onClose={() => setOpens({ ...opens, level_0: false })}\n      >\n        <RcTypography variant=\"headline1\">Drawer 0</RcTypography>\n        <RcDivider />\n        <SelectDemo />\n        <RcDivider />\n        <RcList>\n          <RcListItem>ListItem 0 - 0</RcListItem>\n          <RcListItem>ListItem 0 - 1</RcListItem>\n          <RcListItem>ListItem 0 - 2</RcListItem>\n          <RcListItem\n            onClick={() =>\n              setOpens({\n                ...opens,\n                level_1: true,\n                level_0: !!keepDrawer,\n              })\n            }\n          >\n            Open Drawer 1\n          </RcListItem>\n          <RcListItem onClick={() => setOpens({ ...opens, level_0: false })}>\n            Close Drawer 0\n          </RcListItem>\n        </RcList>\n      </RcDrawer>\n      <RcDrawer\n        {...args}\n        data-drawer-level=\"1\"\n        open={opens['level_1']}\n        onClose={() => setOpens({ ...opens, level_1: false })}\n      >\n        <RcTypography variant=\"headline1\">Drawer 1</RcTypography>\n        <RcDivider />\n        <RcList>\n          <RcListItem>ListItem 1 - 0</RcListItem>\n          <RcListItem>ListItem 1 - 1</RcListItem>\n          <RcListItem\n            onClick={() =>\n              setOpens({ ...opens, level_2: true, level_1: !!keepDrawer })\n            }\n          >\n            Open Drawer 2\n          </RcListItem>\n          <RcListItem onClick={() => setOpens({ ...opens, level_1: false })}>\n            Close Drawer 1\n          </RcListItem>\n        </RcList>\n      </RcDrawer>\n      <RcDrawer\n        {...args}\n        data-drawer-level=\"2\"\n        open={opens['level_2']}\n        onClose={() => setOpens({ ...opens, level_2: false })}\n      >\n        <RcTypography variant=\"headline1\">Drawer 2</RcTypography>\n        <RcDivider />\n        <SelectDemo />\n        <RcDivider />\n        <RcList>\n          <RcListItem>ListItem 2 - 0</RcListItem>\n          <RcListItem>ListItem 2 - 1</RcListItem>\n          <RcListItem onClick={() => setOpens({ ...opens, level_2: false })}>\n            Close Drawer 2\n          </RcListItem>\n        </RcList>\n      </RcDrawer>\n    </>\n  );\n};\n\nMultiDrawer.args = {\n  anchor: 'bottom',\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { spacing, styled } from '../../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../../storybook';\\nimport { Title } from '../../../../../storybook/components';\\nimport { RcButton } from '../../../../Buttons/Button';\\nimport { RcTypography } from '../../../../Typography';\\nimport { RcTimePicker, RcTimePickerProps } from '../TimePicker';\\nimport { getTimestampFromHourAndMin } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Forms/TimePicker',\\n  component: RcTimePicker,\\n  argTypes: {\\n    ...sortInDocTable<keyof TimePickerProps>([\\n      'size',\\n      'label',\\n      'value',\\n      'placeholder',\\n      'disabled',\\n      'max',\\n      'min',\\n      'fullWidth',\\n      'helperText',\\n      'clearBtn',\\n      'clearButtonProps',\\n    ]),\\n    ...notControlInDocTable<keyof TimePickerProps>([]),\\n    ...notShowInDocTable<keyof TimePickerProps>(['times']),\\n  },\\n} as Meta;\\n\\ntype TimePickerProps = ComponentProps<typeof RcTimePicker>;\\n\\nexport const TimePicker: Story<TimePickerProps> = ({\\n  value: valueProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<number | Date | undefined>(valueProp);\\n\\n  const handleChange = (time: number) => {\\n    console.log('time', time);\\n    setValue(time);\\n  };\\n\\n  return (\\n    <RcTimePicker\\n      value={value}\\n      onChange={handleChange}\\n      {...args}\\n      {...accessibilityProps}\\n    />\\n  );\\n};\\n\\nTimePicker.storyName = 'TimePicker';\\n\\nTimePicker.args = {\\n  label: 'Time',\\n  value: 58500000,\\n  placeholder: \\\"what's time?\\\",\\n};\\n\\nTimePicker.argTypes = {\\n  ...notControlInDocTable<keyof TimePickerProps>([]),\\n};\\n\\nTimePicker.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/pickers/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst accessibilityProps = {\\n  HourPickerProps: {\\n    'aria-describedby': 'this is hour button',\\n    getScreenReaderLabel: (hour: string) =>\\n      `Hour is ${hour}, use up or down arrow keys to change the value`,\\n  } as RcTimePickerProps['HourPickerProps'],\\n  MinutePickerProps: {\\n    'aria-describedby': 'this is min button',\\n    getScreenReaderLabel: (minute: string) =>\\n      `Minute is ${minute}, use up or down arrow keys to change the value`,\\n  } as RcTimePickerProps['MinutePickerProps'],\\n  PeriodToggleProps: {\\n    'aria-describedby': 'this is period button',\\n    getScreenReaderLabel: (period: string) =>\\n      `Period is ${period}, use up or down arrow keys to switch the value`,\\n  } as RcTimePickerProps['PeriodToggleProps'],\\n};\\n\\nexport const TimePickerExamples: Story<TimePickerProps> = () => {\\n  // 58500000\\n  // new Date('2021-01-20T01:30:00.000Z'),\\n  const [times1, setTimes1] = useState<number>(58500000);\\n  const [times2, setTimes2] = useState<Date>();\\n  const [times3, setTimes3] = useState<number>();\\n  const [times4, setTimes4] = useState<Date>();\\n\\n  const handleChange1 = (times: number) => {\\n    console.log('time', times);\\n    setTimes1(times);\\n  };\\n\\n  const handleChange2 = (DateTime: Date) => {\\n    console.log('DateTime', DateTime);\\n    setTimes2(DateTime);\\n  };\\n\\n  const handleChange3 = (times: number) => {\\n    console.log('time', times);\\n    setTimes3(times);\\n  };\\n\\n  const handleChange4 = (DateTime: Date) => {\\n    console.log('DateTime', DateTime);\\n    setTimes4(DateTime);\\n  };\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"interactive.f01\\\">Timestamp Mode</RcTypography>\\n      <br />\\n      <RcTimePicker\\n        value={times1}\\n        onChange={handleChange1}\\n        inputProps={{\\n          announcementText: 'press enter or space to change the time',\\n        }}\\n        gutterBottom\\n        placeholder=\\\"what's time?\\\"\\n        PopoverProps={{\\n          PaperProps: {\\n            'aria-label':\\n              'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n          },\\n        }}\\n        {...accessibilityProps}\\n      />\\n      <RcTypography color=\\\"interactive.f01\\\">Date Mode</RcTypography>\\n      <br />\\n      <RcTimePicker\\n        value={times2}\\n        onChange={handleChange2}\\n        dateMode\\n        placeholder=\\\"what's time?\\\"\\n        inputProps={{\\n          'data-test-automation-id': 'eventEditEndTimePicker',\\n          announcementText: 'press enter or space to change the time',\\n        }}\\n        PopoverProps={{\\n          PaperProps: {\\n            'aria-label':\\n              'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n          },\\n        }}\\n        InputProps={{\\n          fullWidth: true,\\n          required: true,\\n        }}\\n        fullWidth\\n        {...accessibilityProps}\\n        isTwelveHourSystem\\n      />\\n      <RcTypography color=\\\"danger.f02\\\">\\n        if that is date format, we couldn't reset to undefined, that will miss\\n        that date information.\\n      </RcTypography>\\n      <br />\\n      <br />\\n      <RcTypography variant=\\\"headline1\\\" color=\\\"neutral.f06\\\">\\n        Has min and max\\n      </RcTypography>\\n      <br />\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RcTypography color=\\\"interactive.f01\\\">Timestamp Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times3}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange3}\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            min={58500000} // 16:10\\n            max={66606000} // 18:31\\n            {...accessibilityProps}\\n          />\\n        </div>\\n        <div style={{ marginLeft: '30px' }}>\\n          <RcTypography color=\\\"interactive.f01\\\">Date Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times4}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange4}\\n            min={new Date('2020/01/01 16:10')}\\n            max={new Date('2020/01/01 18:31')}\\n            dateMode\\n            inputProps={{\\n              'data-test-automation-id': 'eventEditEndTimePicker',\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            InputProps={{\\n              fullWidth: true,\\n              required: true,\\n            }}\\n            {...accessibilityProps}\\n          />\\n        </div>\\n      </div>\\n      <br />\\n      <br />\\n      <RcTypography variant=\\\"headline1\\\" color=\\\"neutral.f06\\\">\\n        Twelve Hour System\\n      </RcTypography>\\n      <br />\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RcTypography color=\\\"interactive.f01\\\">Timestamp Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times3}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange3}\\n            isTwelveHourSystem\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            min={58500000} // 16:10\\n            max={66606000} // 18:31\\n            {...accessibilityProps}\\n          />\\n        </div>\\n        <div style={{ marginLeft: '30px' }}>\\n          <RcTypography color=\\\"interactive.f01\\\">Date Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times4}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange4}\\n            isTwelveHourSystem\\n            min={new Date('2020/01/01 16:10')}\\n            max={new Date('2020/01/01 18:31')}\\n            dateMode\\n            inputProps={{\\n              'data-test-automation-id': 'eventEditEndTimePicker',\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            InputProps={{\\n              fullWidth: true,\\n              required: true,\\n            }}\\n            {...accessibilityProps}\\n          />\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  > * + * {\\n    margin-left: ${spacing(2)};\\n  }\\n`;\\n\\nexport const TimePickerChangeRange: Story<TimePickerProps> = () => {\\n  // new Date('2021-01-20T01:30:00.000Z'),\\n  const [times, setTimes] = useState<number>(38500000);\\n  const [times2, setTimes2] = useState<number>(38500000);\\n  const [min, setMin] = useState(38500000);\\n  const [max, setMax] = useState(58500000);\\n\\n  const [isTwelveHourSystem, setIsTwelveHourSystem] = useState(false);\\n\\n  const minButtons = [\\n    { hour: 5, minute: 15 },\\n    { hour: 16, minute: 0 },\\n    { hour: 16, minute: 15 },\\n  ];\\n\\n  const maxButtons = [\\n    { hour: 11, minute: 15 },\\n    { hour: 16, minute: 0 },\\n    { hour: 19, minute: 0 },\\n    { hour: 19, minute: 15 },\\n  ];\\n\\n  return (\\n    <>\\n      <Wrapper>\\n        <div>\\n          <Title>Min and Max</Title>\\n          <RcTimePicker\\n            value={times}\\n            onChange={(value: number) => {\\n              console.log('time', value);\\n              setTimes(value);\\n            }}\\n            min={min}\\n            max={max}\\n            isTwelveHourSystem={isTwelveHourSystem}\\n            gutterBottom\\n            placeholder=\\\"what's time?\\\"\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            {...accessibilityProps}\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n          />\\n        </div>\\n        <div>\\n          <Title>Only min</Title>\\n          <RcTimePicker\\n            value={times2}\\n            onChange={(value: number) => {\\n              console.log('time', value);\\n              setTimes2(value);\\n            }}\\n            min={min}\\n            isTwelveHourSystem={isTwelveHourSystem}\\n            gutterBottom\\n            placeholder=\\\"what's time?\\\"\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            {...accessibilityProps}\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n          />\\n        </div>\\n      </Wrapper>\\n      <br />\\n      <RcButton\\n        color=\\\"highlight.b03\\\"\\n        onClick={() => {\\n          setIsTwelveHourSystem(!isTwelveHourSystem);\\n        }}\\n      >\\n        switch to twelve hour system\\n      </RcButton>\\n      <br />\\n      <br />\\n      <Wrapper>\\n        {minButtons.map((x) => {\\n          const toSetTimestamp = getTimestampFromHourAndMin(x);\\n\\n          const showValue = `reset min to ${x.hour}:${x.minute}`;\\n\\n          return (\\n            <RcButton\\n              key={showValue}\\n              disabled={max < toSetTimestamp}\\n              onClick={() => {\\n                setMin(toSetTimestamp);\\n              }}\\n            >\\n              {showValue}\\n            </RcButton>\\n          );\\n        })}\\n      </Wrapper>\\n      <br />\\n      <Wrapper>\\n        {maxButtons.map((x) => {\\n          const toSetTimestamp = getTimestampFromHourAndMin(x);\\n\\n          const showValue = `reset max to ${x.hour}:${x.minute}`;\\n\\n          return (\\n            <RcButton\\n              key={showValue}\\n              disabled={min > toSetTimestamp}\\n              onClick={() => {\\n                setMax(toSetTimestamp);\\n              }}\\n            >\\n              {showValue}\\n            </RcButton>\\n          );\\n        })}\\n      </Wrapper>\\n    </>\\n  );\\n};\\n\\nTimePickerExamples.storyName = 'TimePicker Examples';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"TimePicker\":{\"startLoc\":{\"col\":50,\"line\":42},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":50,\"line\":42},\"endBody\":{\"col\":1,\"line\":63}},\"TimePickerExamples\":{\"startLoc\":{\"col\":58,\"line\":108},\"endLoc\":{\"col\":1,\"line\":301},\"startBody\":{\"col\":58,\"line\":108},\"endBody\":{\"col\":1,\"line\":301}},\"TimePickerChangeRange\":{\"startLoc\":{\"col\":61,\"line\":310},\"endLoc\":{\"col\":1,\"line\":437},\"startBody\":{\"col\":61,\"line\":310},\"endBody\":{\"col\":1,\"line\":437}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { spacing, styled } from '../../../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../../storybook';\nimport { Title } from '../../../../../storybook/components';\nimport { RcButton } from '../../../../Buttons/Button';\nimport { RcTypography } from '../../../../Typography';\nimport { RcTimePicker, RcTimePickerProps } from '../TimePicker';\nimport { getTimestampFromHourAndMin } from '../utils';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { spacing, styled } from '../../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../../storybook';\\nimport { Title } from '../../../../../storybook/components';\\nimport { RcButton } from '../../../../Buttons/Button';\\nimport { RcTypography } from '../../../../Typography';\\nimport { RcTimePicker, RcTimePickerProps } from '../TimePicker';\\nimport { getTimestampFromHourAndMin } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Forms/TimePicker',\\n  component: RcTimePicker,\\n  argTypes: {\\n    ...sortInDocTable<keyof TimePickerProps>([\\n      'size',\\n      'label',\\n      'value',\\n      'placeholder',\\n      'disabled',\\n      'max',\\n      'min',\\n      'fullWidth',\\n      'helperText',\\n      'clearBtn',\\n      'clearButtonProps',\\n    ]),\\n    ...notControlInDocTable<keyof TimePickerProps>([]),\\n    ...notShowInDocTable<keyof TimePickerProps>(['times']),\\n  },\\n} as Meta;\\n\\ntype TimePickerProps = ComponentProps<typeof RcTimePicker>;\\n\\nexport const TimePicker: Story<TimePickerProps> = ({\\n  value: valueProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<number | Date | undefined>(valueProp);\\n\\n  const handleChange = (time: number) => {\\n    console.log('time', time);\\n    setValue(time);\\n  };\\n\\n  return (\\n    <RcTimePicker\\n      value={value}\\n      onChange={handleChange}\\n      {...args}\\n      {...accessibilityProps}\\n    />\\n  );\\n};\\n\\nTimePicker.storyName = 'TimePicker';\\n\\nTimePicker.args = {\\n  label: 'Time',\\n  value: 58500000,\\n  placeholder: \\\"what's time?\\\",\\n};\\n\\nTimePicker.argTypes = {\\n  ...notControlInDocTable<keyof TimePickerProps>([]),\\n};\\n\\nTimePicker.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/pickers/',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst accessibilityProps = {\\n  HourPickerProps: {\\n    'aria-describedby': 'this is hour button',\\n    getScreenReaderLabel: (hour: string) =>\\n      `Hour is ${hour}, use up or down arrow keys to change the value`,\\n  } as RcTimePickerProps['HourPickerProps'],\\n  MinutePickerProps: {\\n    'aria-describedby': 'this is min button',\\n    getScreenReaderLabel: (minute: string) =>\\n      `Minute is ${minute}, use up or down arrow keys to change the value`,\\n  } as RcTimePickerProps['MinutePickerProps'],\\n  PeriodToggleProps: {\\n    'aria-describedby': 'this is period button',\\n    getScreenReaderLabel: (period: string) =>\\n      `Period is ${period}, use up or down arrow keys to switch the value`,\\n  } as RcTimePickerProps['PeriodToggleProps'],\\n};\\n\\nexport const TimePickerExamples: Story<TimePickerProps> = () => {\\n  // 58500000\\n  // new Date('2021-01-20T01:30:00.000Z'),\\n  const [times1, setTimes1] = useState<number>(58500000);\\n  const [times2, setTimes2] = useState<Date>();\\n  const [times3, setTimes3] = useState<number>();\\n  const [times4, setTimes4] = useState<Date>();\\n\\n  const handleChange1 = (times: number) => {\\n    console.log('time', times);\\n    setTimes1(times);\\n  };\\n\\n  const handleChange2 = (DateTime: Date) => {\\n    console.log('DateTime', DateTime);\\n    setTimes2(DateTime);\\n  };\\n\\n  const handleChange3 = (times: number) => {\\n    console.log('time', times);\\n    setTimes3(times);\\n  };\\n\\n  const handleChange4 = (DateTime: Date) => {\\n    console.log('DateTime', DateTime);\\n    setTimes4(DateTime);\\n  };\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"interactive.f01\\\">Timestamp Mode</RcTypography>\\n      <br />\\n      <RcTimePicker\\n        value={times1}\\n        onChange={handleChange1}\\n        inputProps={{\\n          announcementText: 'press enter or space to change the time',\\n        }}\\n        gutterBottom\\n        placeholder=\\\"what's time?\\\"\\n        PopoverProps={{\\n          PaperProps: {\\n            'aria-label':\\n              'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n          },\\n        }}\\n        {...accessibilityProps}\\n      />\\n      <RcTypography color=\\\"interactive.f01\\\">Date Mode</RcTypography>\\n      <br />\\n      <RcTimePicker\\n        value={times2}\\n        onChange={handleChange2}\\n        dateMode\\n        placeholder=\\\"what's time?\\\"\\n        inputProps={{\\n          'data-test-automation-id': 'eventEditEndTimePicker',\\n          announcementText: 'press enter or space to change the time',\\n        }}\\n        PopoverProps={{\\n          PaperProps: {\\n            'aria-label':\\n              'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n          },\\n        }}\\n        InputProps={{\\n          fullWidth: true,\\n          required: true,\\n        }}\\n        fullWidth\\n        {...accessibilityProps}\\n        isTwelveHourSystem\\n      />\\n      <RcTypography color=\\\"danger.f02\\\">\\n        if that is date format, we couldn't reset to undefined, that will miss\\n        that date information.\\n      </RcTypography>\\n      <br />\\n      <br />\\n      <RcTypography variant=\\\"headline1\\\" color=\\\"neutral.f06\\\">\\n        Has min and max\\n      </RcTypography>\\n      <br />\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RcTypography color=\\\"interactive.f01\\\">Timestamp Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times3}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange3}\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            min={58500000} // 16:10\\n            max={66606000} // 18:31\\n            {...accessibilityProps}\\n          />\\n        </div>\\n        <div style={{ marginLeft: '30px' }}>\\n          <RcTypography color=\\\"interactive.f01\\\">Date Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times4}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange4}\\n            min={new Date('2020/01/01 16:10')}\\n            max={new Date('2020/01/01 18:31')}\\n            dateMode\\n            inputProps={{\\n              'data-test-automation-id': 'eventEditEndTimePicker',\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            InputProps={{\\n              fullWidth: true,\\n              required: true,\\n            }}\\n            {...accessibilityProps}\\n          />\\n        </div>\\n      </div>\\n      <br />\\n      <br />\\n      <RcTypography variant=\\\"headline1\\\" color=\\\"neutral.f06\\\">\\n        Twelve Hour System\\n      </RcTypography>\\n      <br />\\n      <div style={{ display: 'flex' }}>\\n        <div>\\n          <RcTypography color=\\\"interactive.f01\\\">Timestamp Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times3}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange3}\\n            isTwelveHourSystem\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            min={58500000} // 16:10\\n            max={66606000} // 18:31\\n            {...accessibilityProps}\\n          />\\n        </div>\\n        <div style={{ marginLeft: '30px' }}>\\n          <RcTypography color=\\\"interactive.f01\\\">Date Mode</RcTypography>\\n          <br />\\n          <RcTimePicker\\n            value={times4}\\n            placeholder=\\\"what's time?\\\"\\n            onChange={handleChange4}\\n            isTwelveHourSystem\\n            min={new Date('2020/01/01 16:10')}\\n            max={new Date('2020/01/01 18:31')}\\n            dateMode\\n            inputProps={{\\n              'data-test-automation-id': 'eventEditEndTimePicker',\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            InputProps={{\\n              fullWidth: true,\\n              required: true,\\n            }}\\n            {...accessibilityProps}\\n          />\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  > * + * {\\n    margin-left: ${spacing(2)};\\n  }\\n`;\\n\\nexport const TimePickerChangeRange: Story<TimePickerProps> = () => {\\n  // new Date('2021-01-20T01:30:00.000Z'),\\n  const [times, setTimes] = useState<number>(38500000);\\n  const [times2, setTimes2] = useState<number>(38500000);\\n  const [min, setMin] = useState(38500000);\\n  const [max, setMax] = useState(58500000);\\n\\n  const [isTwelveHourSystem, setIsTwelveHourSystem] = useState(false);\\n\\n  const minButtons = [\\n    { hour: 5, minute: 15 },\\n    { hour: 16, minute: 0 },\\n    { hour: 16, minute: 15 },\\n  ];\\n\\n  const maxButtons = [\\n    { hour: 11, minute: 15 },\\n    { hour: 16, minute: 0 },\\n    { hour: 19, minute: 0 },\\n    { hour: 19, minute: 15 },\\n  ];\\n\\n  return (\\n    <>\\n      <Wrapper>\\n        <div>\\n          <Title>Min and Max</Title>\\n          <RcTimePicker\\n            value={times}\\n            onChange={(value: number) => {\\n              console.log('time', value);\\n              setTimes(value);\\n            }}\\n            min={min}\\n            max={max}\\n            isTwelveHourSystem={isTwelveHourSystem}\\n            gutterBottom\\n            placeholder=\\\"what's time?\\\"\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            {...accessibilityProps}\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n          />\\n        </div>\\n        <div>\\n          <Title>Only min</Title>\\n          <RcTimePicker\\n            value={times2}\\n            onChange={(value: number) => {\\n              console.log('time', value);\\n              setTimes2(value);\\n            }}\\n            min={min}\\n            isTwelveHourSystem={isTwelveHourSystem}\\n            gutterBottom\\n            placeholder=\\\"what's time?\\\"\\n            PopoverProps={{\\n              PaperProps: {\\n                'aria-label':\\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\\n              },\\n            }}\\n            {...accessibilityProps}\\n            inputProps={{\\n              announcementText: 'press enter or space to change the time',\\n            }}\\n          />\\n        </div>\\n      </Wrapper>\\n      <br />\\n      <RcButton\\n        color=\\\"highlight.b03\\\"\\n        onClick={() => {\\n          setIsTwelveHourSystem(!isTwelveHourSystem);\\n        }}\\n      >\\n        switch to twelve hour system\\n      </RcButton>\\n      <br />\\n      <br />\\n      <Wrapper>\\n        {minButtons.map((x) => {\\n          const toSetTimestamp = getTimestampFromHourAndMin(x);\\n\\n          const showValue = `reset min to ${x.hour}:${x.minute}`;\\n\\n          return (\\n            <RcButton\\n              key={showValue}\\n              disabled={max < toSetTimestamp}\\n              onClick={() => {\\n                setMin(toSetTimestamp);\\n              }}\\n            >\\n              {showValue}\\n            </RcButton>\\n          );\\n        })}\\n      </Wrapper>\\n      <br />\\n      <Wrapper>\\n        {maxButtons.map((x) => {\\n          const toSetTimestamp = getTimestampFromHourAndMin(x);\\n\\n          const showValue = `reset max to ${x.hour}:${x.minute}`;\\n\\n          return (\\n            <RcButton\\n              key={showValue}\\n              disabled={min > toSetTimestamp}\\n              onClick={() => {\\n                setMax(toSetTimestamp);\\n              }}\\n            >\\n              {showValue}\\n            </RcButton>\\n          );\\n        })}\\n      </Wrapper>\\n    </>\\n  );\\n};\\n\\nTimePickerExamples.storyName = 'TimePicker Examples';\\n\",\"locationsMap\":{\"time-picker\":{\"startLoc\":{\"col\":50,\"line\":42},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":50,\"line\":42},\"endBody\":{\"col\":1,\"line\":63}},\"time-picker-examples\":{\"startLoc\":{\"col\":58,\"line\":108},\"endLoc\":{\"col\":1,\"line\":301},\"startBody\":{\"col\":58,\"line\":108},\"endBody\":{\"col\":1,\"line\":301}},\"time-picker-change-range\":{\"startLoc\":{\"col\":61,\"line\":310},\"endLoc\":{\"col\":1,\"line\":437},\"startBody\":{\"col\":61,\"line\":310},\"endBody\":{\"col\":1,\"line\":437}}}},},\n  title: '🚀 Cleanup Components/Forms/TimePicker',\n  component: RcTimePicker,\n  argTypes: {\n    ...sortInDocTable<keyof TimePickerProps>([\n      'size',\n      'label',\n      'value',\n      'placeholder',\n      'disabled',\n      'max',\n      'min',\n      'fullWidth',\n      'helperText',\n      'clearBtn',\n      'clearButtonProps',\n    ]),\n    ...notControlInDocTable<keyof TimePickerProps>([]),\n    ...notShowInDocTable<keyof TimePickerProps>(['times']),\n  },\n} as Meta;\n\ntype TimePickerProps = ComponentProps<typeof RcTimePicker>;\n\nexport const TimePicker: Story<TimePickerProps> = ({\n  value: valueProp,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState<number | Date | undefined>(valueProp);\n\n  const handleChange = (time: number) => {\n    console.log('time', time);\n    setValue(time);\n  };\n\n  return (\n    <RcTimePicker\n      value={value}\n      onChange={handleChange}\n      {...args}\n      {...accessibilityProps}\n    />\n  );\n};;\n\nTimePicker.storyName = 'TimePicker';\n\nTimePicker.args = {\n  label: 'Time',\n  value: 58500000,\n  placeholder: \"what's time?\",\n};\n\nTimePicker.argTypes = {\n  ...notControlInDocTable<keyof TimePickerProps>([]),\n};\n\nTimePicker.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/pickers/',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst accessibilityProps = {\n  HourPickerProps: {\n    'aria-describedby': 'this is hour button',\n    getScreenReaderLabel: (hour: string) =>\n      `Hour is ${hour}, use up or down arrow keys to change the value`,\n  } as RcTimePickerProps['HourPickerProps'],\n  MinutePickerProps: {\n    'aria-describedby': 'this is min button',\n    getScreenReaderLabel: (minute: string) =>\n      `Minute is ${minute}, use up or down arrow keys to change the value`,\n  } as RcTimePickerProps['MinutePickerProps'],\n  PeriodToggleProps: {\n    'aria-describedby': 'this is period button',\n    getScreenReaderLabel: (period: string) =>\n      `Period is ${period}, use up or down arrow keys to switch the value`,\n  } as RcTimePickerProps['PeriodToggleProps'],\n};\n\nexport const TimePickerExamples: Story<TimePickerProps> = () => {\n  // 58500000\n  // new Date('2021-01-20T01:30:00.000Z'),\n  const [times1, setTimes1] = useState<number>(58500000);\n  const [times2, setTimes2] = useState<Date>();\n  const [times3, setTimes3] = useState<number>();\n  const [times4, setTimes4] = useState<Date>();\n\n  const handleChange1 = (times: number) => {\n    console.log('time', times);\n    setTimes1(times);\n  };\n\n  const handleChange2 = (DateTime: Date) => {\n    console.log('DateTime', DateTime);\n    setTimes2(DateTime);\n  };\n\n  const handleChange3 = (times: number) => {\n    console.log('time', times);\n    setTimes3(times);\n  };\n\n  const handleChange4 = (DateTime: Date) => {\n    console.log('DateTime', DateTime);\n    setTimes4(DateTime);\n  };\n\n  return (\n    <>\n      <RcTypography color=\"interactive.f01\">Timestamp Mode</RcTypography>\n      <br />\n      <RcTimePicker\n        value={times1}\n        onChange={handleChange1}\n        inputProps={{\n          announcementText: 'press enter or space to change the time',\n        }}\n        gutterBottom\n        placeholder=\"what's time?\"\n        PopoverProps={{\n          PaperProps: {\n            'aria-label':\n              'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n          },\n        }}\n        {...accessibilityProps}\n      />\n      <RcTypography color=\"interactive.f01\">Date Mode</RcTypography>\n      <br />\n      <RcTimePicker\n        value={times2}\n        onChange={handleChange2}\n        dateMode\n        placeholder=\"what's time?\"\n        inputProps={{\n          'data-test-automation-id': 'eventEditEndTimePicker',\n          announcementText: 'press enter or space to change the time',\n        }}\n        PopoverProps={{\n          PaperProps: {\n            'aria-label':\n              'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n          },\n        }}\n        InputProps={{\n          fullWidth: true,\n          required: true,\n        }}\n        fullWidth\n        {...accessibilityProps}\n        isTwelveHourSystem\n      />\n      <RcTypography color=\"danger.f02\">\n        if that is date format, we couldn't reset to undefined, that will miss\n        that date information.\n      </RcTypography>\n      <br />\n      <br />\n      <RcTypography variant=\"headline1\" color=\"neutral.f06\">\n        Has min and max\n      </RcTypography>\n      <br />\n      <div style={{ display: 'flex' }}>\n        <div>\n          <RcTypography color=\"interactive.f01\">Timestamp Mode</RcTypography>\n          <br />\n          <RcTimePicker\n            value={times3}\n            placeholder=\"what's time?\"\n            onChange={handleChange3}\n            inputProps={{\n              announcementText: 'press enter or space to change the time',\n            }}\n            PopoverProps={{\n              PaperProps: {\n                'aria-label':\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n              },\n            }}\n            min={58500000} // 16:10\n            max={66606000} // 18:31\n            {...accessibilityProps}\n          />\n        </div>\n        <div style={{ marginLeft: '30px' }}>\n          <RcTypography color=\"interactive.f01\">Date Mode</RcTypography>\n          <br />\n          <RcTimePicker\n            value={times4}\n            placeholder=\"what's time?\"\n            onChange={handleChange4}\n            min={new Date('2020/01/01 16:10')}\n            max={new Date('2020/01/01 18:31')}\n            dateMode\n            inputProps={{\n              'data-test-automation-id': 'eventEditEndTimePicker',\n              announcementText: 'press enter or space to change the time',\n            }}\n            PopoverProps={{\n              PaperProps: {\n                'aria-label':\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n              },\n            }}\n            InputProps={{\n              fullWidth: true,\n              required: true,\n            }}\n            {...accessibilityProps}\n          />\n        </div>\n      </div>\n      <br />\n      <br />\n      <RcTypography variant=\"headline1\" color=\"neutral.f06\">\n        Twelve Hour System\n      </RcTypography>\n      <br />\n      <div style={{ display: 'flex' }}>\n        <div>\n          <RcTypography color=\"interactive.f01\">Timestamp Mode</RcTypography>\n          <br />\n          <RcTimePicker\n            value={times3}\n            placeholder=\"what's time?\"\n            onChange={handleChange3}\n            isTwelveHourSystem\n            inputProps={{\n              announcementText: 'press enter or space to change the time',\n            }}\n            PopoverProps={{\n              PaperProps: {\n                'aria-label':\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n              },\n            }}\n            min={58500000} // 16:10\n            max={66606000} // 18:31\n            {...accessibilityProps}\n          />\n        </div>\n        <div style={{ marginLeft: '30px' }}>\n          <RcTypography color=\"interactive.f01\">Date Mode</RcTypography>\n          <br />\n          <RcTimePicker\n            value={times4}\n            placeholder=\"what's time?\"\n            onChange={handleChange4}\n            isTwelveHourSystem\n            min={new Date('2020/01/01 16:10')}\n            max={new Date('2020/01/01 18:31')}\n            dateMode\n            inputProps={{\n              'data-test-automation-id': 'eventEditEndTimePicker',\n              announcementText: 'press enter or space to change the time',\n            }}\n            PopoverProps={{\n              PaperProps: {\n                'aria-label':\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n              },\n            }}\n            InputProps={{\n              fullWidth: true,\n              required: true,\n            }}\n            {...accessibilityProps}\n          />\n        </div>\n      </div>\n    </>\n  );\n};;\n\nconst Wrapper = styled.div`\n  display: flex;\n  > * + * {\n    margin-left: ${spacing(2)};\n  }\n`;\n\nexport const TimePickerChangeRange: Story<TimePickerProps> = () => {\n  // new Date('2021-01-20T01:30:00.000Z'),\n  const [times, setTimes] = useState<number>(38500000);\n  const [times2, setTimes2] = useState<number>(38500000);\n  const [min, setMin] = useState(38500000);\n  const [max, setMax] = useState(58500000);\n\n  const [isTwelveHourSystem, setIsTwelveHourSystem] = useState(false);\n\n  const minButtons = [\n    { hour: 5, minute: 15 },\n    { hour: 16, minute: 0 },\n    { hour: 16, minute: 15 },\n  ];\n\n  const maxButtons = [\n    { hour: 11, minute: 15 },\n    { hour: 16, minute: 0 },\n    { hour: 19, minute: 0 },\n    { hour: 19, minute: 15 },\n  ];\n\n  return (\n    <>\n      <Wrapper>\n        <div>\n          <Title>Min and Max</Title>\n          <RcTimePicker\n            value={times}\n            onChange={(value: number) => {\n              console.log('time', value);\n              setTimes(value);\n            }}\n            min={min}\n            max={max}\n            isTwelveHourSystem={isTwelveHourSystem}\n            gutterBottom\n            placeholder=\"what's time?\"\n            PopoverProps={{\n              PaperProps: {\n                'aria-label':\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n              },\n            }}\n            {...accessibilityProps}\n            inputProps={{\n              announcementText: 'press enter or space to change the time',\n            }}\n          />\n        </div>\n        <div>\n          <Title>Only min</Title>\n          <RcTimePicker\n            value={times2}\n            onChange={(value: number) => {\n              console.log('time', value);\n              setTimes2(value);\n            }}\n            min={min}\n            isTwelveHourSystem={isTwelveHourSystem}\n            gutterBottom\n            placeholder=\"what's time?\"\n            PopoverProps={{\n              PaperProps: {\n                'aria-label':\n                  'press Enter to save the time or use Tab to make further changes or Escape to cancel',\n              },\n            }}\n            {...accessibilityProps}\n            inputProps={{\n              announcementText: 'press enter or space to change the time',\n            }}\n          />\n        </div>\n      </Wrapper>\n      <br />\n      <RcButton\n        color=\"highlight.b03\"\n        onClick={() => {\n          setIsTwelveHourSystem(!isTwelveHourSystem);\n        }}\n      >\n        switch to twelve hour system\n      </RcButton>\n      <br />\n      <br />\n      <Wrapper>\n        {minButtons.map((x) => {\n          const toSetTimestamp = getTimestampFromHourAndMin(x);\n\n          const showValue = `reset min to ${x.hour}:${x.minute}`;\n\n          return (\n            <RcButton\n              key={showValue}\n              disabled={max < toSetTimestamp}\n              onClick={() => {\n                setMin(toSetTimestamp);\n              }}\n            >\n              {showValue}\n            </RcButton>\n          );\n        })}\n      </Wrapper>\n      <br />\n      <Wrapper>\n        {maxButtons.map((x) => {\n          const toSetTimestamp = getTimestampFromHourAndMin(x);\n\n          const showValue = `reset max to ${x.hour}:${x.minute}`;\n\n          return (\n            <RcButton\n              key={showValue}\n              disabled={min > toSetTimestamp}\n              onClick={() => {\n                setMax(toSetTimestamp);\n              }}\n            >\n              {showValue}\n            </RcButton>\n          );\n        })}\n      </Wrapper>\n    </>\n  );\n};\n\nTimePickerExamples.storyName = 'TimePicker Examples';\n","import {\n  css,\n  focusVisible,\n  opacity,\n  radius,\n  RcThemedStyled,\n  spacing,\n} from '../../../../../foundation';\nimport { RcButton } from '../../../../Buttons';\nimport { RcIcon } from '../../../../Icon';\nimport { RcListItemText } from '../../../../List/ListItemText';\nimport { RcTextFieldClasses } from '../../../TextField/utils';\nimport { SelectArrowDownIcon } from '../../styles';\nimport { RcPlainSelectProps, RcPlainSelectPropsVariant } from '../PlainSelect';\nimport {\n  RcPlainSelectInputClasses,\n  RcPlainSelectTouchRippleClasses,\n} from '../utils';\n\nconst roundVariant: RcPlainSelectPropsVariant[] = ['round', 'plainIcon'];\n\nexport const plainSelectStyle: RcThemedStyled<RcPlainSelectProps, any> = ({\n  variant,\n  disabled,\n}) => {\n  const isText = variant === 'text';\n\n  const isRound = roundVariant.includes(variant as any);\n\n  // TODO: cancel button bellow icon margin issue,\n  // TODO: wait RCUI-234 merge below overwrite can be remove\n  return css`\n    ${RcButton} {\n      ${RcIcon} {\n        margin-right: 0;\n      }\n    }\n\n    ${RcListItemText} {\n      margin-right: 0;\n    }\n\n    .${RcTextFieldClasses.root} {\n      margin-bottom: 0;\n    }\n\n    .${RcPlainSelectInputClasses.root} {\n      width: auto;\n      pointer-events: none;\n    }\n\n    .${RcPlainSelectInputClasses.input} {\n      padding: 0;\n      height: auto;\n    }\n\n    ${RcButton} {\n      pointer-events: ${!disabled && 'auto'};\n      min-width: unset;\n      padding-left: ${spacing(isText ? 4 : 1)};\n      padding-right: ${spacing(isText ? 1 : 0)};\n      border-radius: ${isRound && radius('xxl')};\n\n      ${SelectArrowDownIcon} {\n        margin: ${spacing(0, 0, 0, isRound ? 0 : 1)};\n      }\n\n      ${isRound &&\n      css`\n        padding-top: ${spacing(1.5)};\n        padding-bottom: ${spacing(1.5)};\n\n        ${focusVisible}, &.Mui-focusVisible {\n          .${RcPlainSelectTouchRippleClasses.root} {\n            background-color: currentColor;\n            opacity: ${opacity('32')};\n          }\n          .${RcPlainSelectTouchRippleClasses.child} {\n            display: none;\n          }\n        }\n      `}\n    }\n  `;\n};\n","import React, { forwardRef, useCallback, useMemo, useState } from 'react';\n\nimport { PopoverOrigin } from '@material-ui/core/Popover';\n\nimport { combineProps, RcBaseProps, styled } from '../../../../foundation';\nimport { RcButton, RcButtonProps } from '../../../Buttons';\nimport { RcMenu } from '../../../Menu';\nimport { RcVirtualizedMenu } from '../../../VirtualizedMenu';\nimport { RcSelect, RcSelectProps } from '../Select';\nimport { SelectArrowDownIcon } from '../styles';\nimport { plainSelectStyle } from './styles';\nimport {\n  RcPlainSelectInputClasses,\n  RcPlainSelectTouchRippleClasses,\n  switchVariantToButtonVariant,\n  UnionButtonVariant,\n} from './utils';\n\ntype RcPlainSelectPropsVariant = 'round' | 'plainIcon' | UnionButtonVariant;\n\ntype RcPlainSelectProps = {\n  /** value of this component, required in PlainSelect */\n  value: unknown;\n  /** type of variant, default is `text` */\n  variant?: RcPlainSelectPropsVariant;\n  /** Button Props */\n  ButtonProps?: RcButtonProps;\n  /** item for the select options */\n  children: JSX.Element[];\n} & RcBaseProps<RcSelectProps, 'variant' | 'multiple' | 'error'>;\n\nconst defaultButtonProps: RcButtonProps = {\n  TouchRippleProps: { classes: RcPlainSelectTouchRippleClasses },\n};\n\nconst EmptyIcon = () => null;\n\nconst plainAnchorOrigin: PopoverOrigin = {\n  horizontal: 'left',\n  vertical: 'bottom',\n};\n\nconst _RcPlainSelect = forwardRef<any, RcPlainSelectProps>(\n  (\n    {\n      children,\n      className,\n      classes,\n      value,\n      renderValue,\n      variant,\n      ButtonProps,\n      innerRef,\n      SelectInputProps,\n      InputProps,\n      disabled,\n      autoFocus,\n      size,\n      virtualize,\n      fullWidth,\n      //\n      IconComponent,\n      onOpen: onOpenProp,\n      onClose: onCloseProp,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [open, setOpen] = useState(false);\n\n    const display = useMemo(() => {\n      const item = children.find((child) => {\n        return child.props['value'] === value;\n      });\n\n      return item?.props['children'];\n    }, [children, value]);\n\n    const _renderValue = useCallback(\n      (value: any) => {\n        const _variant = switchVariantToButtonVariant(variant!);\n\n        return (\n          <RcButton\n            ref={ref}\n            innerRef={innerRef}\n            disabled={disabled}\n            size={size}\n            fullWidth={fullWidth}\n            autoFocus={autoFocus}\n            variant={_variant}\n            aria-label=\"open menu\"\n            aria-haspopup=\"listbox\"\n            {...combineProps(defaultButtonProps, ButtonProps)}\n          >\n            {renderValue ? renderValue(value) : display}\n            {(IconComponent && <IconComponent open={open} />) || (\n              <SelectArrowDownIcon\n                // * reset default color\n                color={undefined}\n                // *for reverse button\n                className={open ? 'MuiSelect-iconOpen' : ''}\n              />\n            )}\n          </RcButton>\n        );\n      },\n      [\n        ButtonProps,\n        IconComponent,\n        autoFocus,\n        disabled,\n        display,\n        fullWidth,\n        innerRef,\n        open,\n        ref,\n        renderValue,\n        size,\n        variant,\n      ],\n    );\n\n    const _SelectInputProps = useMemo<RcSelectProps['SelectInputProps']>(() => {\n      return combineProps(\n        {\n          MenuComponent: virtualize ? RcVirtualizedMenu : RcMenu,\n          MenuProps: {\n            anchorOrigin: plainAnchorOrigin,\n          },\n          SelectDisplayProps: {\n            // * clean default select tabIndex set,\n            // * use our custom button render to trigger default event\n            tabIndex: undefined,\n            'aria-haspopup': undefined,\n            role: undefined,\n          },\n        },\n        SelectInputProps,\n      );\n    }, [SelectInputProps, virtualize]);\n\n    const _InputProps = useMemo<RcSelectProps['InputProps']>(() => {\n      return combineProps(\n        {\n          classes: RcPlainSelectInputClasses,\n          disableUnderline: true,\n        },\n        InputProps,\n      );\n    }, [InputProps]);\n\n    return (\n      <RcSelect\n        className={className}\n        value={value}\n        // * set any for select could not find any class\n        variant={'none' as any}\n        disabled={disabled}\n        IconComponent={EmptyIcon}\n        onOpen={(e: React.ChangeEvent<{}>) => {\n          setOpen(true);\n          onOpenProp?.(e);\n        }}\n        onClose={(e: React.ChangeEvent<{}>) => {\n          setOpen(false);\n          onCloseProp?.(e);\n        }}\n        SelectInputProps={_SelectInputProps}\n        InputProps={_InputProps}\n        renderValue={_renderValue}\n        fullWidth={fullWidth}\n        {...rest}\n      >\n        {children}\n      </RcSelect>\n    );\n  },\n);\n\n/** @release */\nconst RcPlainSelect = styled(_RcPlainSelect)`\n  ${plainSelectStyle}\n`;\n\nRcPlainSelect.defaultProps = {\n  variant: 'text',\n  size: 'medium',\n};\n\nRcPlainSelect.displayName = 'RcPlainSelect';\n\nexport { RcPlainSelect };\nexport type { RcPlainSelectProps, RcPlainSelectPropsVariant };\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, FunctionComponent } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  RcDefaultDarkTheme,\\n  RcSubThemeProvider,\\n  RcThemeSwitcherProvider,\\n  styled,\\n  useThemeSwitcher,\\n} from '../../../foundation';\\nimport { DefaultFile } from '../../../icon';\\nimport Add from '../../../icon/Add';\\nimport Phone from '../../../icon/Phone';\\nimport {\\n  notShowInDocTable,\\n  paletteChoice,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons';\\nimport { RcIcon } from '../Icon';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Icon',\\n  component: RcIcon,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n  },\\n} as Meta;\\n\\ntype IconProps = ComponentProps<typeof RcIcon>;\\n\\nexport const Icon: Story<IconProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <RcIcon {...args} />;\\n};\\n\\nIcon.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nIcon.args = {\\n  symbol: Add,\\n};\\n\\nIcon.argTypes = {\\n  ...notShowInDocTable<keyof IconProps>([\\n    'useLoading',\\n    'loadingSize',\\n    'icon',\\n    'iconColor',\\n    'iconSize',\\n    'desc',\\n  ]),\\n};\\n\\nconst Wrapper = styled.ul`\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  li {\\n    list-style: none;\\n    display: flex;\\n    > * + * {\\n      margin-left: 1em;\\n    }\\n  }\\n\\n  li + li {\\n    margin-top: 1em;\\n  }\\n`;\\n\\nexport const IconWithSymbol: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcIcon symbol={Add} />\\n        <RcIcon symbol={Phone} />\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const IconWithCustomColor: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcIcon color=\\\"danger.b03\\\" symbol={Add} />\\n        <RcIcon color=\\\"success.b03\\\" symbol={Add} />\\n        <RcIcon color=\\\"highlight.b03\\\" symbol={Add} />\\n        <RcIcon color=\\\"informative.b01\\\" symbol={Add} />\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const IconWithCustomSize: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcIcon symbol={Add} size=\\\"xsmall\\\" />\\n        <RcIcon symbol={Add} size=\\\"small\\\" />\\n        <RcIcon symbol={Add} size=\\\"medium\\\" />\\n        <RcIcon symbol={Add} size=\\\"large\\\" />\\n        <RcIcon symbol={Add} size=\\\"xlarge\\\" />\\n        <RcIcon symbol={Add} size=\\\"xxlarge\\\" />\\n        <RcIcon symbol={Add} size=\\\"xxxlarge\\\" />\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nconst ThemeSwitcher: FunctionComponent<{}> = () => {\\n  const { setTheme, themeMap = {} } = useThemeSwitcher();\\n\\n  return (\\n    <>\\n      {Object.keys(themeMap).map((value) => (\\n        <RcButton\\n          key={value}\\n          onClick={() => {\\n            if (setTheme) {\\n              setTheme(value);\\n            }\\n          }}\\n        >\\n          {value}\\n        </RcButton>\\n      ))}\\n    </>\\n  );\\n};\\n\\nexport const IconWithDarkTheme: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n  const themeMap = {\\n    light: {},\\n    dark: RcDefaultDarkTheme,\\n  };\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcThemeSwitcherProvider defaultTheme=\\\"light\\\" themeMap={themeMap}>\\n          <RcSubThemeProvider>\\n            <ThemeSwitcher />\\n            <RcIcon symbol={DefaultFile} />\\n          </RcSubThemeProvider>\\n        </RcThemeSwitcherProvider>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Icon\":{\"startLoc\":{\"col\":38,\"line\":38},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":38,\"line\":38},\"endBody\":{\"col\":1,\"line\":42}},\"IconWithSymbol\":{\"startLoc\":{\"col\":48,\"line\":86},\"endLoc\":{\"col\":1,\"line\":97},\"startBody\":{\"col\":48,\"line\":86},\"endBody\":{\"col\":1,\"line\":97}},\"IconWithCustomColor\":{\"startLoc\":{\"col\":53,\"line\":99},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":53,\"line\":99},\"endBody\":{\"col\":1,\"line\":112}},\"IconWithCustomSize\":{\"startLoc\":{\"col\":52,\"line\":114},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":52,\"line\":114},\"endBody\":{\"col\":1,\"line\":130}},\"IconWithDarkTheme\":{\"startLoc\":{\"col\":51,\"line\":153},\"endLoc\":{\"col\":1,\"line\":172},\"startBody\":{\"col\":51,\"line\":153},\"endBody\":{\"col\":1,\"line\":172}}};\n    \nimport React, { ComponentProps, FunctionComponent } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport {\n  RcDefaultDarkTheme,\n  RcSubThemeProvider,\n  RcThemeSwitcherProvider,\n  styled,\n  useThemeSwitcher,\n} from '../../../foundation';\nimport { DefaultFile } from '../../../icon';\nimport Add from '../../../icon/Add';\nimport Phone from '../../../icon/Phone';\nimport {\n  notShowInDocTable,\n  paletteChoice,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcButton } from '../../Buttons';\nimport { RcIcon } from '../Icon';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, FunctionComponent } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  RcDefaultDarkTheme,\\n  RcSubThemeProvider,\\n  RcThemeSwitcherProvider,\\n  styled,\\n  useThemeSwitcher,\\n} from '../../../foundation';\\nimport { DefaultFile } from '../../../icon';\\nimport Add from '../../../icon/Add';\\nimport Phone from '../../../icon/Phone';\\nimport {\\n  notShowInDocTable,\\n  paletteChoice,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons';\\nimport { RcIcon } from '../Icon';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Icon',\\n  component: RcIcon,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n  },\\n} as Meta;\\n\\ntype IconProps = ComponentProps<typeof RcIcon>;\\n\\nexport const Icon: Story<IconProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return <RcIcon {...args} />;\\n};\\n\\nIcon.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nIcon.args = {\\n  symbol: Add,\\n};\\n\\nIcon.argTypes = {\\n  ...notShowInDocTable<keyof IconProps>([\\n    'useLoading',\\n    'loadingSize',\\n    'icon',\\n    'iconColor',\\n    'iconSize',\\n    'desc',\\n  ]),\\n};\\n\\nconst Wrapper = styled.ul`\\n  margin: 0;\\n  padding: 0;\\n  list-style: none;\\n\\n  li {\\n    list-style: none;\\n    display: flex;\\n    > * + * {\\n      margin-left: 1em;\\n    }\\n  }\\n\\n  li + li {\\n    margin-top: 1em;\\n  }\\n`;\\n\\nexport const IconWithSymbol: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcIcon symbol={Add} />\\n        <RcIcon symbol={Phone} />\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const IconWithCustomColor: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcIcon color=\\\"danger.b03\\\" symbol={Add} />\\n        <RcIcon color=\\\"success.b03\\\" symbol={Add} />\\n        <RcIcon color=\\\"highlight.b03\\\" symbol={Add} />\\n        <RcIcon color=\\\"informative.b01\\\" symbol={Add} />\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const IconWithCustomSize: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcIcon symbol={Add} size=\\\"xsmall\\\" />\\n        <RcIcon symbol={Add} size=\\\"small\\\" />\\n        <RcIcon symbol={Add} size=\\\"medium\\\" />\\n        <RcIcon symbol={Add} size=\\\"large\\\" />\\n        <RcIcon symbol={Add} size=\\\"xlarge\\\" />\\n        <RcIcon symbol={Add} size=\\\"xxlarge\\\" />\\n        <RcIcon symbol={Add} size=\\\"xxxlarge\\\" />\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\\nconst ThemeSwitcher: FunctionComponent<{}> = () => {\\n  const { setTheme, themeMap = {} } = useThemeSwitcher();\\n\\n  return (\\n    <>\\n      {Object.keys(themeMap).map((value) => (\\n        <RcButton\\n          key={value}\\n          onClick={() => {\\n            if (setTheme) {\\n              setTheme(value);\\n            }\\n          }}\\n        >\\n          {value}\\n        </RcButton>\\n      ))}\\n    </>\\n  );\\n};\\n\\nexport const IconWithDarkTheme: Story<IconProps> = () => {\\n  switchToControlKnobs();\\n  const themeMap = {\\n    light: {},\\n    dark: RcDefaultDarkTheme,\\n  };\\n\\n  return (\\n    <Wrapper>\\n      <li>\\n        <RcThemeSwitcherProvider defaultTheme=\\\"light\\\" themeMap={themeMap}>\\n          <RcSubThemeProvider>\\n            <ThemeSwitcher />\\n            <RcIcon symbol={DefaultFile} />\\n          </RcSubThemeProvider>\\n        </RcThemeSwitcherProvider>\\n      </li>\\n    </Wrapper>\\n  );\\n};\\n\",\"locationsMap\":{\"icon\":{\"startLoc\":{\"col\":38,\"line\":38},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":38,\"line\":38},\"endBody\":{\"col\":1,\"line\":42}},\"icon-with-symbol\":{\"startLoc\":{\"col\":48,\"line\":86},\"endLoc\":{\"col\":1,\"line\":97},\"startBody\":{\"col\":48,\"line\":86},\"endBody\":{\"col\":1,\"line\":97}},\"icon-with-custom-color\":{\"startLoc\":{\"col\":53,\"line\":99},\"endLoc\":{\"col\":1,\"line\":112},\"startBody\":{\"col\":53,\"line\":99},\"endBody\":{\"col\":1,\"line\":112}},\"icon-with-custom-size\":{\"startLoc\":{\"col\":52,\"line\":114},\"endLoc\":{\"col\":1,\"line\":130},\"startBody\":{\"col\":52,\"line\":114},\"endBody\":{\"col\":1,\"line\":130}},\"icon-with-dark-theme\":{\"startLoc\":{\"col\":51,\"line\":153},\"endLoc\":{\"col\":1,\"line\":172},\"startBody\":{\"col\":51,\"line\":153},\"endBody\":{\"col\":1,\"line\":172}}}},},\n  title: '🚀 Cleanup Components/Icon',\n  component: RcIcon,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n  },\n} as Meta;\n\ntype IconProps = ComponentProps<typeof RcIcon>;\n\nexport const Icon: Story<IconProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  return <RcIcon {...args} />;\n};;\n\nIcon.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nIcon.args = {\n  symbol: Add,\n};\n\nIcon.argTypes = {\n  ...notShowInDocTable<keyof IconProps>([\n    'useLoading',\n    'loadingSize',\n    'icon',\n    'iconColor',\n    'iconSize',\n    'desc',\n  ]),\n};\n\nconst Wrapper = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n\n  li {\n    list-style: none;\n    display: flex;\n    > * + * {\n      margin-left: 1em;\n    }\n  }\n\n  li + li {\n    margin-top: 1em;\n  }\n`;\n\nexport const IconWithSymbol: Story<IconProps> = () => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <li>\n        <RcIcon symbol={Add} />\n        <RcIcon symbol={Phone} />\n      </li>\n    </Wrapper>\n  );\n};;\n\nexport const IconWithCustomColor: Story<IconProps> = () => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <li>\n        <RcIcon color=\"danger.b03\" symbol={Add} />\n        <RcIcon color=\"success.b03\" symbol={Add} />\n        <RcIcon color=\"highlight.b03\" symbol={Add} />\n        <RcIcon color=\"informative.b01\" symbol={Add} />\n      </li>\n    </Wrapper>\n  );\n};;\n\nexport const IconWithCustomSize: Story<IconProps> = () => {\n  switchToControlKnobs();\n\n  return (\n    <Wrapper>\n      <li>\n        <RcIcon symbol={Add} size=\"xsmall\" />\n        <RcIcon symbol={Add} size=\"small\" />\n        <RcIcon symbol={Add} size=\"medium\" />\n        <RcIcon symbol={Add} size=\"large\" />\n        <RcIcon symbol={Add} size=\"xlarge\" />\n        <RcIcon symbol={Add} size=\"xxlarge\" />\n        <RcIcon symbol={Add} size=\"xxxlarge\" />\n      </li>\n    </Wrapper>\n  );\n};;\n\nconst ThemeSwitcher: FunctionComponent<{}> = () => {\n  const { setTheme, themeMap = {} } = useThemeSwitcher();\n\n  return (\n    <>\n      {Object.keys(themeMap).map((value) => (\n        <RcButton\n          key={value}\n          onClick={() => {\n            if (setTheme) {\n              setTheme(value);\n            }\n          }}\n        >\n          {value}\n        </RcButton>\n      ))}\n    </>\n  );\n};\n\nexport const IconWithDarkTheme: Story<IconProps> = () => {\n  switchToControlKnobs();\n  const themeMap = {\n    light: {},\n    dark: RcDefaultDarkTheme,\n  };\n\n  return (\n    <Wrapper>\n      <li>\n        <RcThemeSwitcherProvider defaultTheme=\"light\" themeMap={themeMap}>\n          <RcSubThemeProvider>\n            <ThemeSwitcher />\n            <RcIcon symbol={DefaultFile} />\n          </RcSubThemeProvider>\n        </RcThemeSwitcherProvider>\n      </li>\n    </Wrapper>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { FunctionComponent, useEffect, useMemo, useState } from 'react';\\n\\nimport { Meta } from '@storybook/react';\\n\\n// @ts-ignore\\nimport svgToComponentMapping from '../../../../scripts/utils/svgToComponentMapping';\\nimport { palette2, useEventCallback } from '../../../foundation';\\nimport styled from '../../../foundation/styled-components';\\nimport Warning from '../../../icon/Warning';\\nimport { RcBox } from '../../Box';\\nimport { RcTextField } from '../../Forms/TextField';\\nimport { RcCircularProgress } from '../../Progress';\\nimport { RcTypography } from '../../Typography';\\nimport { RcIcon } from '../Icon';\\nimport localIcons from '../icon-symbol';\\n\\nexport default {\\n  title: '🔧 Foundation/Icon List',\\n} as Meta;\\n\\nconst StyledMain = styled.div`\\n  color: ${palette2('neutral', 'f06')};\\n`;\\n\\nconst StyledList = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(5, 1fr);\\n`;\\n\\nconst StyledIcon = styled.div<{ state: 'new' | 'delete' | 'exist' }>`\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  margin: 10px;\\n  color: ${({ state }) => {\\n    switch (state) {\\n      case 'new':\\n        return palette2('success', 'f02');\\n      case 'delete':\\n        return palette2('danger', 'f02');\\n      default:\\n        return palette2('neutral', 'f06');\\n    }\\n  }};\\n\\n  & svg {\\n    margin-bottom: 4px;\\n    box-shadow: 0 0 10px\\n      ${({ state }) => {\\n        switch (state) {\\n          case 'exist':\\n            return 'silver';\\n          case 'new':\\n            return 'green';\\n          case 'delete':\\n            return 'red';\\n          default:\\n            return 'silver';\\n        }\\n      }};\\n    width: 1em;\\n    height: 1em;\\n    font-size: 36px;\\n  }\\n`;\\n\\nconst mapping = Object.entries<any>(svgToComponentMapping).reduce<any>(\\n  (prev, [key, value]) => {\\n    prev[value] = key;\\n    return prev;\\n  },\\n  {},\\n);\\n\\nconst getIconList = (svgData: string) => {\\n  const re = /<title>(.+?)<\\\\/title>/g;\\n  const matches: string[] = [];\\n  svgData.replace(re, (m, p1) => {\\n    matches.push(p1);\\n    return m;\\n  });\\n  return matches;\\n};\\n\\n\\nconst getRemoteSvgFile = async () => {\\n  try {\\n    return await fetch(\\n      'https://i.icomoon.io/public/6483cc0f53/Jupiternewicontest/symbol-defs.svg',\\n    ).then((res) => {\\n      return res.text();\\n    });\\n  } catch (e) {\\n    return null;\\n  }\\n};\\n\\ntype IconListProps = {};\\n\\nconst currentIcons = getIconList(localIcons);\\n\\nconst insertSVG = (data: string) => {\\n  const body = document.body;\\n  const x = document.createElement('x');\\n  x.innerHTML = data;\\n  const svg = x.getElementsByTagName('svg')[0];\\n  if (svg) {\\n    svg.setAttribute('aria-hidden', 'true');\\n    svg.style.position = 'absolute';\\n    svg.style.width = '0';\\n    svg.style.height = '0';\\n    svg.style.overflow = 'hidden';\\n    body.insertBefore(svg, body.firstChild);\\n  }\\n};\\n\\nexport const IconList: FunctionComponent<IconListProps> = () => {\\n  const [remoteIcons, setRemoteIcons] = useState<string[]>([]);\\n  const [deletedIcons, setDeletedIcons] = useState<string[]>([]);\\n  const [loadFail, setLoadFail] = useState(false);\\n  const [filterText, setFilterText] = useState('');\\n\\n  const resultIcons = useMemo(() => {\\n    return filterText\\n      ? remoteIcons.filter((x) => {\\n          function isInclude(value: string) {\\n            const _filterText = filterText\\n              .toLocaleLowerCase()\\n              .replace(/_|-/g, '');\\n            const _value = value.toLocaleLowerCase().replace(/_|-/g, '');\\n\\n            return _value.includes(_filterText);\\n          }\\n\\n          return isInclude(x) || (mapping[x] && isInclude(mapping[x]));\\n        })\\n      : remoteIcons;\\n  }, [filterText, remoteIcons]);\\n\\n  const [loading, setLoading] = useState(true);\\n\\n  const getRemoteIconList = async () => {\\n    const value = await getRemoteSvgFile();\\n    if (value) {\\n      insertSVG(value);\\n      const icons = getIconList(value);\\n\\n      setDeletedIcons(currentIcons.filter((x) => !icons.includes(x)));\\n      setRemoteIcons(icons);\\n      setLoading(false);\\n      return;\\n    }\\n\\n    setLoadFail(true);\\n    insertSVG(localIcons);\\n    setRemoteIcons(currentIcons);\\n    setLoading(false);\\n  };\\n\\n  useEffect(() => {\\n    getRemoteIconList();\\n  }, []);\\n\\n  const handleChange = useEventCallback(\\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\\n      setFilterText(e.target.value);\\n    },\\n  );\\n\\n  return (\\n    <StyledMain>\\n      <h3>current icon number: {currentIcons.length}</h3>\\n      <h3>\\n        latest icon number:{' '}\\n        {loading ? <RcCircularProgress /> : remoteIcons.length}\\n      </h3>\\n      <p>\\n        <RcTypography color=\\\"success.f02\\\" variant=\\\"body1\\\" component=\\\"span\\\">\\n          green{' '}\\n        </RcTypography>\\n        shadow means this icon is not in current version of icon yet, you can\\n        update icon by running 'npm run update-icon'\\n      </p>\\n      <p>\\n        <RcTypography color=\\\"danger.f02\\\" variant=\\\"body1\\\" component=\\\"span\\\">\\n          red{' '}\\n        </RcTypography>\\n        shadow means this icon is deleted, they will not be available in next\\n        version of icon\\n      </p>\\n      <div style={{ width: 600 }}>\\n        <RcTextField\\n          value={filterText}\\n          variant=\\\"outline\\\"\\n          gutterBottom\\n          fullWidth\\n          placeholder=\\\"Search by component name or svg name\\\"\\n          onChange={handleChange}\\n        />\\n      </div>\\n      {!loading && (\\n        <>\\n          {loadFail && (\\n            <RcBox display=\\\"flex\\\" alignItems=\\\"center\\\" clone marginBottom=\\\"1em\\\">\\n              <RcTypography color=\\\"danger.f02\\\" variant=\\\"body1\\\" component=\\\"span\\\">\\n                <RcIcon symbol={Warning} /> get remote svg file fail, current is\\n                local files\\n              </RcTypography>\\n            </RcBox>\\n          )}\\n          <StyledList>\\n            {resultIcons.map((icon) => {\\n              const isExist = currentIcons.includes(icon);\\n\\n              return (\\n                <StyledIcon state={isExist ? 'exist' : 'new'} key={icon}>\\n                  <RcIcon\\n                    color=\\\"neutral.f06\\\"\\n                    symbol={(props) => (\\n                      <svg {...props}>\\n                        <use xlinkHref={`#icon-${icon}`} />\\n                      </svg>\\n                    )}\\n                  />\\n                  {isExist && (\\n                    <RcTypography color=\\\"neutral.f06\\\" variant=\\\"subheading2\\\">\\n                      {mapping[icon]}\\n                    </RcTypography>\\n                  )}\\n                  <RcTypography color=\\\"neutral.f03\\\">{icon}</RcTypography>\\n                </StyledIcon>\\n              );\\n            })}\\n            {deletedIcons.map((icon) => (\\n              <StyledIcon state=\\\"delete\\\" key={icon}>\\n                <RcIcon\\n                  color=\\\"neutral.f06\\\"\\n                  symbol={(props) => (\\n                    <svg {...props}>\\n                      <use xlinkHref={`#icon-${icon}`} />\\n                    </svg>\\n                  )}\\n                />\\n                {icon}\\n              </StyledIcon>\\n            ))}\\n          </StyledList>\\n        </>\\n      )}\\n    </StyledMain>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"IconList\":{\"startLoc\":{\"col\":58,\"line\":117},\"endLoc\":{\"col\":1,\"line\":252},\"startBody\":{\"col\":58,\"line\":117},\"endBody\":{\"col\":1,\"line\":252}}};\n    \nimport React, { FunctionComponent, useEffect, useMemo, useState } from 'react';\n\nimport { Meta } from '@storybook/react';\n\n// @ts-ignore\nimport svgToComponentMapping from '../../../../scripts/utils/svgToComponentMapping';\nimport { palette2, useEventCallback } from '../../../foundation';\nimport styled from '../../../foundation/styled-components';\nimport Warning from '../../../icon/Warning';\nimport { RcBox } from '../../Box';\nimport { RcTextField } from '../../Forms/TextField';\nimport { RcCircularProgress } from '../../Progress';\nimport { RcTypography } from '../../Typography';\nimport { RcIcon } from '../Icon';\nimport localIcons from '../icon-symbol';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { FunctionComponent, useEffect, useMemo, useState } from 'react';\\n\\nimport { Meta } from '@storybook/react';\\n\\n// @ts-ignore\\nimport svgToComponentMapping from '../../../../scripts/utils/svgToComponentMapping';\\nimport { palette2, useEventCallback } from '../../../foundation';\\nimport styled from '../../../foundation/styled-components';\\nimport Warning from '../../../icon/Warning';\\nimport { RcBox } from '../../Box';\\nimport { RcTextField } from '../../Forms/TextField';\\nimport { RcCircularProgress } from '../../Progress';\\nimport { RcTypography } from '../../Typography';\\nimport { RcIcon } from '../Icon';\\nimport localIcons from '../icon-symbol';\\n\\nexport default {\\n  title: '🔧 Foundation/Icon List',\\n} as Meta;\\n\\nconst StyledMain = styled.div`\\n  color: ${palette2('neutral', 'f06')};\\n`;\\n\\nconst StyledList = styled.div`\\n  display: grid;\\n  grid-template-columns: repeat(5, 1fr);\\n`;\\n\\nconst StyledIcon = styled.div<{ state: 'new' | 'delete' | 'exist' }>`\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  margin: 10px;\\n  color: ${({ state }) => {\\n    switch (state) {\\n      case 'new':\\n        return palette2('success', 'f02');\\n      case 'delete':\\n        return palette2('danger', 'f02');\\n      default:\\n        return palette2('neutral', 'f06');\\n    }\\n  }};\\n\\n  & svg {\\n    margin-bottom: 4px;\\n    box-shadow: 0 0 10px\\n      ${({ state }) => {\\n        switch (state) {\\n          case 'exist':\\n            return 'silver';\\n          case 'new':\\n            return 'green';\\n          case 'delete':\\n            return 'red';\\n          default:\\n            return 'silver';\\n        }\\n      }};\\n    width: 1em;\\n    height: 1em;\\n    font-size: 36px;\\n  }\\n`;\\n\\nconst mapping = Object.entries<any>(svgToComponentMapping).reduce<any>(\\n  (prev, [key, value]) => {\\n    prev[value] = key;\\n    return prev;\\n  },\\n  {},\\n);\\n\\nconst getIconList = (svgData: string) => {\\n  const re = /<title>(.+?)<\\\\/title>/g;\\n  const matches: string[] = [];\\n  svgData.replace(re, (m, p1) => {\\n    matches.push(p1);\\n    return m;\\n  });\\n  return matches;\\n};\\n\\n\\nconst getRemoteSvgFile = async () => {\\n  try {\\n    return await fetch(\\n      'https://i.icomoon.io/public/6483cc0f53/Jupiternewicontest/symbol-defs.svg',\\n    ).then((res) => {\\n      return res.text();\\n    });\\n  } catch (e) {\\n    return null;\\n  }\\n};\\n\\ntype IconListProps = {};\\n\\nconst currentIcons = getIconList(localIcons);\\n\\nconst insertSVG = (data: string) => {\\n  const body = document.body;\\n  const x = document.createElement('x');\\n  x.innerHTML = data;\\n  const svg = x.getElementsByTagName('svg')[0];\\n  if (svg) {\\n    svg.setAttribute('aria-hidden', 'true');\\n    svg.style.position = 'absolute';\\n    svg.style.width = '0';\\n    svg.style.height = '0';\\n    svg.style.overflow = 'hidden';\\n    body.insertBefore(svg, body.firstChild);\\n  }\\n};\\n\\nexport const IconList: FunctionComponent<IconListProps> = () => {\\n  const [remoteIcons, setRemoteIcons] = useState<string[]>([]);\\n  const [deletedIcons, setDeletedIcons] = useState<string[]>([]);\\n  const [loadFail, setLoadFail] = useState(false);\\n  const [filterText, setFilterText] = useState('');\\n\\n  const resultIcons = useMemo(() => {\\n    return filterText\\n      ? remoteIcons.filter((x) => {\\n          function isInclude(value: string) {\\n            const _filterText = filterText\\n              .toLocaleLowerCase()\\n              .replace(/_|-/g, '');\\n            const _value = value.toLocaleLowerCase().replace(/_|-/g, '');\\n\\n            return _value.includes(_filterText);\\n          }\\n\\n          return isInclude(x) || (mapping[x] && isInclude(mapping[x]));\\n        })\\n      : remoteIcons;\\n  }, [filterText, remoteIcons]);\\n\\n  const [loading, setLoading] = useState(true);\\n\\n  const getRemoteIconList = async () => {\\n    const value = await getRemoteSvgFile();\\n    if (value) {\\n      insertSVG(value);\\n      const icons = getIconList(value);\\n\\n      setDeletedIcons(currentIcons.filter((x) => !icons.includes(x)));\\n      setRemoteIcons(icons);\\n      setLoading(false);\\n      return;\\n    }\\n\\n    setLoadFail(true);\\n    insertSVG(localIcons);\\n    setRemoteIcons(currentIcons);\\n    setLoading(false);\\n  };\\n\\n  useEffect(() => {\\n    getRemoteIconList();\\n  }, []);\\n\\n  const handleChange = useEventCallback(\\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\\n      setFilterText(e.target.value);\\n    },\\n  );\\n\\n  return (\\n    <StyledMain>\\n      <h3>current icon number: {currentIcons.length}</h3>\\n      <h3>\\n        latest icon number:{' '}\\n        {loading ? <RcCircularProgress /> : remoteIcons.length}\\n      </h3>\\n      <p>\\n        <RcTypography color=\\\"success.f02\\\" variant=\\\"body1\\\" component=\\\"span\\\">\\n          green{' '}\\n        </RcTypography>\\n        shadow means this icon is not in current version of icon yet, you can\\n        update icon by running 'npm run update-icon'\\n      </p>\\n      <p>\\n        <RcTypography color=\\\"danger.f02\\\" variant=\\\"body1\\\" component=\\\"span\\\">\\n          red{' '}\\n        </RcTypography>\\n        shadow means this icon is deleted, they will not be available in next\\n        version of icon\\n      </p>\\n      <div style={{ width: 600 }}>\\n        <RcTextField\\n          value={filterText}\\n          variant=\\\"outline\\\"\\n          gutterBottom\\n          fullWidth\\n          placeholder=\\\"Search by component name or svg name\\\"\\n          onChange={handleChange}\\n        />\\n      </div>\\n      {!loading && (\\n        <>\\n          {loadFail && (\\n            <RcBox display=\\\"flex\\\" alignItems=\\\"center\\\" clone marginBottom=\\\"1em\\\">\\n              <RcTypography color=\\\"danger.f02\\\" variant=\\\"body1\\\" component=\\\"span\\\">\\n                <RcIcon symbol={Warning} /> get remote svg file fail, current is\\n                local files\\n              </RcTypography>\\n            </RcBox>\\n          )}\\n          <StyledList>\\n            {resultIcons.map((icon) => {\\n              const isExist = currentIcons.includes(icon);\\n\\n              return (\\n                <StyledIcon state={isExist ? 'exist' : 'new'} key={icon}>\\n                  <RcIcon\\n                    color=\\\"neutral.f06\\\"\\n                    symbol={(props) => (\\n                      <svg {...props}>\\n                        <use xlinkHref={`#icon-${icon}`} />\\n                      </svg>\\n                    )}\\n                  />\\n                  {isExist && (\\n                    <RcTypography color=\\\"neutral.f06\\\" variant=\\\"subheading2\\\">\\n                      {mapping[icon]}\\n                    </RcTypography>\\n                  )}\\n                  <RcTypography color=\\\"neutral.f03\\\">{icon}</RcTypography>\\n                </StyledIcon>\\n              );\\n            })}\\n            {deletedIcons.map((icon) => (\\n              <StyledIcon state=\\\"delete\\\" key={icon}>\\n                <RcIcon\\n                  color=\\\"neutral.f06\\\"\\n                  symbol={(props) => (\\n                    <svg {...props}>\\n                      <use xlinkHref={`#icon-${icon}`} />\\n                    </svg>\\n                  )}\\n                />\\n                {icon}\\n              </StyledIcon>\\n            ))}\\n          </StyledList>\\n        </>\\n      )}\\n    </StyledMain>\\n  );\\n};\\n\",\"locationsMap\":{\"icon-list\":{\"startLoc\":{\"col\":58,\"line\":117},\"endLoc\":{\"col\":1,\"line\":252},\"startBody\":{\"col\":58,\"line\":117},\"endBody\":{\"col\":1,\"line\":252}}}},},\n  title: '🔧 Foundation/Icon List',\n} as Meta;\n\nconst StyledMain = styled.div`\n  color: ${palette2('neutral', 'f06')};\n`;\n\nconst StyledList = styled.div`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n`;\n\nconst StyledIcon = styled.div<{ state: 'new' | 'delete' | 'exist' }>`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 10px;\n  color: ${({ state }) => {\n    switch (state) {\n      case 'new':\n        return palette2('success', 'f02');\n      case 'delete':\n        return palette2('danger', 'f02');\n      default:\n        return palette2('neutral', 'f06');\n    }\n  }};\n\n  & svg {\n    margin-bottom: 4px;\n    box-shadow: 0 0 10px\n      ${({ state }) => {\n        switch (state) {\n          case 'exist':\n            return 'silver';\n          case 'new':\n            return 'green';\n          case 'delete':\n            return 'red';\n          default:\n            return 'silver';\n        }\n      }};\n    width: 1em;\n    height: 1em;\n    font-size: 36px;\n  }\n`;\n\nconst mapping = Object.entries<any>(svgToComponentMapping).reduce<any>(\n  (prev, [key, value]) => {\n    prev[value] = key;\n    return prev;\n  },\n  {},\n);\n\nconst getIconList = (svgData: string) => {\n  const re = /<title>(.+?)<\\/title>/g;\n  const matches: string[] = [];\n  svgData.replace(re, (m, p1) => {\n    matches.push(p1);\n    return m;\n  });\n  return matches;\n};\n\n// eslint-disable-next-line require-await\nconst getRemoteSvgFile = async () => {\n  try {\n    return await fetch(\n      'https://i.icomoon.io/public/6483cc0f53/Jupiternewicontest/symbol-defs.svg',\n    ).then((res) => {\n      return res.text();\n    });\n  } catch (e) {\n    return null;\n  }\n};\n\ntype IconListProps = {};\n\nconst currentIcons = getIconList(localIcons);\n\nconst insertSVG = (data: string) => {\n  const body = document.body;\n  const x = document.createElement('x');\n  x.innerHTML = data;\n  const svg = x.getElementsByTagName('svg')[0];\n  if (svg) {\n    svg.setAttribute('aria-hidden', 'true');\n    svg.style.position = 'absolute';\n    svg.style.width = '0';\n    svg.style.height = '0';\n    svg.style.overflow = 'hidden';\n    body.insertBefore(svg, body.firstChild);\n  }\n};\n\nexport const IconList: FunctionComponent<IconListProps> = () => {\n  const [remoteIcons, setRemoteIcons] = useState<string[]>([]);\n  const [deletedIcons, setDeletedIcons] = useState<string[]>([]);\n  const [loadFail, setLoadFail] = useState(false);\n  const [filterText, setFilterText] = useState('');\n\n  const resultIcons = useMemo(() => {\n    return filterText\n      ? remoteIcons.filter((x) => {\n          function isInclude(value: string) {\n            const _filterText = filterText\n              .toLocaleLowerCase()\n              .replace(/_|-/g, '');\n            const _value = value.toLocaleLowerCase().replace(/_|-/g, '');\n\n            return _value.includes(_filterText);\n          }\n\n          return isInclude(x) || (mapping[x] && isInclude(mapping[x]));\n        })\n      : remoteIcons;\n  }, [filterText, remoteIcons]);\n\n  const [loading, setLoading] = useState(true);\n\n  const getRemoteIconList = async () => {\n    const value = await getRemoteSvgFile();\n    if (value) {\n      insertSVG(value);\n      const icons = getIconList(value);\n\n      setDeletedIcons(currentIcons.filter((x) => !icons.includes(x)));\n      setRemoteIcons(icons);\n      setLoading(false);\n      return;\n    }\n\n    setLoadFail(true);\n    insertSVG(localIcons);\n    setRemoteIcons(currentIcons);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getRemoteIconList();\n  }, []);\n\n  const handleChange = useEventCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\n      setFilterText(e.target.value);\n    },\n  );\n\n  return (\n    <StyledMain>\n      <h3>current icon number: {currentIcons.length}</h3>\n      <h3>\n        latest icon number:{' '}\n        {loading ? <RcCircularProgress /> : remoteIcons.length}\n      </h3>\n      <p>\n        <RcTypography color=\"success.f02\" variant=\"body1\" component=\"span\">\n          green{' '}\n        </RcTypography>\n        shadow means this icon is not in current version of icon yet, you can\n        update icon by running 'npm run update-icon'\n      </p>\n      <p>\n        <RcTypography color=\"danger.f02\" variant=\"body1\" component=\"span\">\n          red{' '}\n        </RcTypography>\n        shadow means this icon is deleted, they will not be available in next\n        version of icon\n      </p>\n      <div style={{ width: 600 }}>\n        <RcTextField\n          value={filterText}\n          variant=\"outline\"\n          gutterBottom\n          fullWidth\n          placeholder=\"Search by component name or svg name\"\n          onChange={handleChange}\n        />\n      </div>\n      {!loading && (\n        <>\n          {loadFail && (\n            <RcBox display=\"flex\" alignItems=\"center\" clone marginBottom=\"1em\">\n              <RcTypography color=\"danger.f02\" variant=\"body1\" component=\"span\">\n                <RcIcon symbol={Warning} /> get remote svg file fail, current is\n                local files\n              </RcTypography>\n            </RcBox>\n          )}\n          <StyledList>\n            {resultIcons.map((icon) => {\n              const isExist = currentIcons.includes(icon);\n\n              return (\n                <StyledIcon state={isExist ? 'exist' : 'new'} key={icon}>\n                  <RcIcon\n                    color=\"neutral.f06\"\n                    symbol={(props) => (\n                      <svg {...props}>\n                        <use xlinkHref={`#icon-${icon}`} />\n                      </svg>\n                    )}\n                  />\n                  {isExist && (\n                    <RcTypography color=\"neutral.f06\" variant=\"subheading2\">\n                      {mapping[icon]}\n                    </RcTypography>\n                  )}\n                  <RcTypography color=\"neutral.f03\">{icon}</RcTypography>\n                </StyledIcon>\n              );\n            })}\n            {deletedIcons.map((icon) => (\n              <StyledIcon state=\"delete\" key={icon}>\n                <RcIcon\n                  color=\"neutral.f06\"\n                  symbol={(props) => (\n                    <svg {...props}>\n                      <use xlinkHref={`#icon-${icon}`} />\n                    </svg>\n                  )}\n                />\n                {icon}\n              </StyledIcon>\n            ))}\n          </StyledList>\n        </>\n      )}\n    </StyledMain>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, shadows, styled, useTheme } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  paletteChoice,\\n  sleep,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcButton } from '../../Buttons';\\nimport { RcCircularProgress } from '../../Progress';\\nimport { RcTypography } from '../../Typography';\\nimport { RcInlineEditable } from '../InlineEditable';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/InlineEditable',\\n  component: RcInlineEditable,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...sortInDocTable<keyof InlineEditableProps>([\\n      'value',\\n      'multiline',\\n      'variant',\\n      'disabled',\\n      'saving',\\n      'placeholder',\\n      'fullWidth',\\n      'onChange',\\n    ]),\\n    ...notControlInDocTable<keyof InlineEditableProps>([]),\\n    ...notShowInDocTable<keyof InlineEditableProps>([\\n      'shouldRemoveNode',\\n      'automationId',\\n      'onSave',\\n      'tooltipTitle',\\n    ]),\\n  },\\n} as Meta;\\n\\ntype InlineEditableProps = ComponentProps<typeof RcInlineEditable>;\\n\\nexport const InlineEditable: Story<InlineEditableProps> = ({\\n  value: valueProp,\\n  disabled: disabledProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState(valueProp || '');\\n\\n  const [disabled, setDisabled] = useState(disabledProp);\\n\\n  return (\\n    <>\\n      <RcInlineEditable\\n        {...args}\\n        value={value}\\n        disabled={disabled}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        TooltipProps={{ title: 'click to edit' }}\\n      />\\n      <br />\\n      <br />\\n      <RcButton onClick={() => setDisabled(!disabled)}>\\n        Switch to {disabled ? 'enabled' : 'disabled'}\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nInlineEditable.storyName = 'InlineEditable';\\n\\nInlineEditable.args = {\\n  placeholder: 'Enter value here',\\n};\\n\\nInlineEditable.argTypes = {\\n  ...notControlInDocTable<keyof InlineEditableProps>([]),\\n};\\n\\nInlineEditable.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const InlineEditableMultiline: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState(`All-in-one business communications\\nMessage,\\nvideo,\\nphone in one,\\nso your team can do their best work from anywhere.`);\\n\\n  return (\\n    <RcInlineEditable\\n      value={value}\\n      onChange={(newValue, reason) => {\\n        console.log(newValue, reason);\\n        setValue(newValue);\\n      }}\\n      placeholder=\\\"Enter value here\\\"\\n      multiline\\n    />\\n  );\\n};\\n\\nInlineEditableMultiline.storyName = 'InlineEditable multiline';\\n\\nexport const InlineEditableCustomVariant: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('');\\n  const [value2, setValue2] = useState('');\\n\\n  return (\\n    <>\\n      <Title>Single line</Title>\\n      <RcInlineEditable\\n        value={value}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        placeholder=\\\"Enter value here\\\"\\n        fullWidth\\n        variant=\\\"title1\\\"\\n      />\\n      <br />\\n      <br />\\n      <br />\\n      <br />\\n\\n      <Title>Multi line</Title>\\n      <RcInlineEditable\\n        value={value2}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue2(newValue);\\n        }}\\n        placeholder=\\\"Enter value here\\\"\\n        multiline\\n        variant=\\\"title2\\\"\\n        color=\\\"label.blue01\\\"\\n      />\\n    </>\\n  );\\n};\\n\\nInlineEditableCustomVariant.storyName = 'InlineEditable custom';\\n\\nexport const InlineEditableOnlyEnter: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('');\\n\\n  return (\\n    <RcInlineEditable\\n      value={value}\\n      onChange={(newValue, reason) => {\\n        console.log(newValue, reason);\\n        if (reason === 'confirm') {\\n          setValue(newValue);\\n        }\\n      }}\\n      placeholder=\\\"Enter value here\\\"\\n      multiline\\n    />\\n  );\\n};\\n\\nInlineEditableOnlyEnter.storyName = 'InlineEditable only enter';\\n\\nconst savingClass = 'custom-saving';\\n\\nconst Wrapper = styled.div`\\n  .${savingClass} {\\n    box-shadow: ${shadows('16')};\\n    background-color: ${palette2('neutral', 'b03')};\\n  }\\n`;\\n\\nexport const InlineEditableLoading: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('show loading style when onChange');\\n\\n  const [isSaving, setSaving] = useState(false);\\n\\n  return (\\n    <Wrapper>\\n      <RcInlineEditable\\n        value={value}\\n        placeholder=\\\"Enter value here\\\"\\n        TooltipProps={{ title: 'click to edit' }}\\n        saving={isSaving}\\n        classes={{ saving: savingClass }}\\n        onChange={async (newValue) => {\\n          setSaving(true);\\n          await sleep(2000);\\n\\n          setValue(newValue);\\n          setSaving(false);\\n        }}\\n      />\\n      {isSaving && <RcCircularProgress style={{ marginLeft: '1em' }} />}\\n    </Wrapper>\\n  );\\n};\\n\\nInlineEditableLoading.storyName = 'InlineEditable with loading';\\n\\nexport const InlineEditableWithTooltip: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('So value as tooltip when disabled');\\n\\n  const [disabled, setDisabled] = useState(false);\\n\\n  return (\\n    <>\\n      <RcInlineEditable\\n        value={value}\\n        disabled={disabled}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        placeholder=\\\"Enter value here\\\"\\n        TooltipProps={{ title: 'click to edit' }}\\n      />\\n      <br />\\n      <br />\\n      <RcInlineEditable\\n        value={value}\\n        disabled={disabled}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        title=\\\"custom title\\\"\\n        placeholder=\\\"Enter value here\\\"\\n        TooltipProps={{ title: 'click to edit' }}\\n        multiline\\n      />\\n      <br />\\n      <br />\\n      <RcButton onClick={() => setDisabled(!disabled)}>\\n        Switch to {disabled ? 'enabled' : 'disabled'}\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nInlineEditableWithTooltip.storyName = 'InlineEditable with tooltip';\\n\\nexport const InlineEditableWithoutPlaceholder: Story<InlineEditableProps> =\\n  () => {\\n    switchToControlKnobs();\\n\\n    const [value, setValue] = useState('');\\n    const [disabled, setDisabled] = useState(false);\\n\\n    const theme = useTheme();\\n\\n    const green = palette2('success', 'b02')({ theme });\\n    const red = palette2('danger', 'b04')({ theme });\\n\\n    return (\\n      <>\\n        <RcTypography variant=\\\"title1\\\" color=\\\"neutral.f06\\\">\\n          When not have value and also non placeholder, show size boundary\\n          below.\\n        </RcTypography>\\n        <br />\\n        <RcTypography color=\\\"neutral.f06\\\">\\n          red is InlineEditable container, green is input\\n        </RcTypography>\\n        <br />\\n        <RcButton onClick={() => setDisabled(!disabled)}>\\n          Switch to {disabled ? 'enabled' : 'disabled'}\\n        </RcButton>\\n        <br />\\n        <RcTypography color=\\\"neutral.f06\\\">one line: </RcTypography>\\n        <RcInlineEditable\\n          style={{ backgroundColor: red }}\\n          disabled={disabled}\\n          value={value}\\n          inputProps={{\\n            style: { backgroundColor: green },\\n          }}\\n          onChange={(newValue, reason) => {\\n            console.log(newValue, reason);\\n            setValue(newValue);\\n          }}\\n        />\\n        <br />\\n        <RcTypography color=\\\"neutral.f06\\\">multiple line: </RcTypography>\\n        <RcInlineEditable\\n          style={{ backgroundColor: red }}\\n          disabled={disabled}\\n          value={value}\\n          inputProps={{ style: { backgroundColor: green } }}\\n          onChange={(newValue, reason) => {\\n            console.log(newValue, reason);\\n            setValue(newValue);\\n          }}\\n          multiline\\n        />\\n      </>\\n    );\\n  };\\n\\nInlineEditableWithoutPlaceholder.storyName =\\n  'InlineEditable without placeholder';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"InlineEditable\":{\"startLoc\":{\"col\":58,\"line\":52},\"endLoc\":{\"col\":1,\"line\":82},\"startBody\":{\"col\":58,\"line\":52},\"endBody\":{\"col\":1,\"line\":82}},\"InlineEditableMultiline\":{\"startLoc\":{\"col\":67,\"line\":103},\"endLoc\":{\"col\":1,\"line\":123},\"startBody\":{\"col\":67,\"line\":103},\"endBody\":{\"col\":1,\"line\":123}},\"InlineEditableCustomVariant\":{\"startLoc\":{\"col\":71,\"line\":127},\"endLoc\":{\"col\":1,\"line\":165},\"startBody\":{\"col\":71,\"line\":127},\"endBody\":{\"col\":1,\"line\":165}},\"InlineEditableOnlyEnter\":{\"startLoc\":{\"col\":67,\"line\":169},\"endLoc\":{\"col\":1,\"line\":187},\"startBody\":{\"col\":67,\"line\":169},\"endBody\":{\"col\":1,\"line\":187}},\"InlineEditableLoading\":{\"startLoc\":{\"col\":65,\"line\":200},\"endLoc\":{\"col\":1,\"line\":226},\"startBody\":{\"col\":65,\"line\":200},\"endBody\":{\"col\":1,\"line\":226}},\"InlineEditableWithTooltip\":{\"startLoc\":{\"col\":69,\"line\":230},\"endLoc\":{\"col\":1,\"line\":270},\"startBody\":{\"col\":69,\"line\":230},\"endBody\":{\"col\":1,\"line\":270}},\"InlineEditableWithoutPlaceholder\":{\"startLoc\":{\"col\":2,\"line\":275},\"endLoc\":{\"col\":3,\"line\":329},\"startBody\":{\"col\":2,\"line\":275},\"endBody\":{\"col\":3,\"line\":329}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { palette2, shadows, styled, useTheme } from '../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  paletteChoice,\n  sleep,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { Title } from '../../../storybook/components';\nimport { RcButton } from '../../Buttons';\nimport { RcCircularProgress } from '../../Progress';\nimport { RcTypography } from '../../Typography';\nimport { RcInlineEditable } from '../InlineEditable';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, shadows, styled, useTheme } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  paletteChoice,\\n  sleep,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcButton } from '../../Buttons';\\nimport { RcCircularProgress } from '../../Progress';\\nimport { RcTypography } from '../../Typography';\\nimport { RcInlineEditable } from '../InlineEditable';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/InlineEditable',\\n  component: RcInlineEditable,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...sortInDocTable<keyof InlineEditableProps>([\\n      'value',\\n      'multiline',\\n      'variant',\\n      'disabled',\\n      'saving',\\n      'placeholder',\\n      'fullWidth',\\n      'onChange',\\n    ]),\\n    ...notControlInDocTable<keyof InlineEditableProps>([]),\\n    ...notShowInDocTable<keyof InlineEditableProps>([\\n      'shouldRemoveNode',\\n      'automationId',\\n      'onSave',\\n      'tooltipTitle',\\n    ]),\\n  },\\n} as Meta;\\n\\ntype InlineEditableProps = ComponentProps<typeof RcInlineEditable>;\\n\\nexport const InlineEditable: Story<InlineEditableProps> = ({\\n  value: valueProp,\\n  disabled: disabledProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState(valueProp || '');\\n\\n  const [disabled, setDisabled] = useState(disabledProp);\\n\\n  return (\\n    <>\\n      <RcInlineEditable\\n        {...args}\\n        value={value}\\n        disabled={disabled}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        TooltipProps={{ title: 'click to edit' }}\\n      />\\n      <br />\\n      <br />\\n      <RcButton onClick={() => setDisabled(!disabled)}>\\n        Switch to {disabled ? 'enabled' : 'disabled'}\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nInlineEditable.storyName = 'InlineEditable';\\n\\nInlineEditable.args = {\\n  placeholder: 'Enter value here',\\n};\\n\\nInlineEditable.argTypes = {\\n  ...notControlInDocTable<keyof InlineEditableProps>([]),\\n};\\n\\nInlineEditable.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const InlineEditableMultiline: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState(`All-in-one business communications\\nMessage,\\nvideo,\\nphone in one,\\nso your team can do their best work from anywhere.`);\\n\\n  return (\\n    <RcInlineEditable\\n      value={value}\\n      onChange={(newValue, reason) => {\\n        console.log(newValue, reason);\\n        setValue(newValue);\\n      }}\\n      placeholder=\\\"Enter value here\\\"\\n      multiline\\n    />\\n  );\\n};\\n\\nInlineEditableMultiline.storyName = 'InlineEditable multiline';\\n\\nexport const InlineEditableCustomVariant: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('');\\n  const [value2, setValue2] = useState('');\\n\\n  return (\\n    <>\\n      <Title>Single line</Title>\\n      <RcInlineEditable\\n        value={value}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        placeholder=\\\"Enter value here\\\"\\n        fullWidth\\n        variant=\\\"title1\\\"\\n      />\\n      <br />\\n      <br />\\n      <br />\\n      <br />\\n\\n      <Title>Multi line</Title>\\n      <RcInlineEditable\\n        value={value2}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue2(newValue);\\n        }}\\n        placeholder=\\\"Enter value here\\\"\\n        multiline\\n        variant=\\\"title2\\\"\\n        color=\\\"label.blue01\\\"\\n      />\\n    </>\\n  );\\n};\\n\\nInlineEditableCustomVariant.storyName = 'InlineEditable custom';\\n\\nexport const InlineEditableOnlyEnter: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('');\\n\\n  return (\\n    <RcInlineEditable\\n      value={value}\\n      onChange={(newValue, reason) => {\\n        console.log(newValue, reason);\\n        if (reason === 'confirm') {\\n          setValue(newValue);\\n        }\\n      }}\\n      placeholder=\\\"Enter value here\\\"\\n      multiline\\n    />\\n  );\\n};\\n\\nInlineEditableOnlyEnter.storyName = 'InlineEditable only enter';\\n\\nconst savingClass = 'custom-saving';\\n\\nconst Wrapper = styled.div`\\n  .${savingClass} {\\n    box-shadow: ${shadows('16')};\\n    background-color: ${palette2('neutral', 'b03')};\\n  }\\n`;\\n\\nexport const InlineEditableLoading: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('show loading style when onChange');\\n\\n  const [isSaving, setSaving] = useState(false);\\n\\n  return (\\n    <Wrapper>\\n      <RcInlineEditable\\n        value={value}\\n        placeholder=\\\"Enter value here\\\"\\n        TooltipProps={{ title: 'click to edit' }}\\n        saving={isSaving}\\n        classes={{ saving: savingClass }}\\n        onChange={async (newValue) => {\\n          setSaving(true);\\n          await sleep(2000);\\n\\n          setValue(newValue);\\n          setSaving(false);\\n        }}\\n      />\\n      {isSaving && <RcCircularProgress style={{ marginLeft: '1em' }} />}\\n    </Wrapper>\\n  );\\n};\\n\\nInlineEditableLoading.storyName = 'InlineEditable with loading';\\n\\nexport const InlineEditableWithTooltip: Story<InlineEditableProps> = () => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState('So value as tooltip when disabled');\\n\\n  const [disabled, setDisabled] = useState(false);\\n\\n  return (\\n    <>\\n      <RcInlineEditable\\n        value={value}\\n        disabled={disabled}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        placeholder=\\\"Enter value here\\\"\\n        TooltipProps={{ title: 'click to edit' }}\\n      />\\n      <br />\\n      <br />\\n      <RcInlineEditable\\n        value={value}\\n        disabled={disabled}\\n        onChange={(newValue, reason) => {\\n          console.log(newValue, reason);\\n          setValue(newValue);\\n        }}\\n        title=\\\"custom title\\\"\\n        placeholder=\\\"Enter value here\\\"\\n        TooltipProps={{ title: 'click to edit' }}\\n        multiline\\n      />\\n      <br />\\n      <br />\\n      <RcButton onClick={() => setDisabled(!disabled)}>\\n        Switch to {disabled ? 'enabled' : 'disabled'}\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nInlineEditableWithTooltip.storyName = 'InlineEditable with tooltip';\\n\\nexport const InlineEditableWithoutPlaceholder: Story<InlineEditableProps> =\\n  () => {\\n    switchToControlKnobs();\\n\\n    const [value, setValue] = useState('');\\n    const [disabled, setDisabled] = useState(false);\\n\\n    const theme = useTheme();\\n\\n    const green = palette2('success', 'b02')({ theme });\\n    const red = palette2('danger', 'b04')({ theme });\\n\\n    return (\\n      <>\\n        <RcTypography variant=\\\"title1\\\" color=\\\"neutral.f06\\\">\\n          When not have value and also non placeholder, show size boundary\\n          below.\\n        </RcTypography>\\n        <br />\\n        <RcTypography color=\\\"neutral.f06\\\">\\n          red is InlineEditable container, green is input\\n        </RcTypography>\\n        <br />\\n        <RcButton onClick={() => setDisabled(!disabled)}>\\n          Switch to {disabled ? 'enabled' : 'disabled'}\\n        </RcButton>\\n        <br />\\n        <RcTypography color=\\\"neutral.f06\\\">one line: </RcTypography>\\n        <RcInlineEditable\\n          style={{ backgroundColor: red }}\\n          disabled={disabled}\\n          value={value}\\n          inputProps={{\\n            style: { backgroundColor: green },\\n          }}\\n          onChange={(newValue, reason) => {\\n            console.log(newValue, reason);\\n            setValue(newValue);\\n          }}\\n        />\\n        <br />\\n        <RcTypography color=\\\"neutral.f06\\\">multiple line: </RcTypography>\\n        <RcInlineEditable\\n          style={{ backgroundColor: red }}\\n          disabled={disabled}\\n          value={value}\\n          inputProps={{ style: { backgroundColor: green } }}\\n          onChange={(newValue, reason) => {\\n            console.log(newValue, reason);\\n            setValue(newValue);\\n          }}\\n          multiline\\n        />\\n      </>\\n    );\\n  };\\n\\nInlineEditableWithoutPlaceholder.storyName =\\n  'InlineEditable without placeholder';\\n\",\"locationsMap\":{\"inline-editable\":{\"startLoc\":{\"col\":58,\"line\":52},\"endLoc\":{\"col\":1,\"line\":82},\"startBody\":{\"col\":58,\"line\":52},\"endBody\":{\"col\":1,\"line\":82}},\"inline-editable-multiline\":{\"startLoc\":{\"col\":67,\"line\":103},\"endLoc\":{\"col\":1,\"line\":123},\"startBody\":{\"col\":67,\"line\":103},\"endBody\":{\"col\":1,\"line\":123}},\"inline-editable-custom-variant\":{\"startLoc\":{\"col\":71,\"line\":127},\"endLoc\":{\"col\":1,\"line\":165},\"startBody\":{\"col\":71,\"line\":127},\"endBody\":{\"col\":1,\"line\":165}},\"inline-editable-only-enter\":{\"startLoc\":{\"col\":67,\"line\":169},\"endLoc\":{\"col\":1,\"line\":187},\"startBody\":{\"col\":67,\"line\":169},\"endBody\":{\"col\":1,\"line\":187}},\"inline-editable-loading\":{\"startLoc\":{\"col\":65,\"line\":200},\"endLoc\":{\"col\":1,\"line\":226},\"startBody\":{\"col\":65,\"line\":200},\"endBody\":{\"col\":1,\"line\":226}},\"inline-editable-with-tooltip\":{\"startLoc\":{\"col\":69,\"line\":230},\"endLoc\":{\"col\":1,\"line\":270},\"startBody\":{\"col\":69,\"line\":230},\"endBody\":{\"col\":1,\"line\":270}},\"inline-editable-without-placeholder\":{\"startLoc\":{\"col\":2,\"line\":275},\"endLoc\":{\"col\":3,\"line\":329},\"startBody\":{\"col\":2,\"line\":275},\"endBody\":{\"col\":3,\"line\":329}}}},},\n  title: '🚀 Cleanup Components/InlineEditable',\n  component: RcInlineEditable,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n    ...sortInDocTable<keyof InlineEditableProps>([\n      'value',\n      'multiline',\n      'variant',\n      'disabled',\n      'saving',\n      'placeholder',\n      'fullWidth',\n      'onChange',\n    ]),\n    ...notControlInDocTable<keyof InlineEditableProps>([]),\n    ...notShowInDocTable<keyof InlineEditableProps>([\n      'shouldRemoveNode',\n      'automationId',\n      'onSave',\n      'tooltipTitle',\n    ]),\n  },\n} as Meta;\n\ntype InlineEditableProps = ComponentProps<typeof RcInlineEditable>;\n\nexport const InlineEditable: Story<InlineEditableProps> = ({\n  value: valueProp,\n  disabled: disabledProp,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState(valueProp || '');\n\n  const [disabled, setDisabled] = useState(disabledProp);\n\n  return (\n    <>\n      <RcInlineEditable\n        {...args}\n        value={value}\n        disabled={disabled}\n        onChange={(newValue, reason) => {\n          console.log(newValue, reason);\n          setValue(newValue);\n        }}\n        TooltipProps={{ title: 'click to edit' }}\n      />\n      <br />\n      <br />\n      <RcButton onClick={() => setDisabled(!disabled)}>\n        Switch to {disabled ? 'enabled' : 'disabled'}\n      </RcButton>\n    </>\n  );\n};;\n\nInlineEditable.storyName = 'InlineEditable';\n\nInlineEditable.args = {\n  placeholder: 'Enter value here',\n};\n\nInlineEditable.argTypes = {\n  ...notControlInDocTable<keyof InlineEditableProps>([]),\n};\n\nInlineEditable.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nexport const InlineEditableMultiline: Story<InlineEditableProps> = () => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState(`All-in-one business communications\nMessage,\nvideo,\nphone in one,\nso your team can do their best work from anywhere.`);\n\n  return (\n    <RcInlineEditable\n      value={value}\n      onChange={(newValue, reason) => {\n        console.log(newValue, reason);\n        setValue(newValue);\n      }}\n      placeholder=\"Enter value here\"\n      multiline\n    />\n  );\n};;\n\nInlineEditableMultiline.storyName = 'InlineEditable multiline';\n\nexport const InlineEditableCustomVariant: Story<InlineEditableProps> = () => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState('');\n  const [value2, setValue2] = useState('');\n\n  return (\n    <>\n      <Title>Single line</Title>\n      <RcInlineEditable\n        value={value}\n        onChange={(newValue, reason) => {\n          console.log(newValue, reason);\n          setValue(newValue);\n        }}\n        placeholder=\"Enter value here\"\n        fullWidth\n        variant=\"title1\"\n      />\n      <br />\n      <br />\n      <br />\n      <br />\n\n      <Title>Multi line</Title>\n      <RcInlineEditable\n        value={value2}\n        onChange={(newValue, reason) => {\n          console.log(newValue, reason);\n          setValue2(newValue);\n        }}\n        placeholder=\"Enter value here\"\n        multiline\n        variant=\"title2\"\n        color=\"label.blue01\"\n      />\n    </>\n  );\n};;\n\nInlineEditableCustomVariant.storyName = 'InlineEditable custom';\n\nexport const InlineEditableOnlyEnter: Story<InlineEditableProps> = () => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState('');\n\n  return (\n    <RcInlineEditable\n      value={value}\n      onChange={(newValue, reason) => {\n        console.log(newValue, reason);\n        if (reason === 'confirm') {\n          setValue(newValue);\n        }\n      }}\n      placeholder=\"Enter value here\"\n      multiline\n    />\n  );\n};;\n\nInlineEditableOnlyEnter.storyName = 'InlineEditable only enter';\n\nconst savingClass = 'custom-saving';\n\nconst Wrapper = styled.div`\n  .${savingClass} {\n    box-shadow: ${shadows('16')};\n    background-color: ${palette2('neutral', 'b03')};\n  }\n`;\n\nexport const InlineEditableLoading: Story<InlineEditableProps> = () => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState('show loading style when onChange');\n\n  const [isSaving, setSaving] = useState(false);\n\n  return (\n    <Wrapper>\n      <RcInlineEditable\n        value={value}\n        placeholder=\"Enter value here\"\n        TooltipProps={{ title: 'click to edit' }}\n        saving={isSaving}\n        classes={{ saving: savingClass }}\n        onChange={async (newValue) => {\n          setSaving(true);\n          await sleep(2000);\n\n          setValue(newValue);\n          setSaving(false);\n        }}\n      />\n      {isSaving && <RcCircularProgress style={{ marginLeft: '1em' }} />}\n    </Wrapper>\n  );\n};;\n\nInlineEditableLoading.storyName = 'InlineEditable with loading';\n\nexport const InlineEditableWithTooltip: Story<InlineEditableProps> = () => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState('So value as tooltip when disabled');\n\n  const [disabled, setDisabled] = useState(false);\n\n  return (\n    <>\n      <RcInlineEditable\n        value={value}\n        disabled={disabled}\n        onChange={(newValue, reason) => {\n          console.log(newValue, reason);\n          setValue(newValue);\n        }}\n        placeholder=\"Enter value here\"\n        TooltipProps={{ title: 'click to edit' }}\n      />\n      <br />\n      <br />\n      <RcInlineEditable\n        value={value}\n        disabled={disabled}\n        onChange={(newValue, reason) => {\n          console.log(newValue, reason);\n          setValue(newValue);\n        }}\n        title=\"custom title\"\n        placeholder=\"Enter value here\"\n        TooltipProps={{ title: 'click to edit' }}\n        multiline\n      />\n      <br />\n      <br />\n      <RcButton onClick={() => setDisabled(!disabled)}>\n        Switch to {disabled ? 'enabled' : 'disabled'}\n      </RcButton>\n    </>\n  );\n};;\n\nInlineEditableWithTooltip.storyName = 'InlineEditable with tooltip';\n\nexport const InlineEditableWithoutPlaceholder: Story<InlineEditableProps> =\n  () => {\n    switchToControlKnobs();\n\n    const [value, setValue] = useState('');\n    const [disabled, setDisabled] = useState(false);\n\n    const theme = useTheme();\n\n    const green = palette2('success', 'b02')({ theme });\n    const red = palette2('danger', 'b04')({ theme });\n\n    return (\n      <>\n        <RcTypography variant=\"title1\" color=\"neutral.f06\">\n          When not have value and also non placeholder, show size boundary\n          below.\n        </RcTypography>\n        <br />\n        <RcTypography color=\"neutral.f06\">\n          red is InlineEditable container, green is input\n        </RcTypography>\n        <br />\n        <RcButton onClick={() => setDisabled(!disabled)}>\n          Switch to {disabled ? 'enabled' : 'disabled'}\n        </RcButton>\n        <br />\n        <RcTypography color=\"neutral.f06\">one line: </RcTypography>\n        <RcInlineEditable\n          style={{ backgroundColor: red }}\n          disabled={disabled}\n          value={value}\n          inputProps={{\n            style: { backgroundColor: green },\n          }}\n          onChange={(newValue, reason) => {\n            console.log(newValue, reason);\n            setValue(newValue);\n          }}\n        />\n        <br />\n        <RcTypography color=\"neutral.f06\">multiple line: </RcTypography>\n        <RcInlineEditable\n          style={{ backgroundColor: red }}\n          disabled={disabled}\n          value={value}\n          inputProps={{ style: { backgroundColor: green } }}\n          onChange={(newValue, reason) => {\n            console.log(newValue, reason);\n            setValue(newValue);\n          }}\n          multiline\n        />\n      </>\n    );\n  };\n\nInlineEditableWithoutPlaceholder.storyName =\n  'InlineEditable without placeholder';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, palette2, styled } from '../../../foundation';\\nimport { notShowInDocTable } from '../../../storybook';\\nimport { RcButton } from '../../Buttons';\\nimport { RcLoading } from '../Loading';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Loading',\\n  component: RcLoading,\\n  argTypes: {\\n    ...notShowInDocTable<keyof LoadingProps>([]),\\n  },\\n} as Meta;\\n\\ntype LoadingProps = ComponentProps<typeof RcLoading>;\\n\\nconst Container = styled.div`\\n  position: relative;\\n  height: 300px;\\n  width: 300px;\\n  background: ${palette2('neutral', 'b03')};\\n  ${flexCenterStyle};\\n`;\\n\\nexport const Loading: Story<LoadingProps> = ({\\n  children,\\n  loading: loadingProp,\\n  ...args\\n}) => {\\n  const [loading, setLoading] = useState(loadingProp);\\n  return (\\n    <>\\n      <Container>\\n        <RcLoading {...args} loading={loading}>\\n          <>\\n            <RcButton onClick={() => setLoading(true)}>start loading</RcButton>\\n          </>\\n        </RcLoading>\\n      </Container>\\n      <RcButton onClick={() => setLoading(true)}>start loading </RcButton>\\n      <RcButton onClick={() => setLoading(false)}>end loading </RcButton>\\n    </>\\n  );\\n};\\n\\nLoading.args = {};\\n\\nLoading.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Loading\":{\"startLoc\":{\"col\":44,\"line\":28},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":44,\"line\":28},\"endBody\":{\"col\":1,\"line\":47}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { flexCenterStyle, palette2, styled } from '../../../foundation';\nimport { notShowInDocTable } from '../../../storybook';\nimport { RcButton } from '../../Buttons';\nimport { RcLoading } from '../Loading';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, palette2, styled } from '../../../foundation';\\nimport { notShowInDocTable } from '../../../storybook';\\nimport { RcButton } from '../../Buttons';\\nimport { RcLoading } from '../Loading';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Loading',\\n  component: RcLoading,\\n  argTypes: {\\n    ...notShowInDocTable<keyof LoadingProps>([]),\\n  },\\n} as Meta;\\n\\ntype LoadingProps = ComponentProps<typeof RcLoading>;\\n\\nconst Container = styled.div`\\n  position: relative;\\n  height: 300px;\\n  width: 300px;\\n  background: ${palette2('neutral', 'b03')};\\n  ${flexCenterStyle};\\n`;\\n\\nexport const Loading: Story<LoadingProps> = ({\\n  children,\\n  loading: loadingProp,\\n  ...args\\n}) => {\\n  const [loading, setLoading] = useState(loadingProp);\\n  return (\\n    <>\\n      <Container>\\n        <RcLoading {...args} loading={loading}>\\n          <>\\n            <RcButton onClick={() => setLoading(true)}>start loading</RcButton>\\n          </>\\n        </RcLoading>\\n      </Container>\\n      <RcButton onClick={() => setLoading(true)}>start loading </RcButton>\\n      <RcButton onClick={() => setLoading(false)}>end loading </RcButton>\\n    </>\\n  );\\n};\\n\\nLoading.args = {};\\n\\nLoading.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"loading\":{\"startLoc\":{\"col\":44,\"line\":28},\"endLoc\":{\"col\":1,\"line\":47},\"startBody\":{\"col\":44,\"line\":28},\"endBody\":{\"col\":1,\"line\":47}}}},},\n  title: '🚀 Cleanup Components/Loading',\n  component: RcLoading,\n  argTypes: {\n    ...notShowInDocTable<keyof LoadingProps>([]),\n  },\n} as Meta;\n\ntype LoadingProps = ComponentProps<typeof RcLoading>;\n\nconst Container = styled.div`\n  position: relative;\n  height: 300px;\n  width: 300px;\n  background: ${palette2('neutral', 'b03')};\n  ${flexCenterStyle};\n`;\n\nexport const Loading: Story<LoadingProps> = ({\n  children,\n  loading: loadingProp,\n  ...args\n}) => {\n  const [loading, setLoading] = useState(loadingProp);\n  return (\n    <>\n      <Container>\n        <RcLoading {...args} loading={loading}>\n          <>\n            <RcButton onClick={() => setLoading(true)}>start loading</RcButton>\n          </>\n        </RcLoading>\n      </Container>\n      <RcButton onClick={() => setLoading(true)}>start loading </RcButton>\n      <RcButton onClick={() => setLoading(false)}>end loading </RcButton>\n    </>\n  );\n};\n\nLoading.args = {};\n\nLoading.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcButton } from '../../../Buttons';\\nimport { RcPaginationItem } from '../../PaginationItem';\\nimport { RcPagination } from '../Pagination';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Pagination',\\n  component: RcPagination,\\n  argTypes: {\\n    ...sortInDocTable<keyof PaginationProps>([]),\\n    ...notControlInDocTable<keyof PaginationProps>([]),\\n    ...notShowInDocTable<keyof PaginationProps>([]),\\n  },\\n} as Meta;\\n\\ntype PaginationProps = ComponentProps<typeof RcPagination>;\\n\\nexport const Pagination: Story<PaginationProps> = (args) => {\\n  switchToControlKnobs();\\n  return <RcPagination {...args} />;\\n};\\n\\nPagination.storyName = 'Pagination';\\n\\nPagination.args = {\\n  count: 50,\\n};\\n\\nPagination.argTypes = {\\n  ...notControlInDocTable<keyof PaginationProps>([]),\\n};\\n\\nPagination.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/pagination/#pagination',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const PaginationCustomItem: Story<PaginationProps> = (args) => {\\n  switchToControlKnobs();\\n  const [bg, setBg] = useState('red');\\n  return (\\n    <>\\n      <RcPagination\\n        {...args}\\n        renderItem={(item: any) => {\\n          return <RcPaginationItem {...item} component={ColorDiv} bg={bg} />;\\n        }}\\n      />\\n      <br />\\n      <RcButton color=\\\"danger.b04\\\" onClick={() => setBg('red')}>\\n        red bg\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcButton color=\\\"interactive.b02\\\" onClick={() => setBg('blue')}>\\n        blue bg\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcButton color=\\\"success.b04\\\" onClick={() => setBg('green')}>\\n        green bg\\n      </RcButton>\\n    </>\\n  );\\n};\\nconst ColorDiv = styled.div<{ bg: string }>`\\n  background-color: ${(props) => props.bg};\\n  color: white;\\n`;\\nPaginationCustomItem.storyName = 'Pagination Custom Item';\\n\\nPaginationCustomItem.args = { count: 50 };\\n\\nPaginationCustomItem.argTypes = {\\n  ...notControlInDocTable<keyof PaginationProps>([]),\\n};\\n\\nPaginationCustomItem.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/pagination/#pagination',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Pagination\":{\"startLoc\":{\"col\":50,\"line\":28},\"endLoc\":{\"col\":1,\"line\":31},\"startBody\":{\"col\":50,\"line\":28},\"endBody\":{\"col\":1,\"line\":31}},\"PaginationCustomItem\":{\"startLoc\":{\"col\":60,\"line\":56},\"endLoc\":{\"col\":1,\"line\":83},\"startBody\":{\"col\":60,\"line\":56},\"endBody\":{\"col\":1,\"line\":83}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { RcButton } from '../../../Buttons';\nimport { RcPaginationItem } from '../../PaginationItem';\nimport { RcPagination } from '../Pagination';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcButton } from '../../../Buttons';\\nimport { RcPaginationItem } from '../../PaginationItem';\\nimport { RcPagination } from '../Pagination';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Pagination',\\n  component: RcPagination,\\n  argTypes: {\\n    ...sortInDocTable<keyof PaginationProps>([]),\\n    ...notControlInDocTable<keyof PaginationProps>([]),\\n    ...notShowInDocTable<keyof PaginationProps>([]),\\n  },\\n} as Meta;\\n\\ntype PaginationProps = ComponentProps<typeof RcPagination>;\\n\\nexport const Pagination: Story<PaginationProps> = (args) => {\\n  switchToControlKnobs();\\n  return <RcPagination {...args} />;\\n};\\n\\nPagination.storyName = 'Pagination';\\n\\nPagination.args = {\\n  count: 50,\\n};\\n\\nPagination.argTypes = {\\n  ...notControlInDocTable<keyof PaginationProps>([]),\\n};\\n\\nPagination.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/pagination/#pagination',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nexport const PaginationCustomItem: Story<PaginationProps> = (args) => {\\n  switchToControlKnobs();\\n  const [bg, setBg] = useState('red');\\n  return (\\n    <>\\n      <RcPagination\\n        {...args}\\n        renderItem={(item: any) => {\\n          return <RcPaginationItem {...item} component={ColorDiv} bg={bg} />;\\n        }}\\n      />\\n      <br />\\n      <RcButton color=\\\"danger.b04\\\" onClick={() => setBg('red')}>\\n        red bg\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcButton color=\\\"interactive.b02\\\" onClick={() => setBg('blue')}>\\n        blue bg\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcButton color=\\\"success.b04\\\" onClick={() => setBg('green')}>\\n        green bg\\n      </RcButton>\\n    </>\\n  );\\n};\\nconst ColorDiv = styled.div<{ bg: string }>`\\n  background-color: ${(props) => props.bg};\\n  color: white;\\n`;\\nPaginationCustomItem.storyName = 'Pagination Custom Item';\\n\\nPaginationCustomItem.args = { count: 50 };\\n\\nPaginationCustomItem.argTypes = {\\n  ...notControlInDocTable<keyof PaginationProps>([]),\\n};\\n\\nPaginationCustomItem.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/pagination/#pagination',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"pagination\":{\"startLoc\":{\"col\":50,\"line\":28},\"endLoc\":{\"col\":1,\"line\":31},\"startBody\":{\"col\":50,\"line\":28},\"endBody\":{\"col\":1,\"line\":31}},\"pagination-custom-item\":{\"startLoc\":{\"col\":60,\"line\":56},\"endLoc\":{\"col\":1,\"line\":83},\"startBody\":{\"col\":60,\"line\":56},\"endBody\":{\"col\":1,\"line\":83}}}},},\n  title: '🚀 Cleanup Components/Pagination',\n  component: RcPagination,\n  argTypes: {\n    ...sortInDocTable<keyof PaginationProps>([]),\n    ...notControlInDocTable<keyof PaginationProps>([]),\n    ...notShowInDocTable<keyof PaginationProps>([]),\n  },\n} as Meta;\n\ntype PaginationProps = ComponentProps<typeof RcPagination>;\n\nexport const Pagination: Story<PaginationProps> = (args) => {\n  switchToControlKnobs();\n  return <RcPagination {...args} />;\n};;\n\nPagination.storyName = 'Pagination';\n\nPagination.args = {\n  count: 50,\n};\n\nPagination.argTypes = {\n  ...notControlInDocTable<keyof PaginationProps>([]),\n};\n\nPagination.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/pagination/#pagination',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nexport const PaginationCustomItem: Story<PaginationProps> = (args) => {\n  switchToControlKnobs();\n  const [bg, setBg] = useState('red');\n  return (\n    <>\n      <RcPagination\n        {...args}\n        renderItem={(item: any) => {\n          return <RcPaginationItem {...item} component={ColorDiv} bg={bg} />;\n        }}\n      />\n      <br />\n      <RcButton color=\"danger.b04\" onClick={() => setBg('red')}>\n        red bg\n      </RcButton>\n      <br />\n      <br />\n      <RcButton color=\"interactive.b02\" onClick={() => setBg('blue')}>\n        blue bg\n      </RcButton>\n      <br />\n      <br />\n      <RcButton color=\"success.b04\" onClick={() => setBg('green')}>\n        green bg\n      </RcButton>\n    </>\n  );\n};\nconst ColorDiv = styled.div<{ bg: string }>`\n  background-color: ${(props) => props.bg};\n  color: white;\n`;\nPaginationCustomItem.storyName = 'Pagination Custom Item';\n\nPaginationCustomItem.args = { count: 50 };\n\nPaginationCustomItem.argTypes = {\n  ...notControlInDocTable<keyof PaginationProps>([]),\n};\n\nPaginationCustomItem.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/pagination/#pagination',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, styled } from '../../../foundation';\\nimport { paletteChoice, switchToControlKnobs } from '../../../storybook';\\nimport { RcPresence } from '../Presence';\\nimport { RcPresenceColors } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Presence',\\n  component: RcPresence,\\n  parameters: {\\n    backgroundColor: 'informative.b01',\\n  },\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n  },\\n} as Meta;\\n\\ntype PresenceProps = ComponentProps<typeof RcPresence>;\\n\\nexport const Presence: Story<PresenceProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n  return <RcPresence {...args}>{children}</RcPresence>;\\n};\\n\\nPresence.args = {};\\nPresence.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst StyledWrapper = styled.div`\\n  display: flex;\\n  padding: 10px;\\n`;\\n\\nconst StyledText = styled.span`\\n  margin-left: 5px;\\n  color: ${palette2('neutral', 'f06')};\\n`;\\n\\nconst sizes: PresenceProps['size'][] = [\\n  'xxsmall',\\n  'xsmall',\\n  'small',\\n  'medium',\\n  'large',\\n  'xlarge',\\n];\\n\\nconst types: PresenceProps['type'][] = Object.keys(RcPresenceColors) as any;\\n\\nexport const PresenceExamples: Story<PresenceProps> = () => {\\n  return (\\n    <>\\n      {types.map((type) => (\\n        <StyledWrapper key={type}>\\n          {sizes.map((size) => (\\n            <RcPresence key={`${type}_${size}`} size={size} type={type} />\\n          ))}\\n          <StyledText>{type}</StyledText>\\n        </StyledWrapper>\\n      ))}\\n\\n      <StyledWrapper>\\n        {sizes.map((size) => (\\n          <RcPresence\\n            key={size}\\n            size={size}\\n            color={palette2('interactive', 'b02')}\\n          />\\n        ))}\\n        <StyledText>Custom Color with theme method</StyledText>\\n      </StyledWrapper>\\n      <StyledWrapper>\\n        {sizes.map((size) => (\\n          <RcPresence key={size} size={size} color={'yellow'} />\\n        ))}\\n        <StyledText>Custom Color with css color</StyledText>\\n      </StyledWrapper>\\n    </>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Presence\":{\"startLoc\":{\"col\":46,\"line\":28},\"endLoc\":{\"col\":1,\"line\":31},\"startBody\":{\"col\":46,\"line\":28},\"endBody\":{\"col\":1,\"line\":31}},\"PresenceExamples\":{\"startLoc\":{\"col\":54,\"line\":64},\"endLoc\":{\"col\":1,\"line\":94},\"startBody\":{\"col\":54,\"line\":64},\"endBody\":{\"col\":1,\"line\":94}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { palette2, styled } from '../../../foundation';\nimport { paletteChoice, switchToControlKnobs } from '../../../storybook';\nimport { RcPresence } from '../Presence';\nimport { RcPresenceColors } from '../utils';\n\nexport default {\n  title: '🚀 Cleanup Components/Presence',\n  component: RcPresence,\n  parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, styled } from '../../../foundation';\\nimport { paletteChoice, switchToControlKnobs } from '../../../storybook';\\nimport { RcPresence } from '../Presence';\\nimport { RcPresenceColors } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Presence',\\n  component: RcPresence,\\n  parameters: {\\n    backgroundColor: 'informative.b01',\\n  },\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n  },\\n} as Meta;\\n\\ntype PresenceProps = ComponentProps<typeof RcPresence>;\\n\\nexport const Presence: Story<PresenceProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n  return <RcPresence {...args}>{children}</RcPresence>;\\n};\\n\\nPresence.args = {};\\nPresence.parameters = {\\n  tags: [\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst StyledWrapper = styled.div`\\n  display: flex;\\n  padding: 10px;\\n`;\\n\\nconst StyledText = styled.span`\\n  margin-left: 5px;\\n  color: ${palette2('neutral', 'f06')};\\n`;\\n\\nconst sizes: PresenceProps['size'][] = [\\n  'xxsmall',\\n  'xsmall',\\n  'small',\\n  'medium',\\n  'large',\\n  'xlarge',\\n];\\n\\nconst types: PresenceProps['type'][] = Object.keys(RcPresenceColors) as any;\\n\\nexport const PresenceExamples: Story<PresenceProps> = () => {\\n  return (\\n    <>\\n      {types.map((type) => (\\n        <StyledWrapper key={type}>\\n          {sizes.map((size) => (\\n            <RcPresence key={`${type}_${size}`} size={size} type={type} />\\n          ))}\\n          <StyledText>{type}</StyledText>\\n        </StyledWrapper>\\n      ))}\\n\\n      <StyledWrapper>\\n        {sizes.map((size) => (\\n          <RcPresence\\n            key={size}\\n            size={size}\\n            color={palette2('interactive', 'b02')}\\n          />\\n        ))}\\n        <StyledText>Custom Color with theme method</StyledText>\\n      </StyledWrapper>\\n      <StyledWrapper>\\n        {sizes.map((size) => (\\n          <RcPresence key={size} size={size} color={'yellow'} />\\n        ))}\\n        <StyledText>Custom Color with css color</StyledText>\\n      </StyledWrapper>\\n    </>\\n  );\\n};\\n\",\"locationsMap\":{\"presence\":{\"startLoc\":{\"col\":46,\"line\":28},\"endLoc\":{\"col\":1,\"line\":31},\"startBody\":{\"col\":46,\"line\":28},\"endBody\":{\"col\":1,\"line\":31}},\"presence-examples\":{\"startLoc\":{\"col\":54,\"line\":64},\"endLoc\":{\"col\":1,\"line\":94},\"startBody\":{\"col\":54,\"line\":64},\"endBody\":{\"col\":1,\"line\":94}}}},\n    backgroundColor: 'informative.b01',\n  },\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n  },\n} as Meta;\n\ntype PresenceProps = ComponentProps<typeof RcPresence>;\n\nexport const Presence: Story<PresenceProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n  return <RcPresence {...args}>{children}</RcPresence>;\n};;\n\nPresence.args = {};\nPresence.parameters = {\n  tags: [\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst StyledWrapper = styled.div`\n  display: flex;\n  padding: 10px;\n`;\n\nconst StyledText = styled.span`\n  margin-left: 5px;\n  color: ${palette2('neutral', 'f06')};\n`;\n\nconst sizes: PresenceProps['size'][] = [\n  'xxsmall',\n  'xsmall',\n  'small',\n  'medium',\n  'large',\n  'xlarge',\n];\n\nconst types: PresenceProps['type'][] = Object.keys(RcPresenceColors) as any;\n\nexport const PresenceExamples: Story<PresenceProps> = () => {\n  return (\n    <>\n      {types.map((type) => (\n        <StyledWrapper key={type}>\n          {sizes.map((size) => (\n            <RcPresence key={`${type}_${size}`} size={size} type={type} />\n          ))}\n          <StyledText>{type}</StyledText>\n        </StyledWrapper>\n      ))}\n\n      <StyledWrapper>\n        {sizes.map((size) => (\n          <RcPresence\n            key={size}\n            size={size}\n            color={palette2('interactive', 'b02')}\n          />\n        ))}\n        <StyledText>Custom Color with theme method</StyledText>\n      </StyledWrapper>\n      <StyledWrapper>\n        {sizes.map((size) => (\n          <RcPresence key={size} size={size} color={'yellow'} />\n        ))}\n        <StyledText>Custom Color with css color</StyledText>\n      </StyledWrapper>\n    </>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../foundation';\\nimport { Add, AddBorder } from '../../../icon';\\nimport {\\n  notControlInDocTable,\\n  paletteChoice,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcIcon } from '../../Icon';\\nimport { RcTypography } from '../../Typography';\\nimport { RcRating } from '../Rating';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Rating',\\n  component: RcRating,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...notControlInDocTable<keyof RatingProps>(['icon', 'emptyIcon']),\\n  },\\n  args: {\\n    defaultValue: 1,\\n    tooltips: ['Poor', 'Fair', 'Okay', 'Good', 'Great'],\\n  },\\n} as Meta;\\n\\ntype RatingProps = ComponentProps<typeof RcRating>;\\n\\nexport const Rating: Story<RatingProps> = ({ icon, emptyIcon, ...args }) => {\\n  switchToControlKnobs();\\n  return <RcRating {...args} />;\\n};\\n\\nRating.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/rating/#rating',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst CustomWrapper = styled.div`\\n  height: 100px;\\n  width: 100px;\\n  font-size: 80px;\\n  font-weight: 700;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n`;\\n\\nconst customIcon = (\\n  <CustomWrapper>\\n    + <RcTypography color=\\\"neutral.f04\\\">(a)</RcTypography>\\n  </CustomWrapper>\\n);\\n\\nconst customEmptyIcon = (\\n  <CustomWrapper>\\n    - <RcTypography color=\\\"neutral.f04\\\">(b)</RcTypography>\\n  </CustomWrapper>\\n);\\n\\nexport const CustomRatingRender: Story<RatingProps> = ({\\n  icon,\\n  emptyIcon,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<number | null>(2);\\n\\n  return (\\n    <>\\n      <RcRating\\n        value={value}\\n        onChange={(e, newValue) => {\\n          setValue(newValue);\\n        }}\\n        icon={<RcIcon symbol={Add} />}\\n        emptyIcon={<RcIcon symbol={AddBorder} />}\\n        {...args}\\n      />\\n      <br />\\n      <RcRating\\n        value={value}\\n        name=\\\"add\\\"\\n        onChange={(e, newValue) => {\\n          setValue(newValue);\\n        }}\\n        icon={customIcon}\\n        emptyIcon={customEmptyIcon}\\n        {...args}\\n      />\\n    </>\\n  );\\n};\\n\\nCustomRatingRender.args = {\\n  color: 'success.b04',\\n  emphasized: false,\\n};\\n\\nCustomRatingRender.argTypes = {\\n  ...notControlInDocTable<keyof RatingProps>(['defaultValue', 'value']),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Rating\":{\"startLoc\":{\"col\":42,\"line\":36},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":42,\"line\":36},\"endBody\":{\"col\":1,\"line\":39}},\"CustomRatingRender\":{\"startLoc\":{\"col\":54,\"line\":76},\"endLoc\":{\"col\":1,\"line\":109},\"startBody\":{\"col\":54,\"line\":76},\"endBody\":{\"col\":1,\"line\":109}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../foundation';\nimport { Add, AddBorder } from '../../../icon';\nimport {\n  notControlInDocTable,\n  paletteChoice,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcIcon } from '../../Icon';\nimport { RcTypography } from '../../Typography';\nimport { RcRating } from '../Rating';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../foundation';\\nimport { Add, AddBorder } from '../../../icon';\\nimport {\\n  notControlInDocTable,\\n  paletteChoice,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcIcon } from '../../Icon';\\nimport { RcTypography } from '../../Typography';\\nimport { RcRating } from '../Rating';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Rating',\\n  component: RcRating,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...notControlInDocTable<keyof RatingProps>(['icon', 'emptyIcon']),\\n  },\\n  args: {\\n    defaultValue: 1,\\n    tooltips: ['Poor', 'Fair', 'Okay', 'Good', 'Great'],\\n  },\\n} as Meta;\\n\\ntype RatingProps = ComponentProps<typeof RcRating>;\\n\\nexport const Rating: Story<RatingProps> = ({ icon, emptyIcon, ...args }) => {\\n  switchToControlKnobs();\\n  return <RcRating {...args} />;\\n};\\n\\nRating.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/rating/#rating',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nconst CustomWrapper = styled.div`\\n  height: 100px;\\n  width: 100px;\\n  font-size: 80px;\\n  font-weight: 700;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n`;\\n\\nconst customIcon = (\\n  <CustomWrapper>\\n    + <RcTypography color=\\\"neutral.f04\\\">(a)</RcTypography>\\n  </CustomWrapper>\\n);\\n\\nconst customEmptyIcon = (\\n  <CustomWrapper>\\n    - <RcTypography color=\\\"neutral.f04\\\">(b)</RcTypography>\\n  </CustomWrapper>\\n);\\n\\nexport const CustomRatingRender: Story<RatingProps> = ({\\n  icon,\\n  emptyIcon,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = useState<number | null>(2);\\n\\n  return (\\n    <>\\n      <RcRating\\n        value={value}\\n        onChange={(e, newValue) => {\\n          setValue(newValue);\\n        }}\\n        icon={<RcIcon symbol={Add} />}\\n        emptyIcon={<RcIcon symbol={AddBorder} />}\\n        {...args}\\n      />\\n      <br />\\n      <RcRating\\n        value={value}\\n        name=\\\"add\\\"\\n        onChange={(e, newValue) => {\\n          setValue(newValue);\\n        }}\\n        icon={customIcon}\\n        emptyIcon={customEmptyIcon}\\n        {...args}\\n      />\\n    </>\\n  );\\n};\\n\\nCustomRatingRender.args = {\\n  color: 'success.b04',\\n  emphasized: false,\\n};\\n\\nCustomRatingRender.argTypes = {\\n  ...notControlInDocTable<keyof RatingProps>(['defaultValue', 'value']),\\n};\\n\",\"locationsMap\":{\"rating\":{\"startLoc\":{\"col\":42,\"line\":36},\"endLoc\":{\"col\":1,\"line\":39},\"startBody\":{\"col\":42,\"line\":36},\"endBody\":{\"col\":1,\"line\":39}},\"custom-rating-render\":{\"startLoc\":{\"col\":54,\"line\":76},\"endLoc\":{\"col\":1,\"line\":109},\"startBody\":{\"col\":54,\"line\":76},\"endBody\":{\"col\":1,\"line\":109}}}},},\n  title: '🚀 Cleanup Components/Rating',\n  component: RcRating,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n    ...notControlInDocTable<keyof RatingProps>(['icon', 'emptyIcon']),\n  },\n  args: {\n    defaultValue: 1,\n    tooltips: ['Poor', 'Fair', 'Okay', 'Good', 'Great'],\n  },\n} as Meta;\n\ntype RatingProps = ComponentProps<typeof RcRating>;\n\nexport const Rating: Story<RatingProps> = ({ icon, emptyIcon, ...args }) => {\n  switchToControlKnobs();\n  return <RcRating {...args} />;\n};;\n\nRating.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/rating/#rating',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nconst CustomWrapper = styled.div`\n  height: 100px;\n  width: 100px;\n  font-size: 80px;\n  font-weight: 700;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst customIcon = (\n  <CustomWrapper>\n    + <RcTypography color=\"neutral.f04\">(a)</RcTypography>\n  </CustomWrapper>\n);\n\nconst customEmptyIcon = (\n  <CustomWrapper>\n    - <RcTypography color=\"neutral.f04\">(b)</RcTypography>\n  </CustomWrapper>\n);\n\nexport const CustomRatingRender: Story<RatingProps> = ({\n  icon,\n  emptyIcon,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = useState<number | null>(2);\n\n  return (\n    <>\n      <RcRating\n        value={value}\n        onChange={(e, newValue) => {\n          setValue(newValue);\n        }}\n        icon={<RcIcon symbol={Add} />}\n        emptyIcon={<RcIcon symbol={AddBorder} />}\n        {...args}\n      />\n      <br />\n      <RcRating\n        value={value}\n        name=\"add\"\n        onChange={(e, newValue) => {\n          setValue(newValue);\n        }}\n        icon={customIcon}\n        emptyIcon={customEmptyIcon}\n        {...args}\n      />\n    </>\n  );\n};\n\nCustomRatingRender.args = {\n  color: 'success.b04',\n  emphasized: false,\n};\n\nCustomRatingRender.argTypes = {\n  ...notControlInDocTable<keyof RatingProps>(['defaultValue', 'value']),\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useRef, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  styled,\\n  useResponsiveContext,\\n  useResponsiveMatch,\\n  withResponsive,\\n} from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons';\\nimport {\\n  RcDialog,\\n  RcDialogActions,\\n  RcDialogContent,\\n  RcDialogTitle,\\n} from '../../Dialog';\\nimport { RcRadio } from '../../Forms/Radio';\\nimport { RcRadioGroup } from '../../Forms/RadioGroup';\\nimport { RcTypography } from '../../Typography';\\nimport { RcResponsive } from '../Responsive';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Responsive',\\n  component: RcResponsive,\\n  argTypes: {\\n    ...sortInDocTable<keyof ResponsiveProps>([]),\\n    ...notControlInDocTable<keyof ResponsiveProps>([\\n      'breakpointMap',\\n      'resizeThrottle',\\n    ]),\\n    ...notShowInDocTable<keyof ResponsiveProps>([]),\\n  },\\n} as Meta;\\n\\ntype ResponsiveProps = ComponentProps<typeof RcResponsive>;\\n\\nconst ResizeWrapper = styled.div`\\n  width: 1200px;\\n  height: 300px;\\n  resize: horizontal;\\n  border-style: solid;\\n  border-color: black;\\n  border-width: 2px;\\n  overflow: hidden;\\n`;\\n\\nconst DialogStory = ({\\n  open,\\n  setOpen,\\n}: {\\n  open: boolean;\\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\\n}) => {\\n  const bp = useResponsiveContext();\\n  const matchResult = useResponsiveMatch();\\n\\n  console.log(matchResult);\\n  const { ltMD, gtSM } = matchResult;\\n\\n  return (\\n    <>\\n      <RcDialog onClose={() => setOpen(false)} open={open}>\\n        <RcDialogTitle>{bp} Size</RcDialogTitle>\\n        <RcDialogContent>\\n          <RcTypography>try to resize screen</RcTypography>\\n          <RcRadioGroup row={gtSM}>\\n            <RcRadio label={gtSM ? 'horizontal radio' : 'vertical radio'} />\\n            <RcRadio label={gtSM ? 'horizontal radio' : 'vertical radio'} />\\n          </RcRadioGroup>\\n        </RcDialogContent>\\n        <RcDialogActions direction={ltMD ? 'vertical' : 'horizontal'}>\\n          <RcButton\\n            onClick={() => setOpen(false)}\\n            color=\\\"danger.b04\\\"\\n            fullWidth={ltMD}\\n          >\\n            Cancel\\n          </RcButton>\\n          <RcButton fullWidth={ltMD}>OK</RcButton>\\n        </RcDialogActions>\\n      </RcDialog>\\n    </>\\n  );\\n};\\n\\nconst ResponsiveButton = withResponsive(RcButton, ['size']);\\n\\nexport const ResponsiveButtonExamples: Story = () => {\\n  switchToControlKnobs();\\n  const ref = useRef<HTMLDivElement>(null);\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"danger.f02\\\">\\n        If you want to make duplicate component can responsive size such as\\n        listItemActions, this hook is better than 'withResponsive'. Because\\n        there is no need to double count the matched size\\n      </RcTypography>\\n      {/* default bind responsive with window */}\\n      <RcResponsive>\\n        <DialogStory open={open} setOpen={setOpen} />\\n      </RcResponsive>\\n      {/* also can bind in different element */}\\n      <RcResponsive responsiveTarget={ref}>\\n        <ResizeWrapper ref={ref}>\\n          <RcTypography>\\n            lg: 'large', md: 'medium', sm: 'small', xs: hidden,\\n          </RcTypography>\\n          <ResponsiveButton\\n            hiddenPatterns={'xs'}\\n            onClick={() => setOpen(true)}\\n            size={['medium.md', 'small.sm', 'large.lg']}\\n          >\\n            open dialog\\n          </ResponsiveButton>\\n        </ResizeWrapper>\\n      </RcResponsive>\\n    </>\\n  );\\n};\\n\\nResponsiveButtonExamples.storyName = 'Responsive';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ResponsiveButtonExamples\":{\"startLoc\":{\"col\":47,\"line\":95},\"endLoc\":{\"col\":1,\"line\":128},\"startBody\":{\"col\":47,\"line\":95},\"endBody\":{\"col\":1,\"line\":128}}};\n    \nimport React, { ComponentProps, useRef, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport {\n  styled,\n  useResponsiveContext,\n  useResponsiveMatch,\n  withResponsive,\n} from '../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { RcButton } from '../../Buttons';\nimport {\n  RcDialog,\n  RcDialogActions,\n  RcDialogContent,\n  RcDialogTitle,\n} from '../../Dialog';\nimport { RcRadio } from '../../Forms/Radio';\nimport { RcRadioGroup } from '../../Forms/RadioGroup';\nimport { RcTypography } from '../../Typography';\nimport { RcResponsive } from '../Responsive';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useRef, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport {\\n  styled,\\n  useResponsiveContext,\\n  useResponsiveMatch,\\n  withResponsive,\\n} from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { RcButton } from '../../Buttons';\\nimport {\\n  RcDialog,\\n  RcDialogActions,\\n  RcDialogContent,\\n  RcDialogTitle,\\n} from '../../Dialog';\\nimport { RcRadio } from '../../Forms/Radio';\\nimport { RcRadioGroup } from '../../Forms/RadioGroup';\\nimport { RcTypography } from '../../Typography';\\nimport { RcResponsive } from '../Responsive';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Responsive',\\n  component: RcResponsive,\\n  argTypes: {\\n    ...sortInDocTable<keyof ResponsiveProps>([]),\\n    ...notControlInDocTable<keyof ResponsiveProps>([\\n      'breakpointMap',\\n      'resizeThrottle',\\n    ]),\\n    ...notShowInDocTable<keyof ResponsiveProps>([]),\\n  },\\n} as Meta;\\n\\ntype ResponsiveProps = ComponentProps<typeof RcResponsive>;\\n\\nconst ResizeWrapper = styled.div`\\n  width: 1200px;\\n  height: 300px;\\n  resize: horizontal;\\n  border-style: solid;\\n  border-color: black;\\n  border-width: 2px;\\n  overflow: hidden;\\n`;\\n\\nconst DialogStory = ({\\n  open,\\n  setOpen,\\n}: {\\n  open: boolean;\\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\\n}) => {\\n  const bp = useResponsiveContext();\\n  const matchResult = useResponsiveMatch();\\n\\n  console.log(matchResult);\\n  const { ltMD, gtSM } = matchResult;\\n\\n  return (\\n    <>\\n      <RcDialog onClose={() => setOpen(false)} open={open}>\\n        <RcDialogTitle>{bp} Size</RcDialogTitle>\\n        <RcDialogContent>\\n          <RcTypography>try to resize screen</RcTypography>\\n          <RcRadioGroup row={gtSM}>\\n            <RcRadio label={gtSM ? 'horizontal radio' : 'vertical radio'} />\\n            <RcRadio label={gtSM ? 'horizontal radio' : 'vertical radio'} />\\n          </RcRadioGroup>\\n        </RcDialogContent>\\n        <RcDialogActions direction={ltMD ? 'vertical' : 'horizontal'}>\\n          <RcButton\\n            onClick={() => setOpen(false)}\\n            color=\\\"danger.b04\\\"\\n            fullWidth={ltMD}\\n          >\\n            Cancel\\n          </RcButton>\\n          <RcButton fullWidth={ltMD}>OK</RcButton>\\n        </RcDialogActions>\\n      </RcDialog>\\n    </>\\n  );\\n};\\n\\nconst ResponsiveButton = withResponsive(RcButton, ['size']);\\n\\nexport const ResponsiveButtonExamples: Story = () => {\\n  switchToControlKnobs();\\n  const ref = useRef<HTMLDivElement>(null);\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcTypography color=\\\"danger.f02\\\">\\n        If you want to make duplicate component can responsive size such as\\n        listItemActions, this hook is better than 'withResponsive'. Because\\n        there is no need to double count the matched size\\n      </RcTypography>\\n      {/* default bind responsive with window */}\\n      <RcResponsive>\\n        <DialogStory open={open} setOpen={setOpen} />\\n      </RcResponsive>\\n      {/* also can bind in different element */}\\n      <RcResponsive responsiveTarget={ref}>\\n        <ResizeWrapper ref={ref}>\\n          <RcTypography>\\n            lg: 'large', md: 'medium', sm: 'small', xs: hidden,\\n          </RcTypography>\\n          <ResponsiveButton\\n            hiddenPatterns={'xs'}\\n            onClick={() => setOpen(true)}\\n            size={['medium.md', 'small.sm', 'large.lg']}\\n          >\\n            open dialog\\n          </ResponsiveButton>\\n        </ResizeWrapper>\\n      </RcResponsive>\\n    </>\\n  );\\n};\\n\\nResponsiveButtonExamples.storyName = 'Responsive';\\n\",\"locationsMap\":{\"responsive-button-examples\":{\"startLoc\":{\"col\":47,\"line\":95},\"endLoc\":{\"col\":1,\"line\":128},\"startBody\":{\"col\":47,\"line\":95},\"endBody\":{\"col\":1,\"line\":128}}}},},\n  title: '🚀 Cleanup Components/Responsive',\n  component: RcResponsive,\n  argTypes: {\n    ...sortInDocTable<keyof ResponsiveProps>([]),\n    ...notControlInDocTable<keyof ResponsiveProps>([\n      'breakpointMap',\n      'resizeThrottle',\n    ]),\n    ...notShowInDocTable<keyof ResponsiveProps>([]),\n  },\n} as Meta;\n\ntype ResponsiveProps = ComponentProps<typeof RcResponsive>;\n\nconst ResizeWrapper = styled.div`\n  width: 1200px;\n  height: 300px;\n  resize: horizontal;\n  border-style: solid;\n  border-color: black;\n  border-width: 2px;\n  overflow: hidden;\n`;\n\nconst DialogStory = ({\n  open,\n  setOpen,\n}: {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const bp = useResponsiveContext();\n  const matchResult = useResponsiveMatch();\n\n  console.log(matchResult);\n  const { ltMD, gtSM } = matchResult;\n\n  return (\n    <>\n      <RcDialog onClose={() => setOpen(false)} open={open}>\n        <RcDialogTitle>{bp} Size</RcDialogTitle>\n        <RcDialogContent>\n          <RcTypography>try to resize screen</RcTypography>\n          <RcRadioGroup row={gtSM}>\n            <RcRadio label={gtSM ? 'horizontal radio' : 'vertical radio'} />\n            <RcRadio label={gtSM ? 'horizontal radio' : 'vertical radio'} />\n          </RcRadioGroup>\n        </RcDialogContent>\n        <RcDialogActions direction={ltMD ? 'vertical' : 'horizontal'}>\n          <RcButton\n            onClick={() => setOpen(false)}\n            color=\"danger.b04\"\n            fullWidth={ltMD}\n          >\n            Cancel\n          </RcButton>\n          <RcButton fullWidth={ltMD}>OK</RcButton>\n        </RcDialogActions>\n      </RcDialog>\n    </>\n  );\n};\n\nconst ResponsiveButton = withResponsive(RcButton, ['size']);\n\nexport const ResponsiveButtonExamples: Story = () => {\n  switchToControlKnobs();\n  const ref = useRef<HTMLDivElement>(null);\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <RcTypography color=\"danger.f02\">\n        If you want to make duplicate component can responsive size such as\n        listItemActions, this hook is better than 'withResponsive'. Because\n        there is no need to double count the matched size\n      </RcTypography>\n      {/* default bind responsive with window */}\n      <RcResponsive>\n        <DialogStory open={open} setOpen={setOpen} />\n      </RcResponsive>\n      {/* also can bind in different element */}\n      <RcResponsive responsiveTarget={ref}>\n        <ResizeWrapper ref={ref}>\n          <RcTypography>\n            lg: 'large', md: 'medium', sm: 'small', xs: hidden,\n          </RcTypography>\n          <ResponsiveButton\n            hiddenPatterns={'xs'}\n            onClick={() => setOpen(true)}\n            size={['medium.md', 'small.sm', 'large.lg']}\n          >\n            open dialog\n          </ResponsiveButton>\n        </ResizeWrapper>\n      </RcResponsive>\n    </>\n  );\n};\n\nResponsiveButtonExamples.storyName = 'Responsive';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport Close from '../../../../icon/Close';\\nimport {\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcLink } from '../../../Link';\\nimport { RcSnackbarAction } from '../../SnackbarAction/SnackbarAction';\\nimport { RcSnackbarContent } from '../SnackbarContent';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Snackbar/SnackbarContent',\\n  component: RcSnackbarContent,\\n  argTypes: {\\n    ...sortInDocTable<keyof SnackbarContentProps>([\\n      'type',\\n      'size',\\n      'messageAlign',\\n      'square',\\n    ]),\\n    ...notShowInDocTable<keyof SnackbarContentProps>(['ariaLabel']),\\n  },\\n} as Meta;\\n\\ntype SnackbarContentProps = ComponentProps<typeof RcSnackbarContent>;\\n\\nexport const SnackbarContent: Story<SnackbarContentProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n  return <RcSnackbarContent {...args} />;\\n};\\n\\nSnackbarContent.args = {\\n  message: 'Example snackbar content',\\n};\\nSnackbarContent.storyName = 'SnackbarContent';\\n\\nSnackbarContent.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/api/snackbar-content/',\\n    },\\n  ],\\n};\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 12px 24px;\\n  margin: 12px 0;\\n\\n  > div {\\n    margin-bottom: 10px;\\n  }\\n`;\\n\\nexport const SnackbarContentExamples: Story<SnackbarContentProps> = () => {\\n  return (\\n    <Wrapper>\\n      <RcSnackbarContent message=\\\"This is an success message.\\\" type=\\\"success\\\" />\\n      <RcSnackbarContent\\n        type=\\\"error\\\"\\n        message=\\\"This is an error message.\\\"\\n        action={<RcSnackbarAction key=\\\"action1\\\">Action</RcSnackbarAction>}\\n      />\\n      <RcSnackbarContent\\n        type=\\\"warn\\\"\\n        message={\\n          <>\\n            This is an warning message. &nbsp;\\n            <RcLink href=\\\"https://app.ringcentral.com/\\\" target=\\\"_blank\\\">\\n              https://app.ringcentral.com/\\n            </RcLink>\\n          </>\\n        }\\n        action={[\\n          <RcSnackbarAction key=\\\"action1\\\">Action</RcSnackbarAction>,\\n          <RcSnackbarAction key=\\\"action2\\\">Action</RcSnackbarAction>,\\n        ]}\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"This is an informational message.\\\"\\n        action={[\\n          <RcSnackbarAction key=\\\"action1\\\" disabled>\\n            Action\\n          </RcSnackbarAction>,\\n          <RcSnackbarAction key=\\\"action2\\\">Action</RcSnackbarAction>,\\n          <RcSnackbarAction key=\\\"action3\\\" variant=\\\"icon\\\" symbol={Close} />,\\n        ]}\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"This is an neutral message.\\\"\\n        loading\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"Only has icon\\\"\\n        fullWidth\\n        action={\\n          <RcSnackbarAction key=\\\"action3\\\" variant=\\\"icon\\\" symbol={Close} />\\n        }\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"In the cellular phone industry, mobile phones and their networks sometimes support concatenated short message service (or concatenated SMS) to overcome the limitation on the number of characters that can be sent in a single SMS text message transmission (which is usually 160). Using this method, long messages are split into smaller messages by the sending device and recombined at the receiving end. Each message is then billed separately. When the feature works properly, it is nearly transparent to the user, appearing as a single long text message. Previously, due to incompatibilities between providers and lack of support in some phone models, there was not widespread use of this feature.\\\"\\n        action={[\\n          <RcSnackbarAction key=\\\"action3\\\" variant=\\\"icon\\\" symbol={Close} />,\\n        ]}\\n      />\\n    </Wrapper>\\n  );\\n};\\n\\nSnackbarContentExamples.storyName = 'SnackbarContent Examples';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"SnackbarContent\":{\"startLoc\":{\"col\":60,\"line\":32},\"endLoc\":{\"col\":1,\"line\":35},\"startBody\":{\"col\":60,\"line\":32},\"endBody\":{\"col\":1,\"line\":35}},\"SnackbarContentExamples\":{\"startLoc\":{\"col\":68,\"line\":63},\"endLoc\":{\"col\":1,\"line\":120},\"startBody\":{\"col\":68,\"line\":63},\"endBody\":{\"col\":1,\"line\":120}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../../foundation';\nimport Close from '../../../../icon/Close';\nimport {\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { RcLink } from '../../../Link';\nimport { RcSnackbarAction } from '../../SnackbarAction/SnackbarAction';\nimport { RcSnackbarContent } from '../SnackbarContent';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport Close from '../../../../icon/Close';\\nimport {\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcLink } from '../../../Link';\\nimport { RcSnackbarAction } from '../../SnackbarAction/SnackbarAction';\\nimport { RcSnackbarContent } from '../SnackbarContent';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Snackbar/SnackbarContent',\\n  component: RcSnackbarContent,\\n  argTypes: {\\n    ...sortInDocTable<keyof SnackbarContentProps>([\\n      'type',\\n      'size',\\n      'messageAlign',\\n      'square',\\n    ]),\\n    ...notShowInDocTable<keyof SnackbarContentProps>(['ariaLabel']),\\n  },\\n} as Meta;\\n\\ntype SnackbarContentProps = ComponentProps<typeof RcSnackbarContent>;\\n\\nexport const SnackbarContent: Story<SnackbarContentProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n  return <RcSnackbarContent {...args} />;\\n};\\n\\nSnackbarContent.args = {\\n  message: 'Example snackbar content',\\n};\\nSnackbarContent.storyName = 'SnackbarContent';\\n\\nSnackbarContent.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/api/snackbar-content/',\\n    },\\n  ],\\n};\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n  text-align: center;\\n  padding: 12px 24px;\\n  margin: 12px 0;\\n\\n  > div {\\n    margin-bottom: 10px;\\n  }\\n`;\\n\\nexport const SnackbarContentExamples: Story<SnackbarContentProps> = () => {\\n  return (\\n    <Wrapper>\\n      <RcSnackbarContent message=\\\"This is an success message.\\\" type=\\\"success\\\" />\\n      <RcSnackbarContent\\n        type=\\\"error\\\"\\n        message=\\\"This is an error message.\\\"\\n        action={<RcSnackbarAction key=\\\"action1\\\">Action</RcSnackbarAction>}\\n      />\\n      <RcSnackbarContent\\n        type=\\\"warn\\\"\\n        message={\\n          <>\\n            This is an warning message. &nbsp;\\n            <RcLink href=\\\"https://app.ringcentral.com/\\\" target=\\\"_blank\\\">\\n              https://app.ringcentral.com/\\n            </RcLink>\\n          </>\\n        }\\n        action={[\\n          <RcSnackbarAction key=\\\"action1\\\">Action</RcSnackbarAction>,\\n          <RcSnackbarAction key=\\\"action2\\\">Action</RcSnackbarAction>,\\n        ]}\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"This is an informational message.\\\"\\n        action={[\\n          <RcSnackbarAction key=\\\"action1\\\" disabled>\\n            Action\\n          </RcSnackbarAction>,\\n          <RcSnackbarAction key=\\\"action2\\\">Action</RcSnackbarAction>,\\n          <RcSnackbarAction key=\\\"action3\\\" variant=\\\"icon\\\" symbol={Close} />,\\n        ]}\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"This is an neutral message.\\\"\\n        loading\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"Only has icon\\\"\\n        fullWidth\\n        action={\\n          <RcSnackbarAction key=\\\"action3\\\" variant=\\\"icon\\\" symbol={Close} />\\n        }\\n      />\\n      <RcSnackbarContent\\n        type=\\\"info\\\"\\n        message=\\\"In the cellular phone industry, mobile phones and their networks sometimes support concatenated short message service (or concatenated SMS) to overcome the limitation on the number of characters that can be sent in a single SMS text message transmission (which is usually 160). Using this method, long messages are split into smaller messages by the sending device and recombined at the receiving end. Each message is then billed separately. When the feature works properly, it is nearly transparent to the user, appearing as a single long text message. Previously, due to incompatibilities between providers and lack of support in some phone models, there was not widespread use of this feature.\\\"\\n        action={[\\n          <RcSnackbarAction key=\\\"action3\\\" variant=\\\"icon\\\" symbol={Close} />,\\n        ]}\\n      />\\n    </Wrapper>\\n  );\\n};\\n\\nSnackbarContentExamples.storyName = 'SnackbarContent Examples';\\n\",\"locationsMap\":{\"snackbar-content\":{\"startLoc\":{\"col\":60,\"line\":32},\"endLoc\":{\"col\":1,\"line\":35},\"startBody\":{\"col\":60,\"line\":32},\"endBody\":{\"col\":1,\"line\":35}},\"snackbar-content-examples\":{\"startLoc\":{\"col\":68,\"line\":63},\"endLoc\":{\"col\":1,\"line\":120},\"startBody\":{\"col\":68,\"line\":63},\"endBody\":{\"col\":1,\"line\":120}}}},},\n  title: '🚀 Cleanup Components/Snackbar/SnackbarContent',\n  component: RcSnackbarContent,\n  argTypes: {\n    ...sortInDocTable<keyof SnackbarContentProps>([\n      'type',\n      'size',\n      'messageAlign',\n      'square',\n    ]),\n    ...notShowInDocTable<keyof SnackbarContentProps>(['ariaLabel']),\n  },\n} as Meta;\n\ntype SnackbarContentProps = ComponentProps<typeof RcSnackbarContent>;\n\nexport const SnackbarContent: Story<SnackbarContentProps> = ({ ...args }) => {\n  switchToControlKnobs();\n  return <RcSnackbarContent {...args} />;\n};;\n\nSnackbarContent.args = {\n  message: 'Example snackbar content',\n};\nSnackbarContent.storyName = 'SnackbarContent';\n\nSnackbarContent.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/api/snackbar-content/',\n    },\n  ],\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  text-align: center;\n  padding: 12px 24px;\n  margin: 12px 0;\n\n  > div {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const SnackbarContentExamples: Story<SnackbarContentProps> = () => {\n  return (\n    <Wrapper>\n      <RcSnackbarContent message=\"This is an success message.\" type=\"success\" />\n      <RcSnackbarContent\n        type=\"error\"\n        message=\"This is an error message.\"\n        action={<RcSnackbarAction key=\"action1\">Action</RcSnackbarAction>}\n      />\n      <RcSnackbarContent\n        type=\"warn\"\n        message={\n          <>\n            This is an warning message. &nbsp;\n            <RcLink href=\"https://app.ringcentral.com/\" target=\"_blank\">\n              https://app.ringcentral.com/\n            </RcLink>\n          </>\n        }\n        action={[\n          <RcSnackbarAction key=\"action1\">Action</RcSnackbarAction>,\n          <RcSnackbarAction key=\"action2\">Action</RcSnackbarAction>,\n        ]}\n      />\n      <RcSnackbarContent\n        type=\"info\"\n        message=\"This is an informational message.\"\n        action={[\n          <RcSnackbarAction key=\"action1\" disabled>\n            Action\n          </RcSnackbarAction>,\n          <RcSnackbarAction key=\"action2\">Action</RcSnackbarAction>,\n          <RcSnackbarAction key=\"action3\" variant=\"icon\" symbol={Close} />,\n        ]}\n      />\n      <RcSnackbarContent\n        type=\"info\"\n        message=\"This is an neutral message.\"\n        loading\n      />\n      <RcSnackbarContent\n        type=\"info\"\n        message=\"Only has icon\"\n        fullWidth\n        action={\n          <RcSnackbarAction key=\"action3\" variant=\"icon\" symbol={Close} />\n        }\n      />\n      <RcSnackbarContent\n        type=\"info\"\n        message=\"In the cellular phone industry, mobile phones and their networks sometimes support concatenated short message service (or concatenated SMS) to overcome the limitation on the number of characters that can be sent in a single SMS text message transmission (which is usually 160). Using this method, long messages are split into smaller messages by the sending device and recombined at the receiving end. Each message is then billed separately. When the feature works properly, it is nearly transparent to the user, appearing as a single long text message. Previously, due to incompatibilities between providers and lack of support in some phone models, there was not widespread use of this feature.\"\n        action={[\n          <RcSnackbarAction key=\"action3\" variant=\"icon\" symbol={Close} />,\n        ]}\n      />\n    </Wrapper>\n  );\n};\n\nSnackbarContentExamples.storyName = 'SnackbarContent Examples';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { boolean } from '@storybook/addon-knobs';\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcButton } from '../../Buttons';\\nimport { RcTypography } from '../../Typography';\\nimport { RcStep } from '../Step';\\nimport { RcStepButton } from '../StepButton';\\nimport { RcStepLabel } from '../StepLabel';\\nimport { RcStepper } from '../Stepper';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Stepper',\\n  component: RcStepper,\\n  argTypes: {\\n    ...sortInDocTable<keyof StepperProps>([\\n      'activeStep',\\n      'nonLinear',\\n      'variant',\\n      'elevation',\\n      'square',\\n      'alternativeLabel',\\n      // 'orientation',\\n    ]),\\n    ...notControlInDocTable<keyof StepperProps>(['connector']),\\n    ...notShowInDocTable<keyof StepperProps>([\\n      // 'orientation'\\n    ]),\\n  },\\n} as Meta;\\n\\ntype StepperProps = ComponentProps<typeof RcStepper>;\\n\\nfunction getStepContent(step: number) {\\n  switch (step) {\\n    case 0:\\n      return 'Select campaign settings...';\\n    case 1:\\n      return 'What is an ad group anyways?';\\n    case 2:\\n      return 'This is the bit I really care about!';\\n    default:\\n      return 'Unknown step';\\n  }\\n}\\n\\nconst CustomButton = styled(RcButton)`\\n  & + & {\\n    margin-left: 1em;\\n  }\\n`;\\n\\nexport const Stepper: Story<StepperProps> = ({\\n  children,\\n  connector,\\n  activeStep: activeStepProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n  const [activeStep, setActiveStep] = useState(activeStepProp || 0);\\n  const [completed, setCompleted] = useState(new Set<number>());\\n  const [skipped, setSkipped] = useState(new Set<number>());\\n\\n  const clickable = boolean('clickable', true);\\n\\n  const steps = [\\n    'Select campaign settings',\\n    'Create an ad group',\\n    'Create an ad',\\n  ];\\n\\n  const isStepOptional = (step: number) => {\\n    return step === 1;\\n  };\\n\\n  const isStepSkipped = (step: number) => {\\n    return skipped.has(step);\\n  };\\n\\n  const handleStep = (step: number) => () => {\\n    setActiveStep(step);\\n  };\\n\\n  function isStepComplete(step: number) {\\n    return completed.has(step);\\n  }\\n\\n  const totalSteps = () => {\\n    return steps.length;\\n  };\\n\\n  const skippedSteps = () => {\\n    return skipped.size;\\n  };\\n\\n  const allStepsCompleted = () => {\\n    return completedSteps() === totalSteps() - skippedSteps();\\n  };\\n\\n  const isLastStep = () => {\\n    return activeStep === totalSteps() - 1;\\n  };\\n\\n  const completedSteps = () => {\\n    return completed.size;\\n  };\\n\\n  const handleReset = () => {\\n    setActiveStep(0);\\n    setCompleted(new Set<number>());\\n    setSkipped(new Set<number>());\\n  };\\n\\n  const handleSkip = () => {\\n    if (!isStepOptional(activeStep)) {\\n      // You probably want to guard against something like this\\n      // it should never occur unless someone's actively trying to break something.\\n      throw new Error(\\\"You can't skip a step that isn't optional.\\\");\\n    }\\n\\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\\n    setSkipped((prevSkipped) => {\\n      const newSkipped = new Set(prevSkipped.values());\\n      newSkipped.add(activeStep);\\n      return newSkipped;\\n    });\\n  };\\n\\n  const handleNext = () => {\\n    const newActiveStep =\\n      isLastStep() && !allStepsCompleted()\\n        ? // It's the last step, but not all steps have been completed\\n          // find the first step that has been completed\\n          steps.findIndex((step, i) => !completed.has(i))\\n        : activeStep + 1;\\n\\n    setActiveStep(newActiveStep);\\n  };\\n\\n  const handleBack = () => {\\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\\n  };\\n\\n  const handleComplete = () => {\\n    const newCompleted = new Set(completed);\\n    newCompleted.add(activeStep);\\n    setCompleted(newCompleted);\\n\\n    /**\\n     * Sigh... it would be much nicer to replace the following if conditional with\\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\\n     * thus we have to resort to not being very DRY.\\n     */\\n    if (completed.size !== totalSteps() - skippedSteps()) {\\n      handleNext();\\n    }\\n  };\\n\\n  const StepComponent = clickable ? RcStepButton : RcStepLabel;\\n\\n  return (\\n    <>\\n      <Title variant=\\\"title1\\\">Detail api could view each component doc</Title>\\n      <RcStepper activeStep={activeStep} {...args}>\\n        {steps.map((step, i) => {\\n          const stepProps: { completed?: boolean } = {};\\n          const buttonProps: { optional?: React.ReactNode } = {};\\n          if (isStepOptional(i)) {\\n            buttonProps.optional = (\\n              <RcTypography variant=\\\"subheading1\\\" color=\\\"neutral.f03\\\">\\n                Optional\\n              </RcTypography>\\n            );\\n          }\\n          if (isStepSkipped(i)) {\\n            stepProps.completed = false;\\n          }\\n          return (\\n            <RcStep key={step} {...stepProps} completed={isStepComplete(i)}>\\n              <StepComponent\\n                onClick={clickable ? handleStep(i) : undefined}\\n                {...buttonProps}\\n              >\\n                {step}\\n              </StepComponent>\\n            </RcStep>\\n          );\\n        })}\\n      </RcStepper>\\n      <div>\\n        <RcTypography color=\\\"neutral.f06\\\">\\n          {getStepContent(activeStep)}\\n        </RcTypography>\\n      </div>\\n      <br />\\n      {allStepsCompleted() ? (\\n        <>\\n          <RcTypography>\\n            All steps completed - you&apos;re finished\\n          </RcTypography>\\n          <RcButton onClick={handleReset}>Reset</RcButton>\\n        </>\\n      ) : (\\n        <>\\n          <CustomButton disabled={activeStep === 0} onClick={handleBack}>\\n            Back\\n          </CustomButton>\\n          <CustomButton onClick={handleNext}>Next</CustomButton>\\n          {isStepOptional(activeStep) && !completed.has(activeStep) && (\\n            <CustomButton onClick={handleSkip}>Skip</CustomButton>\\n          )}\\n          {activeStep !== steps.length &&\\n            (completed.has(activeStep) ? (\\n              <RcTypography variant=\\\"body1\\\">\\n                Step {activeStep + 1} already completed\\n              </RcTypography>\\n            ) : (\\n              <CustomButton onClick={handleComplete}>\\n                {completedSteps() === totalSteps() - 1\\n                  ? 'Finish'\\n                  : 'Complete Step'}\\n              </CustomButton>\\n            ))}\\n        </>\\n      )}\\n    </>\\n  );\\n};\\n\\nStepper.storyName = 'Stepper';\\n\\nStepper.args = {};\\n\\nStepper.argTypes = {\\n  ...notControlInDocTable<keyof StepperProps>([]),\\n};\\n\\nStepper.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/steppers/#stepper',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Stepper\":{\"startLoc\":{\"col\":44,\"line\":62},\"endLoc\":{\"col\":1,\"line\":237},\"startBody\":{\"col\":44,\"line\":62},\"endBody\":{\"col\":1,\"line\":237}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { boolean } from '@storybook/addon-knobs';\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { Title } from '../../../storybook/components';\nimport { RcButton } from '../../Buttons';\nimport { RcTypography } from '../../Typography';\nimport { RcStep } from '../Step';\nimport { RcStepButton } from '../StepButton';\nimport { RcStepLabel } from '../StepLabel';\nimport { RcStepper } from '../Stepper';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { boolean } from '@storybook/addon-knobs';\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcButton } from '../../Buttons';\\nimport { RcTypography } from '../../Typography';\\nimport { RcStep } from '../Step';\\nimport { RcStepButton } from '../StepButton';\\nimport { RcStepLabel } from '../StepLabel';\\nimport { RcStepper } from '../Stepper';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Stepper',\\n  component: RcStepper,\\n  argTypes: {\\n    ...sortInDocTable<keyof StepperProps>([\\n      'activeStep',\\n      'nonLinear',\\n      'variant',\\n      'elevation',\\n      'square',\\n      'alternativeLabel',\\n      // 'orientation',\\n    ]),\\n    ...notControlInDocTable<keyof StepperProps>(['connector']),\\n    ...notShowInDocTable<keyof StepperProps>([\\n      // 'orientation'\\n    ]),\\n  },\\n} as Meta;\\n\\ntype StepperProps = ComponentProps<typeof RcStepper>;\\n\\nfunction getStepContent(step: number) {\\n  switch (step) {\\n    case 0:\\n      return 'Select campaign settings...';\\n    case 1:\\n      return 'What is an ad group anyways?';\\n    case 2:\\n      return 'This is the bit I really care about!';\\n    default:\\n      return 'Unknown step';\\n  }\\n}\\n\\nconst CustomButton = styled(RcButton)`\\n  & + & {\\n    margin-left: 1em;\\n  }\\n`;\\n\\nexport const Stepper: Story<StepperProps> = ({\\n  children,\\n  connector,\\n  activeStep: activeStepProp,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n  const [activeStep, setActiveStep] = useState(activeStepProp || 0);\\n  const [completed, setCompleted] = useState(new Set<number>());\\n  const [skipped, setSkipped] = useState(new Set<number>());\\n\\n  const clickable = boolean('clickable', true);\\n\\n  const steps = [\\n    'Select campaign settings',\\n    'Create an ad group',\\n    'Create an ad',\\n  ];\\n\\n  const isStepOptional = (step: number) => {\\n    return step === 1;\\n  };\\n\\n  const isStepSkipped = (step: number) => {\\n    return skipped.has(step);\\n  };\\n\\n  const handleStep = (step: number) => () => {\\n    setActiveStep(step);\\n  };\\n\\n  function isStepComplete(step: number) {\\n    return completed.has(step);\\n  }\\n\\n  const totalSteps = () => {\\n    return steps.length;\\n  };\\n\\n  const skippedSteps = () => {\\n    return skipped.size;\\n  };\\n\\n  const allStepsCompleted = () => {\\n    return completedSteps() === totalSteps() - skippedSteps();\\n  };\\n\\n  const isLastStep = () => {\\n    return activeStep === totalSteps() - 1;\\n  };\\n\\n  const completedSteps = () => {\\n    return completed.size;\\n  };\\n\\n  const handleReset = () => {\\n    setActiveStep(0);\\n    setCompleted(new Set<number>());\\n    setSkipped(new Set<number>());\\n  };\\n\\n  const handleSkip = () => {\\n    if (!isStepOptional(activeStep)) {\\n      // You probably want to guard against something like this\\n      // it should never occur unless someone's actively trying to break something.\\n      throw new Error(\\\"You can't skip a step that isn't optional.\\\");\\n    }\\n\\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\\n    setSkipped((prevSkipped) => {\\n      const newSkipped = new Set(prevSkipped.values());\\n      newSkipped.add(activeStep);\\n      return newSkipped;\\n    });\\n  };\\n\\n  const handleNext = () => {\\n    const newActiveStep =\\n      isLastStep() && !allStepsCompleted()\\n        ? // It's the last step, but not all steps have been completed\\n          // find the first step that has been completed\\n          steps.findIndex((step, i) => !completed.has(i))\\n        : activeStep + 1;\\n\\n    setActiveStep(newActiveStep);\\n  };\\n\\n  const handleBack = () => {\\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\\n  };\\n\\n  const handleComplete = () => {\\n    const newCompleted = new Set(completed);\\n    newCompleted.add(activeStep);\\n    setCompleted(newCompleted);\\n\\n    /**\\n     * Sigh... it would be much nicer to replace the following if conditional with\\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\\n     * thus we have to resort to not being very DRY.\\n     */\\n    if (completed.size !== totalSteps() - skippedSteps()) {\\n      handleNext();\\n    }\\n  };\\n\\n  const StepComponent = clickable ? RcStepButton : RcStepLabel;\\n\\n  return (\\n    <>\\n      <Title variant=\\\"title1\\\">Detail api could view each component doc</Title>\\n      <RcStepper activeStep={activeStep} {...args}>\\n        {steps.map((step, i) => {\\n          const stepProps: { completed?: boolean } = {};\\n          const buttonProps: { optional?: React.ReactNode } = {};\\n          if (isStepOptional(i)) {\\n            buttonProps.optional = (\\n              <RcTypography variant=\\\"subheading1\\\" color=\\\"neutral.f03\\\">\\n                Optional\\n              </RcTypography>\\n            );\\n          }\\n          if (isStepSkipped(i)) {\\n            stepProps.completed = false;\\n          }\\n          return (\\n            <RcStep key={step} {...stepProps} completed={isStepComplete(i)}>\\n              <StepComponent\\n                onClick={clickable ? handleStep(i) : undefined}\\n                {...buttonProps}\\n              >\\n                {step}\\n              </StepComponent>\\n            </RcStep>\\n          );\\n        })}\\n      </RcStepper>\\n      <div>\\n        <RcTypography color=\\\"neutral.f06\\\">\\n          {getStepContent(activeStep)}\\n        </RcTypography>\\n      </div>\\n      <br />\\n      {allStepsCompleted() ? (\\n        <>\\n          <RcTypography>\\n            All steps completed - you&apos;re finished\\n          </RcTypography>\\n          <RcButton onClick={handleReset}>Reset</RcButton>\\n        </>\\n      ) : (\\n        <>\\n          <CustomButton disabled={activeStep === 0} onClick={handleBack}>\\n            Back\\n          </CustomButton>\\n          <CustomButton onClick={handleNext}>Next</CustomButton>\\n          {isStepOptional(activeStep) && !completed.has(activeStep) && (\\n            <CustomButton onClick={handleSkip}>Skip</CustomButton>\\n          )}\\n          {activeStep !== steps.length &&\\n            (completed.has(activeStep) ? (\\n              <RcTypography variant=\\\"body1\\\">\\n                Step {activeStep + 1} already completed\\n              </RcTypography>\\n            ) : (\\n              <CustomButton onClick={handleComplete}>\\n                {completedSteps() === totalSteps() - 1\\n                  ? 'Finish'\\n                  : 'Complete Step'}\\n              </CustomButton>\\n            ))}\\n        </>\\n      )}\\n    </>\\n  );\\n};\\n\\nStepper.storyName = 'Stepper';\\n\\nStepper.args = {};\\n\\nStepper.argTypes = {\\n  ...notControlInDocTable<keyof StepperProps>([]),\\n};\\n\\nStepper.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/steppers/#stepper',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"stepper\":{\"startLoc\":{\"col\":44,\"line\":62},\"endLoc\":{\"col\":1,\"line\":237},\"startBody\":{\"col\":44,\"line\":62},\"endBody\":{\"col\":1,\"line\":237}}}},},\n  title: '🚀 Cleanup Components/Stepper',\n  component: RcStepper,\n  argTypes: {\n    ...sortInDocTable<keyof StepperProps>([\n      'activeStep',\n      'nonLinear',\n      'variant',\n      'elevation',\n      'square',\n      'alternativeLabel',\n      // 'orientation',\n    ]),\n    ...notControlInDocTable<keyof StepperProps>(['connector']),\n    ...notShowInDocTable<keyof StepperProps>([\n      // 'orientation'\n    ]),\n  },\n} as Meta;\n\ntype StepperProps = ComponentProps<typeof RcStepper>;\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return 'Select campaign settings...';\n    case 1:\n      return 'What is an ad group anyways?';\n    case 2:\n      return 'This is the bit I really care about!';\n    default:\n      return 'Unknown step';\n  }\n}\n\nconst CustomButton = styled(RcButton)`\n  & + & {\n    margin-left: 1em;\n  }\n`;\n\nexport const Stepper: Story<StepperProps> = ({\n  children,\n  connector,\n  activeStep: activeStepProp,\n  ...args\n}) => {\n  switchToControlKnobs();\n  const [activeStep, setActiveStep] = useState(activeStepProp || 0);\n  const [completed, setCompleted] = useState(new Set<number>());\n  const [skipped, setSkipped] = useState(new Set<number>());\n\n  const clickable = boolean('clickable', true);\n\n  const steps = [\n    'Select campaign settings',\n    'Create an ad group',\n    'Create an ad',\n  ];\n\n  const isStepOptional = (step: number) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step: number) => {\n    return skipped.has(step);\n  };\n\n  const handleStep = (step: number) => () => {\n    setActiveStep(step);\n  };\n\n  function isStepComplete(step: number) {\n    return completed.has(step);\n  }\n\n  const totalSteps = () => {\n    return steps.length;\n  };\n\n  const skippedSteps = () => {\n    return skipped.size;\n  };\n\n  const allStepsCompleted = () => {\n    return completedSteps() === totalSteps() - skippedSteps();\n  };\n\n  const isLastStep = () => {\n    return activeStep === totalSteps() - 1;\n  };\n\n  const completedSteps = () => {\n    return completed.size;\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    setCompleted(new Set<number>());\n    setSkipped(new Set<number>());\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleNext = () => {\n    const newActiveStep =\n      isLastStep() && !allStepsCompleted()\n        ? // It's the last step, but not all steps have been completed\n          // find the first step that has been completed\n          steps.findIndex((step, i) => !completed.has(i))\n        : activeStep + 1;\n\n    setActiveStep(newActiveStep);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleComplete = () => {\n    const newCompleted = new Set(completed);\n    newCompleted.add(activeStep);\n    setCompleted(newCompleted);\n\n    /**\n     * Sigh... it would be much nicer to replace the following if conditional with\n     * `if (!this.allStepsComplete())` however state is not set when we do this,\n     * thus we have to resort to not being very DRY.\n     */\n    if (completed.size !== totalSteps() - skippedSteps()) {\n      handleNext();\n    }\n  };\n\n  const StepComponent = clickable ? RcStepButton : RcStepLabel;\n\n  return (\n    <>\n      <Title variant=\"title1\">Detail api could view each component doc</Title>\n      <RcStepper activeStep={activeStep} {...args}>\n        {steps.map((step, i) => {\n          const stepProps: { completed?: boolean } = {};\n          const buttonProps: { optional?: React.ReactNode } = {};\n          if (isStepOptional(i)) {\n            buttonProps.optional = (\n              <RcTypography variant=\"subheading1\" color=\"neutral.f03\">\n                Optional\n              </RcTypography>\n            );\n          }\n          if (isStepSkipped(i)) {\n            stepProps.completed = false;\n          }\n          return (\n            <RcStep key={step} {...stepProps} completed={isStepComplete(i)}>\n              <StepComponent\n                onClick={clickable ? handleStep(i) : undefined}\n                {...buttonProps}\n              >\n                {step}\n              </StepComponent>\n            </RcStep>\n          );\n        })}\n      </RcStepper>\n      <div>\n        <RcTypography color=\"neutral.f06\">\n          {getStepContent(activeStep)}\n        </RcTypography>\n      </div>\n      <br />\n      {allStepsCompleted() ? (\n        <>\n          <RcTypography>\n            All steps completed - you&apos;re finished\n          </RcTypography>\n          <RcButton onClick={handleReset}>Reset</RcButton>\n        </>\n      ) : (\n        <>\n          <CustomButton disabled={activeStep === 0} onClick={handleBack}>\n            Back\n          </CustomButton>\n          <CustomButton onClick={handleNext}>Next</CustomButton>\n          {isStepOptional(activeStep) && !completed.has(activeStep) && (\n            <CustomButton onClick={handleSkip}>Skip</CustomButton>\n          )}\n          {activeStep !== steps.length &&\n            (completed.has(activeStep) ? (\n              <RcTypography variant=\"body1\">\n                Step {activeStep + 1} already completed\n              </RcTypography>\n            ) : (\n              <CustomButton onClick={handleComplete}>\n                {completedSteps() === totalSteps() - 1\n                  ? 'Finish'\n                  : 'Complete Step'}\n              </CustomButton>\n            ))}\n        </>\n      )}\n    </>\n  );\n};\n\nStepper.storyName = 'Stepper';\n\nStepper.args = {};\n\nStepper.argTypes = {\n  ...notControlInDocTable<keyof StepperProps>([]),\n};\n\nStepper.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/steppers/#stepper',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcTablePagination } from '../TablePagination';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/TablePagination',\\n  component: RcTablePagination,\\n  argTypes: {\\n    ...sortInDocTable<keyof TablePaginationProps>([]),\\n    ...notControlInDocTable<keyof TablePaginationProps>([]),\\n    ...notShowInDocTable<keyof TablePaginationProps>([]),\\n  },\\n} as Meta;\\n\\nconst Table = styled.table`\\n  width: 100%;\\n`;\\n\\ntype TablePaginationProps = ComponentProps<typeof RcTablePagination>;\\n\\nexport const TablePagination: Story<TablePaginationProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [page, setPage] = useState(0);\\n\\n  const [rowsPerPage, setRowsPerPage] = useState(10);\\n\\n  const handlePageChange = (\\n    event: React.MouseEvent<HTMLButtonElement> | null,\\n    newPage: number,\\n  ) => {\\n    console.log('page change', newPage);\\n    setPage(newPage);\\n  };\\n\\n  const handleRowsPerPageChange = (\\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\\n  ) => {\\n    console.log('RowsPerPage change', event);\\n    setRowsPerPage(parseInt(event.target.value, 10));\\n    setPage(0);\\n  };\\n\\n  return (\\n    <>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"pageSelection\\\"\\n              nextIconButtonProps={{\\n                title: 'next',\\n              }}\\n              backIconButtonProps={{\\n                title: 'prev',\\n              }}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPageOptions={[]}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"displayedRows\\\"\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPageOptions={[]}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Title align=\\\"right\\\">Page Selection</Title>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"pageSelection\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              page={page}\\n              type=\\\"pageSelection\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              labelOfPage={({ totalPage }) => `之 ${totalPage} 頁`}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n              labelRowsPerPage=\\\"每頁幾筆\\\"\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Title align=\\\"right\\\">Displayed Rows</Title>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"displayedRows\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"displayedRows\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              rowsPerPageOptions={[\\n                {\\n                  label: '10👌',\\n                  value: 10,\\n                },\\n                {\\n                  label: '100👌',\\n                  value: 100,\\n                },\\n              ]}\\n              labelRowsPerPage=\\\"每頁幾筆\\\"\\n              \\n              labelDisplayedRows={({ count, from, page, to }) =>\\n                `第${page + 1}頁 ${from}-${to} 共 ${count} 筆`\\n              }\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Title align=\\\"right\\\">Non Table Pagination</Title>{' '}\\n      <RcTablePagination\\n        {...args}\\n        component=\\\"div\\\"\\n        type=\\\"displayedRows\\\"\\n        nextIconButtonProps={{}}\\n        backIconButtonProps={{}}\\n        page={page}\\n        onPageChange={handlePageChange}\\n        rowsPerPage={rowsPerPage}\\n        rowsPerPageOptions={[\\n          {\\n            label: '10👌',\\n            value: 10,\\n          },\\n          {\\n            label: '100👌',\\n            value: 100,\\n          },\\n        ]}\\n        labelRowsPerPage=\\\"每頁幾筆\\\"\\n        \\n        labelDisplayedRows={({ count, from, page, to }) =>\\n          `第${page + 1}頁 ${from}-${to} 共 ${count} 筆`\\n        }\\n        onRowsPerPageChange={handleRowsPerPageChange}\\n      />\\n    </>\\n  );\\n};\\n\\nTablePagination.storyName = 'TablePagination';\\n\\nTablePagination.args = {\\n  count: 10000,\\n};\\n\\nTablePagination.argTypes = {\\n  ...notControlInDocTable<keyof TablePaginationProps>([]),\\n};\\n\\nTablePagination.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: '',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"TablePagination\":{\"startLoc\":{\"col\":60,\"line\":31},\"endLoc\":{\"col\":1,\"line\":207},\"startBody\":{\"col\":60,\"line\":31},\"endBody\":{\"col\":1,\"line\":207}}};\n    \nimport React, { ComponentProps, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { Title } from '../../../storybook/components';\nimport { RcTablePagination } from '../TablePagination';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcTablePagination } from '../TablePagination';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/TablePagination',\\n  component: RcTablePagination,\\n  argTypes: {\\n    ...sortInDocTable<keyof TablePaginationProps>([]),\\n    ...notControlInDocTable<keyof TablePaginationProps>([]),\\n    ...notShowInDocTable<keyof TablePaginationProps>([]),\\n  },\\n} as Meta;\\n\\nconst Table = styled.table`\\n  width: 100%;\\n`;\\n\\ntype TablePaginationProps = ComponentProps<typeof RcTablePagination>;\\n\\nexport const TablePagination: Story<TablePaginationProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [page, setPage] = useState(0);\\n\\n  const [rowsPerPage, setRowsPerPage] = useState(10);\\n\\n  const handlePageChange = (\\n    event: React.MouseEvent<HTMLButtonElement> | null,\\n    newPage: number,\\n  ) => {\\n    console.log('page change', newPage);\\n    setPage(newPage);\\n  };\\n\\n  const handleRowsPerPageChange = (\\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\\n  ) => {\\n    console.log('RowsPerPage change', event);\\n    setRowsPerPage(parseInt(event.target.value, 10));\\n    setPage(0);\\n  };\\n\\n  return (\\n    <>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"pageSelection\\\"\\n              nextIconButtonProps={{\\n                title: 'next',\\n              }}\\n              backIconButtonProps={{\\n                title: 'prev',\\n              }}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPageOptions={[]}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"displayedRows\\\"\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPageOptions={[]}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Title align=\\\"right\\\">Page Selection</Title>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"pageSelection\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              page={page}\\n              type=\\\"pageSelection\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              labelOfPage={({ totalPage }) => `之 ${totalPage} 頁`}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n              labelRowsPerPage=\\\"每頁幾筆\\\"\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Title align=\\\"right\\\">Displayed Rows</Title>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"displayedRows\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Table>\\n        <tfoot>\\n          <tr>\\n            <RcTablePagination\\n              {...args}\\n              type=\\\"displayedRows\\\"\\n              nextIconButtonProps={{}}\\n              backIconButtonProps={{}}\\n              page={page}\\n              onPageChange={handlePageChange}\\n              rowsPerPage={rowsPerPage}\\n              rowsPerPageOptions={[\\n                {\\n                  label: '10👌',\\n                  value: 10,\\n                },\\n                {\\n                  label: '100👌',\\n                  value: 100,\\n                },\\n              ]}\\n              labelRowsPerPage=\\\"每頁幾筆\\\"\\n              \\n              labelDisplayedRows={({ count, from, page, to }) =>\\n                `第${page + 1}頁 ${from}-${to} 共 ${count} 筆`\\n              }\\n              onRowsPerPageChange={handleRowsPerPageChange}\\n            />\\n          </tr>\\n        </tfoot>\\n      </Table>\\n      <Title align=\\\"right\\\">Non Table Pagination</Title>{' '}\\n      <RcTablePagination\\n        {...args}\\n        component=\\\"div\\\"\\n        type=\\\"displayedRows\\\"\\n        nextIconButtonProps={{}}\\n        backIconButtonProps={{}}\\n        page={page}\\n        onPageChange={handlePageChange}\\n        rowsPerPage={rowsPerPage}\\n        rowsPerPageOptions={[\\n          {\\n            label: '10👌',\\n            value: 10,\\n          },\\n          {\\n            label: '100👌',\\n            value: 100,\\n          },\\n        ]}\\n        labelRowsPerPage=\\\"每頁幾筆\\\"\\n        \\n        labelDisplayedRows={({ count, from, page, to }) =>\\n          `第${page + 1}頁 ${from}-${to} 共 ${count} 筆`\\n        }\\n        onRowsPerPageChange={handleRowsPerPageChange}\\n      />\\n    </>\\n  );\\n};\\n\\nTablePagination.storyName = 'TablePagination';\\n\\nTablePagination.args = {\\n  count: 10000,\\n};\\n\\nTablePagination.argTypes = {\\n  ...notControlInDocTable<keyof TablePaginationProps>([]),\\n};\\n\\nTablePagination.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: '',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"table-pagination\":{\"startLoc\":{\"col\":60,\"line\":31},\"endLoc\":{\"col\":1,\"line\":207},\"startBody\":{\"col\":60,\"line\":31},\"endBody\":{\"col\":1,\"line\":207}}}},},\n  title: '🚀 Cleanup Components/TablePagination',\n  component: RcTablePagination,\n  argTypes: {\n    ...sortInDocTable<keyof TablePaginationProps>([]),\n    ...notControlInDocTable<keyof TablePaginationProps>([]),\n    ...notShowInDocTable<keyof TablePaginationProps>([]),\n  },\n} as Meta;\n\nconst Table = styled.table`\n  width: 100%;\n`;\n\ntype TablePaginationProps = ComponentProps<typeof RcTablePagination>;\n\nexport const TablePagination: Story<TablePaginationProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [page, setPage] = useState(0);\n\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n\n  const handlePageChange = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number,\n  ) => {\n    console.log('page change', newPage);\n    setPage(newPage);\n  };\n\n  const handleRowsPerPageChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    console.log('RowsPerPage change', event);\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <Table>\n        <tfoot>\n          <tr>\n            <RcTablePagination\n              {...args}\n              type=\"pageSelection\"\n              nextIconButtonProps={{\n                title: 'next',\n              }}\n              backIconButtonProps={{\n                title: 'prev',\n              }}\n              page={page}\n              onPageChange={handlePageChange}\n              rowsPerPageOptions={[]}\n              rowsPerPage={rowsPerPage}\n              onRowsPerPageChange={handleRowsPerPageChange}\n            />\n          </tr>\n        </tfoot>\n      </Table>\n      <Table>\n        <tfoot>\n          <tr>\n            <RcTablePagination\n              {...args}\n              type=\"displayedRows\"\n              page={page}\n              onPageChange={handlePageChange}\n              rowsPerPageOptions={[]}\n              rowsPerPage={rowsPerPage}\n              onRowsPerPageChange={handleRowsPerPageChange}\n            />\n          </tr>\n        </tfoot>\n      </Table>\n      <Title align=\"right\">Page Selection</Title>\n      <Table>\n        <tfoot>\n          <tr>\n            <RcTablePagination\n              {...args}\n              type=\"pageSelection\"\n              nextIconButtonProps={{}}\n              backIconButtonProps={{}}\n              page={page}\n              onPageChange={handlePageChange}\n              rowsPerPage={rowsPerPage}\n              onRowsPerPageChange={handleRowsPerPageChange}\n            />\n          </tr>\n        </tfoot>\n      </Table>\n      <Table>\n        <tfoot>\n          <tr>\n            <RcTablePagination\n              {...args}\n              page={page}\n              type=\"pageSelection\"\n              nextIconButtonProps={{}}\n              backIconButtonProps={{}}\n              onPageChange={handlePageChange}\n              rowsPerPage={rowsPerPage}\n              labelOfPage={({ totalPage }) => `之 ${totalPage} 頁`}\n              onRowsPerPageChange={handleRowsPerPageChange}\n              labelRowsPerPage=\"每頁幾筆\"\n            />\n          </tr>\n        </tfoot>\n      </Table>\n      <Title align=\"right\">Displayed Rows</Title>\n      <Table>\n        <tfoot>\n          <tr>\n            <RcTablePagination\n              {...args}\n              type=\"displayedRows\"\n              nextIconButtonProps={{}}\n              backIconButtonProps={{}}\n              page={page}\n              onPageChange={handlePageChange}\n              rowsPerPage={rowsPerPage}\n              onRowsPerPageChange={handleRowsPerPageChange}\n            />\n          </tr>\n        </tfoot>\n      </Table>\n      <Table>\n        <tfoot>\n          <tr>\n            <RcTablePagination\n              {...args}\n              type=\"displayedRows\"\n              nextIconButtonProps={{}}\n              backIconButtonProps={{}}\n              page={page}\n              onPageChange={handlePageChange}\n              rowsPerPage={rowsPerPage}\n              rowsPerPageOptions={[\n                {\n                  label: '10👌',\n                  value: 10,\n                },\n                {\n                  label: '100👌',\n                  value: 100,\n                },\n              ]}\n              labelRowsPerPage=\"每頁幾筆\"\n              // eslint-disable-next-line @typescript-eslint/no-shadow\n              labelDisplayedRows={({ count, from, page, to }) =>\n                `第${page + 1}頁 ${from}-${to} 共 ${count} 筆`\n              }\n              onRowsPerPageChange={handleRowsPerPageChange}\n            />\n          </tr>\n        </tfoot>\n      </Table>\n      <Title align=\"right\">Non Table Pagination</Title>{' '}\n      <RcTablePagination\n        {...args}\n        component=\"div\"\n        type=\"displayedRows\"\n        nextIconButtonProps={{}}\n        backIconButtonProps={{}}\n        page={page}\n        onPageChange={handlePageChange}\n        rowsPerPage={rowsPerPage}\n        rowsPerPageOptions={[\n          {\n            label: '10👌',\n            value: 10,\n          },\n          {\n            label: '100👌',\n            value: 100,\n          },\n        ]}\n        labelRowsPerPage=\"每頁幾筆\"\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        labelDisplayedRows={({ count, from, page, to }) =>\n          `第${page + 1}頁 ${from}-${to} 共 ${count} 筆`\n        }\n        onRowsPerPageChange={handleRowsPerPageChange}\n      />\n    </>\n  );\n};\n\nTablePagination.storyName = 'TablePagination';\n\nTablePagination.args = {\n  count: 10000,\n};\n\nTablePagination.argTypes = {\n  ...notControlInDocTable<keyof TablePaginationProps>([]),\n};\n\nTablePagination.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: '',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from 'react';\\n\\nimport { Meta } from '@storybook/react';\\n\\nimport { RcTable, RcTableBodyCellContent, RcTableProps } from '..';\\nimport { palette2, styled } from '../../../foundation';\\nimport { RcTableHeadView } from '../TableHead';\\nimport { RcTableRow } from '../TableRow';\\nimport {\\n  COLUMN_TEXT_ALIGN,\\n  ColumnProps,\\n  ORDER_TABLE_BY,\\n  TABLE_BORDER_TYPE,\\n  TABLE_STICKY_TYPE,\\n  TABLE_TYPE,\\n} from '../types';\\nimport arrayFixture from './RcTableMUIDataArray.fixture.json';\\n\\nexport default {\\n  title: '🖤 deprecated Components/Tables',\\n  component: RcTable,\\n} as Meta;\\n\\nconst Wrapper = styled.div`\\n  width: 100%;\\n  height: 600px;\\n  margin: 25px 0;\\n  background: ${palette2('neutral', 'b01')};\\n  border: 1px solid ${palette2('neutral', 'l02')};\\n  display: flex;\\n  overflow: scroll;\\n`;\\n\\nconst HeadRowWithSort = () => {\\n  const sortMap = { sortKey: 1, sortDirection: ORDER_TABLE_BY.ASC };\\n  const [columnSortMap, setSortMap] = useState(sortMap);\\n  const columnData: ColumnProps[] = [\\n    {\\n      title: 'Name',\\n      sortKey: 1,\\n    },\\n    {\\n      title: 'Assignee',\\n      sortKey: 2,\\n    },\\n    {\\n      title: 'Start',\\n      sortKey: 3,\\n    },\\n    {\\n      title: 'Due',\\n      sortKey: 4,\\n    },\\n  ];\\n\\n  return (\\n    <RcTableHeadView\\n      columnData={columnData}\\n      width={400}\\n      data-test-automation-id={'table-head'}\\n      sortHandler={(sortDirection, sortKey) => {\\n        setSortMap({\\n          sortDirection,\\n          sortKey,\\n        });\\n      }}\\n      sortMap={columnSortMap}\\n    />\\n  );\\n};\\n\\nconst HeadRow = () => {\\n  const columnData: ColumnProps[] = [\\n    {\\n      title: 'Name',\\n    },\\n    {\\n      title: 'Assignee',\\n    },\\n    {\\n      title: 'Start',\\n    },\\n    {\\n      title: 'Due',\\n    },\\n  ];\\n\\n  return (\\n    <RcTableHeadView\\n      columnData={columnData}\\n      width={400}\\n      data-test-automation-id={'table-head'}\\n    />\\n  );\\n};\\n\\nconst getTableRows = (numberOfRows: number) => {\\n  const row = (props: any) => (\\n    <RcTableRow {...props}>\\n      <td>\\n        <RcTableBodyCellContent>Item</RcTableBodyCellContent>\\n      </td>\\n      <td>\\n        <RcTableBodyCellContent>Body</RcTableBodyCellContent>\\n      </td>\\n      <td>\\n        <RcTableBodyCellContent>123</RcTableBodyCellContent>\\n      </td>\\n      <td>\\n        <RcTableBodyCellContent>456</RcTableBodyCellContent>\\n      </td>\\n    </RcTableRow>\\n  );\\n  return [...new Array(numberOfRows)].map((x, i) => {\\n    return row({ key: i });\\n  });\\n};\\n\\nexport const Sizes = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.NONE,\\n    tableSticky: TABLE_STICKY_TYPE.NONE,\\n    header: <HeadRow />,\\n    desc: 'Table sizes example',\\n  };\\n\\n  return (\\n    <>\\n      <Wrapper>\\n        <RcTable tableType={TABLE_TYPE.AUTO} {...tableProps}>\\n          {getTableRows(3)}\\n        </RcTable>\\n      </Wrapper>\\n\\n      <Wrapper>\\n        <RcTable tableType={TABLE_TYPE.CARD} {...tableProps}>\\n          {getTableRows(3)}\\n        </RcTable>\\n      </Wrapper>\\n\\n      <Wrapper>\\n        <RcTable tableType={TABLE_TYPE.FULL} {...tableProps}>\\n          {getTableRows(3)}\\n        </RcTable>\\n      </Wrapper>\\n    </>\\n  );\\n};\\nexport const StickyHeader = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.NONE,\\n    tableSticky: TABLE_STICKY_TYPE.STICKY,\\n    tableType: TABLE_TYPE.FULL,\\n    header: <HeadRow />,\\n    desc: 'Table sticky header example',\\n  };\\n\\n  return (\\n    <Wrapper style={{ height: '500px' }}>\\n      <RcTable {...tableProps}>{getTableRows(30)}</RcTable>\\n    </Wrapper>\\n  );\\n};\\nexport const Borders = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.BORDERED,\\n    tableSticky: TABLE_STICKY_TYPE.NONE,\\n    tableType: TABLE_TYPE.AUTO,\\n    header: <HeadRow />,\\n    desc: 'Table borders example',\\n  };\\n\\n  return (\\n    <Wrapper>\\n      <RcTable {...tableProps}>{getTableRows(6)}</RcTable>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const SortStates = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.NONE,\\n    tableSticky: TABLE_STICKY_TYPE.NONE,\\n    tableType: TABLE_TYPE.AUTO,\\n    header: <HeadRowWithSort />,\\n    desc: 'Table sort states example',\\n  };\\n\\n  return (\\n    <Wrapper>\\n      <RcTable\\n        {...tableProps}\\n        classes={{ root: 'custom-root', table: 'custom-table' }}\\n      >\\n        {getTableRows(12)}\\n      </RcTable>\\n    </Wrapper>\\n  );\\n};\\n\\n/**\\n * Accessibility example\\n */\\n\\nfunction accessibilityExampleStory() {\\n  type HeaderRowProps = {\\n    sortHandler: Function;\\n  };\\n\\n  const HeaderRow = (props: HeaderRowProps) => {\\n    const initialSortMap = { sortKey: 0, sortDirection: ORDER_TABLE_BY.ASC };\\n    const [sortMap, setSortMap] = useState(initialSortMap);\\n    const [columnData] = useState(\\n      arrayFixture.columns.map((columnValue, index) => ({\\n        title: columnValue,\\n        sortKey: index > 0 ? index : undefined,\\n      })),\\n    );\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setSortMap({ sortDirection, sortKey });\\n      props.sortHandler(sortDirection, sortKey);\\n    };\\n\\n    return (\\n      <RcTableHeadView\\n        columnData={columnData}\\n        data-test-automation-id={'table-head'}\\n        sortHandler={sortHandler}\\n        sortMap={sortMap}\\n      />\\n    );\\n  };\\n\\n  const getTableRowsNew = (numberOfRows: number, tableData: any[]) => {\\n    const row = (props: any, data: any[]) => (\\n      <RcTableRow {...props}>\\n        {data.map((cellData, cellIndex) => {\\n          return (\\n            <td key={`${props.key}_${arrayFixture.columns[cellIndex]}`}>\\n              <RcTableBodyCellContent>{cellData}</RcTableBodyCellContent>\\n            </td>\\n          );\\n        })}\\n      </RcTableRow>\\n    );\\n\\n    return tableData\\n      .slice(0, numberOfRows)\\n      .map((data, i) => row({ key: i }, data));\\n  };\\n\\n  return () => {\\n    const [rowData, setRowData] = useState([...arrayFixture.data]);\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setRowData((currentRowData) =>\\n        [...currentRowData].sort((a, b) => {\\n          let result = 0;\\n          const sortDirectionMultiplier =\\n            sortDirection === ORDER_TABLE_BY.DESC ? -1 : 1;\\n          const valueA = a[sortKey];\\n          const valueB = b[sortKey];\\n\\n          // Sort null values to the end\\n          if (valueA === null && valueB === null) {\\n            return 0;\\n          }\\n          if (valueA === null) {\\n            return 1;\\n          }\\n          if (valueB === null) {\\n            return -1;\\n          }\\n\\n          if (valueA < valueB) {\\n            result = -1;\\n          } else if (valueA > valueB) {\\n            result = 1;\\n          }\\n\\n          return result * sortDirectionMultiplier;\\n        }),\\n      );\\n    };\\n\\n    const tableProps: RcTableProps = {\\n      tableBorder: TABLE_BORDER_TYPE.NONE,\\n      tableSticky: TABLE_STICKY_TYPE.STICKY,\\n      tableType: TABLE_TYPE.AUTO,\\n      header: <HeaderRow sortHandler={sortHandler} />,\\n      desc: 'Accessibility compliant table example',\\n    };\\n\\n    return (\\n      <Wrapper>\\n        <RcTable {...tableProps}>{getTableRowsNew(100, rowData)}</RcTable>\\n      </Wrapper>\\n    );\\n  };\\n}\\n\\nexport const Accessibility = accessibilityExampleStory();\\n\\n/**\\n * Right-aligned column example -- Requires custom table data cell styles\\n * The significant items to note are:\\n *   - textAlign on the applicable columnData definitions\\n *   - textAlign on the RcTableBodyCellContent component\\n */\\nfunction rightAlignedColumnExampleStory() {\\n  type HeaderRowProps = {\\n    sortHandler: Function;\\n  };\\n\\n  const numericCols = ['runtimeMinutes', 'numVotes'];\\n  const HeaderRow = (props: HeaderRowProps) => {\\n    const initialSortMap = { sortKey: 0, sortDirection: ORDER_TABLE_BY.ASC };\\n    const [sortMap, setSortMap] = useState(initialSortMap);\\n    const [columnData] = useState(\\n      arrayFixture.columns.map((columnValue, index) => ({\\n        title: columnValue,\\n        sortKey: index > 0 ? index : undefined,\\n        textAlign: numericCols.includes(columnValue)\\n          ? COLUMN_TEXT_ALIGN.RIGHT\\n          : COLUMN_TEXT_ALIGN.LEFT,\\n      })),\\n    );\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setSortMap({ sortDirection, sortKey });\\n      props.sortHandler(sortDirection, sortKey);\\n    };\\n\\n    return (\\n      <RcTableHeadView\\n        columnData={columnData}\\n        data-test-automation-id={'table-head'}\\n        sortHandler={sortHandler}\\n        sortMap={sortMap}\\n      />\\n    );\\n  };\\n\\n  const getTableRows = (numberOfRows: number, tableData: any[]) => {\\n    const row = (props: any, data: any[]) => (\\n      <RcTableRow {...props}>\\n        {data.map((cellData, cellIndex) => {\\n          const textAlign = numericCols.includes(\\n            arrayFixture.columns[cellIndex],\\n          )\\n            ? COLUMN_TEXT_ALIGN.RIGHT\\n            : COLUMN_TEXT_ALIGN.LEFT;\\n\\n          return (\\n            <td key={`${props.key}_${arrayFixture.columns[cellIndex]}`}>\\n              <RcTableBodyCellContent textAlign={textAlign}>\\n                {cellData}\\n              </RcTableBodyCellContent>\\n            </td>\\n          );\\n        })}\\n      </RcTableRow>\\n    );\\n\\n    return tableData\\n      .slice(0, numberOfRows)\\n      .map((data, i) => row({ key: i }, data));\\n  };\\n\\n  return () => {\\n    const [rowData, setRowData] = useState([...arrayFixture.data]);\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setRowData((currentRowData) =>\\n        [...currentRowData].sort((a, b) => {\\n          let result = 0;\\n          const sortDirectionMultiplier =\\n            sortDirection === ORDER_TABLE_BY.DESC ? -1 : 1;\\n          const valueA = a[sortKey];\\n          const valueB = b[sortKey];\\n\\n          // Sort null values to the end\\n          if (valueA === null && valueB === null) {\\n            return 0;\\n          }\\n          if (valueA === null) {\\n            return 1;\\n          }\\n          if (valueB === null) {\\n            return -1;\\n          }\\n\\n          if (valueA < valueB) {\\n            result = -1;\\n          } else if (valueA > valueB) {\\n            result = 1;\\n          }\\n\\n          return result * sortDirectionMultiplier;\\n        }),\\n      );\\n    };\\n\\n    const tableProps: RcTableProps = {\\n      tableBorder: TABLE_BORDER_TYPE.NONE,\\n      tableSticky: TABLE_STICKY_TYPE.STICKY,\\n      tableType: TABLE_TYPE.AUTO,\\n      header: <HeaderRow sortHandler={sortHandler} />,\\n      desc: 'Right-aligned columns example',\\n    };\\n\\n    return (\\n      <Wrapper>\\n        <RcTable {...tableProps}>{getTableRows(100, rowData)}</RcTable>\\n      </Wrapper>\\n    );\\n  };\\n}\\n\\nexport const RightAlignedColumn = rightAlignedColumnExampleStory();\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Sizes\":{\"startLoc\":{\"col\":21,\"line\":119},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":21,\"line\":119},\"endBody\":{\"col\":1,\"line\":148}},\"StickyHeader\":{\"startLoc\":{\"col\":28,\"line\":149},\"endLoc\":{\"col\":1,\"line\":163},\"startBody\":{\"col\":28,\"line\":149},\"endBody\":{\"col\":1,\"line\":163}},\"Borders\":{\"startLoc\":{\"col\":23,\"line\":164},\"endLoc\":{\"col\":1,\"line\":178},\"startBody\":{\"col\":23,\"line\":164},\"endBody\":{\"col\":1,\"line\":178}},\"SortStates\":{\"startLoc\":{\"col\":26,\"line\":180},\"endLoc\":{\"col\":1,\"line\":199},\"startBody\":{\"col\":26,\"line\":180},\"endBody\":{\"col\":1,\"line\":199}},\"Accessibility\":{\"startLoc\":{\"col\":29,\"line\":301},\"endLoc\":{\"col\":56,\"line\":301},\"startBody\":{\"col\":29,\"line\":301},\"endBody\":{\"col\":56,\"line\":301}},\"RightAlignedColumn\":{\"startLoc\":{\"col\":34,\"line\":417},\"endLoc\":{\"col\":66,\"line\":417},\"startBody\":{\"col\":34,\"line\":417},\"endBody\":{\"col\":66,\"line\":417}}};\n    \nimport React, { useState } from 'react';\n\nimport { Meta } from '@storybook/react';\n\nimport { RcTable, RcTableBodyCellContent, RcTableProps } from '..';\nimport { palette2, styled } from '../../../foundation';\nimport { RcTableHeadView } from '../TableHead';\nimport { RcTableRow } from '../TableRow';\nimport {\n  COLUMN_TEXT_ALIGN,\n  ColumnProps,\n  ORDER_TABLE_BY,\n  TABLE_BORDER_TYPE,\n  TABLE_STICKY_TYPE,\n  TABLE_TYPE,\n} from '../types';\nimport arrayFixture from './RcTableMUIDataArray.fixture.json';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useState } from 'react';\\n\\nimport { Meta } from '@storybook/react';\\n\\nimport { RcTable, RcTableBodyCellContent, RcTableProps } from '..';\\nimport { palette2, styled } from '../../../foundation';\\nimport { RcTableHeadView } from '../TableHead';\\nimport { RcTableRow } from '../TableRow';\\nimport {\\n  COLUMN_TEXT_ALIGN,\\n  ColumnProps,\\n  ORDER_TABLE_BY,\\n  TABLE_BORDER_TYPE,\\n  TABLE_STICKY_TYPE,\\n  TABLE_TYPE,\\n} from '../types';\\nimport arrayFixture from './RcTableMUIDataArray.fixture.json';\\n\\nexport default {\\n  title: '🖤 deprecated Components/Tables',\\n  component: RcTable,\\n} as Meta;\\n\\nconst Wrapper = styled.div`\\n  width: 100%;\\n  height: 600px;\\n  margin: 25px 0;\\n  background: ${palette2('neutral', 'b01')};\\n  border: 1px solid ${palette2('neutral', 'l02')};\\n  display: flex;\\n  overflow: scroll;\\n`;\\n\\nconst HeadRowWithSort = () => {\\n  const sortMap = { sortKey: 1, sortDirection: ORDER_TABLE_BY.ASC };\\n  const [columnSortMap, setSortMap] = useState(sortMap);\\n  const columnData: ColumnProps[] = [\\n    {\\n      title: 'Name',\\n      sortKey: 1,\\n    },\\n    {\\n      title: 'Assignee',\\n      sortKey: 2,\\n    },\\n    {\\n      title: 'Start',\\n      sortKey: 3,\\n    },\\n    {\\n      title: 'Due',\\n      sortKey: 4,\\n    },\\n  ];\\n\\n  return (\\n    <RcTableHeadView\\n      columnData={columnData}\\n      width={400}\\n      data-test-automation-id={'table-head'}\\n      sortHandler={(sortDirection, sortKey) => {\\n        setSortMap({\\n          sortDirection,\\n          sortKey,\\n        });\\n      }}\\n      sortMap={columnSortMap}\\n    />\\n  );\\n};\\n\\nconst HeadRow = () => {\\n  const columnData: ColumnProps[] = [\\n    {\\n      title: 'Name',\\n    },\\n    {\\n      title: 'Assignee',\\n    },\\n    {\\n      title: 'Start',\\n    },\\n    {\\n      title: 'Due',\\n    },\\n  ];\\n\\n  return (\\n    <RcTableHeadView\\n      columnData={columnData}\\n      width={400}\\n      data-test-automation-id={'table-head'}\\n    />\\n  );\\n};\\n\\nconst getTableRows = (numberOfRows: number) => {\\n  const row = (props: any) => (\\n    <RcTableRow {...props}>\\n      <td>\\n        <RcTableBodyCellContent>Item</RcTableBodyCellContent>\\n      </td>\\n      <td>\\n        <RcTableBodyCellContent>Body</RcTableBodyCellContent>\\n      </td>\\n      <td>\\n        <RcTableBodyCellContent>123</RcTableBodyCellContent>\\n      </td>\\n      <td>\\n        <RcTableBodyCellContent>456</RcTableBodyCellContent>\\n      </td>\\n    </RcTableRow>\\n  );\\n  return [...new Array(numberOfRows)].map((x, i) => {\\n    return row({ key: i });\\n  });\\n};\\n\\nexport const Sizes = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.NONE,\\n    tableSticky: TABLE_STICKY_TYPE.NONE,\\n    header: <HeadRow />,\\n    desc: 'Table sizes example',\\n  };\\n\\n  return (\\n    <>\\n      <Wrapper>\\n        <RcTable tableType={TABLE_TYPE.AUTO} {...tableProps}>\\n          {getTableRows(3)}\\n        </RcTable>\\n      </Wrapper>\\n\\n      <Wrapper>\\n        <RcTable tableType={TABLE_TYPE.CARD} {...tableProps}>\\n          {getTableRows(3)}\\n        </RcTable>\\n      </Wrapper>\\n\\n      <Wrapper>\\n        <RcTable tableType={TABLE_TYPE.FULL} {...tableProps}>\\n          {getTableRows(3)}\\n        </RcTable>\\n      </Wrapper>\\n    </>\\n  );\\n};\\nexport const StickyHeader = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.NONE,\\n    tableSticky: TABLE_STICKY_TYPE.STICKY,\\n    tableType: TABLE_TYPE.FULL,\\n    header: <HeadRow />,\\n    desc: 'Table sticky header example',\\n  };\\n\\n  return (\\n    <Wrapper style={{ height: '500px' }}>\\n      <RcTable {...tableProps}>{getTableRows(30)}</RcTable>\\n    </Wrapper>\\n  );\\n};\\nexport const Borders = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.BORDERED,\\n    tableSticky: TABLE_STICKY_TYPE.NONE,\\n    tableType: TABLE_TYPE.AUTO,\\n    header: <HeadRow />,\\n    desc: 'Table borders example',\\n  };\\n\\n  return (\\n    <Wrapper>\\n      <RcTable {...tableProps}>{getTableRows(6)}</RcTable>\\n    </Wrapper>\\n  );\\n};\\n\\nexport const SortStates = () => {\\n  const tableProps: RcTableProps = {\\n    tableBorder: TABLE_BORDER_TYPE.NONE,\\n    tableSticky: TABLE_STICKY_TYPE.NONE,\\n    tableType: TABLE_TYPE.AUTO,\\n    header: <HeadRowWithSort />,\\n    desc: 'Table sort states example',\\n  };\\n\\n  return (\\n    <Wrapper>\\n      <RcTable\\n        {...tableProps}\\n        classes={{ root: 'custom-root', table: 'custom-table' }}\\n      >\\n        {getTableRows(12)}\\n      </RcTable>\\n    </Wrapper>\\n  );\\n};\\n\\n/**\\n * Accessibility example\\n */\\n\\nfunction accessibilityExampleStory() {\\n  type HeaderRowProps = {\\n    sortHandler: Function;\\n  };\\n\\n  const HeaderRow = (props: HeaderRowProps) => {\\n    const initialSortMap = { sortKey: 0, sortDirection: ORDER_TABLE_BY.ASC };\\n    const [sortMap, setSortMap] = useState(initialSortMap);\\n    const [columnData] = useState(\\n      arrayFixture.columns.map((columnValue, index) => ({\\n        title: columnValue,\\n        sortKey: index > 0 ? index : undefined,\\n      })),\\n    );\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setSortMap({ sortDirection, sortKey });\\n      props.sortHandler(sortDirection, sortKey);\\n    };\\n\\n    return (\\n      <RcTableHeadView\\n        columnData={columnData}\\n        data-test-automation-id={'table-head'}\\n        sortHandler={sortHandler}\\n        sortMap={sortMap}\\n      />\\n    );\\n  };\\n\\n  const getTableRowsNew = (numberOfRows: number, tableData: any[]) => {\\n    const row = (props: any, data: any[]) => (\\n      <RcTableRow {...props}>\\n        {data.map((cellData, cellIndex) => {\\n          return (\\n            <td key={`${props.key}_${arrayFixture.columns[cellIndex]}`}>\\n              <RcTableBodyCellContent>{cellData}</RcTableBodyCellContent>\\n            </td>\\n          );\\n        })}\\n      </RcTableRow>\\n    );\\n\\n    return tableData\\n      .slice(0, numberOfRows)\\n      .map((data, i) => row({ key: i }, data));\\n  };\\n\\n  return () => {\\n    const [rowData, setRowData] = useState([...arrayFixture.data]);\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setRowData((currentRowData) =>\\n        [...currentRowData].sort((a, b) => {\\n          let result = 0;\\n          const sortDirectionMultiplier =\\n            sortDirection === ORDER_TABLE_BY.DESC ? -1 : 1;\\n          const valueA = a[sortKey];\\n          const valueB = b[sortKey];\\n\\n          // Sort null values to the end\\n          if (valueA === null && valueB === null) {\\n            return 0;\\n          }\\n          if (valueA === null) {\\n            return 1;\\n          }\\n          if (valueB === null) {\\n            return -1;\\n          }\\n\\n          if (valueA < valueB) {\\n            result = -1;\\n          } else if (valueA > valueB) {\\n            result = 1;\\n          }\\n\\n          return result * sortDirectionMultiplier;\\n        }),\\n      );\\n    };\\n\\n    const tableProps: RcTableProps = {\\n      tableBorder: TABLE_BORDER_TYPE.NONE,\\n      tableSticky: TABLE_STICKY_TYPE.STICKY,\\n      tableType: TABLE_TYPE.AUTO,\\n      header: <HeaderRow sortHandler={sortHandler} />,\\n      desc: 'Accessibility compliant table example',\\n    };\\n\\n    return (\\n      <Wrapper>\\n        <RcTable {...tableProps}>{getTableRowsNew(100, rowData)}</RcTable>\\n      </Wrapper>\\n    );\\n  };\\n}\\n\\nexport const Accessibility = accessibilityExampleStory();\\n\\n/**\\n * Right-aligned column example -- Requires custom table data cell styles\\n * The significant items to note are:\\n *   - textAlign on the applicable columnData definitions\\n *   - textAlign on the RcTableBodyCellContent component\\n */\\nfunction rightAlignedColumnExampleStory() {\\n  type HeaderRowProps = {\\n    sortHandler: Function;\\n  };\\n\\n  const numericCols = ['runtimeMinutes', 'numVotes'];\\n  const HeaderRow = (props: HeaderRowProps) => {\\n    const initialSortMap = { sortKey: 0, sortDirection: ORDER_TABLE_BY.ASC };\\n    const [sortMap, setSortMap] = useState(initialSortMap);\\n    const [columnData] = useState(\\n      arrayFixture.columns.map((columnValue, index) => ({\\n        title: columnValue,\\n        sortKey: index > 0 ? index : undefined,\\n        textAlign: numericCols.includes(columnValue)\\n          ? COLUMN_TEXT_ALIGN.RIGHT\\n          : COLUMN_TEXT_ALIGN.LEFT,\\n      })),\\n    );\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setSortMap({ sortDirection, sortKey });\\n      props.sortHandler(sortDirection, sortKey);\\n    };\\n\\n    return (\\n      <RcTableHeadView\\n        columnData={columnData}\\n        data-test-automation-id={'table-head'}\\n        sortHandler={sortHandler}\\n        sortMap={sortMap}\\n      />\\n    );\\n  };\\n\\n  const getTableRows = (numberOfRows: number, tableData: any[]) => {\\n    const row = (props: any, data: any[]) => (\\n      <RcTableRow {...props}>\\n        {data.map((cellData, cellIndex) => {\\n          const textAlign = numericCols.includes(\\n            arrayFixture.columns[cellIndex],\\n          )\\n            ? COLUMN_TEXT_ALIGN.RIGHT\\n            : COLUMN_TEXT_ALIGN.LEFT;\\n\\n          return (\\n            <td key={`${props.key}_${arrayFixture.columns[cellIndex]}`}>\\n              <RcTableBodyCellContent textAlign={textAlign}>\\n                {cellData}\\n              </RcTableBodyCellContent>\\n            </td>\\n          );\\n        })}\\n      </RcTableRow>\\n    );\\n\\n    return tableData\\n      .slice(0, numberOfRows)\\n      .map((data, i) => row({ key: i }, data));\\n  };\\n\\n  return () => {\\n    const [rowData, setRowData] = useState([...arrayFixture.data]);\\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\\n      setRowData((currentRowData) =>\\n        [...currentRowData].sort((a, b) => {\\n          let result = 0;\\n          const sortDirectionMultiplier =\\n            sortDirection === ORDER_TABLE_BY.DESC ? -1 : 1;\\n          const valueA = a[sortKey];\\n          const valueB = b[sortKey];\\n\\n          // Sort null values to the end\\n          if (valueA === null && valueB === null) {\\n            return 0;\\n          }\\n          if (valueA === null) {\\n            return 1;\\n          }\\n          if (valueB === null) {\\n            return -1;\\n          }\\n\\n          if (valueA < valueB) {\\n            result = -1;\\n          } else if (valueA > valueB) {\\n            result = 1;\\n          }\\n\\n          return result * sortDirectionMultiplier;\\n        }),\\n      );\\n    };\\n\\n    const tableProps: RcTableProps = {\\n      tableBorder: TABLE_BORDER_TYPE.NONE,\\n      tableSticky: TABLE_STICKY_TYPE.STICKY,\\n      tableType: TABLE_TYPE.AUTO,\\n      header: <HeaderRow sortHandler={sortHandler} />,\\n      desc: 'Right-aligned columns example',\\n    };\\n\\n    return (\\n      <Wrapper>\\n        <RcTable {...tableProps}>{getTableRows(100, rowData)}</RcTable>\\n      </Wrapper>\\n    );\\n  };\\n}\\n\\nexport const RightAlignedColumn = rightAlignedColumnExampleStory();\\n\",\"locationsMap\":{\"sizes\":{\"startLoc\":{\"col\":21,\"line\":119},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":21,\"line\":119},\"endBody\":{\"col\":1,\"line\":148}},\"sticky-header\":{\"startLoc\":{\"col\":28,\"line\":149},\"endLoc\":{\"col\":1,\"line\":163},\"startBody\":{\"col\":28,\"line\":149},\"endBody\":{\"col\":1,\"line\":163}},\"borders\":{\"startLoc\":{\"col\":23,\"line\":164},\"endLoc\":{\"col\":1,\"line\":178},\"startBody\":{\"col\":23,\"line\":164},\"endBody\":{\"col\":1,\"line\":178}},\"sort-states\":{\"startLoc\":{\"col\":26,\"line\":180},\"endLoc\":{\"col\":1,\"line\":199},\"startBody\":{\"col\":26,\"line\":180},\"endBody\":{\"col\":1,\"line\":199}},\"accessibility\":{\"startLoc\":{\"col\":29,\"line\":301},\"endLoc\":{\"col\":56,\"line\":301},\"startBody\":{\"col\":29,\"line\":301},\"endBody\":{\"col\":56,\"line\":301}},\"right-aligned-column\":{\"startLoc\":{\"col\":34,\"line\":417},\"endLoc\":{\"col\":66,\"line\":417},\"startBody\":{\"col\":34,\"line\":417},\"endBody\":{\"col\":66,\"line\":417}}}},},\n  title: '🖤 deprecated Components/Tables',\n  component: RcTable,\n} as Meta;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 600px;\n  margin: 25px 0;\n  background: ${palette2('neutral', 'b01')};\n  border: 1px solid ${palette2('neutral', 'l02')};\n  display: flex;\n  overflow: scroll;\n`;\n\nconst HeadRowWithSort = () => {\n  const sortMap = { sortKey: 1, sortDirection: ORDER_TABLE_BY.ASC };\n  const [columnSortMap, setSortMap] = useState(sortMap);\n  const columnData: ColumnProps[] = [\n    {\n      title: 'Name',\n      sortKey: 1,\n    },\n    {\n      title: 'Assignee',\n      sortKey: 2,\n    },\n    {\n      title: 'Start',\n      sortKey: 3,\n    },\n    {\n      title: 'Due',\n      sortKey: 4,\n    },\n  ];\n\n  return (\n    <RcTableHeadView\n      columnData={columnData}\n      width={400}\n      data-test-automation-id={'table-head'}\n      sortHandler={(sortDirection, sortKey) => {\n        setSortMap({\n          sortDirection,\n          sortKey,\n        });\n      }}\n      sortMap={columnSortMap}\n    />\n  );\n};\n\nconst HeadRow = () => {\n  const columnData: ColumnProps[] = [\n    {\n      title: 'Name',\n    },\n    {\n      title: 'Assignee',\n    },\n    {\n      title: 'Start',\n    },\n    {\n      title: 'Due',\n    },\n  ];\n\n  return (\n    <RcTableHeadView\n      columnData={columnData}\n      width={400}\n      data-test-automation-id={'table-head'}\n    />\n  );\n};\n\nconst getTableRows = (numberOfRows: number) => {\n  const row = (props: any) => (\n    <RcTableRow {...props}>\n      <td>\n        <RcTableBodyCellContent>Item</RcTableBodyCellContent>\n      </td>\n      <td>\n        <RcTableBodyCellContent>Body</RcTableBodyCellContent>\n      </td>\n      <td>\n        <RcTableBodyCellContent>123</RcTableBodyCellContent>\n      </td>\n      <td>\n        <RcTableBodyCellContent>456</RcTableBodyCellContent>\n      </td>\n    </RcTableRow>\n  );\n  return [...new Array(numberOfRows)].map((x, i) => {\n    return row({ key: i });\n  });\n};\n\nexport const Sizes = () => {\n  const tableProps: RcTableProps = {\n    tableBorder: TABLE_BORDER_TYPE.NONE,\n    tableSticky: TABLE_STICKY_TYPE.NONE,\n    header: <HeadRow />,\n    desc: 'Table sizes example',\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <RcTable tableType={TABLE_TYPE.AUTO} {...tableProps}>\n          {getTableRows(3)}\n        </RcTable>\n      </Wrapper>\n\n      <Wrapper>\n        <RcTable tableType={TABLE_TYPE.CARD} {...tableProps}>\n          {getTableRows(3)}\n        </RcTable>\n      </Wrapper>\n\n      <Wrapper>\n        <RcTable tableType={TABLE_TYPE.FULL} {...tableProps}>\n          {getTableRows(3)}\n        </RcTable>\n      </Wrapper>\n    </>\n  );\n};;\nexport const StickyHeader = () => {\n  const tableProps: RcTableProps = {\n    tableBorder: TABLE_BORDER_TYPE.NONE,\n    tableSticky: TABLE_STICKY_TYPE.STICKY,\n    tableType: TABLE_TYPE.FULL,\n    header: <HeadRow />,\n    desc: 'Table sticky header example',\n  };\n\n  return (\n    <Wrapper style={{ height: '500px' }}>\n      <RcTable {...tableProps}>{getTableRows(30)}</RcTable>\n    </Wrapper>\n  );\n};;\nexport const Borders = () => {\n  const tableProps: RcTableProps = {\n    tableBorder: TABLE_BORDER_TYPE.BORDERED,\n    tableSticky: TABLE_STICKY_TYPE.NONE,\n    tableType: TABLE_TYPE.AUTO,\n    header: <HeadRow />,\n    desc: 'Table borders example',\n  };\n\n  return (\n    <Wrapper>\n      <RcTable {...tableProps}>{getTableRows(6)}</RcTable>\n    </Wrapper>\n  );\n};;\n\nexport const SortStates = () => {\n  const tableProps: RcTableProps = {\n    tableBorder: TABLE_BORDER_TYPE.NONE,\n    tableSticky: TABLE_STICKY_TYPE.NONE,\n    tableType: TABLE_TYPE.AUTO,\n    header: <HeadRowWithSort />,\n    desc: 'Table sort states example',\n  };\n\n  return (\n    <Wrapper>\n      <RcTable\n        {...tableProps}\n        classes={{ root: 'custom-root', table: 'custom-table' }}\n      >\n        {getTableRows(12)}\n      </RcTable>\n    </Wrapper>\n  );\n};;\n\n/**\n * Accessibility example\n */\n\nfunction accessibilityExampleStory() {\n  type HeaderRowProps = {\n    sortHandler: Function;\n  };\n\n  const HeaderRow = (props: HeaderRowProps) => {\n    const initialSortMap = { sortKey: 0, sortDirection: ORDER_TABLE_BY.ASC };\n    const [sortMap, setSortMap] = useState(initialSortMap);\n    const [columnData] = useState(\n      arrayFixture.columns.map((columnValue, index) => ({\n        title: columnValue,\n        sortKey: index > 0 ? index : undefined,\n      })),\n    );\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\n      setSortMap({ sortDirection, sortKey });\n      props.sortHandler(sortDirection, sortKey);\n    };\n\n    return (\n      <RcTableHeadView\n        columnData={columnData}\n        data-test-automation-id={'table-head'}\n        sortHandler={sortHandler}\n        sortMap={sortMap}\n      />\n    );\n  };\n\n  const getTableRowsNew = (numberOfRows: number, tableData: any[]) => {\n    const row = (props: any, data: any[]) => (\n      <RcTableRow {...props}>\n        {data.map((cellData, cellIndex) => {\n          return (\n            <td key={`${props.key}_${arrayFixture.columns[cellIndex]}`}>\n              <RcTableBodyCellContent>{cellData}</RcTableBodyCellContent>\n            </td>\n          );\n        })}\n      </RcTableRow>\n    );\n\n    return tableData\n      .slice(0, numberOfRows)\n      .map((data, i) => row({ key: i }, data));\n  };\n\n  return () => {\n    const [rowData, setRowData] = useState([...arrayFixture.data]);\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\n      setRowData((currentRowData) =>\n        [...currentRowData].sort((a, b) => {\n          let result = 0;\n          const sortDirectionMultiplier =\n            sortDirection === ORDER_TABLE_BY.DESC ? -1 : 1;\n          const valueA = a[sortKey];\n          const valueB = b[sortKey];\n\n          // Sort null values to the end\n          if (valueA === null && valueB === null) {\n            return 0;\n          }\n          if (valueA === null) {\n            return 1;\n          }\n          if (valueB === null) {\n            return -1;\n          }\n\n          if (valueA < valueB) {\n            result = -1;\n          } else if (valueA > valueB) {\n            result = 1;\n          }\n\n          return result * sortDirectionMultiplier;\n        }),\n      );\n    };\n\n    const tableProps: RcTableProps = {\n      tableBorder: TABLE_BORDER_TYPE.NONE,\n      tableSticky: TABLE_STICKY_TYPE.STICKY,\n      tableType: TABLE_TYPE.AUTO,\n      header: <HeaderRow sortHandler={sortHandler} />,\n      desc: 'Accessibility compliant table example',\n    };\n\n    return (\n      <Wrapper>\n        <RcTable {...tableProps}>{getTableRowsNew(100, rowData)}</RcTable>\n      </Wrapper>\n    );\n  };\n}\n\nexport const Accessibility = accessibilityExampleStory();;\n\n/**\n * Right-aligned column example -- Requires custom table data cell styles\n * The significant items to note are:\n *   - textAlign on the applicable columnData definitions\n *   - textAlign on the RcTableBodyCellContent component\n */\nfunction rightAlignedColumnExampleStory() {\n  type HeaderRowProps = {\n    sortHandler: Function;\n  };\n\n  const numericCols = ['runtimeMinutes', 'numVotes'];\n  const HeaderRow = (props: HeaderRowProps) => {\n    const initialSortMap = { sortKey: 0, sortDirection: ORDER_TABLE_BY.ASC };\n    const [sortMap, setSortMap] = useState(initialSortMap);\n    const [columnData] = useState(\n      arrayFixture.columns.map((columnValue, index) => ({\n        title: columnValue,\n        sortKey: index > 0 ? index : undefined,\n        textAlign: numericCols.includes(columnValue)\n          ? COLUMN_TEXT_ALIGN.RIGHT\n          : COLUMN_TEXT_ALIGN.LEFT,\n      })),\n    );\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\n      setSortMap({ sortDirection, sortKey });\n      props.sortHandler(sortDirection, sortKey);\n    };\n\n    return (\n      <RcTableHeadView\n        columnData={columnData}\n        data-test-automation-id={'table-head'}\n        sortHandler={sortHandler}\n        sortMap={sortMap}\n      />\n    );\n  };\n\n  const getTableRows = (numberOfRows: number, tableData: any[]) => {\n    const row = (props: any, data: any[]) => (\n      <RcTableRow {...props}>\n        {data.map((cellData, cellIndex) => {\n          const textAlign = numericCols.includes(\n            arrayFixture.columns[cellIndex],\n          )\n            ? COLUMN_TEXT_ALIGN.RIGHT\n            : COLUMN_TEXT_ALIGN.LEFT;\n\n          return (\n            <td key={`${props.key}_${arrayFixture.columns[cellIndex]}`}>\n              <RcTableBodyCellContent textAlign={textAlign}>\n                {cellData}\n              </RcTableBodyCellContent>\n            </td>\n          );\n        })}\n      </RcTableRow>\n    );\n\n    return tableData\n      .slice(0, numberOfRows)\n      .map((data, i) => row({ key: i }, data));\n  };\n\n  return () => {\n    const [rowData, setRowData] = useState([...arrayFixture.data]);\n    const sortHandler = (sortDirection: ORDER_TABLE_BY, sortKey: number) => {\n      setRowData((currentRowData) =>\n        [...currentRowData].sort((a, b) => {\n          let result = 0;\n          const sortDirectionMultiplier =\n            sortDirection === ORDER_TABLE_BY.DESC ? -1 : 1;\n          const valueA = a[sortKey];\n          const valueB = b[sortKey];\n\n          // Sort null values to the end\n          if (valueA === null && valueB === null) {\n            return 0;\n          }\n          if (valueA === null) {\n            return 1;\n          }\n          if (valueB === null) {\n            return -1;\n          }\n\n          if (valueA < valueB) {\n            result = -1;\n          } else if (valueA > valueB) {\n            result = 1;\n          }\n\n          return result * sortDirectionMultiplier;\n        }),\n      );\n    };\n\n    const tableProps: RcTableProps = {\n      tableBorder: TABLE_BORDER_TYPE.NONE,\n      tableSticky: TABLE_STICKY_TYPE.STICKY,\n      tableType: TABLE_TYPE.AUTO,\n      header: <HeaderRow sortHandler={sortHandler} />,\n      desc: 'Right-aligned columns example',\n    };\n\n    return (\n      <Wrapper>\n        <RcTable {...tableProps}>{getTableRows(100, rowData)}</RcTable>\n      </Wrapper>\n    );\n  };\n}\n\nexport const RightAlignedColumn = rightAlignedColumnExampleStory();\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcPaper } from '../../../Paper';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcTab } from '../../Tab';\\nimport { RcTabContext } from '../../TabContext';\\nimport { RcTabList } from '../../TabList';\\nimport { RcTabPanel } from '../TabPanel';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Tabs/TabContext/TabPanel',\\n  component: RcTabPanel,\\n  argTypes: {\\n    ...sortInDocTable<keyof TabPanelProps>([]),\\n    ...notControlInDocTable<keyof TabPanelProps>([]),\\n    ...notShowInDocTable<keyof TabPanelProps>([]),\\n  },\\n} as Meta;\\n\\nconst tabsData = [\\n  { label: 'Tab 0', value: 'tab-0', content: 'Tab Content 0' },\\n  { label: 'Tab 1', value: 'tab-1', content: 'Tab Content 1' },\\n  { label: 'Tab 2', value: 'tab-2', content: 'Tab Content 2' },\\n  { label: 'Tab 3', value: 'tab-3', content: 'Tab Content 3' },\\n  { label: 'Tab 4', value: 'tab-4', content: 'Tab Content 4' },\\n  {\\n    label: 'Tab 5',\\n    value: 'tab-5',\\n    disabled: true,\\n    content: 'Tab Content 5',\\n  },\\n  { label: 'Tab 6', value: 'tab-6', content: 'Tab Content 6' },\\n  {\\n    label: 'Tab 77777777',\\n    value: 'tab-7',\\n    content: 'Tab Content 7',\\n  },\\n  { label: 'Tab 8', value: 'tab-8', content: 'Tab Content 8' },\\n  { label: 'Tab 9', value: 'tab-9', content: 'Tab Content 9' },\\n];\\n\\ntype TabPanelProps = ComponentProps<typeof RcTabPanel>;\\n\\nconst CustomTabPanel = styled(RcTabPanel)<{ idx: number }>`\\n  position: relative;\\n\\n  &::after {\\n    content: '';\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    z-index: -1;\\n\\n    background: linear-gradient(\\n      120deg,\\n      #84fab0 ${({ idx }) => `${idx * 10}%`},\\n      #8fd3f4 ${({ idx }) => `${(idx + 1.5) * 10}%`}\\n    );\\n  }\\n`;\\n\\nexport const TabPanel: Story<TabPanelProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = React.useState(tabsData[0].value);\\n\\n  const handleChange = (event: React.ChangeEvent<{}>, value: any) => {\\n    setValue(value);\\n  };\\n\\n  const TabChildren = tabsData.map((tab) => {\\n    const { label, value, disabled, content, ...rest } = tab;\\n    return (\\n      <RcTab\\n        key={label}\\n        label={label}\\n        value={value}\\n        disabled={disabled}\\n        {...rest}\\n      />\\n    );\\n  });\\n\\n  const TabContentChildren = tabsData.map((tab, idx) => {\\n    const { value, content } = tab;\\n    return (\\n      <CustomTabPanel {...args} idx={idx} key={value} value={value}>\\n        {content}\\n      </CustomTabPanel>\\n    );\\n  });\\n\\n  return (\\n    <>\\n      <RcTypography variant=\\\"body2\\\" gutterBottom>\\n        Custom RcTabPanel\\n      </RcTypography>\\n      <RcTabContext value={value}>\\n        <RcPaper square>\\n          <RcTabList onChange={handleChange} aria-label=\\\"simple tabs example\\\">\\n            {TabChildren}\\n          </RcTabList>\\n        </RcPaper>\\n        {TabContentChildren}\\n      </RcTabContext>\\n    </>\\n  );\\n};\\n\\nTabPanel.storyName = 'TabPanel';\\n\\nTabPanel.args = {};\\n\\nTabPanel.argTypes = {\\n  ...notControlInDocTable<keyof TabPanelProps>(['value']),\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"TabPanel\":{\"startLoc\":{\"col\":46,\"line\":73},\"endLoc\":{\"col\":1,\"line\":119},\"startBody\":{\"col\":46,\"line\":73},\"endBody\":{\"col\":1,\"line\":119}}};\n    \nimport React, { ComponentProps } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../../foundation';\nimport {\n  notControlInDocTable,\n  notShowInDocTable,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../../storybook';\nimport { RcPaper } from '../../../Paper';\nimport { RcTypography } from '../../../Typography';\nimport { RcTab } from '../../Tab';\nimport { RcTabContext } from '../../TabContext';\nimport { RcTabList } from '../../TabList';\nimport { RcTabPanel } from '../TabPanel';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport {\\n  notControlInDocTable,\\n  notShowInDocTable,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../../storybook';\\nimport { RcPaper } from '../../../Paper';\\nimport { RcTypography } from '../../../Typography';\\nimport { RcTab } from '../../Tab';\\nimport { RcTabContext } from '../../TabContext';\\nimport { RcTabList } from '../../TabList';\\nimport { RcTabPanel } from '../TabPanel';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Tabs/TabContext/TabPanel',\\n  component: RcTabPanel,\\n  argTypes: {\\n    ...sortInDocTable<keyof TabPanelProps>([]),\\n    ...notControlInDocTable<keyof TabPanelProps>([]),\\n    ...notShowInDocTable<keyof TabPanelProps>([]),\\n  },\\n} as Meta;\\n\\nconst tabsData = [\\n  { label: 'Tab 0', value: 'tab-0', content: 'Tab Content 0' },\\n  { label: 'Tab 1', value: 'tab-1', content: 'Tab Content 1' },\\n  { label: 'Tab 2', value: 'tab-2', content: 'Tab Content 2' },\\n  { label: 'Tab 3', value: 'tab-3', content: 'Tab Content 3' },\\n  { label: 'Tab 4', value: 'tab-4', content: 'Tab Content 4' },\\n  {\\n    label: 'Tab 5',\\n    value: 'tab-5',\\n    disabled: true,\\n    content: 'Tab Content 5',\\n  },\\n  { label: 'Tab 6', value: 'tab-6', content: 'Tab Content 6' },\\n  {\\n    label: 'Tab 77777777',\\n    value: 'tab-7',\\n    content: 'Tab Content 7',\\n  },\\n  { label: 'Tab 8', value: 'tab-8', content: 'Tab Content 8' },\\n  { label: 'Tab 9', value: 'tab-9', content: 'Tab Content 9' },\\n];\\n\\ntype TabPanelProps = ComponentProps<typeof RcTabPanel>;\\n\\nconst CustomTabPanel = styled(RcTabPanel)<{ idx: number }>`\\n  position: relative;\\n\\n  &::after {\\n    content: '';\\n    position: absolute;\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    z-index: -1;\\n\\n    background: linear-gradient(\\n      120deg,\\n      #84fab0 ${({ idx }) => `${idx * 10}%`},\\n      #8fd3f4 ${({ idx }) => `${(idx + 1.5) * 10}%`}\\n    );\\n  }\\n`;\\n\\nexport const TabPanel: Story<TabPanelProps> = ({ ...args }) => {\\n  switchToControlKnobs();\\n\\n  const [value, setValue] = React.useState(tabsData[0].value);\\n\\n  const handleChange = (event: React.ChangeEvent<{}>, value: any) => {\\n    setValue(value);\\n  };\\n\\n  const TabChildren = tabsData.map((tab) => {\\n    const { label, value, disabled, content, ...rest } = tab;\\n    return (\\n      <RcTab\\n        key={label}\\n        label={label}\\n        value={value}\\n        disabled={disabled}\\n        {...rest}\\n      />\\n    );\\n  });\\n\\n  const TabContentChildren = tabsData.map((tab, idx) => {\\n    const { value, content } = tab;\\n    return (\\n      <CustomTabPanel {...args} idx={idx} key={value} value={value}>\\n        {content}\\n      </CustomTabPanel>\\n    );\\n  });\\n\\n  return (\\n    <>\\n      <RcTypography variant=\\\"body2\\\" gutterBottom>\\n        Custom RcTabPanel\\n      </RcTypography>\\n      <RcTabContext value={value}>\\n        <RcPaper square>\\n          <RcTabList onChange={handleChange} aria-label=\\\"simple tabs example\\\">\\n            {TabChildren}\\n          </RcTabList>\\n        </RcPaper>\\n        {TabContentChildren}\\n      </RcTabContext>\\n    </>\\n  );\\n};\\n\\nTabPanel.storyName = 'TabPanel';\\n\\nTabPanel.args = {};\\n\\nTabPanel.argTypes = {\\n  ...notControlInDocTable<keyof TabPanelProps>(['value']),\\n};\\n\",\"locationsMap\":{\"tab-panel\":{\"startLoc\":{\"col\":46,\"line\":73},\"endLoc\":{\"col\":1,\"line\":119},\"startBody\":{\"col\":46,\"line\":73},\"endBody\":{\"col\":1,\"line\":119}}}},},\n  title: '🚀 Cleanup Components/Tabs/TabContext/TabPanel',\n  component: RcTabPanel,\n  argTypes: {\n    ...sortInDocTable<keyof TabPanelProps>([]),\n    ...notControlInDocTable<keyof TabPanelProps>([]),\n    ...notShowInDocTable<keyof TabPanelProps>([]),\n  },\n} as Meta;\n\nconst tabsData = [\n  { label: 'Tab 0', value: 'tab-0', content: 'Tab Content 0' },\n  { label: 'Tab 1', value: 'tab-1', content: 'Tab Content 1' },\n  { label: 'Tab 2', value: 'tab-2', content: 'Tab Content 2' },\n  { label: 'Tab 3', value: 'tab-3', content: 'Tab Content 3' },\n  { label: 'Tab 4', value: 'tab-4', content: 'Tab Content 4' },\n  {\n    label: 'Tab 5',\n    value: 'tab-5',\n    disabled: true,\n    content: 'Tab Content 5',\n  },\n  { label: 'Tab 6', value: 'tab-6', content: 'Tab Content 6' },\n  {\n    label: 'Tab 77777777',\n    value: 'tab-7',\n    content: 'Tab Content 7',\n  },\n  { label: 'Tab 8', value: 'tab-8', content: 'Tab Content 8' },\n  { label: 'Tab 9', value: 'tab-9', content: 'Tab Content 9' },\n];\n\ntype TabPanelProps = ComponentProps<typeof RcTabPanel>;\n\nconst CustomTabPanel = styled(RcTabPanel)<{ idx: number }>`\n  position: relative;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    z-index: -1;\n\n    background: linear-gradient(\n      120deg,\n      #84fab0 ${({ idx }) => `${idx * 10}%`},\n      #8fd3f4 ${({ idx }) => `${(idx + 1.5) * 10}%`}\n    );\n  }\n`;\n\nexport const TabPanel: Story<TabPanelProps> = ({ ...args }) => {\n  switchToControlKnobs();\n\n  const [value, setValue] = React.useState(tabsData[0].value);\n\n  const handleChange = (event: React.ChangeEvent<{}>, value: any) => {\n    setValue(value);\n  };\n\n  const TabChildren = tabsData.map((tab) => {\n    const { label, value, disabled, content, ...rest } = tab;\n    return (\n      <RcTab\n        key={label}\n        label={label}\n        value={value}\n        disabled={disabled}\n        {...rest}\n      />\n    );\n  });\n\n  const TabContentChildren = tabsData.map((tab, idx) => {\n    const { value, content } = tab;\n    return (\n      <CustomTabPanel {...args} idx={idx} key={value} value={value}>\n        {content}\n      </CustomTabPanel>\n    );\n  });\n\n  return (\n    <>\n      <RcTypography variant=\"body2\" gutterBottom>\n        Custom RcTabPanel\n      </RcTypography>\n      <RcTabContext value={value}>\n        <RcPaper square>\n          <RcTabList onChange={handleChange} aria-label=\"simple tabs example\">\n            {TabChildren}\n          </RcTabList>\n        </RcPaper>\n        {TabContentChildren}\n      </RcTabContext>\n    </>\n  );\n};\n\nTabPanel.storyName = 'TabPanel';\n\nTabPanel.args = {};\n\nTabPanel.argTypes = {\n  ...notControlInDocTable<keyof TabPanelProps>(['value']),\n};\n","import React from 'react';\n\nimport { palette2, useDeprecatedLog } from '../../foundation';\nimport styled from '../../foundation/styled-components';\n\nconst StyledSpan = styled.span`\n  color: ${palette2('highlight', 'f01')};\n  background-color: ${palette2('highlight', 'b02')};\n  a {\n    color: inherit;\n  }\n`;\n\n/** @deprecated should not use that, just use RcText with `highlight` */\nconst RcTextWithHighlight = (props: {\n  children: React.ReactChild | null | (React.ReactChild | null)[];\n}) => {\n  useDeprecatedLog({\n    component: 'RcTextWithHighlight',\n    message: 'should not use that, just use RcText with `highlight`',\n  });\n\n  return <StyledSpan className=\"highlight-term\" {...props} />;\n};\n\nexport { RcTextWithHighlight };\n","import React, { memo } from 'react';\n\nimport MuiTypography, { TypographyProps } from '@material-ui/core/Typography';\n\nimport { palette2, typography, useDeprecatedLog } from '../../foundation';\nimport styled from '../../foundation/styled-components';\nimport { RcBaseProps } from '../../foundation/typings';\nimport { RcLink, RcLinkProps } from '../Link';\n\nconst TipsText = styled(MuiTypography)`\n  && {\n    color: ${palette2('neutral', 'f04')};\n    ${typography('caption1')};\n    * {\n      ${typography('caption1')};\n    }\n  }\n`;\n\ntype RcTextWithLinkProps = {\n  text: string;\n  linkText: string;\n  onClick?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n  TypographyProps?: RcBaseProps<TypographyProps>;\n  RcLinkProps?: RcLinkProps;\n};\n\n/** @deprecated please don't use that component, just use RcText and RcLink directly */\nconst RcTextWithLink = memo((props: RcTextWithLinkProps) => {\n  useDeprecatedLog({\n    component: 'RcTextWithLink',\n    message:\n      \"please don't use that component, just use `RcText` and RcLink directly\",\n  });\n\n  const { text, linkText, onClick, TypographyProps, RcLinkProps } = props;\n  let textProps;\n  if (TypographyProps) {\n    const { innerRef, ...rest } = TypographyProps;\n    textProps = rest;\n  }\n\n  return (\n    <TipsText {...textProps}>\n      {text}\n      <RcLink handleOnClick={onClick} {...RcLinkProps}>\n        {linkText}\n      </RcLink>\n    </TipsText>\n  );\n});\n\nRcTextWithLink.displayName = 'RcTextWithLink';\n\nexport { RcTextWithLink };\n","import React, { useRef, useState } from 'react';\n\nimport {\n  getParsePaletteColor,\n  palette2,\n  RcPaletteProp,\n  styled,\n  useDeprecatedLog,\n} from '../../foundation';\n\nconst StyledText = styled.span<{\n  textColor: RcPaletteProp;\n}>`\n  color: ${({ textColor }) =>\n    getParsePaletteColor(textColor, palette2('neutral', 'f06'))};\n`;\n\n/** @deprecated please don't use that component, just use `RcText` with `title` directly */\nconst RcTextWithTooltip = (props: {\n  children: React.ReactNode;\n  tooltip?: string;\n  textColor?: RcPaletteProp;\n}) => {\n  useDeprecatedLog({\n    component: 'RcTextWithTooltip',\n    message:\n      \"please don't use that component, just use `RcText` with `title` directly\",\n  });\n\n  const { tooltip, children, textColor = ['neutral', 'f06'] } = props;\n  const ref = useRef<HTMLSpanElement>(null);\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const onMouseOver = () => {\n    const span = ref.current;\n    if (span && span.parentElement) {\n      const { scrollHeight, scrollWidth, clientHeight, clientWidth } =\n        span.parentElement;\n      setShowTooltip(scrollWidth > clientWidth || scrollHeight > clientHeight);\n    }\n  };\n\n  const toolTipText = typeof children === 'string' ? children : tooltip || '';\n\n  return (\n    <span\n      title={showTooltip ? toolTipText : ''}\n      onMouseOver={onMouseOver}\n      ref={ref}\n    >\n      <StyledText textColor={textColor}>{children}</StyledText>\n    </span>\n  );\n};\n\nexport { RcTextWithTooltip };\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\n\\nimport { number, text } from '@storybook/addon-knobs';\\n\\nimport { ellipsis } from '../../../foundation';\\nimport styled from '../../../foundation/styled-components';\\nimport { RcTextWithTooltip } from '../TextWithTooltip';\\n\\nexport default {\\n  title: '🖤 Deprecated Components/Text/TextWithTooltip',\\n};\\n\\nconst Parent = styled.div`\\n  ${ellipsis()};\\n`;\\n\\nexport const TextWithTooltip = () => {\\n  const width = number('width', 400);\\n  const content = text(\\n    'text',\\n    'If the text is truncated, will show tooltip when hovered. hahahahahahah',\\n  );\\n  return (\\n    <Parent style={{ width: `${width}px` }}>\\n      <RcTextWithTooltip>{content}</RcTextWithTooltip>\\n    </Parent>\\n  );\\n};\\n\\nTextWithTooltip.storyName = 'TextWithTooltip';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"TextWithTooltip\":{\"startLoc\":{\"col\":31,\"line\":17},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":31,\"line\":17},\"endBody\":{\"col\":1,\"line\":28}}};\n    \nimport React from 'react';\n\nimport { number, text } from '@storybook/addon-knobs';\n\nimport { ellipsis } from '../../../foundation';\nimport styled from '../../../foundation/styled-components';\nimport { RcTextWithTooltip } from '../TextWithTooltip';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport { number, text } from '@storybook/addon-knobs';\\n\\nimport { ellipsis } from '../../../foundation';\\nimport styled from '../../../foundation/styled-components';\\nimport { RcTextWithTooltip } from '../TextWithTooltip';\\n\\nexport default {\\n  title: '🖤 Deprecated Components/Text/TextWithTooltip',\\n};\\n\\nconst Parent = styled.div`\\n  ${ellipsis()};\\n`;\\n\\nexport const TextWithTooltip = () => {\\n  const width = number('width', 400);\\n  const content = text(\\n    'text',\\n    'If the text is truncated, will show tooltip when hovered. hahahahahahah',\\n  );\\n  return (\\n    <Parent style={{ width: `${width}px` }}>\\n      <RcTextWithTooltip>{content}</RcTextWithTooltip>\\n    </Parent>\\n  );\\n};\\n\\nTextWithTooltip.storyName = 'TextWithTooltip';\\n\",\"locationsMap\":{\"text-with-tooltip\":{\"startLoc\":{\"col\":31,\"line\":17},\"endLoc\":{\"col\":1,\"line\":28},\"startBody\":{\"col\":31,\"line\":17},\"endBody\":{\"col\":1,\"line\":28}}}},},\n  title: '🖤 Deprecated Components/Text/TextWithTooltip',\n};\n\nconst Parent = styled.div`\n  ${ellipsis()};\n`;\n\nexport const TextWithTooltip = () => {\n  const width = number('width', 400);\n  const content = text(\n    'text',\n    'If the text is truncated, will show tooltip when hovered. hahahahahahah',\n  );\n  return (\n    <Parent style={{ width: `${width}px` }}>\n      <RcTextWithTooltip>{content}</RcTextWithTooltip>\n    </Parent>\n  );\n};\n\nTextWithTooltip.storyName = 'TextWithTooltip';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, {\\n  ComponentProps,\\n  useLayoutEffect,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled, useTheme } from '../../../foundation';\\nimport Add from '../../../icon/Add';\\nimport Videocam from '../../../icon/Videocam';\\nimport {\\n  notShowInDocTable,\\n  paletteChoice,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcBox } from '../../Box';\\nimport { RcButton, RcIconButton, RcSplitButton } from '../../Buttons';\\nimport {\\n  RcDialog,\\n  RcDialogActions,\\n  RcDialogContent,\\n  RcDialogTitle,\\n} from '../../Dialog';\\nimport { RcCheckbox, RcRadio, RcSwitch } from '../../Forms';\\nimport { RcIcon } from '../../Icon';\\nimport { RcLink } from '../../Link';\\nimport { RcListItem } from '../../List';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\nimport { RcTooltip } from '../Tooltip';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Tooltip',\\n  component: RcTooltip,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...sortInDocTable<keyof TooltipProps>([\\n      'textColor',\\n      'placement',\\n      'tooltipForceHide',\\n    ]),\\n    ...notShowInDocTable<keyof TooltipProps>(['injectGlobalStyle']),\\n  },\\n} as Meta;\\n\\ntype TooltipProps = ComponentProps<typeof RcTooltip>;\\n\\nconst isTestEnv = (window as any).TEST_ENV;\\n\\nexport const Tooltip: Story<TooltipProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <>\\n      <RcBox textAlign=\\\"center\\\">\\n        <RcTooltip {...args}>\\n          <RcButton>Tooltip when hover or keyboard focus</RcButton>\\n        </RcTooltip>\\n        {!isTestEnv && (\\n          <>\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <RcTooltip {...args} title=\\\"I'm tooltip\\\" open>\\n              <RcTypography color=\\\"neutral.f06\\\">\\n                tooltip always open\\n              </RcTypography>\\n            </RcTooltip>\\n          </>\\n        )}\\n      </RcBox>\\n    </>\\n  );\\n};\\n\\nTooltip.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/tooltips/#tooltip',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nTooltip.args = {\\n  title: 'I am arrow tip',\\n};\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  justify-content: space-around;\\n`;\\n\\nexport const TooltipSizes: Story<TooltipProps> = () => {\\n  return (\\n    <>\\n      {!isTestEnv ? (\\n        <Wrapper>\\n          <div>\\n            <Title>medium</Title>\\n            <RcTooltip title=\\\"I'm tooltip\\\" open size=\\\"medium\\\">\\n              <RcButton>Button</RcButton>\\n            </RcTooltip>\\n          </div>\\n          <div>\\n            <Title>large</Title>\\n            <RcTooltip title=\\\"I'm tooltip\\\" open size=\\\"large\\\">\\n              <RcButton>Button</RcButton>\\n            </RcTooltip>\\n          </div>\\n          <div>\\n            <Title>xlarge</Title>\\n            <RcTooltip\\n              title=\\\"Lorem ipsum dolor sit amet, consecteturssffff adipiscing elit. Sed in nunc diam. Aeneanssffaf efficitur nibh dui, ac posuere elitffdafdaffff consequatAenean\\\"\\n              open\\n              size=\\\"xlarge\\\"\\n            >\\n              <RcButton>Button</RcButton>\\n            </RcTooltip>\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            {/* those br for tooltip space */}\\n          </div>\\n        </Wrapper>\\n      ) : null}\\n    </>\\n  );\\n};\\n\\nexport const TooltipWithDisabledChildren: Story<TooltipProps> = () => {\\n  switchToControlKnobs();\\n  const [disabled, setDisabled] = useState(false);\\n  const ref = useRef(null);\\n\\n  const handleClick = () => {\\n    setDisabled(!disabled);\\n  };\\n\\n  useLayoutEffect(() => {\\n    console.log(ref);\\n  }, []);\\n\\n  const title = disabled ? 'Title when disabled' : 'Normal Title';\\n\\n  const theme = useTheme();\\n\\n  return (\\n    <>\\n      <Title>\\n        ignorePointer{' '}\\n        <RcText highlight>that will add a span wrap children component,</RcText>\\n      </Title>\\n      <RcButton onClick={handleClick} color=\\\"highlight.f02\\\">\\n        Toggle disabled state\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcIconButton\\n        title={title}\\n        disabled={disabled}\\n        symbol={Add}\\n        TooltipProps={{ ignorePointer: true }}\\n      />\\n      <RcCheckbox\\n        title={title}\\n        useRcTooltip\\n        disabled={disabled}\\n        TooltipProps={{ ignorePointer: true }}\\n      />\\n      <RcRadio\\n        title={title}\\n        useRcTooltip\\n        disabled={disabled}\\n        TooltipProps={{ ignorePointer: true }}\\n      />\\n      <br />\\n      <br />\\n      <RcSplitButton\\n        disabled={disabled}\\n        ActionButtonProps={{\\n          children: <RcIcon symbol={Videocam} size=\\\"medium\\\" />,\\n          TooltipProps: {\\n            ignorePointer: true,\\n          },\\n          title,\\n        }}\\n        ControlButtonProps={{\\n          TooltipProps: {\\n            ignorePointer: true,\\n          },\\n          title,\\n        }}\\n      >\\n        <RcListItem key={'1'} onClick={(e) => console.log('Text', e)} />\\n        <RcListItem key={'2'} onClick={(e) => console.log('Task', e)}>\\n          Task\\n        </RcListItem>\\n        <RcListItem key={'3'} onClick={(e) => console.log('Cool', e)}>\\n          Cool\\n        </RcListItem>\\n      </RcSplitButton>\\n      <RcTooltip\\n        title=\\\"disabled item tooltip\\\"\\n        ignorePointer\\n        maskProps={{ as: 'div' }}\\n      >\\n        <RcButton disabled>disabled item also have Tooltip</RcButton>\\n      </RcTooltip>\\n      <br />\\n      <br />\\n      <RcButton\\n        useRcTooltip\\n        title={title}\\n        radius=\\\"round\\\"\\n        fullWidth\\n        disabled={disabled}\\n        TooltipProps={{\\n          ignorePointer: disabled,\\n          maskProps: {\\n            as: 'div',\\n            style: {\\n              width: '100%',\\n              borderRadius: theme.radius.round,\\n            },\\n          },\\n        }}\\n      >\\n        Always have tooltip when disabled with Round radius\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcButton\\n        useRcTooltip\\n        title={title}\\n        radius=\\\"circle\\\"\\n        fullWidth\\n        ref={ref}\\n        disabled={disabled}\\n        TooltipProps={{\\n          ignorePointer: disabled,\\n          maskProps: {\\n            style: {\\n              width: '100%',\\n              borderRadius: theme.radius.circle,\\n            },\\n          },\\n        }}\\n      >\\n        Always have tooltip when disabled with circle radius\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nexport const TooltipWithForceHide: Story<TooltipProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [force, setForce] = useState(false);\\n\\n  const [openState, setOpenState] = useState(false);\\n\\n  return (\\n    <>\\n      <RcTooltip\\n        {...args}\\n        tooltipForceHide={force}\\n        onClose={(e) => console.log('close', e)}\\n        onOpen={(e) => console.log('open', e)}\\n      >\\n        <RcButton\\n          type=\\\"button\\\"\\n          onClick={() => {\\n            setForce(!force);\\n          }}\\n        >\\n          Switch force\\n        </RcButton>\\n      </RcTooltip>\\n      <RcTooltip\\n        {...args}\\n        tooltipForceHide={force}\\n        onClose={(e) => console.log('close', e)}\\n        onOpen={(e) => console.log('open', e)}\\n      >\\n        <RcButton\\n          type=\\\"button\\\"\\n          onClick={() => {\\n            setOpenState(true);\\n          }}\\n          style={{ marginLeft: '1em' }}\\n          color=\\\"highlight.b03\\\"\\n        >\\n          Open\\n        </RcButton>\\n      </RcTooltip>\\n      <RcDialog\\n        open={openState}\\n        onClose={(e, reason) => {\\n          setOpenState(false);\\n          console.log('close', e, reason);\\n        }}\\n        TransitionProps={{\\n          onExited: (e) => console.log('onExited', e),\\n        }}\\n      >\\n        <RcDialogTitle>Title</RcDialogTitle>\\n        <RcDialogContent>\\n          <RcTypography>some content</RcTypography>\\n          <RcCheckbox title=\\\"Go\\\" label=\\\"Do something\\\" />\\n          <RcCheckbox label=\\\"Custom Field\\\" />\\n        </RcDialogContent>\\n        <RcDialogActions>\\n          <RcButton>Custom Button</RcButton>\\n          <RcButton>Custom Button</RcButton>\\n        </RcDialogActions>\\n      </RcDialog>\\n      <br />\\n      <br />\\n      <RcSwitch\\n        checked={force}\\n        onClick={() => {\\n          setForce(!force);\\n        }}\\n        label={`Click to Switch forceHide: ${force ? 'true' : 'false'}`}\\n      />\\n    </>\\n  );\\n};\\n\\nTooltipWithForceHide.args = {\\n  title: 'Add',\\n};\\n\\nexport const TooltipWithCustomColor: Story<TooltipProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <>\\n      <RcTooltip {...args} color=\\\"interactive.b02\\\" textColor=\\\"neutral.f01\\\">\\n        <RcButton type=\\\"button\\\">Open</RcButton>\\n      </RcTooltip>\\n      <RcTooltip {...args} color=\\\"highlight.b03\\\" textColor=\\\"neutral.f06\\\">\\n        <RcButton\\n          type=\\\"button\\\"\\n          color=\\\"highlight.b03\\\"\\n          style={{ marginLeft: '1em' }}\\n        >\\n          Close\\n        </RcButton>\\n      </RcTooltip>\\n    </>\\n  );\\n};\\n\\nTooltipWithCustomColor.args = {\\n  title: 'Add',\\n};\\n\\nexport const TooltipWithInteractiveLink: Story<TooltipProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <RcTooltip\\n      {...args}\\n      title={\\n        <>\\n          open{' '}\\n          <RcLink\\n            href=\\\"https://www.ringcentral.com\\\"\\n            color=\\\"neutral.f01\\\"\\n            underline\\n            target=\\\"_blank\\\"\\n          >\\n            ringcentral\\n          </RcLink>\\n        </>\\n      }\\n      interactive\\n    >\\n      <RcButton type=\\\"button\\\">Open</RcButton>\\n    </RcTooltip>\\n  );\\n};\\n\\nTooltipWithInteractiveLink.args = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Tooltip\":{\"startLoc\":{\"col\":44,\"line\":59},\"endLoc\":{\"col\":1,\"line\":85},\"startBody\":{\"col\":44,\"line\":59},\"endBody\":{\"col\":1,\"line\":85}},\"TooltipSizes\":{\"startLoc\":{\"col\":49,\"line\":109},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":49,\"line\":109},\"endBody\":{\"col\":1,\"line\":148}},\"TooltipWithDisabledChildren\":{\"startLoc\":{\"col\":64,\"line\":150},\"endLoc\":{\"col\":1,\"line\":273},\"startBody\":{\"col\":64,\"line\":150},\"endBody\":{\"col\":1,\"line\":273}},\"TooltipWithForceHide\":{\"startLoc\":{\"col\":57,\"line\":275},\"endLoc\":{\"col\":1,\"line\":351},\"startBody\":{\"col\":57,\"line\":275},\"endBody\":{\"col\":1,\"line\":351}},\"TooltipWithCustomColor\":{\"startLoc\":{\"col\":59,\"line\":357},\"endLoc\":{\"col\":1,\"line\":379},\"startBody\":{\"col\":59,\"line\":357},\"endBody\":{\"col\":1,\"line\":379}},\"TooltipWithInteractiveLink\":{\"startLoc\":{\"col\":63,\"line\":385},\"endLoc\":{\"col\":1,\"line\":412},\"startBody\":{\"col\":63,\"line\":385},\"endBody\":{\"col\":1,\"line\":412}}};\n    \nimport React, {\n  ComponentProps,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled, useTheme } from '../../../foundation';\nimport Add from '../../../icon/Add';\nimport Videocam from '../../../icon/Videocam';\nimport {\n  notShowInDocTable,\n  paletteChoice,\n  sortInDocTable,\n  switchToControlKnobs,\n} from '../../../storybook';\nimport { Title } from '../../../storybook/components';\nimport { RcBox } from '../../Box';\nimport { RcButton, RcIconButton, RcSplitButton } from '../../Buttons';\nimport {\n  RcDialog,\n  RcDialogActions,\n  RcDialogContent,\n  RcDialogTitle,\n} from '../../Dialog';\nimport { RcCheckbox, RcRadio, RcSwitch } from '../../Forms';\nimport { RcIcon } from '../../Icon';\nimport { RcLink } from '../../Link';\nimport { RcListItem } from '../../List';\nimport { RcText } from '../../Text';\nimport { RcTypography } from '../../Typography';\nimport { RcTooltip } from '../Tooltip';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, {\\n  ComponentProps,\\n  useLayoutEffect,\\n  useRef,\\n  useState,\\n} from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled, useTheme } from '../../../foundation';\\nimport Add from '../../../icon/Add';\\nimport Videocam from '../../../icon/Videocam';\\nimport {\\n  notShowInDocTable,\\n  paletteChoice,\\n  sortInDocTable,\\n  switchToControlKnobs,\\n} from '../../../storybook';\\nimport { Title } from '../../../storybook/components';\\nimport { RcBox } from '../../Box';\\nimport { RcButton, RcIconButton, RcSplitButton } from '../../Buttons';\\nimport {\\n  RcDialog,\\n  RcDialogActions,\\n  RcDialogContent,\\n  RcDialogTitle,\\n} from '../../Dialog';\\nimport { RcCheckbox, RcRadio, RcSwitch } from '../../Forms';\\nimport { RcIcon } from '../../Icon';\\nimport { RcLink } from '../../Link';\\nimport { RcListItem } from '../../List';\\nimport { RcText } from '../../Text';\\nimport { RcTypography } from '../../Typography';\\nimport { RcTooltip } from '../Tooltip';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Tooltip',\\n  component: RcTooltip,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: paletteChoice,\\n      },\\n    },\\n    ...sortInDocTable<keyof TooltipProps>([\\n      'textColor',\\n      'placement',\\n      'tooltipForceHide',\\n    ]),\\n    ...notShowInDocTable<keyof TooltipProps>(['injectGlobalStyle']),\\n  },\\n} as Meta;\\n\\ntype TooltipProps = ComponentProps<typeof RcTooltip>;\\n\\nconst isTestEnv = (window as any).TEST_ENV;\\n\\nexport const Tooltip: Story<TooltipProps> = ({ children, ...args }) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <>\\n      <RcBox textAlign=\\\"center\\\">\\n        <RcTooltip {...args}>\\n          <RcButton>Tooltip when hover or keyboard focus</RcButton>\\n        </RcTooltip>\\n        {!isTestEnv && (\\n          <>\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <RcTooltip {...args} title=\\\"I'm tooltip\\\" open>\\n              <RcTypography color=\\\"neutral.f06\\\">\\n                tooltip always open\\n              </RcTypography>\\n            </RcTooltip>\\n          </>\\n        )}\\n      </RcBox>\\n    </>\\n  );\\n};\\n\\nTooltip.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/tooltips/#tooltip',\\n    },\\n    {\\n      name: 'Accessibility',\\n      value: '100%',\\n    },\\n  ],\\n};\\n\\nTooltip.args = {\\n  title: 'I am arrow tip',\\n};\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  justify-content: space-around;\\n`;\\n\\nexport const TooltipSizes: Story<TooltipProps> = () => {\\n  return (\\n    <>\\n      {!isTestEnv ? (\\n        <Wrapper>\\n          <div>\\n            <Title>medium</Title>\\n            <RcTooltip title=\\\"I'm tooltip\\\" open size=\\\"medium\\\">\\n              <RcButton>Button</RcButton>\\n            </RcTooltip>\\n          </div>\\n          <div>\\n            <Title>large</Title>\\n            <RcTooltip title=\\\"I'm tooltip\\\" open size=\\\"large\\\">\\n              <RcButton>Button</RcButton>\\n            </RcTooltip>\\n          </div>\\n          <div>\\n            <Title>xlarge</Title>\\n            <RcTooltip\\n              title=\\\"Lorem ipsum dolor sit amet, consecteturssffff adipiscing elit. Sed in nunc diam. Aeneanssffaf efficitur nibh dui, ac posuere elitffdafdaffff consequatAenean\\\"\\n              open\\n              size=\\\"xlarge\\\"\\n            >\\n              <RcButton>Button</RcButton>\\n            </RcTooltip>\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            <br />\\n            {/* those br for tooltip space */}\\n          </div>\\n        </Wrapper>\\n      ) : null}\\n    </>\\n  );\\n};\\n\\nexport const TooltipWithDisabledChildren: Story<TooltipProps> = () => {\\n  switchToControlKnobs();\\n  const [disabled, setDisabled] = useState(false);\\n  const ref = useRef(null);\\n\\n  const handleClick = () => {\\n    setDisabled(!disabled);\\n  };\\n\\n  useLayoutEffect(() => {\\n    console.log(ref);\\n  }, []);\\n\\n  const title = disabled ? 'Title when disabled' : 'Normal Title';\\n\\n  const theme = useTheme();\\n\\n  return (\\n    <>\\n      <Title>\\n        ignorePointer{' '}\\n        <RcText highlight>that will add a span wrap children component,</RcText>\\n      </Title>\\n      <RcButton onClick={handleClick} color=\\\"highlight.f02\\\">\\n        Toggle disabled state\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcIconButton\\n        title={title}\\n        disabled={disabled}\\n        symbol={Add}\\n        TooltipProps={{ ignorePointer: true }}\\n      />\\n      <RcCheckbox\\n        title={title}\\n        useRcTooltip\\n        disabled={disabled}\\n        TooltipProps={{ ignorePointer: true }}\\n      />\\n      <RcRadio\\n        title={title}\\n        useRcTooltip\\n        disabled={disabled}\\n        TooltipProps={{ ignorePointer: true }}\\n      />\\n      <br />\\n      <br />\\n      <RcSplitButton\\n        disabled={disabled}\\n        ActionButtonProps={{\\n          children: <RcIcon symbol={Videocam} size=\\\"medium\\\" />,\\n          TooltipProps: {\\n            ignorePointer: true,\\n          },\\n          title,\\n        }}\\n        ControlButtonProps={{\\n          TooltipProps: {\\n            ignorePointer: true,\\n          },\\n          title,\\n        }}\\n      >\\n        <RcListItem key={'1'} onClick={(e) => console.log('Text', e)} />\\n        <RcListItem key={'2'} onClick={(e) => console.log('Task', e)}>\\n          Task\\n        </RcListItem>\\n        <RcListItem key={'3'} onClick={(e) => console.log('Cool', e)}>\\n          Cool\\n        </RcListItem>\\n      </RcSplitButton>\\n      <RcTooltip\\n        title=\\\"disabled item tooltip\\\"\\n        ignorePointer\\n        maskProps={{ as: 'div' }}\\n      >\\n        <RcButton disabled>disabled item also have Tooltip</RcButton>\\n      </RcTooltip>\\n      <br />\\n      <br />\\n      <RcButton\\n        useRcTooltip\\n        title={title}\\n        radius=\\\"round\\\"\\n        fullWidth\\n        disabled={disabled}\\n        TooltipProps={{\\n          ignorePointer: disabled,\\n          maskProps: {\\n            as: 'div',\\n            style: {\\n              width: '100%',\\n              borderRadius: theme.radius.round,\\n            },\\n          },\\n        }}\\n      >\\n        Always have tooltip when disabled with Round radius\\n      </RcButton>\\n      <br />\\n      <br />\\n      <RcButton\\n        useRcTooltip\\n        title={title}\\n        radius=\\\"circle\\\"\\n        fullWidth\\n        ref={ref}\\n        disabled={disabled}\\n        TooltipProps={{\\n          ignorePointer: disabled,\\n          maskProps: {\\n            style: {\\n              width: '100%',\\n              borderRadius: theme.radius.circle,\\n            },\\n          },\\n        }}\\n      >\\n        Always have tooltip when disabled with circle radius\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nexport const TooltipWithForceHide: Story<TooltipProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  const [force, setForce] = useState(false);\\n\\n  const [openState, setOpenState] = useState(false);\\n\\n  return (\\n    <>\\n      <RcTooltip\\n        {...args}\\n        tooltipForceHide={force}\\n        onClose={(e) => console.log('close', e)}\\n        onOpen={(e) => console.log('open', e)}\\n      >\\n        <RcButton\\n          type=\\\"button\\\"\\n          onClick={() => {\\n            setForce(!force);\\n          }}\\n        >\\n          Switch force\\n        </RcButton>\\n      </RcTooltip>\\n      <RcTooltip\\n        {...args}\\n        tooltipForceHide={force}\\n        onClose={(e) => console.log('close', e)}\\n        onOpen={(e) => console.log('open', e)}\\n      >\\n        <RcButton\\n          type=\\\"button\\\"\\n          onClick={() => {\\n            setOpenState(true);\\n          }}\\n          style={{ marginLeft: '1em' }}\\n          color=\\\"highlight.b03\\\"\\n        >\\n          Open\\n        </RcButton>\\n      </RcTooltip>\\n      <RcDialog\\n        open={openState}\\n        onClose={(e, reason) => {\\n          setOpenState(false);\\n          console.log('close', e, reason);\\n        }}\\n        TransitionProps={{\\n          onExited: (e) => console.log('onExited', e),\\n        }}\\n      >\\n        <RcDialogTitle>Title</RcDialogTitle>\\n        <RcDialogContent>\\n          <RcTypography>some content</RcTypography>\\n          <RcCheckbox title=\\\"Go\\\" label=\\\"Do something\\\" />\\n          <RcCheckbox label=\\\"Custom Field\\\" />\\n        </RcDialogContent>\\n        <RcDialogActions>\\n          <RcButton>Custom Button</RcButton>\\n          <RcButton>Custom Button</RcButton>\\n        </RcDialogActions>\\n      </RcDialog>\\n      <br />\\n      <br />\\n      <RcSwitch\\n        checked={force}\\n        onClick={() => {\\n          setForce(!force);\\n        }}\\n        label={`Click to Switch forceHide: ${force ? 'true' : 'false'}`}\\n      />\\n    </>\\n  );\\n};\\n\\nTooltipWithForceHide.args = {\\n  title: 'Add',\\n};\\n\\nexport const TooltipWithCustomColor: Story<TooltipProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <>\\n      <RcTooltip {...args} color=\\\"interactive.b02\\\" textColor=\\\"neutral.f01\\\">\\n        <RcButton type=\\\"button\\\">Open</RcButton>\\n      </RcTooltip>\\n      <RcTooltip {...args} color=\\\"highlight.b03\\\" textColor=\\\"neutral.f06\\\">\\n        <RcButton\\n          type=\\\"button\\\"\\n          color=\\\"highlight.b03\\\"\\n          style={{ marginLeft: '1em' }}\\n        >\\n          Close\\n        </RcButton>\\n      </RcTooltip>\\n    </>\\n  );\\n};\\n\\nTooltipWithCustomColor.args = {\\n  title: 'Add',\\n};\\n\\nexport const TooltipWithInteractiveLink: Story<TooltipProps> = ({\\n  children,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n\\n  return (\\n    <RcTooltip\\n      {...args}\\n      title={\\n        <>\\n          open{' '}\\n          <RcLink\\n            href=\\\"https://www.ringcentral.com\\\"\\n            color=\\\"neutral.f01\\\"\\n            underline\\n            target=\\\"_blank\\\"\\n          >\\n            ringcentral\\n          </RcLink>\\n        </>\\n      }\\n      interactive\\n    >\\n      <RcButton type=\\\"button\\\">Open</RcButton>\\n    </RcTooltip>\\n  );\\n};\\n\\nTooltipWithInteractiveLink.args = {};\\n\",\"locationsMap\":{\"tooltip\":{\"startLoc\":{\"col\":44,\"line\":59},\"endLoc\":{\"col\":1,\"line\":85},\"startBody\":{\"col\":44,\"line\":59},\"endBody\":{\"col\":1,\"line\":85}},\"tooltip-sizes\":{\"startLoc\":{\"col\":49,\"line\":109},\"endLoc\":{\"col\":1,\"line\":148},\"startBody\":{\"col\":49,\"line\":109},\"endBody\":{\"col\":1,\"line\":148}},\"tooltip-with-disabled-children\":{\"startLoc\":{\"col\":64,\"line\":150},\"endLoc\":{\"col\":1,\"line\":273},\"startBody\":{\"col\":64,\"line\":150},\"endBody\":{\"col\":1,\"line\":273}},\"tooltip-with-force-hide\":{\"startLoc\":{\"col\":57,\"line\":275},\"endLoc\":{\"col\":1,\"line\":351},\"startBody\":{\"col\":57,\"line\":275},\"endBody\":{\"col\":1,\"line\":351}},\"tooltip-with-custom-color\":{\"startLoc\":{\"col\":59,\"line\":357},\"endLoc\":{\"col\":1,\"line\":379},\"startBody\":{\"col\":59,\"line\":357},\"endBody\":{\"col\":1,\"line\":379}},\"tooltip-with-interactive-link\":{\"startLoc\":{\"col\":63,\"line\":385},\"endLoc\":{\"col\":1,\"line\":412},\"startBody\":{\"col\":63,\"line\":385},\"endBody\":{\"col\":1,\"line\":412}}}},},\n  title: '🚀 Cleanup Components/Tooltip',\n  component: RcTooltip,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: paletteChoice,\n      },\n    },\n    ...sortInDocTable<keyof TooltipProps>([\n      'textColor',\n      'placement',\n      'tooltipForceHide',\n    ]),\n    ...notShowInDocTable<keyof TooltipProps>(['injectGlobalStyle']),\n  },\n} as Meta;\n\ntype TooltipProps = ComponentProps<typeof RcTooltip>;\n\nconst isTestEnv = (window as any).TEST_ENV;\n\nexport const Tooltip: Story<TooltipProps> = ({ children, ...args }) => {\n  switchToControlKnobs();\n\n  return (\n    <>\n      <RcBox textAlign=\"center\">\n        <RcTooltip {...args}>\n          <RcButton>Tooltip when hover or keyboard focus</RcButton>\n        </RcTooltip>\n        {!isTestEnv && (\n          <>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <RcTooltip {...args} title=\"I'm tooltip\" open>\n              <RcTypography color=\"neutral.f06\">\n                tooltip always open\n              </RcTypography>\n            </RcTooltip>\n          </>\n        )}\n      </RcBox>\n    </>\n  );\n};;\n\nTooltip.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/tooltips/#tooltip',\n    },\n    {\n      name: 'Accessibility',\n      value: '100%',\n    },\n  ],\n};\n\nTooltip.args = {\n  title: 'I am arrow tip',\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n`;\n\nexport const TooltipSizes: Story<TooltipProps> = () => {\n  return (\n    <>\n      {!isTestEnv ? (\n        <Wrapper>\n          <div>\n            <Title>medium</Title>\n            <RcTooltip title=\"I'm tooltip\" open size=\"medium\">\n              <RcButton>Button</RcButton>\n            </RcTooltip>\n          </div>\n          <div>\n            <Title>large</Title>\n            <RcTooltip title=\"I'm tooltip\" open size=\"large\">\n              <RcButton>Button</RcButton>\n            </RcTooltip>\n          </div>\n          <div>\n            <Title>xlarge</Title>\n            <RcTooltip\n              title=\"Lorem ipsum dolor sit amet, consecteturssffff adipiscing elit. Sed in nunc diam. Aeneanssffaf efficitur nibh dui, ac posuere elitffdafdaffff consequatAenean\"\n              open\n              size=\"xlarge\"\n            >\n              <RcButton>Button</RcButton>\n            </RcTooltip>\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            <br />\n            {/* those br for tooltip space */}\n          </div>\n        </Wrapper>\n      ) : null}\n    </>\n  );\n};;\n\nexport const TooltipWithDisabledChildren: Story<TooltipProps> = () => {\n  switchToControlKnobs();\n  const [disabled, setDisabled] = useState(false);\n  const ref = useRef(null);\n\n  const handleClick = () => {\n    setDisabled(!disabled);\n  };\n\n  useLayoutEffect(() => {\n    console.log(ref);\n  }, []);\n\n  const title = disabled ? 'Title when disabled' : 'Normal Title';\n\n  const theme = useTheme();\n\n  return (\n    <>\n      <Title>\n        ignorePointer{' '}\n        <RcText highlight>that will add a span wrap children component,</RcText>\n      </Title>\n      <RcButton onClick={handleClick} color=\"highlight.f02\">\n        Toggle disabled state\n      </RcButton>\n      <br />\n      <br />\n      <RcIconButton\n        title={title}\n        disabled={disabled}\n        symbol={Add}\n        TooltipProps={{ ignorePointer: true }}\n      />\n      <RcCheckbox\n        title={title}\n        useRcTooltip\n        disabled={disabled}\n        TooltipProps={{ ignorePointer: true }}\n      />\n      <RcRadio\n        title={title}\n        useRcTooltip\n        disabled={disabled}\n        TooltipProps={{ ignorePointer: true }}\n      />\n      <br />\n      <br />\n      <RcSplitButton\n        disabled={disabled}\n        ActionButtonProps={{\n          children: <RcIcon symbol={Videocam} size=\"medium\" />,\n          TooltipProps: {\n            ignorePointer: true,\n          },\n          title,\n        }}\n        ControlButtonProps={{\n          TooltipProps: {\n            ignorePointer: true,\n          },\n          title,\n        }}\n      >\n        <RcListItem key={'1'} onClick={(e) => console.log('Text', e)} />\n        <RcListItem key={'2'} onClick={(e) => console.log('Task', e)}>\n          Task\n        </RcListItem>\n        <RcListItem key={'3'} onClick={(e) => console.log('Cool', e)}>\n          Cool\n        </RcListItem>\n      </RcSplitButton>\n      <RcTooltip\n        title=\"disabled item tooltip\"\n        ignorePointer\n        maskProps={{ as: 'div' }}\n      >\n        <RcButton disabled>disabled item also have Tooltip</RcButton>\n      </RcTooltip>\n      <br />\n      <br />\n      <RcButton\n        useRcTooltip\n        title={title}\n        radius=\"round\"\n        fullWidth\n        disabled={disabled}\n        TooltipProps={{\n          ignorePointer: disabled,\n          maskProps: {\n            as: 'div',\n            style: {\n              width: '100%',\n              borderRadius: theme.radius.round,\n            },\n          },\n        }}\n      >\n        Always have tooltip when disabled with Round radius\n      </RcButton>\n      <br />\n      <br />\n      <RcButton\n        useRcTooltip\n        title={title}\n        radius=\"circle\"\n        fullWidth\n        ref={ref}\n        disabled={disabled}\n        TooltipProps={{\n          ignorePointer: disabled,\n          maskProps: {\n            style: {\n              width: '100%',\n              borderRadius: theme.radius.circle,\n            },\n          },\n        }}\n      >\n        Always have tooltip when disabled with circle radius\n      </RcButton>\n    </>\n  );\n};;\n\nexport const TooltipWithForceHide: Story<TooltipProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  const [force, setForce] = useState(false);\n\n  const [openState, setOpenState] = useState(false);\n\n  return (\n    <>\n      <RcTooltip\n        {...args}\n        tooltipForceHide={force}\n        onClose={(e) => console.log('close', e)}\n        onOpen={(e) => console.log('open', e)}\n      >\n        <RcButton\n          type=\"button\"\n          onClick={() => {\n            setForce(!force);\n          }}\n        >\n          Switch force\n        </RcButton>\n      </RcTooltip>\n      <RcTooltip\n        {...args}\n        tooltipForceHide={force}\n        onClose={(e) => console.log('close', e)}\n        onOpen={(e) => console.log('open', e)}\n      >\n        <RcButton\n          type=\"button\"\n          onClick={() => {\n            setOpenState(true);\n          }}\n          style={{ marginLeft: '1em' }}\n          color=\"highlight.b03\"\n        >\n          Open\n        </RcButton>\n      </RcTooltip>\n      <RcDialog\n        open={openState}\n        onClose={(e, reason) => {\n          setOpenState(false);\n          console.log('close', e, reason);\n        }}\n        TransitionProps={{\n          onExited: (e) => console.log('onExited', e),\n        }}\n      >\n        <RcDialogTitle>Title</RcDialogTitle>\n        <RcDialogContent>\n          <RcTypography>some content</RcTypography>\n          <RcCheckbox title=\"Go\" label=\"Do something\" />\n          <RcCheckbox label=\"Custom Field\" />\n        </RcDialogContent>\n        <RcDialogActions>\n          <RcButton>Custom Button</RcButton>\n          <RcButton>Custom Button</RcButton>\n        </RcDialogActions>\n      </RcDialog>\n      <br />\n      <br />\n      <RcSwitch\n        checked={force}\n        onClick={() => {\n          setForce(!force);\n        }}\n        label={`Click to Switch forceHide: ${force ? 'true' : 'false'}`}\n      />\n    </>\n  );\n};;\n\nTooltipWithForceHide.args = {\n  title: 'Add',\n};\n\nexport const TooltipWithCustomColor: Story<TooltipProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  return (\n    <>\n      <RcTooltip {...args} color=\"interactive.b02\" textColor=\"neutral.f01\">\n        <RcButton type=\"button\">Open</RcButton>\n      </RcTooltip>\n      <RcTooltip {...args} color=\"highlight.b03\" textColor=\"neutral.f06\">\n        <RcButton\n          type=\"button\"\n          color=\"highlight.b03\"\n          style={{ marginLeft: '1em' }}\n        >\n          Close\n        </RcButton>\n      </RcTooltip>\n    </>\n  );\n};;\n\nTooltipWithCustomColor.args = {\n  title: 'Add',\n};\n\nexport const TooltipWithInteractiveLink: Story<TooltipProps> = ({\n  children,\n  ...args\n}) => {\n  switchToControlKnobs();\n\n  return (\n    <RcTooltip\n      {...args}\n      title={\n        <>\n          open{' '}\n          <RcLink\n            href=\"https://www.ringcentral.com\"\n            color=\"neutral.f01\"\n            underline\n            target=\"_blank\"\n          >\n            ringcentral\n          </RcLink>\n        </>\n      }\n      interactive\n    >\n      <RcButton type=\"button\">Open</RcButton>\n    </RcTooltip>\n  );\n};\n\nTooltipWithInteractiveLink.args = {};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport Close from '../../../../icon/Close';\\nimport { RcBox } from '../../../Box';\\nimport { RcIconButton } from '../../../Buttons';\\nimport { RcDialog, RcDialogContent, RcDialogTitle } from '../../../Dialog';\\nimport { RcSwitch } from '../../../Forms/Switch';\\nimport { RcZoomFrom } from '../ZoomFrom';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/🌈Animations/Transition/ZoomFrom',\\n} as Meta;\\n\\nconst Img = styled.img`\\n  height: 200px;\\n  width: 200px;\\n  right: 100px;\\n  top: 100px;\\n  position: absolute;\\n`;\\n\\nexport const ZoomFrom: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const sourceRef = useRef<HTMLImageElement>(null);\\n\\n  const toggleOpen = () => setOpen(!open);\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        checked={open}\\n        label=\\\"Show\\\"\\n        onClick={() => {\\n          setOpen(!open);\\n        }}\\n      />\\n      <br />\\n      <br />\\n      <img\\n        alt=\\\"\\\"\\n        style={{ width: 100, height: 100 }}\\n        role=\\\"presentation\\\"\\n        ref={sourceRef}\\n        src=\\\"./assets/logo.png\\\"\\n        onClick={toggleOpen}\\n      />\\n      <RcZoomFrom\\n        from={sourceRef}\\n        in={open}\\n        onEnter={() => console.log('Enter')}\\n        onEntering={() => console.log('Entering')}\\n        onEntered={() => console.log('Entered')}\\n        onExit={() => console.log('Exit')}\\n        onExiting={() => console.log('Exiting')}\\n        onExited={() => console.log('Exited')}\\n      >\\n        <Img\\n          alt=\\\"\\\"\\n          role=\\\"presentation\\\"\\n          src=\\\"./assets/logo.png\\\"\\n          onClick={toggleOpen}\\n        />\\n      </RcZoomFrom>\\n    </>\\n  );\\n};\\n\\nZoomFrom.storyName = 'ZoomFrom';\\n\\nZoomFrom.args = {};\\n\\nZoomFrom.argTypes = {};\\n\\nZoomFrom.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'react-transition-group',\\n      href: 'http://reactcommunity.org/react-transition-group/transition',\\n    },\\n  ],\\n};\\n\\nexport const ZoomFromWithDialog: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const sourceRef = useRef<HTMLImageElement>(null);\\n\\n  const toggleOpen = () => setOpen(!open);\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        checked={open}\\n        label=\\\"Show\\\"\\n        onClick={() => {\\n          setOpen(!open);\\n        }}\\n      />\\n      <br />\\n      <br />\\n      <img\\n        alt=\\\"\\\"\\n        style={{ width: 100, height: 100 }}\\n        role=\\\"presentation\\\"\\n        ref={sourceRef}\\n        src=\\\"./assets/logo.png\\\"\\n        onClick={toggleOpen}\\n      />\\n      <RcDialog open={open} fullScreen onClose={toggleOpen}>\\n        <RcDialogTitle display=\\\"flex\\\" disableTypography space={6}>\\n          <RcBox flex=\\\"1 1 auto\\\" alignItems=\\\"center\\\" display=\\\"flex\\\" />\\n          <RcIconButton title=\\\"Close\\\" symbol={Close} onClick={toggleOpen} />\\n        </RcDialogTitle>\\n        <RcDialogContent>\\n          <RcZoomFrom\\n            from={sourceRef}\\n            in={open}\\n            onEnter={() => console.log('Enter')}\\n            onEntering={() => console.log('Entering')}\\n            onEntered={() => console.log('Entered')}\\n            onExit={() => console.log('Exit')}\\n            onExiting={() => console.log('Exiting')}\\n            onExited={() => console.log('Exited')}\\n          >\\n            <Img\\n              alt=\\\"\\\"\\n              role=\\\"presentation\\\"\\n              src=\\\"./assets/logo.png\\\"\\n              onClick={toggleOpen}\\n            />\\n          </RcZoomFrom>\\n        </RcDialogContent>\\n      </RcDialog>\\n    </>\\n  );\\n};\\n\\nZoomFromWithDialog.storyName = 'ZoomFromWithDialog';\\n\\nZoomFromWithDialog.args = {};\\n\\nZoomFromWithDialog.argTypes = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ZoomFrom\":{\"startLoc\":{\"col\":36,\"line\":25},\"endLoc\":{\"col\":1,\"line\":70},\"startBody\":{\"col\":36,\"line\":25},\"endBody\":{\"col\":1,\"line\":70}},\"ZoomFromWithDialog\":{\"startLoc\":{\"col\":46,\"line\":88},\"endLoc\":{\"col\":1,\"line\":141},\"startBody\":{\"col\":46,\"line\":88},\"endBody\":{\"col\":1,\"line\":141}}};\n    \nimport React, { useRef, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { styled } from '../../../../foundation';\nimport Close from '../../../../icon/Close';\nimport { RcBox } from '../../../Box';\nimport { RcIconButton } from '../../../Buttons';\nimport { RcDialog, RcDialogContent, RcDialogTitle } from '../../../Dialog';\nimport { RcSwitch } from '../../../Forms/Switch';\nimport { RcZoomFrom } from '../ZoomFrom';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { styled } from '../../../../foundation';\\nimport Close from '../../../../icon/Close';\\nimport { RcBox } from '../../../Box';\\nimport { RcIconButton } from '../../../Buttons';\\nimport { RcDialog, RcDialogContent, RcDialogTitle } from '../../../Dialog';\\nimport { RcSwitch } from '../../../Forms/Switch';\\nimport { RcZoomFrom } from '../ZoomFrom';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/🌈Animations/Transition/ZoomFrom',\\n} as Meta;\\n\\nconst Img = styled.img`\\n  height: 200px;\\n  width: 200px;\\n  right: 100px;\\n  top: 100px;\\n  position: absolute;\\n`;\\n\\nexport const ZoomFrom: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const sourceRef = useRef<HTMLImageElement>(null);\\n\\n  const toggleOpen = () => setOpen(!open);\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        checked={open}\\n        label=\\\"Show\\\"\\n        onClick={() => {\\n          setOpen(!open);\\n        }}\\n      />\\n      <br />\\n      <br />\\n      <img\\n        alt=\\\"\\\"\\n        style={{ width: 100, height: 100 }}\\n        role=\\\"presentation\\\"\\n        ref={sourceRef}\\n        src=\\\"./assets/logo.png\\\"\\n        onClick={toggleOpen}\\n      />\\n      <RcZoomFrom\\n        from={sourceRef}\\n        in={open}\\n        onEnter={() => console.log('Enter')}\\n        onEntering={() => console.log('Entering')}\\n        onEntered={() => console.log('Entered')}\\n        onExit={() => console.log('Exit')}\\n        onExiting={() => console.log('Exiting')}\\n        onExited={() => console.log('Exited')}\\n      >\\n        <Img\\n          alt=\\\"\\\"\\n          role=\\\"presentation\\\"\\n          src=\\\"./assets/logo.png\\\"\\n          onClick={toggleOpen}\\n        />\\n      </RcZoomFrom>\\n    </>\\n  );\\n};\\n\\nZoomFrom.storyName = 'ZoomFrom';\\n\\nZoomFrom.args = {};\\n\\nZoomFrom.argTypes = {};\\n\\nZoomFrom.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'react-transition-group',\\n      href: 'http://reactcommunity.org/react-transition-group/transition',\\n    },\\n  ],\\n};\\n\\nexport const ZoomFromWithDialog: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  const sourceRef = useRef<HTMLImageElement>(null);\\n\\n  const toggleOpen = () => setOpen(!open);\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        checked={open}\\n        label=\\\"Show\\\"\\n        onClick={() => {\\n          setOpen(!open);\\n        }}\\n      />\\n      <br />\\n      <br />\\n      <img\\n        alt=\\\"\\\"\\n        style={{ width: 100, height: 100 }}\\n        role=\\\"presentation\\\"\\n        ref={sourceRef}\\n        src=\\\"./assets/logo.png\\\"\\n        onClick={toggleOpen}\\n      />\\n      <RcDialog open={open} fullScreen onClose={toggleOpen}>\\n        <RcDialogTitle display=\\\"flex\\\" disableTypography space={6}>\\n          <RcBox flex=\\\"1 1 auto\\\" alignItems=\\\"center\\\" display=\\\"flex\\\" />\\n          <RcIconButton title=\\\"Close\\\" symbol={Close} onClick={toggleOpen} />\\n        </RcDialogTitle>\\n        <RcDialogContent>\\n          <RcZoomFrom\\n            from={sourceRef}\\n            in={open}\\n            onEnter={() => console.log('Enter')}\\n            onEntering={() => console.log('Entering')}\\n            onEntered={() => console.log('Entered')}\\n            onExit={() => console.log('Exit')}\\n            onExiting={() => console.log('Exiting')}\\n            onExited={() => console.log('Exited')}\\n          >\\n            <Img\\n              alt=\\\"\\\"\\n              role=\\\"presentation\\\"\\n              src=\\\"./assets/logo.png\\\"\\n              onClick={toggleOpen}\\n            />\\n          </RcZoomFrom>\\n        </RcDialogContent>\\n      </RcDialog>\\n    </>\\n  );\\n};\\n\\nZoomFromWithDialog.storyName = 'ZoomFromWithDialog';\\n\\nZoomFromWithDialog.args = {};\\n\\nZoomFromWithDialog.argTypes = {};\\n\",\"locationsMap\":{\"zoom-from\":{\"startLoc\":{\"col\":36,\"line\":25},\"endLoc\":{\"col\":1,\"line\":70},\"startBody\":{\"col\":36,\"line\":25},\"endBody\":{\"col\":1,\"line\":70}},\"zoom-from-with-dialog\":{\"startLoc\":{\"col\":46,\"line\":88},\"endLoc\":{\"col\":1,\"line\":141},\"startBody\":{\"col\":46,\"line\":88},\"endBody\":{\"col\":1,\"line\":141}}}},},\n  title: '🚀 Cleanup Components/🌈Animations/Transition/ZoomFrom',\n} as Meta;\n\nconst Img = styled.img`\n  height: 200px;\n  width: 200px;\n  right: 100px;\n  top: 100px;\n  position: absolute;\n`;\n\nexport const ZoomFrom: Story<any> = () => {\n  const [open, setOpen] = useState(false);\n\n  const sourceRef = useRef<HTMLImageElement>(null);\n\n  const toggleOpen = () => setOpen(!open);\n\n  return (\n    <>\n      <RcSwitch\n        checked={open}\n        label=\"Show\"\n        onClick={() => {\n          setOpen(!open);\n        }}\n      />\n      <br />\n      <br />\n      <img\n        alt=\"\"\n        style={{ width: 100, height: 100 }}\n        role=\"presentation\"\n        ref={sourceRef}\n        src=\"./assets/logo.png\"\n        onClick={toggleOpen}\n      />\n      <RcZoomFrom\n        from={sourceRef}\n        in={open}\n        onEnter={() => console.log('Enter')}\n        onEntering={() => console.log('Entering')}\n        onEntered={() => console.log('Entered')}\n        onExit={() => console.log('Exit')}\n        onExiting={() => console.log('Exiting')}\n        onExited={() => console.log('Exited')}\n      >\n        <Img\n          alt=\"\"\n          role=\"presentation\"\n          src=\"./assets/logo.png\"\n          onClick={toggleOpen}\n        />\n      </RcZoomFrom>\n    </>\n  );\n};;\n\nZoomFrom.storyName = 'ZoomFrom';\n\nZoomFrom.args = {};\n\nZoomFrom.argTypes = {};\n\nZoomFrom.parameters = {\n  tags: [\n    {\n      name: 'Source',\n      value: 'react-transition-group',\n      href: 'http://reactcommunity.org/react-transition-group/transition',\n    },\n  ],\n};\n\nexport const ZoomFromWithDialog: Story<any> = () => {\n  const [open, setOpen] = useState(false);\n\n  const sourceRef = useRef<HTMLImageElement>(null);\n\n  const toggleOpen = () => setOpen(!open);\n\n  return (\n    <>\n      <RcSwitch\n        checked={open}\n        label=\"Show\"\n        onClick={() => {\n          setOpen(!open);\n        }}\n      />\n      <br />\n      <br />\n      <img\n        alt=\"\"\n        style={{ width: 100, height: 100 }}\n        role=\"presentation\"\n        ref={sourceRef}\n        src=\"./assets/logo.png\"\n        onClick={toggleOpen}\n      />\n      <RcDialog open={open} fullScreen onClose={toggleOpen}>\n        <RcDialogTitle display=\"flex\" disableTypography space={6}>\n          <RcBox flex=\"1 1 auto\" alignItems=\"center\" display=\"flex\" />\n          <RcIconButton title=\"Close\" symbol={Close} onClick={toggleOpen} />\n        </RcDialogTitle>\n        <RcDialogContent>\n          <RcZoomFrom\n            from={sourceRef}\n            in={open}\n            onEnter={() => console.log('Enter')}\n            onEntering={() => console.log('Entering')}\n            onEntered={() => console.log('Entered')}\n            onExit={() => console.log('Exit')}\n            onExiting={() => console.log('Exiting')}\n            onExited={() => console.log('Exited')}\n          >\n            <Img\n              alt=\"\"\n              role=\"presentation\"\n              src=\"./assets/logo.png\"\n              onClick={toggleOpen}\n            />\n          </RcZoomFrom>\n        </RcDialogContent>\n      </RcDialog>\n    </>\n  );\n};\n\nZoomFromWithDialog.storyName = 'ZoomFromWithDialog';\n\nZoomFromWithDialog.args = {};\n\nZoomFromWithDialog.argTypes = {};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, palette2, styled } from '../../../../foundation';\\nimport { RcSwitch } from '../../../Forms/Switch';\\nimport { RcZoomInFadeOut } from '../ZoomInFadeOut';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/🌈Animations/Transition/ZoomInFadeOut',\\n} as Meta;\\n\\nconst Item = styled.div`\\n  height: 300px;\\n  width: 300px;\\n  background-color: ${palette2('highlight', 'b03')};\\n  color: ${palette2('neutral', 'f06')};\\n  ${flexCenterStyle};\\n`;\\n\\nexport const ZoomInFadeOut: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        checked={open}\\n        label=\\\"Show\\\"\\n        onClick={() => {\\n          setOpen(!open);\\n        }}\\n      />\\n      <RcZoomInFadeOut in={open}>\\n        <Item>ZoomInFadeOut</Item>\\n      </RcZoomInFadeOut>\\n    </>\\n  );\\n};\\n\\nZoomInFadeOut.storyName = 'ZoomInFadeOut';\\n\\nZoomInFadeOut.args = {};\\n\\nZoomInFadeOut.argTypes = {};\\n\\nZoomInFadeOut.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'react-transition-group',\\n      href: 'http://reactcommunity.org/react-transition-group/transition',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ZoomInFadeOut\":{\"startLoc\":{\"col\":41,\"line\":21},\"endLoc\":{\"col\":1,\"line\":38},\"startBody\":{\"col\":41,\"line\":21},\"endBody\":{\"col\":1,\"line\":38}}};\n    \nimport React, { useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { flexCenterStyle, palette2, styled } from '../../../../foundation';\nimport { RcSwitch } from '../../../Forms/Switch';\nimport { RcZoomInFadeOut } from '../ZoomInFadeOut';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { flexCenterStyle, palette2, styled } from '../../../../foundation';\\nimport { RcSwitch } from '../../../Forms/Switch';\\nimport { RcZoomInFadeOut } from '../ZoomInFadeOut';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/🌈Animations/Transition/ZoomInFadeOut',\\n} as Meta;\\n\\nconst Item = styled.div`\\n  height: 300px;\\n  width: 300px;\\n  background-color: ${palette2('highlight', 'b03')};\\n  color: ${palette2('neutral', 'f06')};\\n  ${flexCenterStyle};\\n`;\\n\\nexport const ZoomInFadeOut: Story<any> = () => {\\n  const [open, setOpen] = useState(false);\\n\\n  return (\\n    <>\\n      <RcSwitch\\n        checked={open}\\n        label=\\\"Show\\\"\\n        onClick={() => {\\n          setOpen(!open);\\n        }}\\n      />\\n      <RcZoomInFadeOut in={open}>\\n        <Item>ZoomInFadeOut</Item>\\n      </RcZoomInFadeOut>\\n    </>\\n  );\\n};\\n\\nZoomInFadeOut.storyName = 'ZoomInFadeOut';\\n\\nZoomInFadeOut.args = {};\\n\\nZoomInFadeOut.argTypes = {};\\n\\nZoomInFadeOut.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'react-transition-group',\\n      href: 'http://reactcommunity.org/react-transition-group/transition',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"zoom-in-fade-out\":{\"startLoc\":{\"col\":41,\"line\":21},\"endLoc\":{\"col\":1,\"line\":38},\"startBody\":{\"col\":41,\"line\":21},\"endBody\":{\"col\":1,\"line\":38}}}},},\n  title: '🚀 Cleanup Components/🌈Animations/Transition/ZoomInFadeOut',\n} as Meta;\n\nconst Item = styled.div`\n  height: 300px;\n  width: 300px;\n  background-color: ${palette2('highlight', 'b03')};\n  color: ${palette2('neutral', 'f06')};\n  ${flexCenterStyle};\n`;\n\nexport const ZoomInFadeOut: Story<any> = () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <RcSwitch\n        checked={open}\n        label=\"Show\"\n        onClick={() => {\n          setOpen(!open);\n        }}\n      />\n      <RcZoomInFadeOut in={open}>\n        <Item>ZoomInFadeOut</Item>\n      </RcZoomInFadeOut>\n    </>\n  );\n};\n\nZoomInFadeOut.storyName = 'ZoomInFadeOut';\n\nZoomInFadeOut.args = {};\n\nZoomInFadeOut.argTypes = {};\n\nZoomInFadeOut.parameters = {\n  tags: [\n    {\n      name: 'Source',\n      value: 'react-transition-group',\n      href: 'http://reactcommunity.org/react-transition-group/transition',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { ComponentProps, useEffect, useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, styled } from '../../../foundation';\\nimport {\\n  notShowInDocTable,\\n  switchToControlKnobs,\\n  textPaletteChoice,\\n} from '../../../storybook';\\nimport { RcTypography } from '../Typography';\\nimport { MuiDefaultColor } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Typography',\\n  component: RcTypography,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: [...MuiDefaultColor, ...textPaletteChoice],\\n      },\\n    },\\n    ...notShowInDocTable<keyof TypographyProps>([\\n      'style',\\n      'className',\\n      'innerRef',\\n    ]),\\n  },\\n} as Meta;\\n\\ntype TypographyProps = ComponentProps<typeof RcTypography>;\\n\\nconst ShowForKnowButtonMargin = styled.div`\\n  background: ${palette2('neutral', 'f06')};\\n  color: ${palette2('neutral', 'f01')};\\n`;\\n\\nexport const Typography: Story<TypographyProps> = ({\\n  children,\\n  variant,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n  const ref = useRef();\\n\\n  useEffect(() => {\\n    console.log(ref);\\n  }, []);\\n\\n  return (\\n    <>\\n      <br />\\n      <br />\\n      <div style={{ maxWidth: 800 }}>\\n        <RcTypography ref={ref} variant={variant} {...args}>\\n          Current variant: {variant}\\n          <br />\\n          {children}\\n        </RcTypography>\\n      </div>\\n      <ShowForKnowButtonMargin>\\n        <RcTypography\\n          align=\\\"center\\\"\\n          display=\\\"block\\\"\\n          title=\\\"this is useRcTooltip\\\"\\n          useRcTooltip\\n        >\\n          Show for you know bottom margin, when you use props\\n        </RcTypography>\\n        <RcTypography align=\\\"center\\\" color=\\\"highlight.f02\\\" display=\\\"block\\\">\\n          paragraph: 0.35em\\n        </RcTypography>\\n        <RcTypography align=\\\"center\\\" color=\\\"highlight.f02\\\" display=\\\"block\\\">\\n          gutterBottom: 16px\\n        </RcTypography>\\n      </ShowForKnowButtonMargin>\\n    </>\\n  );\\n};\\n\\nTypography.args = {\\n  children:\\n    'Typography component provides you can use Juno font style with our token, make all font in your app to be uniform',\\n};\\n\\nTypography.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/typography/#typography',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Typography\":{\"startLoc\":{\"col\":50,\"line\":39},\"endLoc\":{\"col\":1,\"line\":80},\"startBody\":{\"col\":50,\"line\":39},\"endBody\":{\"col\":1,\"line\":80}}};\n    \nimport React, { ComponentProps, useEffect, useRef } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { palette2, styled } from '../../../foundation';\nimport {\n  notShowInDocTable,\n  switchToControlKnobs,\n  textPaletteChoice,\n} from '../../../storybook';\nimport { RcTypography } from '../Typography';\nimport { MuiDefaultColor } from '../utils';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { ComponentProps, useEffect, useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { palette2, styled } from '../../../foundation';\\nimport {\\n  notShowInDocTable,\\n  switchToControlKnobs,\\n  textPaletteChoice,\\n} from '../../../storybook';\\nimport { RcTypography } from '../Typography';\\nimport { MuiDefaultColor } from '../utils';\\n\\nexport default {\\n  title: '🚀 Cleanup Components/Typography',\\n  component: RcTypography,\\n  argTypes: {\\n    color: {\\n      control: {\\n        type: 'select',\\n        options: [...MuiDefaultColor, ...textPaletteChoice],\\n      },\\n    },\\n    ...notShowInDocTable<keyof TypographyProps>([\\n      'style',\\n      'className',\\n      'innerRef',\\n    ]),\\n  },\\n} as Meta;\\n\\ntype TypographyProps = ComponentProps<typeof RcTypography>;\\n\\nconst ShowForKnowButtonMargin = styled.div`\\n  background: ${palette2('neutral', 'f06')};\\n  color: ${palette2('neutral', 'f01')};\\n`;\\n\\nexport const Typography: Story<TypographyProps> = ({\\n  children,\\n  variant,\\n  ...args\\n}) => {\\n  switchToControlKnobs();\\n  const ref = useRef();\\n\\n  useEffect(() => {\\n    console.log(ref);\\n  }, []);\\n\\n  return (\\n    <>\\n      <br />\\n      <br />\\n      <div style={{ maxWidth: 800 }}>\\n        <RcTypography ref={ref} variant={variant} {...args}>\\n          Current variant: {variant}\\n          <br />\\n          {children}\\n        </RcTypography>\\n      </div>\\n      <ShowForKnowButtonMargin>\\n        <RcTypography\\n          align=\\\"center\\\"\\n          display=\\\"block\\\"\\n          title=\\\"this is useRcTooltip\\\"\\n          useRcTooltip\\n        >\\n          Show for you know bottom margin, when you use props\\n        </RcTypography>\\n        <RcTypography align=\\\"center\\\" color=\\\"highlight.f02\\\" display=\\\"block\\\">\\n          paragraph: 0.35em\\n        </RcTypography>\\n        <RcTypography align=\\\"center\\\" color=\\\"highlight.f02\\\" display=\\\"block\\\">\\n          gutterBottom: 16px\\n        </RcTypography>\\n      </ShowForKnowButtonMargin>\\n    </>\\n  );\\n};\\n\\nTypography.args = {\\n  children:\\n    'Typography component provides you can use Juno font style with our token, make all font in your app to be uniform',\\n};\\n\\nTypography.parameters = {\\n  tags: [\\n    {\\n      name: 'Mui',\\n      href: 'https://material-ui.com/components/typography/#typography',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"typography\":{\"startLoc\":{\"col\":50,\"line\":39},\"endLoc\":{\"col\":1,\"line\":80},\"startBody\":{\"col\":50,\"line\":39},\"endBody\":{\"col\":1,\"line\":80}}}},},\n  title: '🚀 Cleanup Components/Typography',\n  component: RcTypography,\n  argTypes: {\n    color: {\n      control: {\n        type: 'select',\n        options: [...MuiDefaultColor, ...textPaletteChoice],\n      },\n    },\n    ...notShowInDocTable<keyof TypographyProps>([\n      'style',\n      'className',\n      'innerRef',\n    ]),\n  },\n} as Meta;\n\ntype TypographyProps = ComponentProps<typeof RcTypography>;\n\nconst ShowForKnowButtonMargin = styled.div`\n  background: ${palette2('neutral', 'f06')};\n  color: ${palette2('neutral', 'f01')};\n`;\n\nexport const Typography: Story<TypographyProps> = ({\n  children,\n  variant,\n  ...args\n}) => {\n  switchToControlKnobs();\n  const ref = useRef();\n\n  useEffect(() => {\n    console.log(ref);\n  }, []);\n\n  return (\n    <>\n      <br />\n      <br />\n      <div style={{ maxWidth: 800 }}>\n        <RcTypography ref={ref} variant={variant} {...args}>\n          Current variant: {variant}\n          <br />\n          {children}\n        </RcTypography>\n      </div>\n      <ShowForKnowButtonMargin>\n        <RcTypography\n          align=\"center\"\n          display=\"block\"\n          title=\"this is useRcTooltip\"\n          useRcTooltip\n        >\n          Show for you know bottom margin, when you use props\n        </RcTypography>\n        <RcTypography align=\"center\" color=\"highlight.f02\" display=\"block\">\n          paragraph: 0.35em\n        </RcTypography>\n        <RcTypography align=\"center\" color=\"highlight.f02\" display=\"block\">\n          gutterBottom: 16px\n        </RcTypography>\n      </ShowForKnowButtonMargin>\n    </>\n  );\n};\n\nTypography.args = {\n  children:\n    'Typography component provides you can use Juno font style with our token, make all font in your app to be uniform',\n};\n\nTypography.parameters = {\n  tags: [\n    {\n      name: 'Mui',\n      href: 'https://material-ui.com/components/typography/#typography',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\n\\nimport { Story } from '@storybook/react';\\n\\nimport styled from '../../../foundation/styled-components';\\nimport { RcDivider } from '../../Divider';\\nimport { RcPaper } from '../../Paper';\\nimport { RcTypography, RcTypographyVariant } from '../Typography';\\n\\nexport default {\\n  title: '🔧 Foundation/Typography List',\\n};\\n\\nconst variants: RcTypographyVariant[] = [\\n  'display4',\\n  'display3',\\n  'display2',\\n  'display1',\\n  'headline2',\\n  'headline1',\\n  'title2',\\n  'title1',\\n  'subheading2',\\n  'subheading1',\\n  'body2',\\n  'body1',\\n  'caption2',\\n  'caption1',\\n  'inherit',\\n];\\n\\nconst Text = styled(RcTypography)`\\n  margin-bottom: 1rem;\\n  flex: 2 1 0;\\n`;\\n\\nconst Attribute = styled(RcTypography)`\\n  flex: 1 1 0;\\n`;\\n\\nconst StyledContainer = styled.div`\\n  display: flex;\\n  align-items: baseline;\\n  justify-content: space-between;\\n  margin-top: 1rem;\\n`;\\n\\nclass TypographyShow extends React.PureComponent<{ variant: string }> {\\n  text: React.RefObject<any>;\\n\\n  state: any;\\n\\n  constructor(props: any) {\\n    super(props);\\n    this.text = React.createRef();\\n    this.state = {};\\n  }\\n\\n  componentDidMount() {\\n    const isTestEnv = (window as any).TEST_ENV;\\n    if (isTestEnv) {\\n      return;\\n    }\\n    const { fontSize, fontWeight, lineHeight } = window.getComputedStyle(\\n      this.text.current,\\n    );\\n    this.setState({\\n      fontSize,\\n      fontWeight,\\n      lineHeight,\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <StyledContainer>\\n        <Text ref={this.text} variant={this.props.variant as any}>\\n          {this.props.variant}\\n        </Text>\\n        <Attribute>{this.state.fontWeight}</Attribute>\\n        <Attribute>{this.state.fontSize}</Attribute>\\n        <Attribute>{this.state.lineHeight}</Attribute>\\n      </StyledContainer>\\n    );\\n  }\\n}\\n\\nexport const Typography: Story = () => (\\n  <RcPaper\\n    style={{\\n      padding: '4rem',\\n      width: '1000px',\\n    }}\\n  >\\n    <StyledContainer>\\n      <Text variant={'caption1'}>Name/TypeFace</Text>\\n      <Attribute>font weight</Attribute>\\n      <Attribute>font size</Attribute>\\n      <Attribute>line height</Attribute>\\n    </StyledContainer>\\n    <RcDivider />\\n    {variants.map((variant) => (\\n      <React.Fragment key={variant}>\\n        <TypographyShow variant={variant}>{variant}</TypographyShow>\\n        <RcDivider />\\n      </React.Fragment>\\n    ))}\\n  </RcPaper>\\n);\\n\\nTypography.storyName = 'Typography List';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Typography\":{\"startLoc\":{\"col\":33,\"line\":88},\"endLoc\":{\"col\":1,\"line\":109},\"startBody\":{\"col\":33,\"line\":88},\"endBody\":{\"col\":1,\"line\":109}}};\n    \nimport React from 'react';\n\nimport { Story } from '@storybook/react';\n\nimport styled from '../../../foundation/styled-components';\nimport { RcDivider } from '../../Divider';\nimport { RcPaper } from '../../Paper';\nimport { RcTypography, RcTypographyVariant } from '../Typography';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport { Story } from '@storybook/react';\\n\\nimport styled from '../../../foundation/styled-components';\\nimport { RcDivider } from '../../Divider';\\nimport { RcPaper } from '../../Paper';\\nimport { RcTypography, RcTypographyVariant } from '../Typography';\\n\\nexport default {\\n  title: '🔧 Foundation/Typography List',\\n};\\n\\nconst variants: RcTypographyVariant[] = [\\n  'display4',\\n  'display3',\\n  'display2',\\n  'display1',\\n  'headline2',\\n  'headline1',\\n  'title2',\\n  'title1',\\n  'subheading2',\\n  'subheading1',\\n  'body2',\\n  'body1',\\n  'caption2',\\n  'caption1',\\n  'inherit',\\n];\\n\\nconst Text = styled(RcTypography)`\\n  margin-bottom: 1rem;\\n  flex: 2 1 0;\\n`;\\n\\nconst Attribute = styled(RcTypography)`\\n  flex: 1 1 0;\\n`;\\n\\nconst StyledContainer = styled.div`\\n  display: flex;\\n  align-items: baseline;\\n  justify-content: space-between;\\n  margin-top: 1rem;\\n`;\\n\\nclass TypographyShow extends React.PureComponent<{ variant: string }> {\\n  text: React.RefObject<any>;\\n\\n  state: any;\\n\\n  constructor(props: any) {\\n    super(props);\\n    this.text = React.createRef();\\n    this.state = {};\\n  }\\n\\n  componentDidMount() {\\n    const isTestEnv = (window as any).TEST_ENV;\\n    if (isTestEnv) {\\n      return;\\n    }\\n    const { fontSize, fontWeight, lineHeight } = window.getComputedStyle(\\n      this.text.current,\\n    );\\n    this.setState({\\n      fontSize,\\n      fontWeight,\\n      lineHeight,\\n    });\\n  }\\n\\n  render() {\\n    return (\\n      <StyledContainer>\\n        <Text ref={this.text} variant={this.props.variant as any}>\\n          {this.props.variant}\\n        </Text>\\n        <Attribute>{this.state.fontWeight}</Attribute>\\n        <Attribute>{this.state.fontSize}</Attribute>\\n        <Attribute>{this.state.lineHeight}</Attribute>\\n      </StyledContainer>\\n    );\\n  }\\n}\\n\\nexport const Typography: Story = () => (\\n  <RcPaper\\n    style={{\\n      padding: '4rem',\\n      width: '1000px',\\n    }}\\n  >\\n    <StyledContainer>\\n      <Text variant={'caption1'}>Name/TypeFace</Text>\\n      <Attribute>font weight</Attribute>\\n      <Attribute>font size</Attribute>\\n      <Attribute>line height</Attribute>\\n    </StyledContainer>\\n    <RcDivider />\\n    {variants.map((variant) => (\\n      <React.Fragment key={variant}>\\n        <TypographyShow variant={variant}>{variant}</TypographyShow>\\n        <RcDivider />\\n      </React.Fragment>\\n    ))}\\n  </RcPaper>\\n);\\n\\nTypography.storyName = 'Typography List';\\n\",\"locationsMap\":{\"typography\":{\"startLoc\":{\"col\":33,\"line\":88},\"endLoc\":{\"col\":1,\"line\":109},\"startBody\":{\"col\":33,\"line\":88},\"endBody\":{\"col\":1,\"line\":109}}}},},\n  title: '🔧 Foundation/Typography List',\n};\n\nconst variants: RcTypographyVariant[] = [\n  'display4',\n  'display3',\n  'display2',\n  'display1',\n  'headline2',\n  'headline1',\n  'title2',\n  'title1',\n  'subheading2',\n  'subheading1',\n  'body2',\n  'body1',\n  'caption2',\n  'caption1',\n  'inherit',\n];\n\nconst Text = styled(RcTypography)`\n  margin-bottom: 1rem;\n  flex: 2 1 0;\n`;\n\nconst Attribute = styled(RcTypography)`\n  flex: 1 1 0;\n`;\n\nconst StyledContainer = styled.div`\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n  margin-top: 1rem;\n`;\n\nclass TypographyShow extends React.PureComponent<{ variant: string }> {\n  text: React.RefObject<any>;\n\n  state: any;\n\n  constructor(props: any) {\n    super(props);\n    this.text = React.createRef();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const isTestEnv = (window as any).TEST_ENV;\n    if (isTestEnv) {\n      return;\n    }\n    const { fontSize, fontWeight, lineHeight } = window.getComputedStyle(\n      this.text.current,\n    );\n    this.setState({\n      fontSize,\n      fontWeight,\n      lineHeight,\n    });\n  }\n\n  render() {\n    return (\n      <StyledContainer>\n        <Text ref={this.text} variant={this.props.variant as any}>\n          {this.props.variant}\n        </Text>\n        <Attribute>{this.state.fontWeight}</Attribute>\n        <Attribute>{this.state.fontSize}</Attribute>\n        <Attribute>{this.state.lineHeight}</Attribute>\n      </StyledContainer>\n    );\n  }\n}\n\nexport const Typography: Story = () => (\n  <RcPaper\n    style={{\n      padding: '4rem',\n      width: '1000px',\n    }}\n  >\n    <StyledContainer>\n      <Text variant={'caption1'}>Name/TypeFace</Text>\n      <Attribute>font weight</Attribute>\n      <Attribute>font size</Attribute>\n      <Attribute>line height</Attribute>\n    </StyledContainer>\n    <RcDivider />\n    {variants.map((variant) => (\n      <React.Fragment key={variant}>\n        <TypographyShow variant={variant}>{variant}</TypographyShow>\n        <RcDivider />\n      </React.Fragment>\n    ))}\n  </RcPaper>\n);\n\nTypography.storyName = 'Typography List';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useCallback, useMemo, useState } from 'react';\\n\\nimport { Story } from '@storybook/react';\\n\\nimport { RcBox } from '../../components/Box';\\nimport { RcTextField } from '../../components/Forms/TextField';\\nimport { RcTypography } from '../../components/Typography';\\nimport { isValidPalettes } from '../../storybook';\\nimport styled, { useTheme } from '../styled-components';\\nimport { radius, spacing } from '../styles';\\n\\nexport default {\\n  title: '🔧 Foundation/Palette',\\n};\\n\\nconst titleVariants: any[] = ['display1', 'headline1'];\\n\\nconst Container = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n  height: calc(100vh - 40px - 0.7rem);\\n`;\\n\\nconst itemWidth = '245px';\\n\\nconst Wrapper = styled.div`\\n  display: inline-flex;\\n  flex: 1 1 ${itemWidth};\\n  max-width: ${itemWidth};\\n  min-width: ${itemWidth};\\n  padding: 1%;\\n  box-sizing: border-box;\\n`;\\n\\nconst ColorWrapper = styled.div`\\n  margin: ${spacing(4)};\\n`;\\n\\nconst ColorDiv = styled.div<{ color: string }>`\\n  background: ${({ color }) => color};\\n  width: 48px;\\n  height: 48px;\\n  border-radius: ${radius('md')};\\n  display: inline-block;\\n`;\\n\\nconst InfoWrapper = styled.div`\\n  margin-left: ${spacing(2)};\\n`;\\n\\nconst getColorArr = (\\n  parent: any,\\n  parentKey = '',\\n  layer = 0,\\n  searchText: string,\\n) => {\\n  const renderArr: any[] = [];\\n  Object.entries<string>(parent).forEach(([key, value]) => {\\n    const type = typeof value;\\n\\n    switch (type) {\\n      case 'string':\\n        {\\n          const itemKey = parentKey ? `${parentKey}.${key}` : key;\\n\\n          const _searchText = searchText.toLocaleLowerCase();\\n\\n          if (\\n            !isValidPalettes(itemKey) ||\\n            (searchText &&\\n              !(\\n                itemKey.toLocaleLowerCase().includes(_searchText) ||\\n                value.toLocaleLowerCase().includes(_searchText)\\n              ))\\n          ) {\\n            return;\\n          }\\n\\n          const item = (\\n            <Wrapper key={itemKey}>\\n              <ColorDiv color={value as string} />\\n              <InfoWrapper>\\n                <RcTypography color=\\\"neutral.f06\\\">{itemKey}</RcTypography>\\n                <RcTypography color=\\\"neutral.f05\\\">{value}</RcTypography>\\n              </InfoWrapper>\\n            </Wrapper>\\n          );\\n\\n          // * when layer is zero and that is string, add title first\\n          if (layer === 0) {\\n            renderArr.push(\\n              <RcTypography\\n                color=\\\"neutral.f06\\\"\\n                key={`${itemKey}_title`}\\n                variant={titleVariants[layer]}\\n              >\\n                {itemKey}\\n              </RcTypography>,\\n              <ColorWrapper key={`${itemKey}wrapper`}>{item}</ColorWrapper>,\\n            );\\n            break;\\n          }\\n\\n          renderArr.push(item);\\n        }\\n        break;\\n      case 'object':\\n        {\\n          const renderValue = `${parentKey}${parentKey ? '.' : ''}${key}`;\\n\\n          const items = getColorArr(value, key, layer + 1, searchText);\\n\\n          if (items.length > 0) {\\n            renderArr.push(\\n              <RcTypography\\n                color=\\\"neutral.f06\\\"\\n                key={renderValue}\\n                variant={titleVariants[layer]}\\n              >\\n                {renderValue}\\n              </RcTypography>,\\n            );\\n            renderArr.push(\\n              <ColorWrapper key={`${renderValue}wrapper`}>\\n                {items}\\n              </ColorWrapper>,\\n            );\\n          }\\n        }\\n        break;\\n      default:\\n        break;\\n    }\\n  });\\n  return renderArr;\\n};\\n\\nexport const Palette: Story = () => {\\n  const [filterText, setFilterText] = useState('');\\n\\n  const { palette } = useTheme();\\n\\n  const colorItems = useMemo(() => {\\n    return getColorArr(palette, undefined, undefined, filterText);\\n  }, [filterText, palette]);\\n\\n  const onChange = useCallback(\\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\\n      setFilterText(e.target.value);\\n    },\\n    [],\\n  );\\n\\n  return (\\n    <>\\n      <Container>\\n        <RcTextField\\n          value={filterText}\\n          variant=\\\"outline\\\"\\n          gutterBottom\\n          fullWidth\\n          placeholder=\\\"Search color token or color value\\\"\\n          onChange={onChange}\\n        />\\n        <RcBox flex=\\\"1 1 auto\\\" overflow=\\\"auto\\\">\\n          {colorItems}\\n        </RcBox>\\n      </Container>\\n    </>\\n  );\\n};\\n\\nPalette.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'Token Sheet',\\n      href: 'https://docs.google.com/spreadsheets/d/1eGJAib2seE1AMIReWVtbGJAhQppQNVfU49rct8a6CKk/edit#gid=0',\\n    },\\n    {\\n      name: 'Source',\\n      value: 'New vs Old',\\n      href: 'https://docs.google.com/spreadsheets/d/1BYZUI2aDwLyvizO45tpQNylpVpMIkmeWLSz4geeuTP0/edit#gid=360032390',\\n      color: 'highlight.b03',\\n    },\\n    {\\n      name: 'Source',\\n      value: 'Wiki',\\n      href: 'https://wiki.ringcentral.com/pages/viewpage.action?pageId=424536658',\\n      color: 'content.brand',\\n    },\\n  ],\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Palette\":{\"startLoc\":{\"col\":30,\"line\":138},\"endLoc\":{\"col\":1,\"line\":171},\"startBody\":{\"col\":30,\"line\":138},\"endBody\":{\"col\":1,\"line\":171}}};\n    \nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { Story } from '@storybook/react';\n\nimport { RcBox } from '../../components/Box';\nimport { RcTextField } from '../../components/Forms/TextField';\nimport { RcTypography } from '../../components/Typography';\nimport { isValidPalettes } from '../../storybook';\nimport styled, { useTheme } from '../styled-components';\nimport { radius, spacing } from '../styles';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useCallback, useMemo, useState } from 'react';\\n\\nimport { Story } from '@storybook/react';\\n\\nimport { RcBox } from '../../components/Box';\\nimport { RcTextField } from '../../components/Forms/TextField';\\nimport { RcTypography } from '../../components/Typography';\\nimport { isValidPalettes } from '../../storybook';\\nimport styled, { useTheme } from '../styled-components';\\nimport { radius, spacing } from '../styles';\\n\\nexport default {\\n  title: '🔧 Foundation/Palette',\\n};\\n\\nconst titleVariants: any[] = ['display1', 'headline1'];\\n\\nconst Container = styled.div`\\n  display: flex;\\n  flex-direction: column;\\n  height: calc(100vh - 40px - 0.7rem);\\n`;\\n\\nconst itemWidth = '245px';\\n\\nconst Wrapper = styled.div`\\n  display: inline-flex;\\n  flex: 1 1 ${itemWidth};\\n  max-width: ${itemWidth};\\n  min-width: ${itemWidth};\\n  padding: 1%;\\n  box-sizing: border-box;\\n`;\\n\\nconst ColorWrapper = styled.div`\\n  margin: ${spacing(4)};\\n`;\\n\\nconst ColorDiv = styled.div<{ color: string }>`\\n  background: ${({ color }) => color};\\n  width: 48px;\\n  height: 48px;\\n  border-radius: ${radius('md')};\\n  display: inline-block;\\n`;\\n\\nconst InfoWrapper = styled.div`\\n  margin-left: ${spacing(2)};\\n`;\\n\\nconst getColorArr = (\\n  parent: any,\\n  parentKey = '',\\n  layer = 0,\\n  searchText: string,\\n) => {\\n  const renderArr: any[] = [];\\n  Object.entries<string>(parent).forEach(([key, value]) => {\\n    const type = typeof value;\\n\\n    switch (type) {\\n      case 'string':\\n        {\\n          const itemKey = parentKey ? `${parentKey}.${key}` : key;\\n\\n          const _searchText = searchText.toLocaleLowerCase();\\n\\n          if (\\n            !isValidPalettes(itemKey) ||\\n            (searchText &&\\n              !(\\n                itemKey.toLocaleLowerCase().includes(_searchText) ||\\n                value.toLocaleLowerCase().includes(_searchText)\\n              ))\\n          ) {\\n            return;\\n          }\\n\\n          const item = (\\n            <Wrapper key={itemKey}>\\n              <ColorDiv color={value as string} />\\n              <InfoWrapper>\\n                <RcTypography color=\\\"neutral.f06\\\">{itemKey}</RcTypography>\\n                <RcTypography color=\\\"neutral.f05\\\">{value}</RcTypography>\\n              </InfoWrapper>\\n            </Wrapper>\\n          );\\n\\n          // * when layer is zero and that is string, add title first\\n          if (layer === 0) {\\n            renderArr.push(\\n              <RcTypography\\n                color=\\\"neutral.f06\\\"\\n                key={`${itemKey}_title`}\\n                variant={titleVariants[layer]}\\n              >\\n                {itemKey}\\n              </RcTypography>,\\n              <ColorWrapper key={`${itemKey}wrapper`}>{item}</ColorWrapper>,\\n            );\\n            break;\\n          }\\n\\n          renderArr.push(item);\\n        }\\n        break;\\n      case 'object':\\n        {\\n          const renderValue = `${parentKey}${parentKey ? '.' : ''}${key}`;\\n\\n          const items = getColorArr(value, key, layer + 1, searchText);\\n\\n          if (items.length > 0) {\\n            renderArr.push(\\n              <RcTypography\\n                color=\\\"neutral.f06\\\"\\n                key={renderValue}\\n                variant={titleVariants[layer]}\\n              >\\n                {renderValue}\\n              </RcTypography>,\\n            );\\n            renderArr.push(\\n              <ColorWrapper key={`${renderValue}wrapper`}>\\n                {items}\\n              </ColorWrapper>,\\n            );\\n          }\\n        }\\n        break;\\n      default:\\n        break;\\n    }\\n  });\\n  return renderArr;\\n};\\n\\nexport const Palette: Story = () => {\\n  const [filterText, setFilterText] = useState('');\\n\\n  const { palette } = useTheme();\\n\\n  const colorItems = useMemo(() => {\\n    return getColorArr(palette, undefined, undefined, filterText);\\n  }, [filterText, palette]);\\n\\n  const onChange = useCallback(\\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\\n      setFilterText(e.target.value);\\n    },\\n    [],\\n  );\\n\\n  return (\\n    <>\\n      <Container>\\n        <RcTextField\\n          value={filterText}\\n          variant=\\\"outline\\\"\\n          gutterBottom\\n          fullWidth\\n          placeholder=\\\"Search color token or color value\\\"\\n          onChange={onChange}\\n        />\\n        <RcBox flex=\\\"1 1 auto\\\" overflow=\\\"auto\\\">\\n          {colorItems}\\n        </RcBox>\\n      </Container>\\n    </>\\n  );\\n};\\n\\nPalette.parameters = {\\n  tags: [\\n    {\\n      name: 'Source',\\n      value: 'Token Sheet',\\n      href: 'https://docs.google.com/spreadsheets/d/1eGJAib2seE1AMIReWVtbGJAhQppQNVfU49rct8a6CKk/edit#gid=0',\\n    },\\n    {\\n      name: 'Source',\\n      value: 'New vs Old',\\n      href: 'https://docs.google.com/spreadsheets/d/1BYZUI2aDwLyvizO45tpQNylpVpMIkmeWLSz4geeuTP0/edit#gid=360032390',\\n      color: 'highlight.b03',\\n    },\\n    {\\n      name: 'Source',\\n      value: 'Wiki',\\n      href: 'https://wiki.ringcentral.com/pages/viewpage.action?pageId=424536658',\\n      color: 'content.brand',\\n    },\\n  ],\\n};\\n\",\"locationsMap\":{\"palette\":{\"startLoc\":{\"col\":30,\"line\":138},\"endLoc\":{\"col\":1,\"line\":171},\"startBody\":{\"col\":30,\"line\":138},\"endBody\":{\"col\":1,\"line\":171}}}},},\n  title: '🔧 Foundation/Palette',\n};\n\nconst titleVariants: any[] = ['display1', 'headline1'];\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: calc(100vh - 40px - 0.7rem);\n`;\n\nconst itemWidth = '245px';\n\nconst Wrapper = styled.div`\n  display: inline-flex;\n  flex: 1 1 ${itemWidth};\n  max-width: ${itemWidth};\n  min-width: ${itemWidth};\n  padding: 1%;\n  box-sizing: border-box;\n`;\n\nconst ColorWrapper = styled.div`\n  margin: ${spacing(4)};\n`;\n\nconst ColorDiv = styled.div<{ color: string }>`\n  background: ${({ color }) => color};\n  width: 48px;\n  height: 48px;\n  border-radius: ${radius('md')};\n  display: inline-block;\n`;\n\nconst InfoWrapper = styled.div`\n  margin-left: ${spacing(2)};\n`;\n\nconst getColorArr = (\n  parent: any,\n  parentKey = '',\n  layer = 0,\n  searchText: string,\n) => {\n  const renderArr: any[] = [];\n  Object.entries<string>(parent).forEach(([key, value]) => {\n    const type = typeof value;\n\n    switch (type) {\n      case 'string':\n        {\n          const itemKey = parentKey ? `${parentKey}.${key}` : key;\n\n          const _searchText = searchText.toLocaleLowerCase();\n\n          if (\n            !isValidPalettes(itemKey) ||\n            (searchText &&\n              !(\n                itemKey.toLocaleLowerCase().includes(_searchText) ||\n                value.toLocaleLowerCase().includes(_searchText)\n              ))\n          ) {\n            return;\n          }\n\n          const item = (\n            <Wrapper key={itemKey}>\n              <ColorDiv color={value as string} />\n              <InfoWrapper>\n                <RcTypography color=\"neutral.f06\">{itemKey}</RcTypography>\n                <RcTypography color=\"neutral.f05\">{value}</RcTypography>\n              </InfoWrapper>\n            </Wrapper>\n          );\n\n          // * when layer is zero and that is string, add title first\n          if (layer === 0) {\n            renderArr.push(\n              <RcTypography\n                color=\"neutral.f06\"\n                key={`${itemKey}_title`}\n                variant={titleVariants[layer]}\n              >\n                {itemKey}\n              </RcTypography>,\n              <ColorWrapper key={`${itemKey}wrapper`}>{item}</ColorWrapper>,\n            );\n            break;\n          }\n\n          renderArr.push(item);\n        }\n        break;\n      case 'object':\n        {\n          const renderValue = `${parentKey}${parentKey ? '.' : ''}${key}`;\n\n          const items = getColorArr(value, key, layer + 1, searchText);\n\n          if (items.length > 0) {\n            renderArr.push(\n              <RcTypography\n                color=\"neutral.f06\"\n                key={renderValue}\n                variant={titleVariants[layer]}\n              >\n                {renderValue}\n              </RcTypography>,\n            );\n            renderArr.push(\n              <ColorWrapper key={`${renderValue}wrapper`}>\n                {items}\n              </ColorWrapper>,\n            );\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  });\n  return renderArr;\n};\n\nexport const Palette: Story = () => {\n  const [filterText, setFilterText] = useState('');\n\n  const { palette } = useTheme();\n\n  const colorItems = useMemo(() => {\n    return getColorArr(palette, undefined, undefined, filterText);\n  }, [filterText, palette]);\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>): void => {\n      setFilterText(e.target.value);\n    },\n    [],\n  );\n\n  return (\n    <>\n      <Container>\n        <RcTextField\n          value={filterText}\n          variant=\"outline\"\n          gutterBottom\n          fullWidth\n          placeholder=\"Search color token or color value\"\n          onChange={onChange}\n        />\n        <RcBox flex=\"1 1 auto\" overflow=\"auto\">\n          {colorItems}\n        </RcBox>\n      </Container>\n    </>\n  );\n};\n\nPalette.parameters = {\n  tags: [\n    {\n      name: 'Source',\n      value: 'Token Sheet',\n      href: 'https://docs.google.com/spreadsheets/d/1eGJAib2seE1AMIReWVtbGJAhQppQNVfU49rct8a6CKk/edit#gid=0',\n    },\n    {\n      name: 'Source',\n      value: 'New vs Old',\n      href: 'https://docs.google.com/spreadsheets/d/1BYZUI2aDwLyvizO45tpQNylpVpMIkmeWLSz4geeuTP0/edit#gid=360032390',\n      color: 'highlight.b03',\n    },\n    {\n      name: 'Source',\n      value: 'Wiki',\n      href: 'https://wiki.ringcentral.com/pages/viewpage.action?pageId=424536658',\n      color: 'content.brand',\n    },\n  ],\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\n\\nimport { RcGrid, RcTypography } from '../../components';\\nimport styled, { css } from '../styled-components';\\nimport { spacing } from '../styles';\\n\\nexport default {\\n  title: '🔧 Foundation/Spacing',\\n};\\n\\nconst items = [\\n  {\\n    color: '#ef99b7',\\n    count: 1,\\n  },\\n  {\\n    color: '#79ecfa',\\n    count: 2,\\n  },\\n  {\\n    color: '#e479f7',\\n    count: 3,\\n  },\\n  {\\n    color: '#f8a58b',\\n    count: 4,\\n  },\\n  {\\n    color: '#91a0f9',\\n    count: 5,\\n  },\\n  {\\n    color: '#f9cf7a',\\n    count: 6,\\n  },\\n  {\\n    color: '#79d7e4',\\n    count: 8,\\n  },\\n  {\\n    color: '#79c4be',\\n    count: 10,\\n  },\\n  {\\n    color: '#a88ec9',\\n    count: 12,\\n  },\\n];\\n\\ntype SpaceItemProps = { vertical?: boolean } & typeof items[number];\\n\\nconst defaultSize = '100px';\\n\\nconst SpaceItem = styled.div<SpaceItemProps>`\\n  background: ${({ color }) => color};\\n  ${({ vertical, count }) => {\\n    if (vertical) {\\n      return css`\\n        width: ${defaultSize};\\n        height: ${spacing(count)};\\n      `;\\n    }\\n    return css`\\n      margin-right: 30px;\\n      width: ${spacing(count)};\\n      height: ${defaultSize};\\n    `;\\n  }}\\n`;\\n\\nconst FlexContainer = styled.div`\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: 15px;\\n  span {\\n    margin-left: 10px;\\n  }\\n`;\\n\\nexport const Spacing = () => {\\n  return (\\n    <RcGrid container>\\n      <RcGrid item xs={4}>\\n        {items.map((item) => {\\n          return (\\n            <FlexContainer key={item.color}>\\n              <SpaceItem {...item} vertical />\\n              <span>\\n                <RcTypography color=\\\"neutral.b06\\\">\\n                  spacing({item.count})\\n                </RcTypography>\\n                <RcTypography color=\\\"neutral.f04\\\">\\n                  {item.count * 4}px\\n                </RcTypography>\\n              </span>\\n            </FlexContainer>\\n          );\\n        })}\\n      </RcGrid>\\n      <RcGrid item xs={8}>\\n        <FlexContainer>\\n          {items.map((item) => {\\n            return <SpaceItem key={item.color} {...item} />;\\n          })}\\n        </FlexContainer>\\n      </RcGrid>\\n    </RcGrid>\\n  );\\n};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Spacing\":{\"startLoc\":{\"col\":23,\"line\":80},\"endLoc\":{\"col\":1,\"line\":109},\"startBody\":{\"col\":23,\"line\":80},\"endBody\":{\"col\":1,\"line\":109}}};\n    \nimport React from 'react';\n\nimport { RcGrid, RcTypography } from '../../components';\nimport styled, { css } from '../styled-components';\nimport { spacing } from '../styles';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport { RcGrid, RcTypography } from '../../components';\\nimport styled, { css } from '../styled-components';\\nimport { spacing } from '../styles';\\n\\nexport default {\\n  title: '🔧 Foundation/Spacing',\\n};\\n\\nconst items = [\\n  {\\n    color: '#ef99b7',\\n    count: 1,\\n  },\\n  {\\n    color: '#79ecfa',\\n    count: 2,\\n  },\\n  {\\n    color: '#e479f7',\\n    count: 3,\\n  },\\n  {\\n    color: '#f8a58b',\\n    count: 4,\\n  },\\n  {\\n    color: '#91a0f9',\\n    count: 5,\\n  },\\n  {\\n    color: '#f9cf7a',\\n    count: 6,\\n  },\\n  {\\n    color: '#79d7e4',\\n    count: 8,\\n  },\\n  {\\n    color: '#79c4be',\\n    count: 10,\\n  },\\n  {\\n    color: '#a88ec9',\\n    count: 12,\\n  },\\n];\\n\\ntype SpaceItemProps = { vertical?: boolean } & typeof items[number];\\n\\nconst defaultSize = '100px';\\n\\nconst SpaceItem = styled.div<SpaceItemProps>`\\n  background: ${({ color }) => color};\\n  ${({ vertical, count }) => {\\n    if (vertical) {\\n      return css`\\n        width: ${defaultSize};\\n        height: ${spacing(count)};\\n      `;\\n    }\\n    return css`\\n      margin-right: 30px;\\n      width: ${spacing(count)};\\n      height: ${defaultSize};\\n    `;\\n  }}\\n`;\\n\\nconst FlexContainer = styled.div`\\n  display: flex;\\n  align-items: center;\\n  margin-bottom: 15px;\\n  span {\\n    margin-left: 10px;\\n  }\\n`;\\n\\nexport const Spacing = () => {\\n  return (\\n    <RcGrid container>\\n      <RcGrid item xs={4}>\\n        {items.map((item) => {\\n          return (\\n            <FlexContainer key={item.color}>\\n              <SpaceItem {...item} vertical />\\n              <span>\\n                <RcTypography color=\\\"neutral.b06\\\">\\n                  spacing({item.count})\\n                </RcTypography>\\n                <RcTypography color=\\\"neutral.f04\\\">\\n                  {item.count * 4}px\\n                </RcTypography>\\n              </span>\\n            </FlexContainer>\\n          );\\n        })}\\n      </RcGrid>\\n      <RcGrid item xs={8}>\\n        <FlexContainer>\\n          {items.map((item) => {\\n            return <SpaceItem key={item.color} {...item} />;\\n          })}\\n        </FlexContainer>\\n      </RcGrid>\\n    </RcGrid>\\n  );\\n};\\n\",\"locationsMap\":{\"spacing\":{\"startLoc\":{\"col\":23,\"line\":80},\"endLoc\":{\"col\":1,\"line\":109},\"startBody\":{\"col\":23,\"line\":80},\"endBody\":{\"col\":1,\"line\":109}}}},},\n  title: '🔧 Foundation/Spacing',\n};\n\nconst items = [\n  {\n    color: '#ef99b7',\n    count: 1,\n  },\n  {\n    color: '#79ecfa',\n    count: 2,\n  },\n  {\n    color: '#e479f7',\n    count: 3,\n  },\n  {\n    color: '#f8a58b',\n    count: 4,\n  },\n  {\n    color: '#91a0f9',\n    count: 5,\n  },\n  {\n    color: '#f9cf7a',\n    count: 6,\n  },\n  {\n    color: '#79d7e4',\n    count: 8,\n  },\n  {\n    color: '#79c4be',\n    count: 10,\n  },\n  {\n    color: '#a88ec9',\n    count: 12,\n  },\n];\n\ntype SpaceItemProps = { vertical?: boolean } & typeof items[number];\n\nconst defaultSize = '100px';\n\nconst SpaceItem = styled.div<SpaceItemProps>`\n  background: ${({ color }) => color};\n  ${({ vertical, count }) => {\n    if (vertical) {\n      return css`\n        width: ${defaultSize};\n        height: ${spacing(count)};\n      `;\n    }\n    return css`\n      margin-right: 30px;\n      width: ${spacing(count)};\n      height: ${defaultSize};\n    `;\n  }}\n`;\n\nconst FlexContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 15px;\n  span {\n    margin-left: 10px;\n  }\n`;\n\nexport const Spacing = () => {\n  return (\n    <RcGrid container>\n      <RcGrid item xs={4}>\n        {items.map((item) => {\n          return (\n            <FlexContainer key={item.color}>\n              <SpaceItem {...item} vertical />\n              <span>\n                <RcTypography color=\"neutral.b06\">\n                  spacing({item.count})\n                </RcTypography>\n                <RcTypography color=\"neutral.f04\">\n                  {item.count * 4}px\n                </RcTypography>\n              </span>\n            </FlexContainer>\n          );\n        })}\n      </RcGrid>\n      <RcGrid item xs={8}>\n        <FlexContainer>\n          {items.map((item) => {\n            return <SpaceItem key={item.color} {...item} />;\n          })}\n        </FlexContainer>\n      </RcGrid>\n    </RcGrid>\n  );\n};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcButton } from '../../../../components/Buttons';\\nimport { RcResponsive } from '../../../../components/Responsive';\\nimport { RcTypography } from '../../../../components/Typography';\\nimport { switchToControlKnobs } from '../../../../storybook';\\nimport styled from '../../../styled-components';\\nimport { withResponsive } from '../withResponsive';\\n\\nexport default {\\n  title: '🔧 Foundation/HoC/withResponsive',\\n} as Meta;\\n\\nconst ResizeWrapper = styled.div`\\n  width: 1200px;\\n  height: 300px;\\n  resize: horizontal;\\n  border-style: solid;\\n  border-color: black;\\n  border-width: 2px;\\n  overflow: hidden;\\n`;\\n\\nconst ResponsiveButton = withResponsive(RcButton, ['size']);\\n\\nexport const WithResponsive: Story = () => {\\n  switchToControlKnobs();\\n  const ref = useRef<HTMLDivElement>(null);\\n  return (\\n    <>\\n      <RcTypography color=\\\"danger.f02\\\">\\n        If you want to make duplicate component can responsive size such as\\n        listItemActions, this hook is better than 'withResponsive'. Because\\n        there is no need to double count the matched size\\n      </RcTypography>\\n      <RcResponsive responsiveTarget={ref}>\\n        <ResizeWrapper ref={ref}>\\n          <RcTypography>\\n            lg: 'large', md: 'medium', sm: 'small', xs: hidden,\\n          </RcTypography>\\n          <ResponsiveButton\\n            hiddenPatterns={'xs'}\\n            size={['medium.md', 'small.sm', 'large.lg']}\\n          >\\n            resize\\n          </ResponsiveButton>\\n        </ResizeWrapper>\\n      </RcResponsive>\\n    </>\\n  );\\n};\\n\\nWithResponsive.storyName = 'withResponsive';\\n\\nWithResponsive.args = {};\\n\\nWithResponsive.argTypes = {};\\n\\nWithResponsive.parameters = {};\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"WithResponsive\":{\"startLoc\":{\"col\":37,\"line\":28},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":37,\"line\":28},\"endBody\":{\"col\":1,\"line\":53}}};\n    \nimport React, { useRef } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { RcButton } from '../../../../components/Buttons';\nimport { RcResponsive } from '../../../../components/Responsive';\nimport { RcTypography } from '../../../../components/Typography';\nimport { switchToControlKnobs } from '../../../../storybook';\nimport styled from '../../../styled-components';\nimport { withResponsive } from '../withResponsive';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcButton } from '../../../../components/Buttons';\\nimport { RcResponsive } from '../../../../components/Responsive';\\nimport { RcTypography } from '../../../../components/Typography';\\nimport { switchToControlKnobs } from '../../../../storybook';\\nimport styled from '../../../styled-components';\\nimport { withResponsive } from '../withResponsive';\\n\\nexport default {\\n  title: '🔧 Foundation/HoC/withResponsive',\\n} as Meta;\\n\\nconst ResizeWrapper = styled.div`\\n  width: 1200px;\\n  height: 300px;\\n  resize: horizontal;\\n  border-style: solid;\\n  border-color: black;\\n  border-width: 2px;\\n  overflow: hidden;\\n`;\\n\\nconst ResponsiveButton = withResponsive(RcButton, ['size']);\\n\\nexport const WithResponsive: Story = () => {\\n  switchToControlKnobs();\\n  const ref = useRef<HTMLDivElement>(null);\\n  return (\\n    <>\\n      <RcTypography color=\\\"danger.f02\\\">\\n        If you want to make duplicate component can responsive size such as\\n        listItemActions, this hook is better than 'withResponsive'. Because\\n        there is no need to double count the matched size\\n      </RcTypography>\\n      <RcResponsive responsiveTarget={ref}>\\n        <ResizeWrapper ref={ref}>\\n          <RcTypography>\\n            lg: 'large', md: 'medium', sm: 'small', xs: hidden,\\n          </RcTypography>\\n          <ResponsiveButton\\n            hiddenPatterns={'xs'}\\n            size={['medium.md', 'small.sm', 'large.lg']}\\n          >\\n            resize\\n          </ResponsiveButton>\\n        </ResizeWrapper>\\n      </RcResponsive>\\n    </>\\n  );\\n};\\n\\nWithResponsive.storyName = 'withResponsive';\\n\\nWithResponsive.args = {};\\n\\nWithResponsive.argTypes = {};\\n\\nWithResponsive.parameters = {};\\n\",\"locationsMap\":{\"with-responsive\":{\"startLoc\":{\"col\":37,\"line\":28},\"endLoc\":{\"col\":1,\"line\":53},\"startBody\":{\"col\":37,\"line\":28},\"endBody\":{\"col\":1,\"line\":53}}}},},\n  title: '🔧 Foundation/HoC/withResponsive',\n} as Meta;\n\nconst ResizeWrapper = styled.div`\n  width: 1200px;\n  height: 300px;\n  resize: horizontal;\n  border-style: solid;\n  border-color: black;\n  border-width: 2px;\n  overflow: hidden;\n`;\n\nconst ResponsiveButton = withResponsive(RcButton, ['size']);\n\nexport const WithResponsive: Story = () => {\n  switchToControlKnobs();\n  const ref = useRef<HTMLDivElement>(null);\n  return (\n    <>\n      <RcTypography color=\"danger.f02\">\n        If you want to make duplicate component can responsive size such as\n        listItemActions, this hook is better than 'withResponsive'. Because\n        there is no need to double count the matched size\n      </RcTypography>\n      <RcResponsive responsiveTarget={ref}>\n        <ResizeWrapper ref={ref}>\n          <RcTypography>\n            lg: 'large', md: 'medium', sm: 'small', xs: hidden,\n          </RcTypography>\n          <ResponsiveButton\n            hiddenPatterns={'xs'}\n            size={['medium.md', 'small.sm', 'large.lg']}\n          >\n            resize\n          </ResponsiveButton>\n        </ResizeWrapper>\n      </RcResponsive>\n    </>\n  );\n};\n\nWithResponsive.storyName = 'withResponsive';\n\nWithResponsive.args = {};\n\nWithResponsive.argTypes = {};\n\nWithResponsive.parameters = {};\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcButton } from '../../../../components';\\nimport styled from '../../../styled-components';\\nimport { palette2 } from '../../../styles';\\nimport { useHiddenTabindex } from '../useHiddenTabindex';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useHiddenTabindex',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Item = styled.div`\\n  height: 100px;\\n  width: 100px;\\n  &[tabindex='-1'] {\\n    background-color: ${palette2('interactive', 'b01')};\\n  }\\n`;\\n\\nexport const useHiddenTabindexExample: Story<{}> = () => {\\n  const hiddenRef = useRef<HTMLDivElement>(null);\\n  const buttonRef = useRef<HTMLButtonElement>(null);\\n\\n  const events = useHiddenTabindex<HTMLDivElement>(hiddenRef);\\n\\n  return (\\n    <>\\n      <Item\\n        ref={hiddenRef}\\n        onFocus={() => {\\n          buttonRef.current?.focus();\\n        }}\\n      />\\n      <RcButton ref={buttonRef} {...events}>\\n        focus\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nuseHiddenTabindexExample.args = {};\\nuseHiddenTabindexExample.storyName = 'useHiddenTabindex';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"useHiddenTabindexExample\":{\"startLoc\":{\"col\":51,\"line\":23},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":51,\"line\":23},\"endBody\":{\"col\":1,\"line\":42}}};\n    \nimport React, { useRef } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { RcButton } from '../../../../components';\nimport styled from '../../../styled-components';\nimport { palette2 } from '../../../styles';\nimport { useHiddenTabindex } from '../useHiddenTabindex';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcButton } from '../../../../components';\\nimport styled from '../../../styled-components';\\nimport { palette2 } from '../../../styles';\\nimport { useHiddenTabindex } from '../useHiddenTabindex';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useHiddenTabindex',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Item = styled.div`\\n  height: 100px;\\n  width: 100px;\\n  &[tabindex='-1'] {\\n    background-color: ${palette2('interactive', 'b01')};\\n  }\\n`;\\n\\nexport const useHiddenTabindexExample: Story<{}> = () => {\\n  const hiddenRef = useRef<HTMLDivElement>(null);\\n  const buttonRef = useRef<HTMLButtonElement>(null);\\n\\n  const events = useHiddenTabindex<HTMLDivElement>(hiddenRef);\\n\\n  return (\\n    <>\\n      <Item\\n        ref={hiddenRef}\\n        onFocus={() => {\\n          buttonRef.current?.focus();\\n        }}\\n      />\\n      <RcButton ref={buttonRef} {...events}>\\n        focus\\n      </RcButton>\\n    </>\\n  );\\n};\\n\\nuseHiddenTabindexExample.args = {};\\nuseHiddenTabindexExample.storyName = 'useHiddenTabindex';\\n\",\"locationsMap\":{\"use-hidden-tabindex-example\":{\"startLoc\":{\"col\":51,\"line\":23},\"endLoc\":{\"col\":1,\"line\":42},\"startBody\":{\"col\":51,\"line\":23},\"endBody\":{\"col\":1,\"line\":42}}}},},\n  title: '🔧 Foundation/Hooks/useHiddenTabindex',\n  argTypes: {},\n} as Meta;\n\nconst Item = styled.div`\n  height: 100px;\n  width: 100px;\n  &[tabindex='-1'] {\n    background-color: ${palette2('interactive', 'b01')};\n  }\n`;\n\nexport const useHiddenTabindexExample: Story<{}> = () => {\n  const hiddenRef = useRef<HTMLDivElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n\n  const events = useHiddenTabindex<HTMLDivElement>(hiddenRef);\n\n  return (\n    <>\n      <Item\n        ref={hiddenRef}\n        onFocus={() => {\n          buttonRef.current?.focus();\n        }}\n      />\n      <RcButton ref={buttonRef} {...events}>\n        focus\n      </RcButton>\n    </>\n  );\n};\n\nuseHiddenTabindexExample.args = {};\nuseHiddenTabindexExample.storyName = 'useHiddenTabindex';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { FunctionComponent, useLayoutEffect, useRef } from 'react';\\n\\nimport range from 'lodash/range';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcAvatar, RcBox, RcText } from '../../../../components';\\nimport { Title } from '../../../../storybook/components';\\nimport { isTestEnv } from '../../../../storybook/isTestEnv';\\nimport styled from '../../../styled-components';\\nimport { useResultRef } from '../../useResultRef';\\nimport {\\n  useKeyboardMoveFocus,\\n  UseKeyboardMoveFocusParams,\\n} from '../useKeyboardMoveFocus';\\nimport { useOnlyOneFocusable } from '../useOnlyOneFocusable';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useKeyboardMoveFocus',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Container = styled.div<{ columns: number }>`\\n  width: ${({ columns }) => 32 * columns}px;\\n`;\\n\\nconst options = range(0, 20);\\n\\nfunction getRandom(arr: any[], n: number) {\\n  const result = new Array(n);\\n  let len = arr.length;\\n  const taken = new Array(len);\\n  if (n > len)\\n    throw new RangeError('getRandom: more elements taken than available');\\n  while (n--) {\\n    const x = Math.floor(Math.random() * len);\\n    result[n] = arr[x in taken ? taken[x] : x];\\n    taken[x] = --len in taken ? taken[len] : len;\\n  }\\n  return result;\\n}\\n\\nconst Column: FunctionComponent<\\n  {\\n    title: string;\\n  } & Pick<UseKeyboardMoveFocusParams<any>, 'columns' | 'infinite'>\\n> = ({ columns = 1, infinite, title }) => {\\n  const focusedIndexRef = useRef(0);\\n  const containerRef = useRef<HTMLDivElement>(null);\\n\\n  const { focusIndex, getItemProps, setIndexTabIndex } = useOnlyOneFocusable({\\n    focusedIndexRef,\\n    containerRef,\\n  });\\n  const disabledOptionsRef = useResultRef(() =>\\n    isTestEnv ? [2, 4, 6] : getRandom(options, 5),\\n  );\\n\\n  const getOptionDisabled = (index: number) =>\\n    disabledOptionsRef.current.includes(index);\\n\\n  const { onKeyFocusedIndexHandle, getNextFocusableOption } =\\n    useKeyboardMoveFocus({\\n      options,\\n      focusedIndexRef,\\n      infinite,\\n      columns,\\n      onFocusedIndexChange: (event, toIndex) => {\\n        focusedIndexRef.current = toIndex;\\n        focusIndex(toIndex);\\n\\n        event.preventDefault();\\n      },\\n      getOptionSearchText: (option) => {\\n        return `${option}`;\\n      },\\n      getOptionDisabled,\\n    });\\n\\n  useLayoutEffect(() => {\\n    const toIndex = getNextFocusableOption();\\n\\n    if (toIndex !== focusedIndexRef.current) {\\n      focusedIndexRef.current = toIndex;\\n      setIndexTabIndex(toIndex);\\n    }\\n    \\n  }, []);\\n\\n  return (\\n    <div>\\n      <Title>{title}</Title>\\n      <Container\\n        ref={containerRef}\\n        columns={columns}\\n        onKeyDown={onKeyFocusedIndexHandle}\\n      >\\n        {options.map((x, index) => (\\n          <RcAvatar\\n            key={x}\\n            clickable\\n            size=\\\"xsmall\\\"\\n            color=\\\"avatar.global\\\"\\n            disabled={getOptionDisabled(index)}\\n            {...getItemProps(index)}\\n          >\\n            {`${index}`}\\n          </RcAvatar>\\n        ))}\\n      </Container>\\n    </div>\\n  );\\n};\\n\\nexport const useKeyboardMoveFocusExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <Title>\\n        Use keyboard to move index in the box, work with{' '}\\n        <RcText highlight>useOnlyOneFocusable</RcText>\\n      </Title>\\n      <RcBox\\n        display=\\\"flex\\\"\\n        width=\\\"100%\\\"\\n        justifyContent=\\\"space-around\\\"\\n        flexWrap=\\\"wrap\\\"\\n      >\\n        <Column columns={1} title=\\\"1 column(non infinite)\\\" />\\n        <Column columns={1} infinite title=\\\"1 columns\\\" />\\n        <Column columns={2} infinite title=\\\"2 columns\\\" />\\n        <Column columns={2} infinite=\\\"order\\\" title=\\\"2 columns(order mode)\\\" />\\n        <Column columns={3} infinite title=\\\"3 columns\\\" />\\n        <Column columns={4} infinite title=\\\"4 columns\\\" />\\n        <Column columns={5} infinite title=\\\"5 columns\\\" />\\n        <Column columns={6} infinite title=\\\"6 columns\\\" />\\n        <Column columns={6} infinite title=\\\"6 columns\\\" />\\n        <Column columns={7} infinite title=\\\"7 columns\\\" />\\n        <Column columns={8} infinite title=\\\"8 columns\\\" />\\n        <Column columns={9} infinite title=\\\"9 columns\\\" />\\n        <Column columns={10} infinite title=\\\"10 columns\\\" />\\n      </RcBox>\\n    </>\\n  );\\n};\\n\\nuseKeyboardMoveFocusExample.args = {};\\nuseKeyboardMoveFocusExample.storyName = 'useKeyboardMoveFocus';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"useKeyboardMoveFocusExample\":{\"startLoc\":{\"col\":54,\"line\":115},\"endLoc\":{\"col\":1,\"line\":144},\"startBody\":{\"col\":54,\"line\":115},\"endBody\":{\"col\":1,\"line\":144}}};\n    \nimport React, { FunctionComponent, useLayoutEffect, useRef } from 'react';\n\nimport range from 'lodash/range';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { RcAvatar, RcBox, RcText } from '../../../../components';\nimport { Title } from '../../../../storybook/components';\nimport { isTestEnv } from '../../../../storybook/isTestEnv';\nimport styled from '../../../styled-components';\nimport { useResultRef } from '../../useResultRef';\nimport {\n  useKeyboardMoveFocus,\n  UseKeyboardMoveFocusParams,\n} from '../useKeyboardMoveFocus';\nimport { useOnlyOneFocusable } from '../useOnlyOneFocusable';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { FunctionComponent, useLayoutEffect, useRef } from 'react';\\n\\nimport range from 'lodash/range';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcAvatar, RcBox, RcText } from '../../../../components';\\nimport { Title } from '../../../../storybook/components';\\nimport { isTestEnv } from '../../../../storybook/isTestEnv';\\nimport styled from '../../../styled-components';\\nimport { useResultRef } from '../../useResultRef';\\nimport {\\n  useKeyboardMoveFocus,\\n  UseKeyboardMoveFocusParams,\\n} from '../useKeyboardMoveFocus';\\nimport { useOnlyOneFocusable } from '../useOnlyOneFocusable';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useKeyboardMoveFocus',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Container = styled.div<{ columns: number }>`\\n  width: ${({ columns }) => 32 * columns}px;\\n`;\\n\\nconst options = range(0, 20);\\n\\nfunction getRandom(arr: any[], n: number) {\\n  const result = new Array(n);\\n  let len = arr.length;\\n  const taken = new Array(len);\\n  if (n > len)\\n    throw new RangeError('getRandom: more elements taken than available');\\n  while (n--) {\\n    const x = Math.floor(Math.random() * len);\\n    result[n] = arr[x in taken ? taken[x] : x];\\n    taken[x] = --len in taken ? taken[len] : len;\\n  }\\n  return result;\\n}\\n\\nconst Column: FunctionComponent<\\n  {\\n    title: string;\\n  } & Pick<UseKeyboardMoveFocusParams<any>, 'columns' | 'infinite'>\\n> = ({ columns = 1, infinite, title }) => {\\n  const focusedIndexRef = useRef(0);\\n  const containerRef = useRef<HTMLDivElement>(null);\\n\\n  const { focusIndex, getItemProps, setIndexTabIndex } = useOnlyOneFocusable({\\n    focusedIndexRef,\\n    containerRef,\\n  });\\n  const disabledOptionsRef = useResultRef(() =>\\n    isTestEnv ? [2, 4, 6] : getRandom(options, 5),\\n  );\\n\\n  const getOptionDisabled = (index: number) =>\\n    disabledOptionsRef.current.includes(index);\\n\\n  const { onKeyFocusedIndexHandle, getNextFocusableOption } =\\n    useKeyboardMoveFocus({\\n      options,\\n      focusedIndexRef,\\n      infinite,\\n      columns,\\n      onFocusedIndexChange: (event, toIndex) => {\\n        focusedIndexRef.current = toIndex;\\n        focusIndex(toIndex);\\n\\n        event.preventDefault();\\n      },\\n      getOptionSearchText: (option) => {\\n        return `${option}`;\\n      },\\n      getOptionDisabled,\\n    });\\n\\n  useLayoutEffect(() => {\\n    const toIndex = getNextFocusableOption();\\n\\n    if (toIndex !== focusedIndexRef.current) {\\n      focusedIndexRef.current = toIndex;\\n      setIndexTabIndex(toIndex);\\n    }\\n    \\n  }, []);\\n\\n  return (\\n    <div>\\n      <Title>{title}</Title>\\n      <Container\\n        ref={containerRef}\\n        columns={columns}\\n        onKeyDown={onKeyFocusedIndexHandle}\\n      >\\n        {options.map((x, index) => (\\n          <RcAvatar\\n            key={x}\\n            clickable\\n            size=\\\"xsmall\\\"\\n            color=\\\"avatar.global\\\"\\n            disabled={getOptionDisabled(index)}\\n            {...getItemProps(index)}\\n          >\\n            {`${index}`}\\n          </RcAvatar>\\n        ))}\\n      </Container>\\n    </div>\\n  );\\n};\\n\\nexport const useKeyboardMoveFocusExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <Title>\\n        Use keyboard to move index in the box, work with{' '}\\n        <RcText highlight>useOnlyOneFocusable</RcText>\\n      </Title>\\n      <RcBox\\n        display=\\\"flex\\\"\\n        width=\\\"100%\\\"\\n        justifyContent=\\\"space-around\\\"\\n        flexWrap=\\\"wrap\\\"\\n      >\\n        <Column columns={1} title=\\\"1 column(non infinite)\\\" />\\n        <Column columns={1} infinite title=\\\"1 columns\\\" />\\n        <Column columns={2} infinite title=\\\"2 columns\\\" />\\n        <Column columns={2} infinite=\\\"order\\\" title=\\\"2 columns(order mode)\\\" />\\n        <Column columns={3} infinite title=\\\"3 columns\\\" />\\n        <Column columns={4} infinite title=\\\"4 columns\\\" />\\n        <Column columns={5} infinite title=\\\"5 columns\\\" />\\n        <Column columns={6} infinite title=\\\"6 columns\\\" />\\n        <Column columns={6} infinite title=\\\"6 columns\\\" />\\n        <Column columns={7} infinite title=\\\"7 columns\\\" />\\n        <Column columns={8} infinite title=\\\"8 columns\\\" />\\n        <Column columns={9} infinite title=\\\"9 columns\\\" />\\n        <Column columns={10} infinite title=\\\"10 columns\\\" />\\n      </RcBox>\\n    </>\\n  );\\n};\\n\\nuseKeyboardMoveFocusExample.args = {};\\nuseKeyboardMoveFocusExample.storyName = 'useKeyboardMoveFocus';\\n\",\"locationsMap\":{\"use-keyboard-move-focus-example\":{\"startLoc\":{\"col\":54,\"line\":115},\"endLoc\":{\"col\":1,\"line\":144},\"startBody\":{\"col\":54,\"line\":115},\"endBody\":{\"col\":1,\"line\":144}}}},},\n  title: '🔧 Foundation/Hooks/useKeyboardMoveFocus',\n  argTypes: {},\n} as Meta;\n\nconst Container = styled.div<{ columns: number }>`\n  width: ${({ columns }) => 32 * columns}px;\n`;\n\nconst options = range(0, 20);\n\nfunction getRandom(arr: any[], n: number) {\n  const result = new Array(n);\n  let len = arr.length;\n  const taken = new Array(len);\n  if (n > len)\n    throw new RangeError('getRandom: more elements taken than available');\n  while (n--) {\n    const x = Math.floor(Math.random() * len);\n    result[n] = arr[x in taken ? taken[x] : x];\n    taken[x] = --len in taken ? taken[len] : len;\n  }\n  return result;\n}\n\nconst Column: FunctionComponent<\n  {\n    title: string;\n  } & Pick<UseKeyboardMoveFocusParams<any>, 'columns' | 'infinite'>\n> = ({ columns = 1, infinite, title }) => {\n  const focusedIndexRef = useRef(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { focusIndex, getItemProps, setIndexTabIndex } = useOnlyOneFocusable({\n    focusedIndexRef,\n    containerRef,\n  });\n  const disabledOptionsRef = useResultRef(() =>\n    isTestEnv ? [2, 4, 6] : getRandom(options, 5),\n  );\n\n  const getOptionDisabled = (index: number) =>\n    disabledOptionsRef.current.includes(index);\n\n  const { onKeyFocusedIndexHandle, getNextFocusableOption } =\n    useKeyboardMoveFocus({\n      options,\n      focusedIndexRef,\n      infinite,\n      columns,\n      onFocusedIndexChange: (event, toIndex) => {\n        focusedIndexRef.current = toIndex;\n        focusIndex(toIndex);\n\n        event.preventDefault();\n      },\n      getOptionSearchText: (option) => {\n        return `${option}`;\n      },\n      getOptionDisabled,\n    });\n\n  useLayoutEffect(() => {\n    const toIndex = getNextFocusableOption();\n\n    if (toIndex !== focusedIndexRef.current) {\n      focusedIndexRef.current = toIndex;\n      setIndexTabIndex(toIndex);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      <Title>{title}</Title>\n      <Container\n        ref={containerRef}\n        columns={columns}\n        onKeyDown={onKeyFocusedIndexHandle}\n      >\n        {options.map((x, index) => (\n          <RcAvatar\n            key={x}\n            clickable\n            size=\"xsmall\"\n            color=\"avatar.global\"\n            disabled={getOptionDisabled(index)}\n            {...getItemProps(index)}\n          >\n            {`${index}`}\n          </RcAvatar>\n        ))}\n      </Container>\n    </div>\n  );\n};\n\nexport const useKeyboardMoveFocusExample: Story<{}> = () => {\n  return (\n    <>\n      <Title>\n        Use keyboard to move index in the box, work with{' '}\n        <RcText highlight>useOnlyOneFocusable</RcText>\n      </Title>\n      <RcBox\n        display=\"flex\"\n        width=\"100%\"\n        justifyContent=\"space-around\"\n        flexWrap=\"wrap\"\n      >\n        <Column columns={1} title=\"1 column(non infinite)\" />\n        <Column columns={1} infinite title=\"1 columns\" />\n        <Column columns={2} infinite title=\"2 columns\" />\n        <Column columns={2} infinite=\"order\" title=\"2 columns(order mode)\" />\n        <Column columns={3} infinite title=\"3 columns\" />\n        <Column columns={4} infinite title=\"4 columns\" />\n        <Column columns={5} infinite title=\"5 columns\" />\n        <Column columns={6} infinite title=\"6 columns\" />\n        <Column columns={6} infinite title=\"6 columns\" />\n        <Column columns={7} infinite title=\"7 columns\" />\n        <Column columns={8} infinite title=\"8 columns\" />\n        <Column columns={9} infinite title=\"9 columns\" />\n        <Column columns={10} infinite title=\"10 columns\" />\n      </RcBox>\n    </>\n  );\n};\n\nuseKeyboardMoveFocusExample.args = {};\nuseKeyboardMoveFocusExample.storyName = 'useKeyboardMoveFocus';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from 'react';\\n\\nimport range from 'lodash/range';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcText } from '../../../../components';\\nimport { RcIconButton } from '../../../../components/Buttons';\\nimport { Add } from '../../../../icon';\\nimport { Title } from '../../../../storybook/components';\\nimport styled from '../../../styled-components';\\nimport { useOnlyOneFocusable } from '../useOnlyOneFocusable';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useOnlyOneFocusable',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Container = styled.div<{ columns: number }>`\\n  width: ${({ columns }) => 40 * columns}px;\\n`;\\n\\nconst columns = 3;\\n\\nconst options = range(0, 8);\\n\\nexport const useOnlyOneFocusableExample: Story<{}> = () => {\\n  const focusedIndexRef = useRef(0);\\n  const containerRef = useRef<HTMLDivElement>(null);\\n\\n  const { getItemProps } = useOnlyOneFocusable({\\n    focusedIndexRef,\\n    containerRef,\\n  });\\n\\n  return (\\n    <>\\n      <Title>\\n        Only latest be focus item can be focus, this hook always use with{' '}\\n        <RcText highlight>useKeyboardMoveFocus</RcText>\\n      </Title>\\n      <Container ref={containerRef} columns={columns}>\\n        {options.map((x, index) => (\\n          <RcIconButton key={x} symbol={Add} {...getItemProps(index)} />\\n        ))}\\n      </Container>\\n    </>\\n  );\\n};\\n\\nuseOnlyOneFocusableExample.args = {};\\nuseOnlyOneFocusableExample.storyName = 'useOnlyOneFocusable';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"useOnlyOneFocusableExample\":{\"startLoc\":{\"col\":53,\"line\":27},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":53,\"line\":27},\"endBody\":{\"col\":1,\"line\":49}}};\n    \nimport React, { useRef } from 'react';\n\nimport range from 'lodash/range';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { RcText } from '../../../../components';\nimport { RcIconButton } from '../../../../components/Buttons';\nimport { Add } from '../../../../icon';\nimport { Title } from '../../../../storybook/components';\nimport styled from '../../../styled-components';\nimport { useOnlyOneFocusable } from '../useOnlyOneFocusable';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef } from 'react';\\n\\nimport range from 'lodash/range';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcText } from '../../../../components';\\nimport { RcIconButton } from '../../../../components/Buttons';\\nimport { Add } from '../../../../icon';\\nimport { Title } from '../../../../storybook/components';\\nimport styled from '../../../styled-components';\\nimport { useOnlyOneFocusable } from '../useOnlyOneFocusable';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useOnlyOneFocusable',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Container = styled.div<{ columns: number }>`\\n  width: ${({ columns }) => 40 * columns}px;\\n`;\\n\\nconst columns = 3;\\n\\nconst options = range(0, 8);\\n\\nexport const useOnlyOneFocusableExample: Story<{}> = () => {\\n  const focusedIndexRef = useRef(0);\\n  const containerRef = useRef<HTMLDivElement>(null);\\n\\n  const { getItemProps } = useOnlyOneFocusable({\\n    focusedIndexRef,\\n    containerRef,\\n  });\\n\\n  return (\\n    <>\\n      <Title>\\n        Only latest be focus item can be focus, this hook always use with{' '}\\n        <RcText highlight>useKeyboardMoveFocus</RcText>\\n      </Title>\\n      <Container ref={containerRef} columns={columns}>\\n        {options.map((x, index) => (\\n          <RcIconButton key={x} symbol={Add} {...getItemProps(index)} />\\n        ))}\\n      </Container>\\n    </>\\n  );\\n};\\n\\nuseOnlyOneFocusableExample.args = {};\\nuseOnlyOneFocusableExample.storyName = 'useOnlyOneFocusable';\\n\",\"locationsMap\":{\"use-only-one-focusable-example\":{\"startLoc\":{\"col\":53,\"line\":27},\"endLoc\":{\"col\":1,\"line\":49},\"startBody\":{\"col\":53,\"line\":27},\"endBody\":{\"col\":1,\"line\":49}}}},},\n  title: '🔧 Foundation/Hooks/useOnlyOneFocusable',\n  argTypes: {},\n} as Meta;\n\nconst Container = styled.div<{ columns: number }>`\n  width: ${({ columns }) => 40 * columns}px;\n`;\n\nconst columns = 3;\n\nconst options = range(0, 8);\n\nexport const useOnlyOneFocusableExample: Story<{}> = () => {\n  const focusedIndexRef = useRef(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { getItemProps } = useOnlyOneFocusable({\n    focusedIndexRef,\n    containerRef,\n  });\n\n  return (\n    <>\n      <Title>\n        Only latest be focus item can be focus, this hook always use with{' '}\n        <RcText highlight>useKeyboardMoveFocus</RcText>\n      </Title>\n      <Container ref={containerRef} columns={columns}>\n        {options.map((x, index) => (\n          <RcIconButton key={x} symbol={Add} {...getItemProps(index)} />\n        ))}\n      </Container>\n    </>\n  );\n};\n\nuseOnlyOneFocusableExample.args = {};\nuseOnlyOneFocusableExample.storyName = 'useOnlyOneFocusable';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { Title } from '../../../../storybook/components';\\nimport styled from '../../../styled-components';\\nimport { palette2 } from '../../../styles';\\nimport { useOverflow } from '../useOverflow';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useOverflow',\\n  argTypes: {},\\n} as Meta;\\n\\nconst ResizeWrapper = styled.div<{ border: boolean }>`\\n  width: 500px;\\n  height: 300px;\\n  resize: both;\\n  overflow: hidden;\\n  border: 2px solid transparent;\\n  color: ${palette2('neutral', 'f06')};\\n  border-color: ${({ border }) => border && palette2('neutral', 'l04')};\\n`;\\n\\nexport const useOverflowExample: Story<{}> = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n  const [border, setBorder] = useState(false);\\n\\n  useOverflow(ref, (state, value) => {\\n    setBorder(state);\\n\\n    console.log(value);\\n  });\\n\\n  return (\\n    <>\\n      <Title>That border only show when text overflow</Title>\\n      <ResizeWrapper ref={ref} border={border}>\\n        A free cultural work is, according to the definition of Free Cultural\\n        Works, one that has no significant legal restriction on people's freedom\\n        to: use the content and benefit from using it, study the content and\\n        apply what is learned, make and distribute copies of the content, change\\n        and improve the content and distribute these derivative works.[1][2]\\n        Free content encompasses all works in the public domain and also those\\n        copyrighted works whose licenses honor and uphold the freedoms mentioned\\n        above. Because the Berne Convention in most countries by default grants\\n        copyright holders monopolistic control over their creations, copyright\\n        content must be explicitly declared free, usually by the referencing or\\n        inclusion of licensing statements from within the work. Although there\\n        are a great many different definitions in regular everyday use, free\\n        content is legally very similar, if not like an identical twin, to open\\n        content. An analogy is a use of the rival terms free software and\\n        open-source, which describe ideological differences rather than legal\\n        ones.[3][4][5] For instance, the Open Knowledge Foundation's Open\\n        Definition describes \\\"open\\\" as synonymous to the definition of free in\\n        the \\\"Definition of Free Cultural Works\\\" (as also in the Open Source\\n        Definition and Free Software Definition).[6] For such free/open content\\n        both movements recommend the same three Creative Commons licenses, the\\n        CC BY, CC BY-SA, and CC0.[7][8][9][10]\\n      </ResizeWrapper>\\n    </>\\n  );\\n};\\n\\nuseOverflowExample.args = {};\\nuseOverflowExample.storyName = 'useOverflow';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"useOverflowExample\":{\"startLoc\":{\"col\":45,\"line\":25},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":45,\"line\":25},\"endBody\":{\"col\":1,\"line\":63}}};\n    \nimport React, { useRef, useState } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { Title } from '../../../../storybook/components';\nimport styled from '../../../styled-components';\nimport { palette2 } from '../../../styles';\nimport { useOverflow } from '../useOverflow';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef, useState } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { Title } from '../../../../storybook/components';\\nimport styled from '../../../styled-components';\\nimport { palette2 } from '../../../styles';\\nimport { useOverflow } from '../useOverflow';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useOverflow',\\n  argTypes: {},\\n} as Meta;\\n\\nconst ResizeWrapper = styled.div<{ border: boolean }>`\\n  width: 500px;\\n  height: 300px;\\n  resize: both;\\n  overflow: hidden;\\n  border: 2px solid transparent;\\n  color: ${palette2('neutral', 'f06')};\\n  border-color: ${({ border }) => border && palette2('neutral', 'l04')};\\n`;\\n\\nexport const useOverflowExample: Story<{}> = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n  const [border, setBorder] = useState(false);\\n\\n  useOverflow(ref, (state, value) => {\\n    setBorder(state);\\n\\n    console.log(value);\\n  });\\n\\n  return (\\n    <>\\n      <Title>That border only show when text overflow</Title>\\n      <ResizeWrapper ref={ref} border={border}>\\n        A free cultural work is, according to the definition of Free Cultural\\n        Works, one that has no significant legal restriction on people's freedom\\n        to: use the content and benefit from using it, study the content and\\n        apply what is learned, make and distribute copies of the content, change\\n        and improve the content and distribute these derivative works.[1][2]\\n        Free content encompasses all works in the public domain and also those\\n        copyrighted works whose licenses honor and uphold the freedoms mentioned\\n        above. Because the Berne Convention in most countries by default grants\\n        copyright holders monopolistic control over their creations, copyright\\n        content must be explicitly declared free, usually by the referencing or\\n        inclusion of licensing statements from within the work. Although there\\n        are a great many different definitions in regular everyday use, free\\n        content is legally very similar, if not like an identical twin, to open\\n        content. An analogy is a use of the rival terms free software and\\n        open-source, which describe ideological differences rather than legal\\n        ones.[3][4][5] For instance, the Open Knowledge Foundation's Open\\n        Definition describes \\\"open\\\" as synonymous to the definition of free in\\n        the \\\"Definition of Free Cultural Works\\\" (as also in the Open Source\\n        Definition and Free Software Definition).[6] For such free/open content\\n        both movements recommend the same three Creative Commons licenses, the\\n        CC BY, CC BY-SA, and CC0.[7][8][9][10]\\n      </ResizeWrapper>\\n    </>\\n  );\\n};\\n\\nuseOverflowExample.args = {};\\nuseOverflowExample.storyName = 'useOverflow';\\n\",\"locationsMap\":{\"use-overflow-example\":{\"startLoc\":{\"col\":45,\"line\":25},\"endLoc\":{\"col\":1,\"line\":63},\"startBody\":{\"col\":45,\"line\":25},\"endBody\":{\"col\":1,\"line\":63}}}},},\n  title: '🔧 Foundation/Hooks/useOverflow',\n  argTypes: {},\n} as Meta;\n\nconst ResizeWrapper = styled.div<{ border: boolean }>`\n  width: 500px;\n  height: 300px;\n  resize: both;\n  overflow: hidden;\n  border: 2px solid transparent;\n  color: ${palette2('neutral', 'f06')};\n  border-color: ${({ border }) => border && palette2('neutral', 'l04')};\n`;\n\nexport const useOverflowExample: Story<{}> = () => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [border, setBorder] = useState(false);\n\n  useOverflow(ref, (state, value) => {\n    setBorder(state);\n\n    console.log(value);\n  });\n\n  return (\n    <>\n      <Title>That border only show when text overflow</Title>\n      <ResizeWrapper ref={ref} border={border}>\n        A free cultural work is, according to the definition of Free Cultural\n        Works, one that has no significant legal restriction on people's freedom\n        to: use the content and benefit from using it, study the content and\n        apply what is learned, make and distribute copies of the content, change\n        and improve the content and distribute these derivative works.[1][2]\n        Free content encompasses all works in the public domain and also those\n        copyrighted works whose licenses honor and uphold the freedoms mentioned\n        above. Because the Berne Convention in most countries by default grants\n        copyright holders monopolistic control over their creations, copyright\n        content must be explicitly declared free, usually by the referencing or\n        inclusion of licensing statements from within the work. Although there\n        are a great many different definitions in regular everyday use, free\n        content is legally very similar, if not like an identical twin, to open\n        content. An analogy is a use of the rival terms free software and\n        open-source, which describe ideological differences rather than legal\n        ones.[3][4][5] For instance, the Open Knowledge Foundation's Open\n        Definition describes \"open\" as synonymous to the definition of free in\n        the \"Definition of Free Cultural Works\" (as also in the Open Source\n        Definition and Free Software Definition).[6] For such free/open content\n        both movements recommend the same three Creative Commons licenses, the\n        CC BY, CC BY-SA, and CC0.[7][8][9][10]\n      </ResizeWrapper>\n    </>\n  );\n};\n\nuseOverflowExample.args = {};\nuseOverflowExample.storyName = 'useOverflow';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { Title } from '../../../../storybook/components';\\nimport styled from '../../../styled-components';\\nimport { shadows } from '../../../styles';\\nimport { useResizeObserver } from '../useResizeObserver';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useResizeObserver',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Wrapper = styled.div`\\n  width: 280px;\\n  resize: both;\\n  overflow: hidden;\\n  box-shadow: ${shadows('16')};\\n`;\\n\\nexport const useResizeObserverExample: Story<{}> = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useResizeObserver(ref, () => {\\n    console.log('resize');\\n  });\\n\\n  return (\\n    <Wrapper ref={ref}>\\n      <Title>Resize here</Title>\\n    </Wrapper>\\n  );\\n};\\n\\nuseResizeObserverExample.args = {};\\nuseResizeObserverExample.storyName = 'useResizeObserver';\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"useResizeObserverExample\":{\"startLoc\":{\"col\":51,\"line\":22},\"endLoc\":{\"col\":1,\"line\":34},\"startBody\":{\"col\":51,\"line\":22},\"endBody\":{\"col\":1,\"line\":34}}};\n    \nimport React, { useRef } from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { Title } from '../../../../storybook/components';\nimport styled from '../../../styled-components';\nimport { shadows } from '../../../styles';\nimport { useResizeObserver } from '../useResizeObserver';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React, { useRef } from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { Title } from '../../../../storybook/components';\\nimport styled from '../../../styled-components';\\nimport { shadows } from '../../../styles';\\nimport { useResizeObserver } from '../useResizeObserver';\\n\\nexport default {\\n  title: '🔧 Foundation/Hooks/useResizeObserver',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Wrapper = styled.div`\\n  width: 280px;\\n  resize: both;\\n  overflow: hidden;\\n  box-shadow: ${shadows('16')};\\n`;\\n\\nexport const useResizeObserverExample: Story<{}> = () => {\\n  const ref = useRef<HTMLDivElement>(null);\\n\\n  useResizeObserver(ref, () => {\\n    console.log('resize');\\n  });\\n\\n  return (\\n    <Wrapper ref={ref}>\\n      <Title>Resize here</Title>\\n    </Wrapper>\\n  );\\n};\\n\\nuseResizeObserverExample.args = {};\\nuseResizeObserverExample.storyName = 'useResizeObserver';\\n\",\"locationsMap\":{\"use-resize-observer-example\":{\"startLoc\":{\"col\":51,\"line\":22},\"endLoc\":{\"col\":1,\"line\":34},\"startBody\":{\"col\":51,\"line\":22},\"endBody\":{\"col\":1,\"line\":34}}}},},\n  title: '🔧 Foundation/Hooks/useResizeObserver',\n  argTypes: {},\n} as Meta;\n\nconst Wrapper = styled.div`\n  width: 280px;\n  resize: both;\n  overflow: hidden;\n  box-shadow: ${shadows('16')};\n`;\n\nexport const useResizeObserverExample: Story<{}> = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  useResizeObserver(ref, () => {\n    console.log('resize');\n  });\n\n  return (\n    <Wrapper ref={ref}>\n      <Title>Resize here</Title>\n    </Wrapper>\n  );\n};\n\nuseResizeObserverExample.args = {};\nuseResizeObserverExample.storyName = 'useResizeObserver';\n","\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import React from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcBox } from '../../../components';\\nimport styled, { css } from '../../styled-components';\\nimport { RcTheme } from '../../theme/theme.type';\\nimport { darken, getContrastBgColor, lighten } from '../colorManipulator';\\nimport { ellipsis } from '../ellipsis';\\nimport { fakeBorder } from '../fakeBorder';\\nimport { flexCenterStyle } from '../flexCenter';\\nimport { flexWidth } from '../flexWidth';\\nimport { focusVisibleShadowStyle } from '../focusVisible';\\nimport { lineClamp } from '../lineClamp';\\nimport { getParsePaletteColor, palette2 } from '../newPalette';\\nimport { nonStyleButton } from '../nonStyleButton';\\nimport { nonTouchHoverMedia } from '../nonTouchHoverMedia';\\nimport { opacity } from '../opacity';\\nimport { setOpacity } from '../palette';\\nimport { paletteContrastText } from '../paletteContrastText';\\nimport { radius } from '../radius';\\nimport { shadows } from '../shadows';\\nimport { spacing } from '../spacing';\\nimport { typography } from '../typography';\\nimport { zIndex } from '../zIndex';\\n\\nexport default {\\n  title: '💅 Style system/utils',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Basic = styled.div`\\n  margin: 1em;\\n  width: 100px;\\n  height: 100px;\\n  color: ${palette2('neutral', 'f06')};\\n`;\\n\\nconst Block = styled(Basic)`\\n  margin: 1em;\\n  width: 100px;\\n  height: 100px;\\n  background-color: ${palette2('interactive', 'b02')};\\n`;\\n\\nconst Darken = styled(Block)`\\n  background-color: ${darken(palette2('interactive', 'b02'), 0.5)};\\n`;\\nexport const DarkenExample: Story<{}> = () => {\\n  return <Darken>darken</Darken>;\\n};\\nDarkenExample.storyName = 'darken';\\n\\nconst Lighten = styled(Block)`\\n  background-color: ${lighten(palette2('interactive', 'b02'), 0.5)};\\n`;\\nexport const LightenExample: Story<{}> = () => {\\n  return <Lighten>Lighten</Lighten>;\\n};\\nLightenExample.storyName = 'lighten';\\n\\nconst Opacity = styled(Block)`\\n  opacity: ${opacity('48')};\\n`;\\nexport const OpacityExample: Story<{}> = () => {\\n  return <Opacity>Opacity</Opacity>;\\n};\\nOpacityExample.storyName = 'opacity';\\n\\nconst PaletteContrastText = styled(Block)`\\n  color: ${paletteContrastText(palette2('interactive', 'b02'))};\\n`;\\nexport const PaletteContrastTextExample: Story<{}> = () => {\\n  return <PaletteContrastText>PaletteContrastText</PaletteContrastText>;\\n};\\nPaletteContrastTextExample.storyName = 'paletteContrastText';\\n\\nconst Radius = styled(Block)`\\n  border-radius: ${radius('circle')};\\n`;\\nexport const RadiusExample: Story<{}> = () => {\\n  return <Radius />;\\n};\\nRadiusExample.storyName = 'radius';\\n\\nconst Shadows = styled(Radius)`\\n  box-shadow: ${shadows('16')};\\n`;\\nexport const ShadowsExample: Story<{}> = () => {\\n  return <Shadows />;\\n};\\nShadowsExample.storyName = 'shadows';\\n\\nconst Padding = styled(Radius)`\\n  padding: ${spacing(6)};\\n  box-sizing: border-box;\\n`;\\nconst Margin = styled(Padding)`\\n  margin: ${spacing(10)};\\n`;\\nexport const SpacingExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <Padding>padding</Padding>\\n      <Margin>margin</Margin>\\n    </>\\n  );\\n};\\nSpacingExample.storyName = 'spacing';\\n\\nconst ContrastBgColor = styled(Block)`\\n  ${({ theme }) => {\\n    const [currColor, contrastBgColor] = getContrastBgColor({\\n      theme,\\n      color: 'interactive.b02',\\n    });\\n\\n    return css`\\n      color: ${currColor};\\n      background-color: ${contrastBgColor};\\n    `;\\n  }};\\n`;\\nconst ContrastBgColor2 = styled(Block)`\\n  ${({ theme }) => {\\n    const [currColor, contrastBgColor] = getContrastBgColor({\\n      theme,\\n      color: 'highlight.b01',\\n    });\\n\\n    return css`\\n      color: ${currColor};\\n      background-color: ${contrastBgColor};\\n    `;\\n  }};\\n`;\\nexport const ContrastBgColorExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <ContrastBgColor>getContrastBgColor2</ContrastBgColor>\\n      <ContrastBgColor2>getContrastBgColor2</ContrastBgColor2>\\n    </>\\n  );\\n};\\nContrastBgColorExample.storyName = 'getContrastBgColor';\\n\\nconst Typography = styled.div`\\n  ${typography('display1')}\\n`;\\nexport const TypographyExample: Story<{}> = () => {\\n  return <Typography>Typography display1</Typography>;\\n};\\nTypographyExample.storyName = 'typography';\\n\\nconst FakeBorder = styled(Block)`\\n  ${\\n    // default will use `palette2('highContrast')`, that will only show in highContrast theme\\n    fakeBorder()\\n  }\\n`;\\nconst FakeBorder2 = styled(Block)`\\n  ${fakeBorder({\\n    color: palette2('neutral', 'l03'),\\n  })}\\n`;\\nexport const FakeBorderExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <FakeBorder>border in highContrast theme</FakeBorder>\\n      <FakeBorder2>fakeborder</FakeBorder2>\\n    </>\\n  );\\n};\\nFakeBorderExample.storyName = 'fakeBorder';\\n\\nconst FlexCenter = styled(Block)`\\n  ${flexCenterStyle}\\n`;\\nexport const FlexCenterExample: Story<{}> = () => {\\n  return <FlexCenter>flex center</FlexCenter>;\\n};\\nFlexCenterExample.storyName = 'FlexCenter';\\n\\ntype FlexWidthProps = {\\n  width: string;\\n  height?: string;\\n  color?: any;\\n};\\nconst FlexWidth = styled(Block)<FlexWidthProps>`\\n  ${({ width }) => flexWidth(width)};\\n  height: ${({ height }) => height};\\n  background: ${({ color }) => getParsePaletteColor(color)};\\n`;\\nexport const FlexWidthExample: Story<{}> = () => {\\n  return (\\n    <RcBox display=\\\"flex\\\" width=\\\"100%\\\">\\n      <FlexWidth width=\\\"300px\\\" />\\n      <FlexWidth width=\\\"auto\\\" color=\\\"neutral.b04\\\" />\\n      <FlexWidth width=\\\"200px\\\" />\\n    </RcBox>\\n  );\\n};\\nFlexWidthExample.storyName = 'flexWidth';\\n\\nconst FocusVisible = styled(Basic)`\\n  outline: none;\\n  position: relative;\\n  ${focusVisibleShadowStyle};\\n`;\\nexport const FocusVisibleExample: Story<{}> = () => {\\n  return <FocusVisible tabIndex={0}>focus visible</FocusVisible>;\\n};\\nFocusVisibleExample.storyName = 'focusVisibleShadowStyle';\\n\\nconst Ellipsis = styled(Block)`\\n  ${ellipsis}\\n`;\\nexport const EllipsisExample: Story<{}> = () => {\\n  return <Ellipsis>line 1 line 2 line 3</Ellipsis>;\\n};\\nEllipsisExample.storyName = 'ellipsis';\\n\\nconst LineClamp = styled(Basic)`\\n  outline: none;\\n  position: relative;\\n  ${lineClamp(2, 38)};\\n`;\\nexport const LineClampExample: Story<{}> = () => {\\n  return (\\n    <LineClamp>\\n      line 1 <br />\\n      line 2 <br />\\n      line 3 <br />\\n    </LineClamp>\\n  );\\n};\\nLineClampExample.storyName = 'lineClamp';\\n\\nconst Palette = styled(Basic)`\\n  background-color: ${palette2('highlight', 'b03')};\\n`;\\nexport const PaletteExample: Story<{}> = () => {\\n  return <Palette>Palette</Palette>;\\n};\\nPaletteExample.storyName = 'palette';\\n\\nconst NonStyleButton = styled.button`\\n  ${nonStyleButton};\\n  margin: 1em;\\n  width: 100px;\\n  height: 100px;\\n  color: ${palette2('neutral', 'f06')};\\n  background-color: ${palette2('highlight', 'b02')};\\n`;\\nexport const NonStyleButtonExample: Story<{}> = () => {\\n  return <NonStyleButton>NonStyleButton</NonStyleButton>;\\n};\\nNonStyleButtonExample.storyName = 'nonStyleButton';\\n\\nconst NonTouchHoverMedia = styled(NonStyleButton)`\\n  ${nonTouchHoverMedia} {\\n    &:hover {\\n      background-color: ${setOpacity(palette2('highlight', 'b02'), '24')};\\n    }\\n  }\\n`;\\nexport const NonTouchHoverMediaExample: Story<{}> = () => {\\n  return <NonTouchHoverMedia>NonTouchHoverMedia</NonTouchHoverMedia>;\\n};\\nNonTouchHoverMediaExample.storyName = 'nonTouchHoverMedia';\\n\\nconst ZIndex = styled(FlexWidth)<{ zIndex: keyof RcTheme['zIndex'] }>`\\n  position: absolute;\\n  z-index: ${({ zIndex: value }) => zIndex(value)};\\n`;\\nexport const ZIndexExample: Story<{}> = () => {\\n  return (\\n    <FlexCenter>\\n      <ZIndex zIndex=\\\"snackbar\\\" width=\\\"30px\\\" height=\\\"30px\\\">\\n        snackbar\\n      </ZIndex>\\n      <ZIndex zIndex=\\\"modal\\\" width=\\\"100px\\\" color=\\\"highlight.b01\\\">\\n        modal\\n      </ZIndex>\\n    </FlexCenter>\\n  );\\n};\\nZIndexExample.storyName = 'zIndex';\\n// Interaction state\\n// https://wiki.ringcentral.com/pages/viewpage.action?pageId=424536658\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"DarkenExample\":{\"startLoc\":{\"col\":40,\"line\":49},\"endLoc\":{\"col\":1,\"line\":51},\"startBody\":{\"col\":40,\"line\":49},\"endBody\":{\"col\":1,\"line\":51}},\"LightenExample\":{\"startLoc\":{\"col\":41,\"line\":57},\"endLoc\":{\"col\":1,\"line\":59},\"startBody\":{\"col\":41,\"line\":57},\"endBody\":{\"col\":1,\"line\":59}},\"OpacityExample\":{\"startLoc\":{\"col\":41,\"line\":65},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":41,\"line\":65},\"endBody\":{\"col\":1,\"line\":67}},\"PaletteContrastTextExample\":{\"startLoc\":{\"col\":53,\"line\":73},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":53,\"line\":73},\"endBody\":{\"col\":1,\"line\":75}},\"RadiusExample\":{\"startLoc\":{\"col\":40,\"line\":81},\"endLoc\":{\"col\":1,\"line\":83},\"startBody\":{\"col\":40,\"line\":81},\"endBody\":{\"col\":1,\"line\":83}},\"ShadowsExample\":{\"startLoc\":{\"col\":41,\"line\":89},\"endLoc\":{\"col\":1,\"line\":91},\"startBody\":{\"col\":41,\"line\":89},\"endBody\":{\"col\":1,\"line\":91}},\"SpacingExample\":{\"startLoc\":{\"col\":41,\"line\":101},\"endLoc\":{\"col\":1,\"line\":108},\"startBody\":{\"col\":41,\"line\":101},\"endBody\":{\"col\":1,\"line\":108}},\"ContrastBgColorExample\":{\"startLoc\":{\"col\":49,\"line\":137},\"endLoc\":{\"col\":1,\"line\":144},\"startBody\":{\"col\":49,\"line\":137},\"endBody\":{\"col\":1,\"line\":144}},\"TypographyExample\":{\"startLoc\":{\"col\":44,\"line\":150},\"endLoc\":{\"col\":1,\"line\":152},\"startBody\":{\"col\":44,\"line\":150},\"endBody\":{\"col\":1,\"line\":152}},\"FakeBorderExample\":{\"startLoc\":{\"col\":44,\"line\":166},\"endLoc\":{\"col\":1,\"line\":173},\"startBody\":{\"col\":44,\"line\":166},\"endBody\":{\"col\":1,\"line\":173}},\"FlexCenterExample\":{\"startLoc\":{\"col\":44,\"line\":179},\"endLoc\":{\"col\":1,\"line\":181},\"startBody\":{\"col\":44,\"line\":179},\"endBody\":{\"col\":1,\"line\":181}},\"FlexWidthExample\":{\"startLoc\":{\"col\":43,\"line\":194},\"endLoc\":{\"col\":1,\"line\":202},\"startBody\":{\"col\":43,\"line\":194},\"endBody\":{\"col\":1,\"line\":202}},\"FocusVisibleExample\":{\"startLoc\":{\"col\":46,\"line\":210},\"endLoc\":{\"col\":1,\"line\":212},\"startBody\":{\"col\":46,\"line\":210},\"endBody\":{\"col\":1,\"line\":212}},\"EllipsisExample\":{\"startLoc\":{\"col\":42,\"line\":218},\"endLoc\":{\"col\":1,\"line\":220},\"startBody\":{\"col\":42,\"line\":218},\"endBody\":{\"col\":1,\"line\":220}},\"LineClampExample\":{\"startLoc\":{\"col\":43,\"line\":228},\"endLoc\":{\"col\":1,\"line\":236},\"startBody\":{\"col\":43,\"line\":228},\"endBody\":{\"col\":1,\"line\":236}},\"PaletteExample\":{\"startLoc\":{\"col\":41,\"line\":242},\"endLoc\":{\"col\":1,\"line\":244},\"startBody\":{\"col\":41,\"line\":242},\"endBody\":{\"col\":1,\"line\":244}},\"NonStyleButtonExample\":{\"startLoc\":{\"col\":48,\"line\":255},\"endLoc\":{\"col\":1,\"line\":257},\"startBody\":{\"col\":48,\"line\":255},\"endBody\":{\"col\":1,\"line\":257}},\"NonTouchHoverMediaExample\":{\"startLoc\":{\"col\":52,\"line\":267},\"endLoc\":{\"col\":1,\"line\":269},\"startBody\":{\"col\":52,\"line\":267},\"endBody\":{\"col\":1,\"line\":269}},\"ZIndexExample\":{\"startLoc\":{\"col\":40,\"line\":276},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":40,\"line\":276},\"endBody\":{\"col\":1,\"line\":287}}};\n    \nimport React from 'react';\n\nimport { Meta, Story } from '@storybook/react';\n\nimport { RcBox } from '../../../components';\nimport styled, { css } from '../../styled-components';\nimport { RcTheme } from '../../theme/theme.type';\nimport { darken, getContrastBgColor, lighten } from '../colorManipulator';\nimport { ellipsis } from '../ellipsis';\nimport { fakeBorder } from '../fakeBorder';\nimport { flexCenterStyle } from '../flexCenter';\nimport { flexWidth } from '../flexWidth';\nimport { focusVisibleShadowStyle } from '../focusVisible';\nimport { lineClamp } from '../lineClamp';\nimport { getParsePaletteColor, palette2 } from '../newPalette';\nimport { nonStyleButton } from '../nonStyleButton';\nimport { nonTouchHoverMedia } from '../nonTouchHoverMedia';\nimport { opacity } from '../opacity';\nimport { setOpacity } from '../palette';\nimport { paletteContrastText } from '../paletteContrastText';\nimport { radius } from '../radius';\nimport { shadows } from '../shadows';\nimport { spacing } from '../spacing';\nimport { typography } from '../typography';\nimport { zIndex } from '../zIndex';\n\nexport default {parameters: {\"storySource\":{\"source\":\"import React from 'react';\\n\\nimport { Meta, Story } from '@storybook/react';\\n\\nimport { RcBox } from '../../../components';\\nimport styled, { css } from '../../styled-components';\\nimport { RcTheme } from '../../theme/theme.type';\\nimport { darken, getContrastBgColor, lighten } from '../colorManipulator';\\nimport { ellipsis } from '../ellipsis';\\nimport { fakeBorder } from '../fakeBorder';\\nimport { flexCenterStyle } from '../flexCenter';\\nimport { flexWidth } from '../flexWidth';\\nimport { focusVisibleShadowStyle } from '../focusVisible';\\nimport { lineClamp } from '../lineClamp';\\nimport { getParsePaletteColor, palette2 } from '../newPalette';\\nimport { nonStyleButton } from '../nonStyleButton';\\nimport { nonTouchHoverMedia } from '../nonTouchHoverMedia';\\nimport { opacity } from '../opacity';\\nimport { setOpacity } from '../palette';\\nimport { paletteContrastText } from '../paletteContrastText';\\nimport { radius } from '../radius';\\nimport { shadows } from '../shadows';\\nimport { spacing } from '../spacing';\\nimport { typography } from '../typography';\\nimport { zIndex } from '../zIndex';\\n\\nexport default {\\n  title: '💅 Style system/utils',\\n  argTypes: {},\\n} as Meta;\\n\\nconst Basic = styled.div`\\n  margin: 1em;\\n  width: 100px;\\n  height: 100px;\\n  color: ${palette2('neutral', 'f06')};\\n`;\\n\\nconst Block = styled(Basic)`\\n  margin: 1em;\\n  width: 100px;\\n  height: 100px;\\n  background-color: ${palette2('interactive', 'b02')};\\n`;\\n\\nconst Darken = styled(Block)`\\n  background-color: ${darken(palette2('interactive', 'b02'), 0.5)};\\n`;\\nexport const DarkenExample: Story<{}> = () => {\\n  return <Darken>darken</Darken>;\\n};\\nDarkenExample.storyName = 'darken';\\n\\nconst Lighten = styled(Block)`\\n  background-color: ${lighten(palette2('interactive', 'b02'), 0.5)};\\n`;\\nexport const LightenExample: Story<{}> = () => {\\n  return <Lighten>Lighten</Lighten>;\\n};\\nLightenExample.storyName = 'lighten';\\n\\nconst Opacity = styled(Block)`\\n  opacity: ${opacity('48')};\\n`;\\nexport const OpacityExample: Story<{}> = () => {\\n  return <Opacity>Opacity</Opacity>;\\n};\\nOpacityExample.storyName = 'opacity';\\n\\nconst PaletteContrastText = styled(Block)`\\n  color: ${paletteContrastText(palette2('interactive', 'b02'))};\\n`;\\nexport const PaletteContrastTextExample: Story<{}> = () => {\\n  return <PaletteContrastText>PaletteContrastText</PaletteContrastText>;\\n};\\nPaletteContrastTextExample.storyName = 'paletteContrastText';\\n\\nconst Radius = styled(Block)`\\n  border-radius: ${radius('circle')};\\n`;\\nexport const RadiusExample: Story<{}> = () => {\\n  return <Radius />;\\n};\\nRadiusExample.storyName = 'radius';\\n\\nconst Shadows = styled(Radius)`\\n  box-shadow: ${shadows('16')};\\n`;\\nexport const ShadowsExample: Story<{}> = () => {\\n  return <Shadows />;\\n};\\nShadowsExample.storyName = 'shadows';\\n\\nconst Padding = styled(Radius)`\\n  padding: ${spacing(6)};\\n  box-sizing: border-box;\\n`;\\nconst Margin = styled(Padding)`\\n  margin: ${spacing(10)};\\n`;\\nexport const SpacingExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <Padding>padding</Padding>\\n      <Margin>margin</Margin>\\n    </>\\n  );\\n};\\nSpacingExample.storyName = 'spacing';\\n\\nconst ContrastBgColor = styled(Block)`\\n  ${({ theme }) => {\\n    const [currColor, contrastBgColor] = getContrastBgColor({\\n      theme,\\n      color: 'interactive.b02',\\n    });\\n\\n    return css`\\n      color: ${currColor};\\n      background-color: ${contrastBgColor};\\n    `;\\n  }};\\n`;\\nconst ContrastBgColor2 = styled(Block)`\\n  ${({ theme }) => {\\n    const [currColor, contrastBgColor] = getContrastBgColor({\\n      theme,\\n      color: 'highlight.b01',\\n    });\\n\\n    return css`\\n      color: ${currColor};\\n      background-color: ${contrastBgColor};\\n    `;\\n  }};\\n`;\\nexport const ContrastBgColorExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <ContrastBgColor>getContrastBgColor2</ContrastBgColor>\\n      <ContrastBgColor2>getContrastBgColor2</ContrastBgColor2>\\n    </>\\n  );\\n};\\nContrastBgColorExample.storyName = 'getContrastBgColor';\\n\\nconst Typography = styled.div`\\n  ${typography('display1')}\\n`;\\nexport const TypographyExample: Story<{}> = () => {\\n  return <Typography>Typography display1</Typography>;\\n};\\nTypographyExample.storyName = 'typography';\\n\\nconst FakeBorder = styled(Block)`\\n  ${\\n    // default will use `palette2('highContrast')`, that will only show in highContrast theme\\n    fakeBorder()\\n  }\\n`;\\nconst FakeBorder2 = styled(Block)`\\n  ${fakeBorder({\\n    color: palette2('neutral', 'l03'),\\n  })}\\n`;\\nexport const FakeBorderExample: Story<{}> = () => {\\n  return (\\n    <>\\n      <FakeBorder>border in highContrast theme</FakeBorder>\\n      <FakeBorder2>fakeborder</FakeBorder2>\\n    </>\\n  );\\n};\\nFakeBorderExample.storyName = 'fakeBorder';\\n\\nconst FlexCenter = styled(Block)`\\n  ${flexCenterStyle}\\n`;\\nexport const FlexCenterExample: Story<{}> = () => {\\n  return <FlexCenter>flex center</FlexCenter>;\\n};\\nFlexCenterExample.storyName = 'FlexCenter';\\n\\ntype FlexWidthProps = {\\n  width: string;\\n  height?: string;\\n  color?: any;\\n};\\nconst FlexWidth = styled(Block)<FlexWidthProps>`\\n  ${({ width }) => flexWidth(width)};\\n  height: ${({ height }) => height};\\n  background: ${({ color }) => getParsePaletteColor(color)};\\n`;\\nexport const FlexWidthExample: Story<{}> = () => {\\n  return (\\n    <RcBox display=\\\"flex\\\" width=\\\"100%\\\">\\n      <FlexWidth width=\\\"300px\\\" />\\n      <FlexWidth width=\\\"auto\\\" color=\\\"neutral.b04\\\" />\\n      <FlexWidth width=\\\"200px\\\" />\\n    </RcBox>\\n  );\\n};\\nFlexWidthExample.storyName = 'flexWidth';\\n\\nconst FocusVisible = styled(Basic)`\\n  outline: none;\\n  position: relative;\\n  ${focusVisibleShadowStyle};\\n`;\\nexport const FocusVisibleExample: Story<{}> = () => {\\n  return <FocusVisible tabIndex={0}>focus visible</FocusVisible>;\\n};\\nFocusVisibleExample.storyName = 'focusVisibleShadowStyle';\\n\\nconst Ellipsis = styled(Block)`\\n  ${ellipsis}\\n`;\\nexport const EllipsisExample: Story<{}> = () => {\\n  return <Ellipsis>line 1 line 2 line 3</Ellipsis>;\\n};\\nEllipsisExample.storyName = 'ellipsis';\\n\\nconst LineClamp = styled(Basic)`\\n  outline: none;\\n  position: relative;\\n  ${lineClamp(2, 38)};\\n`;\\nexport const LineClampExample: Story<{}> = () => {\\n  return (\\n    <LineClamp>\\n      line 1 <br />\\n      line 2 <br />\\n      line 3 <br />\\n    </LineClamp>\\n  );\\n};\\nLineClampExample.storyName = 'lineClamp';\\n\\nconst Palette = styled(Basic)`\\n  background-color: ${palette2('highlight', 'b03')};\\n`;\\nexport const PaletteExample: Story<{}> = () => {\\n  return <Palette>Palette</Palette>;\\n};\\nPaletteExample.storyName = 'palette';\\n\\nconst NonStyleButton = styled.button`\\n  ${nonStyleButton};\\n  margin: 1em;\\n  width: 100px;\\n  height: 100px;\\n  color: ${palette2('neutral', 'f06')};\\n  background-color: ${palette2('highlight', 'b02')};\\n`;\\nexport const NonStyleButtonExample: Story<{}> = () => {\\n  return <NonStyleButton>NonStyleButton</NonStyleButton>;\\n};\\nNonStyleButtonExample.storyName = 'nonStyleButton';\\n\\nconst NonTouchHoverMedia = styled(NonStyleButton)`\\n  ${nonTouchHoverMedia} {\\n    &:hover {\\n      background-color: ${setOpacity(palette2('highlight', 'b02'), '24')};\\n    }\\n  }\\n`;\\nexport const NonTouchHoverMediaExample: Story<{}> = () => {\\n  return <NonTouchHoverMedia>NonTouchHoverMedia</NonTouchHoverMedia>;\\n};\\nNonTouchHoverMediaExample.storyName = 'nonTouchHoverMedia';\\n\\nconst ZIndex = styled(FlexWidth)<{ zIndex: keyof RcTheme['zIndex'] }>`\\n  position: absolute;\\n  z-index: ${({ zIndex: value }) => zIndex(value)};\\n`;\\nexport const ZIndexExample: Story<{}> = () => {\\n  return (\\n    <FlexCenter>\\n      <ZIndex zIndex=\\\"snackbar\\\" width=\\\"30px\\\" height=\\\"30px\\\">\\n        snackbar\\n      </ZIndex>\\n      <ZIndex zIndex=\\\"modal\\\" width=\\\"100px\\\" color=\\\"highlight.b01\\\">\\n        modal\\n      </ZIndex>\\n    </FlexCenter>\\n  );\\n};\\nZIndexExample.storyName = 'zIndex';\\n// Interaction state\\n// https://wiki.ringcentral.com/pages/viewpage.action?pageId=424536658\\n\",\"locationsMap\":{\"darken-example\":{\"startLoc\":{\"col\":40,\"line\":49},\"endLoc\":{\"col\":1,\"line\":51},\"startBody\":{\"col\":40,\"line\":49},\"endBody\":{\"col\":1,\"line\":51}},\"lighten-example\":{\"startLoc\":{\"col\":41,\"line\":57},\"endLoc\":{\"col\":1,\"line\":59},\"startBody\":{\"col\":41,\"line\":57},\"endBody\":{\"col\":1,\"line\":59}},\"opacity-example\":{\"startLoc\":{\"col\":41,\"line\":65},\"endLoc\":{\"col\":1,\"line\":67},\"startBody\":{\"col\":41,\"line\":65},\"endBody\":{\"col\":1,\"line\":67}},\"palette-contrast-text-example\":{\"startLoc\":{\"col\":53,\"line\":73},\"endLoc\":{\"col\":1,\"line\":75},\"startBody\":{\"col\":53,\"line\":73},\"endBody\":{\"col\":1,\"line\":75}},\"radius-example\":{\"startLoc\":{\"col\":40,\"line\":81},\"endLoc\":{\"col\":1,\"line\":83},\"startBody\":{\"col\":40,\"line\":81},\"endBody\":{\"col\":1,\"line\":83}},\"shadows-example\":{\"startLoc\":{\"col\":41,\"line\":89},\"endLoc\":{\"col\":1,\"line\":91},\"startBody\":{\"col\":41,\"line\":89},\"endBody\":{\"col\":1,\"line\":91}},\"spacing-example\":{\"startLoc\":{\"col\":41,\"line\":101},\"endLoc\":{\"col\":1,\"line\":108},\"startBody\":{\"col\":41,\"line\":101},\"endBody\":{\"col\":1,\"line\":108}},\"contrast-bg-color-example\":{\"startLoc\":{\"col\":49,\"line\":137},\"endLoc\":{\"col\":1,\"line\":144},\"startBody\":{\"col\":49,\"line\":137},\"endBody\":{\"col\":1,\"line\":144}},\"typography-example\":{\"startLoc\":{\"col\":44,\"line\":150},\"endLoc\":{\"col\":1,\"line\":152},\"startBody\":{\"col\":44,\"line\":150},\"endBody\":{\"col\":1,\"line\":152}},\"fake-border-example\":{\"startLoc\":{\"col\":44,\"line\":166},\"endLoc\":{\"col\":1,\"line\":173},\"startBody\":{\"col\":44,\"line\":166},\"endBody\":{\"col\":1,\"line\":173}},\"flex-center-example\":{\"startLoc\":{\"col\":44,\"line\":179},\"endLoc\":{\"col\":1,\"line\":181},\"startBody\":{\"col\":44,\"line\":179},\"endBody\":{\"col\":1,\"line\":181}},\"flex-width-example\":{\"startLoc\":{\"col\":43,\"line\":194},\"endLoc\":{\"col\":1,\"line\":202},\"startBody\":{\"col\":43,\"line\":194},\"endBody\":{\"col\":1,\"line\":202}},\"focus-visible-example\":{\"startLoc\":{\"col\":46,\"line\":210},\"endLoc\":{\"col\":1,\"line\":212},\"startBody\":{\"col\":46,\"line\":210},\"endBody\":{\"col\":1,\"line\":212}},\"ellipsis-example\":{\"startLoc\":{\"col\":42,\"line\":218},\"endLoc\":{\"col\":1,\"line\":220},\"startBody\":{\"col\":42,\"line\":218},\"endBody\":{\"col\":1,\"line\":220}},\"line-clamp-example\":{\"startLoc\":{\"col\":43,\"line\":228},\"endLoc\":{\"col\":1,\"line\":236},\"startBody\":{\"col\":43,\"line\":228},\"endBody\":{\"col\":1,\"line\":236}},\"palette-example\":{\"startLoc\":{\"col\":41,\"line\":242},\"endLoc\":{\"col\":1,\"line\":244},\"startBody\":{\"col\":41,\"line\":242},\"endBody\":{\"col\":1,\"line\":244}},\"non-style-button-example\":{\"startLoc\":{\"col\":48,\"line\":255},\"endLoc\":{\"col\":1,\"line\":257},\"startBody\":{\"col\":48,\"line\":255},\"endBody\":{\"col\":1,\"line\":257}},\"non-touch-hover-media-example\":{\"startLoc\":{\"col\":52,\"line\":267},\"endLoc\":{\"col\":1,\"line\":269},\"startBody\":{\"col\":52,\"line\":267},\"endBody\":{\"col\":1,\"line\":269}},\"z-index-example\":{\"startLoc\":{\"col\":40,\"line\":276},\"endLoc\":{\"col\":1,\"line\":287},\"startBody\":{\"col\":40,\"line\":276},\"endBody\":{\"col\":1,\"line\":287}}}},},\n  title: '💅 Style system/utils',\n  argTypes: {},\n} as Meta;\n\nconst Basic = styled.div`\n  margin: 1em;\n  width: 100px;\n  height: 100px;\n  color: ${palette2('neutral', 'f06')};\n`;\n\nconst Block = styled(Basic)`\n  margin: 1em;\n  width: 100px;\n  height: 100px;\n  background-color: ${palette2('interactive', 'b02')};\n`;\n\nconst Darken = styled(Block)`\n  background-color: ${darken(palette2('interactive', 'b02'), 0.5)};\n`;\nexport const DarkenExample: Story<{}> = () => {\n  return <Darken>darken</Darken>;\n};;\nDarkenExample.storyName = 'darken';\n\nconst Lighten = styled(Block)`\n  background-color: ${lighten(palette2('interactive', 'b02'), 0.5)};\n`;\nexport const LightenExample: Story<{}> = () => {\n  return <Lighten>Lighten</Lighten>;\n};;\nLightenExample.storyName = 'lighten';\n\nconst Opacity = styled(Block)`\n  opacity: ${opacity('48')};\n`;\nexport const OpacityExample: Story<{}> = () => {\n  return <Opacity>Opacity</Opacity>;\n};;\nOpacityExample.storyName = 'opacity';\n\nconst PaletteContrastText = styled(Block)`\n  color: ${paletteContrastText(palette2('interactive', 'b02'))};\n`;\nexport const PaletteContrastTextExample: Story<{}> = () => {\n  return <PaletteContrastText>PaletteContrastText</PaletteContrastText>;\n};;\nPaletteContrastTextExample.storyName = 'paletteContrastText';\n\nconst Radius = styled(Block)`\n  border-radius: ${radius('circle')};\n`;\nexport const RadiusExample: Story<{}> = () => {\n  return <Radius />;\n};;\nRadiusExample.storyName = 'radius';\n\nconst Shadows = styled(Radius)`\n  box-shadow: ${shadows('16')};\n`;\nexport const ShadowsExample: Story<{}> = () => {\n  return <Shadows />;\n};;\nShadowsExample.storyName = 'shadows';\n\nconst Padding = styled(Radius)`\n  padding: ${spacing(6)};\n  box-sizing: border-box;\n`;\nconst Margin = styled(Padding)`\n  margin: ${spacing(10)};\n`;\nexport const SpacingExample: Story<{}> = () => {\n  return (\n    <>\n      <Padding>padding</Padding>\n      <Margin>margin</Margin>\n    </>\n  );\n};;\nSpacingExample.storyName = 'spacing';\n\nconst ContrastBgColor = styled(Block)`\n  ${({ theme }) => {\n    const [currColor, contrastBgColor] = getContrastBgColor({\n      theme,\n      color: 'interactive.b02',\n    });\n\n    return css`\n      color: ${currColor};\n      background-color: ${contrastBgColor};\n    `;\n  }};\n`;\nconst ContrastBgColor2 = styled(Block)`\n  ${({ theme }) => {\n    const [currColor, contrastBgColor] = getContrastBgColor({\n      theme,\n      color: 'highlight.b01',\n    });\n\n    return css`\n      color: ${currColor};\n      background-color: ${contrastBgColor};\n    `;\n  }};\n`;\nexport const ContrastBgColorExample: Story<{}> = () => {\n  return (\n    <>\n      <ContrastBgColor>getContrastBgColor2</ContrastBgColor>\n      <ContrastBgColor2>getContrastBgColor2</ContrastBgColor2>\n    </>\n  );\n};;\nContrastBgColorExample.storyName = 'getContrastBgColor';\n\nconst Typography = styled.div`\n  ${typography('display1')}\n`;\nexport const TypographyExample: Story<{}> = () => {\n  return <Typography>Typography display1</Typography>;\n};;\nTypographyExample.storyName = 'typography';\n\nconst FakeBorder = styled(Block)`\n  ${\n    // default will use `palette2('highContrast')`, that will only show in highContrast theme\n    fakeBorder()\n  }\n`;\nconst FakeBorder2 = styled(Block)`\n  ${fakeBorder({\n    color: palette2('neutral', 'l03'),\n  })}\n`;\nexport const FakeBorderExample: Story<{}> = () => {\n  return (\n    <>\n      <FakeBorder>border in highContrast theme</FakeBorder>\n      <FakeBorder2>fakeborder</FakeBorder2>\n    </>\n  );\n};;\nFakeBorderExample.storyName = 'fakeBorder';\n\nconst FlexCenter = styled(Block)`\n  ${flexCenterStyle}\n`;\nexport const FlexCenterExample: Story<{}> = () => {\n  return <FlexCenter>flex center</FlexCenter>;\n};;\nFlexCenterExample.storyName = 'FlexCenter';\n\ntype FlexWidthProps = {\n  width: string;\n  height?: string;\n  color?: any;\n};\nconst FlexWidth = styled(Block)<FlexWidthProps>`\n  ${({ width }) => flexWidth(width)};\n  height: ${({ height }) => height};\n  background: ${({ color }) => getParsePaletteColor(color)};\n`;\nexport const FlexWidthExample: Story<{}> = () => {\n  return (\n    <RcBox display=\"flex\" width=\"100%\">\n      <FlexWidth width=\"300px\" />\n      <FlexWidth width=\"auto\" color=\"neutral.b04\" />\n      <FlexWidth width=\"200px\" />\n    </RcBox>\n  );\n};;\nFlexWidthExample.storyName = 'flexWidth';\n\nconst FocusVisible = styled(Basic)`\n  outline: none;\n  position: relative;\n  ${focusVisibleShadowStyle};\n`;\nexport const FocusVisibleExample: Story<{}> = () => {\n  return <FocusVisible tabIndex={0}>focus visible</FocusVisible>;\n};;\nFocusVisibleExample.storyName = 'focusVisibleShadowStyle';\n\nconst Ellipsis = styled(Block)`\n  ${ellipsis}\n`;\nexport const EllipsisExample: Story<{}> = () => {\n  return <Ellipsis>line 1 line 2 line 3</Ellipsis>;\n};;\nEllipsisExample.storyName = 'ellipsis';\n\nconst LineClamp = styled(Basic)`\n  outline: none;\n  position: relative;\n  ${lineClamp(2, 38)};\n`;\nexport const LineClampExample: Story<{}> = () => {\n  return (\n    <LineClamp>\n      line 1 <br />\n      line 2 <br />\n      line 3 <br />\n    </LineClamp>\n  );\n};;\nLineClampExample.storyName = 'lineClamp';\n\nconst Palette = styled(Basic)`\n  background-color: ${palette2('highlight', 'b03')};\n`;\nexport const PaletteExample: Story<{}> = () => {\n  return <Palette>Palette</Palette>;\n};;\nPaletteExample.storyName = 'palette';\n\nconst NonStyleButton = styled.button`\n  ${nonStyleButton};\n  margin: 1em;\n  width: 100px;\n  height: 100px;\n  color: ${palette2('neutral', 'f06')};\n  background-color: ${palette2('highlight', 'b02')};\n`;\nexport const NonStyleButtonExample: Story<{}> = () => {\n  return <NonStyleButton>NonStyleButton</NonStyleButton>;\n};;\nNonStyleButtonExample.storyName = 'nonStyleButton';\n\nconst NonTouchHoverMedia = styled(NonStyleButton)`\n  ${nonTouchHoverMedia} {\n    &:hover {\n      background-color: ${setOpacity(palette2('highlight', 'b02'), '24')};\n    }\n  }\n`;\nexport const NonTouchHoverMediaExample: Story<{}> = () => {\n  return <NonTouchHoverMedia>NonTouchHoverMedia</NonTouchHoverMedia>;\n};;\nNonTouchHoverMediaExample.storyName = 'nonTouchHoverMedia';\n\nconst ZIndex = styled(FlexWidth)<{ zIndex: keyof RcTheme['zIndex'] }>`\n  position: absolute;\n  z-index: ${({ zIndex: value }) => zIndex(value)};\n`;\nexport const ZIndexExample: Story<{}> = () => {\n  return (\n    <FlexCenter>\n      <ZIndex zIndex=\"snackbar\" width=\"30px\" height=\"30px\">\n        snackbar\n      </ZIndex>\n      <ZIndex zIndex=\"modal\" width=\"100px\" color=\"highlight.b01\">\n        modal\n      </ZIndex>\n    </FlexCenter>\n  );\n};\nZIndexExample.storyName = 'zIndex';\n// Interaction state\n// https://wiki.ringcentral.com/pages/viewpage.action?pageId=424536658\n","import {\n  css,\n  palette2,\n  RcThemedStyled,\n  shadows,\n  spacing,\n} from '../../../foundation';\nimport { RcAccordionProps } from '../Accordion';\nimport { RcAccordionClasses } from '../utils';\n\nexport const AccordionStyleBetweenClassName = [\n  `&.${RcAccordionClasses.root} + &.${RcAccordionClasses.expanded}`,\n  `&.${RcAccordionClasses.expanded} + &.${RcAccordionClasses.root}`,\n].join(',');\n\nexport const AccordionStyle: RcThemedStyled<RcAccordionProps, any> = () => {\n  return css`\n    box-shadow: none;\n\n    &:before {\n      display: none;\n    }\n\n    &.${RcAccordionClasses.root} + &.${RcAccordionClasses.root} {\n      border-top: 1px solid ${palette2('neutral', 'l02')};\n    }\n\n    ${AccordionStyleBetweenClassName} {\n      margin-top: ${spacing(4)};\n      border-top: 0;\n    }\n\n    &.${RcAccordionClasses.expanded} {\n      box-shadow: ${shadows(2)};\n      margin: 0;\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiAccordion from '@material-ui/core/Accordion';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { AccordionStyle } from './styles';\nimport { RcAccordionClasses } from './utils';\n\ntype RcAccordionProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiAccordion>,\n  'square'\n>;\n\nconst _RcAccordion = forwardRef<any, RcAccordionProps>(\n  (inProps: RcAccordionProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcAccordion' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcAccordionClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiAccordion square {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiAccordion>\n    );\n  },\n);\n\nconst RcAccordion = styled(_RcAccordion)`\n  ${AccordionStyle}\n`;\n\nRcAccordion.defaultProps = {};\n\nRcAccordion.displayName = 'RcAccordion';\n\nexport { RcAccordion };\nexport type { RcAccordionProps };\n","import { css, palette2, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcAccordionDetailsProps } from '../AccordionDetails';\n\nexport const AccordionDetailsStyle: RcThemedStyled<\n  RcAccordionDetailsProps,\n  any\n> = () => {\n  return css`\n    border-top: 1px solid ${palette2('neutral', 'l02')};\n    padding: ${spacing(4)};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { AccordionDetailsStyle } from './styles';\nimport { RcAccordionDetailsClasses } from './utils';\n\ntype RcAccordionDetailsProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiAccordionDetails>\n>;\n\nconst _RcAccordionDetails = forwardRef<any, RcAccordionDetailsProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcAccordionDetails' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcAccordionDetailsClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiAccordionDetails {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiAccordionDetails>\n    );\n  },\n);\n\nconst RcAccordionDetails = styled(_RcAccordionDetails)`\n  ${AccordionDetailsStyle}\n`;\n\nRcAccordionDetails.defaultProps = {};\n\nRcAccordionDetails.displayName = 'RcAccordionDetails';\n\nexport { RcAccordionDetails };\nexport type { RcAccordionDetailsProps };\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcIconButton } from '../../../Buttons/IconButton';\nimport { RcAccordionSummaryProps } from '../AccordionSummary';\nimport { RcAccordionSummaryClasses } from '../utils';\n\nexport const AccordionSummaryStyle: RcThemedStyled<\n  RcAccordionSummaryProps,\n  any\n> = () => {\n  // TODO: 48px to keep min-height as same as not expend, check that when designer cleanup\n  return css`\n    box-sizing: border-box;\n    padding: ${spacing(0, 4)};\n\n    &.${RcAccordionSummaryClasses.expanded} {\n      margin: 0;\n      min-height: 48px;\n    }\n\n    .${RcAccordionSummaryClasses.content} {\n      margin: 0;\n      align-items: center;\n    }\n\n    ${RcIconButton} {\n      position: relative;\n      overflow: hidden;\n    }\n\n    .${RcAccordionSummaryClasses.expandIcon} {\n      margin-right: 0;\n      padding: 0;\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport ArrowDown2 from '../../../icon/ArrowDown2';\nimport { RcIconButton, RcIconButtonProps } from '../../Buttons/IconButton';\nimport { AccordionSummaryStyle } from './styles';\nimport { RcAccordionSummaryClasses } from './utils';\n\ntype RcAccordionSummaryProps = {\n  /** The props apply on `RcIconButton` */\n  IconButtonProps?: Partial<RcIconButtonProps>;\n  /** The icon to display as the expand indicator, default is `ArrowUp2` */\n  expandIcon?: RcIconButtonProps['symbol'] | boolean;\n} & RcBaseProps<\n  ComponentProps<typeof MuiAccordionSummary>,\n  'IconButtonProps' | 'expandIcon'\n>;\n\nconst defaultIconButtonProps = { disableRipple: true };\n\nconst _RcAccordionSummary = forwardRef<any, RcAccordionSummaryProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcAccordionSummary' });\n    const {\n      classes: classesProp,\n      expandIcon: expandIconProp,\n      IconButtonProps,\n      children,\n      ...rest\n    } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcAccordionSummaryClasses, classesProp),\n      [classesProp],\n    );\n\n    const expandIcon = useMemo(\n      () =>\n        expandIconProp ? (\n          <RcIconButton\n            symbol={expandIconProp === true ? ArrowDown2 : expandIconProp}\n            tabIndex={-1}\n            {...IconButtonProps}\n          />\n        ) : undefined,\n      [IconButtonProps, expandIconProp],\n    );\n\n    return (\n      <MuiAccordionSummary\n        {...rest}\n        ref={ref}\n        classes={classes}\n        // * hide that IconButtonProps, for user use Jsx paa from outside directly\n        IconButtonProps={defaultIconButtonProps}\n        expandIcon={expandIcon}\n      >\n        {children}\n      </MuiAccordionSummary>\n    );\n  },\n);\n\nconst RcAccordionSummary = styled(_RcAccordionSummary)`\n  ${AccordionSummaryStyle}\n`;\n\nRcAccordionSummary.defaultProps = {\n  disableRipple: false,\n};\n\nRcAccordionSummary.displayName = 'RcAccordionSummary';\n\nexport { RcAccordionSummary };\n\nexport type { RcAccordionSummaryProps };\n","import React from 'react';\n\nimport {\n  css,\n  flexCenterStyle,\n  radius,\n  RcThemedStyled,\n  typography,\n} from '../../../foundation';\nimport { RcAlertProps } from '../Alert';\nimport { RcAlertClasses, RcAlertColors, RcAlertSpacings } from '../utils';\n\nconst textColor: RcThemedStyled<RcAlertProps> = ({ severity }) =>\n  RcAlertColors[severity!].text;\n\nconst backgroundColor: RcThemedStyled<RcAlertProps> = ({ severity }) =>\n  RcAlertColors[severity!].background;\n\nconst rootSpacing: RcThemedStyled<RcAlertProps> = ({ size }) =>\n  RcAlertSpacings[size!];\n\nexport const EmptyIcon = <></>;\n\nexport const AlertStyle: RcThemedStyled<RcAlertProps, any> = ({\n  align,\n  square,\n  icon,\n}) => {\n  const isEmpty = icon === undefined;\n\n  return css`\n    &.${RcAlertClasses.root} {\n      background-color: ${backgroundColor};\n      display: flex;\n      padding: ${rootSpacing};\n      word-break: break-word;\n      border-radius: ${square && radius('zero')};\n    }\n\n    .${RcAlertClasses.message} {\n      ${typography('body1')};\n      color: ${textColor};\n      text-align: ${align};\n      flex: 1 1 auto;\n      padding: 0;\n    }\n\n    .${RcAlertClasses.icon} {\n      ${flexCenterStyle};\n      ${isEmpty && `margin: 0`};\n      padding: 0;\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef } from 'react';\n\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcBaseSize,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { AlertStyle, EmptyIcon } from './styles';\nimport { RcAlertClasses } from './utils';\n\ntype RcAlertSize = RcBaseSize<'small' | 'medium'>;\n\ntype RcAlertProps = {\n  /** that text align of message */\n  align?: 'center' | 'left' | 'right';\n  /** size with spacing between message and root */\n  size?: RcAlertSize;\n} & RcBaseProps<\n  ComponentProps<typeof MuiAlert>,\n  'iconMapping' | 'variant' | 'color'\n>;\n\nconst _RcAlert = forwardRef<any, RcAlertProps>((inProps: RcAlertProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcAlert' });\n  const { icon, classes: classesProp, children, align, size, ...rest } = props;\n  const classes = combineClasses(RcAlertClasses, classesProp);\n\n  return (\n    <MuiAlert\n      // * no icon in current design\n      icon={icon === true ? undefined : icon ?? EmptyIcon}\n      {...rest}\n      ref={ref}\n      classes={classes}\n    >\n      {children}\n    </MuiAlert>\n  );\n});\n\nconst RcAlert = styled(_RcAlert)`\n  ${AlertStyle}\n`;\n\nRcAlert.defaultProps = {\n  severity: 'info',\n  size: 'medium',\n  align: 'left',\n  square: true,\n};\n\nRcAlert.displayName = 'RcAlert';\n\nexport { RcAlert };\nexport type { RcAlertProps, RcAlertSize };\n","import MuiAppBar, {\n  AppBarProps as MuiAppBarProps,\n} from '@material-ui/core/AppBar';\n\nimport { palette2, RcBaseProps, styled } from '../../foundation';\n\nconst TOP_BAR_HEIGHT = '56px';\nconst TOP_BAR_MIN_WIDTH = '480px';\n\ntype RcAppBarProps = RcBaseProps<\n  MuiAppBarProps,\n  'color' | 'variant' | 'square'\n>;\n\nconst RcAppBar = styled(MuiAppBar)<RcAppBarProps>`\n  height: ${TOP_BAR_HEIGHT};\n  min-width: ${TOP_BAR_MIN_WIDTH};\n  background-color: ${palette2('neutral', 'b01')};\n  background: linear-gradient(\n    to right,\n    ${palette2('header', 'bgLeft')},\n    ${palette2('header', 'bgRight')}\n  );\n  border-bottom: 1px solid ${palette2('header', 'divider')};\n  z-index: ${({ theme }) => `${theme.zIndex.drawer + 10}`};\n`;\n\nRcAppBar.displayName = 'RcAppBar';\n\nRcAppBar.defaultProps = {\n  position: 'static',\n  elevation: 0,\n};\n\nexport { RcAppBar };\nexport type { RcAppBarProps };\n","import React, { forwardRef } from 'react';\n\nimport {\n  css,\n  getParsePaletteColor,\n  palette2,\n  radius,\n  RcPaletteProp,\n  RcTheme,\n  styled,\n  typography,\n} from '../../../foundation';\nimport palette from '../../../foundation/theme/assets/palette.light.json';\nimport { RcAvatarProps } from '../Avatar';\nimport { RcAvatarFonts, RcAvatarSizes } from '../utils';\n\nconst avatarPaletteKeys = Object.keys(palette.avatar);\n\nconst getBackgroundColor = (color?: RcPaletteProp, iconSymbol?: any) => {\n  if (\n    color &&\n    typeof color === 'string' &&\n    avatarPaletteKeys.indexOf(color) > -1\n  ) {\n    return palette2('avatar', color as keyof RcTheme['palette']['avatar']);\n  }\n\n  return getParsePaletteColor(\n    color,\n    iconSymbol ? ['avatar', 'primary'] : ['neutral', 'b03'],\n  );\n};\n\nexport type StyledAvatarProps = Pick<\n  RcAvatarProps<true>,\n  'size' | 'color' | 'iconSymbol' | 'className' | 'children'\n>;\n\nconst _StyledAvatar = forwardRef<any, StyledAvatarProps>(\n  ({ color, size, iconSymbol, ...rest }, ref) => {\n    return <div ref={ref} {...rest} />;\n  },\n);\n\nexport const StyledAvatar = styled(_StyledAvatar)`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  flex-shrink: 0;\n  line-height: 1;\n  border-radius: ${radius('circle')};\n  overflow: hidden;\n  user-select: none;\n  outline: none;\n  color: ${palette2('neutral', 'f01')};\n\n  ${({ size, color, iconSymbol }) => {\n    const value = RcAvatarSizes[size!];\n    return css`\n      ${typography(RcAvatarFonts[size!])};\n      width: ${value}px;\n      height: ${value}px;\n      background-color: ${getBackgroundColor(color, iconSymbol)};\n    `;\n  }};\n\n  > img,\n  > canvas {\n    width: 100%;\n    height: 100%;\n  }\n`;\n","import React, { forwardRef } from 'react';\n\nimport {\n  css,\n  focusVisible,\n  focusVisibleColor,\n  focusWithin,\n  nonStyleButton,\n  opacity,\n  styled,\n} from '../../../foundation';\nimport { RcAvatarProps } from '../Avatar';\nimport { RcAvatarClasses } from '../utils';\n\nexport type StyledAvatarWrapperProps = {} & RcAvatarProps<true>;\n\nconst _StyledAvatarWrapper = forwardRef<any, StyledAvatarWrapperProps>(\n  (\n    { children, clickable, color, shouldRenderPresenceHovered, ...rest },\n    ref,\n  ) => {\n    if (clickable) {\n      return (\n        // as any to prevent div and button type different issue\n        <button ref={ref} type=\"button\" {...(rest as any)}>\n          {children}\n        </button>\n      );\n    }\n\n    return (\n      <div ref={ref as any} {...(rest as any)}>\n        {children}\n      </div>\n    );\n  },\n);\n\nconst focusVisibleAndAvatarContainer = `${focusVisible} .${RcAvatarClasses.avatarContainer}`;\n\nexport const StyledAvatarWrapper = styled(_StyledAvatarWrapper)`\n  position: relative;\n  display: inline-flex;\n  outline: 0;\n\n  ${({ disabled }) =>\n    disabled &&\n    css`\n      pointer-events: none;\n      opacity: ${opacity('32')};\n    `};\n\n  ${({ shouldRenderPresenceHovered }) =>\n    shouldRenderPresenceHovered &&\n    css`\n      .${RcAvatarClasses.presenceWrapper} {\n        visibility: hidden;\n      }\n\n      ${focusWithin} {\n        .${RcAvatarClasses.presenceWrapper} {\n          visibility: visible;\n        }\n      }\n    `}\n\n  ${({ clickable }) =>\n    clickable &&\n    css`\n      ${nonStyleButton};\n\n      ${focusVisible} {\n        box-shadow: 0 0 0 1px ${focusVisibleColor};\n        border-radius: 4px;\n      }\n\n      ${focusVisibleAndAvatarContainer},\n      .${RcAvatarClasses.avatarContainer}:hover {\n        opacity: ${opacity('12', true)};\n      }\n\n      ${focusVisibleAndAvatarContainer},\n      .${RcAvatarClasses.avatarContainer} {\n        &:active {\n          opacity: ${opacity('24', true)};\n        }\n      }\n    `};\n`;\n","import React, { ComponentProps, FunctionComponent } from 'react';\n\nimport { styled } from '../../../foundation';\nimport { RcIcon } from '../../Icon';\n\ntype StyledIconAvatarProps = { size: number } & Pick<\n  ComponentProps<typeof RcIcon>,\n  'symbol'\n>;\n\nconst _StyledIconAvatar: FunctionComponent<StyledIconAvatarProps> = ({\n  size,\n  ...rest\n}) => <RcIcon size=\"inherit\" {...rest} />;\n\nexport const StyledIconAvatar = styled(_StyledIconAvatar)`\n  font-size: ${({ size }) => size}px;\n`;\n","import React, { FunctionComponent } from 'react';\n\nimport {\n  flexCenterStyle,\n  palette2,\n  setOpacity,\n  styled,\n} from '../../../foundation';\nimport Edit from '../../../icon/Edit';\nimport { RcIcon } from '../../Icon';\n\nconst StyledMask = styled.div`\n  position: absolute;\n  right: 0;\n  bottom: 0;\n\n  width: 100%;\n  height: 27.5%;\n  background-color: ${setOpacity(palette2('neutral', 'b06'), '56')};\n  color: ${palette2('neutral', 'f01')};\n  text-align: center;\n  ${flexCenterStyle}\n`;\nconst defaultChildren = <RcIcon size=\"small\" symbol={Edit} />;\n\ntype RcAvatarMaskProps = {\n  className?: string;\n};\n\nconst RcAvatarMask: FunctionComponent<RcAvatarMaskProps> = ({\n  className,\n  children = defaultChildren,\n}) => {\n  return <StyledMask className={className}>{children}</StyledMask>;\n};\n\nexport { RcAvatarMask };\nexport type { RcAvatarMaskProps };\n","import { styled } from '../../../foundation';\nimport { PresenceOrigin } from '../Avatar';\n\nexport const StyledPresenceWrapper = styled.div<{\n  horizontal: PresenceOrigin['horizontal'];\n  vertical: PresenceOrigin['vertical'];\n}>`\n  position: absolute;\n  ${({ horizontal }) => horizontal}: 14%;\n  ${({ vertical }) => vertical}: 14%;\n  transform: translate(\n    ${({ horizontal }) => (horizontal === 'right' ? '' : '-')}50%,\n    ${({ vertical }) => (vertical === 'bottom' ? '' : '-')}50%\n  );\n  transform-origin: 100% 100%;\n`;\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiBackdrop from '@material-ui/core/Backdrop';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { BackdropStyle } from './styles';\nimport { RcBackdropClasses } from './utils';\n\ntype RcBackdropProps = {} & RcBaseProps<ComponentProps<typeof MuiBackdrop>>;\n\nconst _RcBackdrop = forwardRef<any, RcBackdropProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcBackdrop' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcBackdropClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiBackdrop {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiBackdrop>\n  );\n});\n\nconst RcBackdrop = styled(_RcBackdrop)`\n  ${BackdropStyle}\n`;\n\nRcBackdrop.defaultProps = {};\n\nRcBackdrop.displayName = 'RcBackdrop';\n\nexport { RcBackdrop };\nexport type { RcBackdropProps };\n","import {\n  css,\n  fakeBorder,\n  getParsePaletteColor,\n  RcThemedStyled,\n} from '../../../foundation';\nimport { RcBadgeProps } from '../Badge';\nimport { RcBadgeClasses } from '../utils';\n\nexport const BadgeStyle: RcThemedStyled<RcBadgeProps, any> = ({\n  badgeContent,\n  overlap,\n  variant,\n  textColor,\n  borderColor,\n  max,\n  color,\n}) => {\n  const overlapNone = overlap === 'none';\n  const isStandard = variant !== 'dot';\n\n  const borderCurrColor = getParsePaletteColor(borderColor, null, false);\n\n  // * only when value is string or number need check that length\n  const manyChar =\n    (['number', 'string'].includes(typeof badgeContent) &&\n      `${badgeContent}`.length !== 1) ||\n    (max && max > 0 && +badgeContent! > max);\n\n  return css`\n    .${RcBadgeClasses.badge} {\n      color: ${getParsePaletteColor(textColor!, null, false)};\n      background-color: ${getParsePaletteColor(color, null, false)};\n\n      ${borderColor &&\n      css`\n        ${isStandard\n          ? fakeBorder({ color: borderCurrColor, radius: 'round' })\n          : css`\n              border-color: ${borderCurrColor};\n            `}\n      `};\n\n      ${isStandard &&\n      css`\n        height: 18px;\n        min-width: 18px;\n        padding: ${!manyChar && 0};\n      `}\n\n      ${overlapNone &&\n      css`\n        position: unset;\n        transform: unset;\n\n        &.${RcBadgeClasses.invisible} {\n          transform: scale(0);\n        }\n      `}\n    }\n  `;\n};\n","import React, {\n  ComponentProps,\n  ComponentType,\n  ElementType,\n  forwardRef,\n  useMemo,\n} from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiBadge from '@material-ui/core/Badge';\nimport { capitalize } from '@material-ui/core/utils';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  RcPaletteKeys,\n  styled,\n  UnionPick,\n  useThemeProps,\n} from '../../foundation';\nimport { RcBox } from '../Box';\nimport { RcPresence, RcPresenceProps } from '../Presence';\nimport { BadgeStyle } from './styles';\nimport { RcBadgeClasses } from './utils';\n\ntype RcBadgeProps = {\n  /** tag color, default is `highlight.b03` */\n  color?: RcPaletteKeys;\n  /** text color, default is `neutral.f01` */\n  textColor?: RcPaletteKeys;\n  /** tag border color */\n  borderColor?: RcPaletteKeys;\n  /** The component used for the root node. Either a string to use a HTML element or a component. */\n  component?: ElementType;\n  /** Wrapped shape the badge should overlap */\n  overlap?:\n    | UnionPick<\n        NonNullable<ComponentProps<typeof MuiBadge>['overlap']>,\n        'circular' | 'rectangular'\n      >\n    | 'none';\n  /**\n   * Custom dot render Component in `dot` mode\n   * if you don't want any dot, you can set `null`\n   */\n  dotComponent?: ComponentType<any> | null;\n  /** when mode is dot, that addition dotProps */\n  dotProps?: RcPresenceProps;\n} & RcBaseProps<ComponentProps<typeof MuiBadge>, 'overlap' | 'color'>;\n\nconst _RcBadge = forwardRef<any, RcBadgeProps>((inProps: RcBadgeProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcBadge' });\n\n  const {\n    classes: classesProp,\n    children,\n    overlap,\n    color,\n    variant,\n    textColor,\n    anchorOrigin,\n    borderColor,\n    component,\n    dotComponent,\n    dotProps,\n    ...rest\n  } = props;\n\n  const classes = useMemo(\n    () => combineProps(RcBadgeClasses, classesProp),\n    [classesProp],\n  );\n\n  const CustomDotBadge = useMemo(() => {\n    const isDot = variant === 'dot';\n\n    return isDot\n      ? forwardRef<any, any>(({ children: OmitChildren, ...rest }, ref) => {\n          const { horizontal, vertical } = anchorOrigin!;\n\n          const addClassName = `MuiBadge-anchorOrigin${capitalize(\n            vertical!,\n          )}${capitalize(horizontal!)}${capitalize(overlap!)}`;\n\n          const DotComponent = dotComponent ?? RcPresence;\n\n          const applyDotProps = combineProps(\n            { className: clsx(addClassName, RcBadgeClasses.badge) },\n            dotProps,\n          );\n\n          return (\n            <div {...rest} ref={ref}>\n              {children}\n              {dotComponent !== null && (\n                <RcBox position=\"absolute\" zIndex=\"1\" clone>\n                  <DotComponent {...applyDotProps} />\n                </RcBox>\n              )}\n            </div>\n          );\n        })\n      : undefined;\n  }, [anchorOrigin, children, dotComponent, dotProps, overlap, variant]);\n\n  return (\n    <MuiBadge\n      {...rest}\n      variant={variant}\n      anchorOrigin={anchorOrigin}\n      component={(component || CustomDotBadge) as any}\n      overlap={overlap !== 'none' ? overlap : undefined}\n      ref={ref}\n      classes={classes}\n    >\n      {children}\n    </MuiBadge>\n  );\n});\n\nconst RcBadge = styled(_RcBadge)`\n  ${BadgeStyle}\n`;\n\nRcBadge.defaultProps = {\n  color: 'highlight.b03',\n  textColor: 'neutral.f01',\n  overlap: 'rectangular',\n  anchorOrigin: {\n    horizontal: 'right',\n    vertical: 'top',\n  },\n};\n\nRcBadge.displayName = 'RcBadge';\n\nexport { RcBadge };\nexport type { RcBadgeProps };\n","import React, {\n  ComponentProps,\n  forwardRef,\n  useCallback,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from 'react';\n\nimport MuiButton from '@material-ui/core/Button';\n\nimport {\n  combineClasses,\n  isRcElement,\n  RcBaseColor,\n  RcBaseProps,\n  RcPaletteKeys,\n  RcTheme,\n  removeClassName,\n  styled,\n  useForkRef,\n  useTheme,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport { RcIcon, RcIconProps } from '../../Icon';\nimport { RcIconSizes } from '../../Icon/utils';\nimport { RcCircularProgress, RcCircularProgressProps } from '../../Progress';\nimport { withTooltip } from '../../Tooltip';\nimport { buttonStyle } from './styles';\nimport type { RcButtonSize } from './utils';\nimport { getButtonIconSize, RcButtonClasses } from './utils';\n\ntype RcButtonColor = RcBaseColor<\n  'primary' | 'secondary' | 'negative' | 'positive' | 'action' | 'neutral'\n>;\n\ntype RcButtonColorLoadingMode = 'prefix' | 'replace' | 'suffix';\n\ntype RcButtonVariant = 'text' | 'outlined' | 'contained' | 'plain';\n\ntype RcButtonRadius = keyof RcTheme['radius'];\n\ntype RcButtonProps = {\n  /** size of button, default is `large` */\n  size?: RcButtonSize;\n  /** variant of button, default is `contained` */\n  variant?: RcButtonVariant;\n  /** color of button */\n  color?: RcPaletteKeys | RcButtonColor;\n  /** is button loading, when `loading` that `disabled` will auto become `true` */\n  loading?: boolean;\n  /**\n   * disabled variant\n   *\n   * - `normal`: default disabled button style\n   * - `mask`: with mask cover on button, and do not change the button base color\n   *\n   * @default 'normal'\n   */\n  disabledVariant?: 'normal' | 'mask';\n  /** loading mode with button, default is `replace` */\n  loadingMode?: RcButtonColorLoadingMode;\n  /** Props send to `RcCircularProgress` when loading is `true` */\n  CircularProgressProps?: RcCircularProgressProps;\n  /** component for render root button, default is `button` */\n  component?: React.ElementType;\n  /** border radius for button */\n  radius?: RcButtonRadius;\n  /** should keep elevation when type is `container` */\n  keepElevation?: boolean;\n  /** @deprecated Icon, please use startIcon with `<RcIcon />` */\n  IconProps?: RcIconProps;\n} & RcBaseProps<\n  ComponentProps<typeof MuiButton>,\n  | 'color'\n  | 'size'\n  | 'variant'\n  | 'title'\n  // * use disableFocusRipple, so omit that\n  | 'focusRipple'\n>;\n\nconst _RcButton = forwardRef<any, RcButtonProps>(\n  (inProps: RcButtonProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcButton' });\n    const {\n      children: childrenProp,\n      classes: classesProp,\n      startIcon: startIconProp,\n      endIcon: endIconProp,\n      loading,\n      loadingMode,\n      disabled,\n      IconProps,\n      size,\n      color,\n      CircularProgressProps,\n      variant,\n      disabledVariant,\n      radius,\n      keepElevation,\n      ...rest\n    } = props;\n\n    const theme = useTheme();\n    const innerRef = useRef<HTMLButtonElement>(null);\n    const buttonRef = useForkRef(innerRef, ref);\n\n    const isPlain = variant === 'plain';\n    const isReplace = loadingMode === 'replace';\n    const iconSize = getButtonIconSize(size);\n\n    const loadingElm = useMemo(() => {\n      if (loading) {\n        const progressSize = RcIconSizes[iconSize];\n\n        return (\n          <RcCircularProgress\n            size={progressSize}\n            color=\"inherit\"\n            {...CircularProgressProps}\n          />\n        );\n      }\n      return undefined;\n    }, [CircularProgressProps, iconSize, loading]);\n\n    const getCurrIcon = useCallback(\n      (currIcon: React.ReactNode) => {\n        if (\n          isRcElement<RcIconProps>(currIcon, ['RcIcon']) &&\n          currIcon.props.size === RcIcon.defaultProps!.size\n        ) {\n          return React.cloneElement(currIcon, { size: iconSize });\n        }\n\n        return currIcon;\n      },\n      [iconSize],\n    );\n\n    const startIcon = useMemo(() => {\n      if (loadingElm) {\n        switch (loadingMode) {\n          case 'prefix':\n            return loadingElm;\n          case 'replace':\n            return undefined;\n          default:\n            break;\n        }\n      }\n\n      if (startIconProp) {\n        return getCurrIcon(startIconProp);\n      }\n\n      // TODO: IconProps will be remove\n      if (IconProps) {\n        return <RcIcon size={iconSize} {...IconProps} />;\n      }\n\n      return undefined;\n    }, [\n      IconProps,\n      getCurrIcon,\n      iconSize,\n      loadingElm,\n      loadingMode,\n      startIconProp,\n    ]);\n\n    const endIcon = useMemo(() => {\n      if (loadingElm) {\n        switch (loadingMode) {\n          case 'suffix':\n            return loadingElm;\n          case 'replace':\n            return undefined;\n          default:\n            break;\n        }\n      }\n\n      if (endIconProp) {\n        return getCurrIcon(endIconProp);\n      }\n\n      return undefined;\n    }, [loadingElm, endIconProp, loadingMode, getCurrIcon]);\n\n    const classes = useMemo(\n      () => combineClasses(RcButtonClasses, classesProp),\n      [classesProp],\n    );\n\n    // * need remove not need MuiButton-iconSizeMedium for icon render correct\n    useLayoutEffect(() => {\n      removeClassName(innerRef, 'MuiButton-iconSizeMedium');\n    });\n\n    return (\n      <MuiButton\n        ref={buttonRef}\n        disabled={disabled || loading}\n        variant={isPlain ? undefined : (variant as any)}\n        disableRipple={theme?.props?.MuiButton?.disableRipple || isPlain}\n        startIcon={startIcon}\n        endIcon={endIcon}\n        classes={classes}\n        {...rest}\n      >\n        {loading && isReplace ? loadingElm : childrenProp}\n      </MuiButton>\n    );\n  },\n);\n\n/** @release */\nconst RcButton = styled(\n  withDeprecatedCheck(\n    withTooltip(_RcButton),\n    [\n      {\n        prop: 'IconProps',\n        time: '2021-4',\n        comment: `@deprecated Icon, please use startIcon with \\`<RcIcon />\\` */`,\n      },\n    ],\n    'RcButton',\n  ),\n)`\n  ${buttonStyle}\n`;\n\nRcButton.defaultProps = {\n  size: 'large',\n  color: 'primary',\n  variant: 'contained',\n  loadingMode: 'replace',\n};\n\nRcButton.displayName = 'RcButton';\n\nexport { RcButton };\n\nexport type {\n  RcButtonColor,\n  RcButtonColorLoadingMode,\n  RcButtonProps,\n  RcButtonSize,\n  RcButtonVariant,\n};\n","import {\n  css,\n  fakeBorder,\n  focusVisible,\n  getParsePaletteColor,\n  nonTouchHoverMedia,\n  palette2,\n  paletteContrastText,\n  px,\n  radius,\n  RcThemedStyled,\n  setOpacity,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcButtonProps } from '../Button';\nimport {\n  RcButtonClasses,\n  RcButtonColors,\n  RcButtonHeights,\n  RcButtonIconSpace,\n  RcButtonMinWidths,\n  RcButtonPadding,\n  RcButtonTextColors,\n  RcButtonTypographies,\n} from '../utils';\n\nexport const buttonColor: RcThemedStyled<RcButtonProps> = ({ color }) =>\n  RcButtonColors[color!] || getParsePaletteColor(color);\n\nexport const plainButtonTextColor: RcThemedStyled<RcButtonProps> = ({\n  color,\n}) => RcButtonTextColors[color!] || getParsePaletteColor(color);\n\nexport const buttonTextColor: RcThemedStyled<RcButtonProps> = (props) =>\n  paletteContrastText(buttonColor(props));\n\nexport const buttonHoverColor: RcThemedStyled<RcButtonProps> = (props) =>\n  setOpacity(buttonColor(props), '08');\n\nconst containedButtonHoverColor: RcThemedStyled<RcButtonProps> = (props) =>\n  setOpacity(buttonColor(props), '08', true);\n\nexport const buttonStyle: RcThemedStyled<RcButtonProps, any> = (props) => {\n  const {\n    variant,\n    size,\n    radius: radiusProp,\n    keepElevation,\n    loading,\n    disabled,\n    disabledVariant,\n  } = props;\n  const isMask = loading || (disabled && disabledVariant === 'mask');\n\n  const textDisabledColor = !isMask ? palette2('disabled', 'f02') : undefined;\n\n  const plainTextColor = plainButtonTextColor(props);\n\n  const iconSpace = spacing(RcButtonIconSpace[size!]);\n\n  const isPlain = variant === 'plain';\n\n  return css`\n    text-transform: none;\n    ${typography(RcButtonTypographies[size!], true)};\n    text-align: center;\n    box-shadow: ${!keepElevation && 'unset'};\n    border-radius: ${radiusProp && radius(radiusProp)};\n\n    ${isMask &&\n    css`\n      &:after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        height: 100%;\n        width: 100%;\n        display: block;\n        background: ${setOpacity(palette2('neutral', 'b01'), '32')};\n        width: 100%;\n        height: 100%;\n        border-radius: ${radius(radiusProp ?? 'lg')};\n      }\n    `};\n\n    ${!isPlain &&\n    css`\n      min-width: ${px(RcButtonMinWidths[size!])};\n      min-height: ${px(RcButtonHeights[size!])};\n      padding: ${spacing(0, RcButtonPadding[size!])};\n    `};\n\n    .${RcButtonClasses.startIcon} {\n      margin-right: ${iconSpace};\n\n      ${isPlain &&\n      css`\n        margin-left: 0;\n      `};\n    }\n\n    .${RcButtonClasses.endIcon} {\n      margin-left: ${iconSpace};\n\n      ${isPlain &&\n      css`\n        margin-right: 0;\n      `};\n    }\n\n    &.${RcButtonClasses.text} {\n      color: ${plainButtonTextColor};\n\n      &.${RcButtonClasses.disabled} {\n        color: ${textDisabledColor};\n      }\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          background-color: ${buttonHoverColor};\n        }\n      }\n\n      ${isPlain &&\n      css`\n        padding: ${spacing(1)};\n        min-width: unset;\n        line-height: 1;\n\n        ${nonTouchHoverMedia} {\n          &:hover {\n            color: ${setOpacity(plainTextColor, '80')};\n            background-color: transparent;\n          }\n        }\n\n        ${focusVisible} {\n          ${fakeBorder({ color: plainButtonTextColor(props) })}\n        }\n\n        &:active {\n          &.${RcButtonClasses.text} {\n            color: ${setOpacity(plainTextColor, '64')};\n          }\n        }\n      `};\n    }\n\n    &.${RcButtonClasses.contained} {\n      color: ${buttonTextColor};\n      background-color: ${buttonColor};\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          background-color: ${containedButtonHoverColor};\n        }\n      }\n\n      ${!isMask &&\n      css`\n        &.${RcButtonClasses.disabled} {\n          background-color: ${palette2('disabled', 'b01')};\n          color: ${palette2('disabled', 'f01')};\n        }\n      `}\n    }\n\n    &.${RcButtonClasses.outlined} {\n      color: ${plainButtonTextColor};\n      border-color: ${plainButtonTextColor};\n      padding: ${spacing(0, RcButtonPadding[size!] - 0.25)};\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          background-color: ${buttonHoverColor};\n        }\n      }\n\n      &.${RcButtonClasses.disabled} {\n        color: ${textDisabledColor};\n        border-color: ${textDisabledColor};\n      }\n\n      &:after {\n        top: -1px;\n        bottom: -1px;\n        left: -1px;\n        right: -1px;\n        border: 1px solid transparent;\n      }\n    }\n  `;\n};\n","import React, { forwardRef, memo, ReactElement } from 'react';\n\nimport clsx from 'clsx';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  RcClassesProps,\n  RcTheme,\n  styled,\n  UnionOmit,\n  useTheme,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport { RcIcon, RcIconProps, RcIconSize } from '../../Icon';\nimport { RcTooltip, withTooltip } from '../../Tooltip';\nimport { RcButtonBase, RcButtonBaseProps } from '../ButtonBase';\nimport {\n  RcIconButtonDeprecatedProps,\n  rcIconButtonWarning,\n} from './deprecated/IconButtonProps';\nimport { iconButtonStyle } from './styles';\nimport { RcIconButtonClasses, RcIconButtonTouchRippleClasses } from './utils';\n\ntype RcIconButtonVariant =\n  | 'round'\n  | 'plain'\n  | 'inverse'\n  | 'outline'\n  | 'contained';\n\ntype RcIconButtonSize = UnionOmit<RcIconSize, 'inherit'>;\n\ntype RcIconButtonProps = {\n  /** variant, default with `round` */\n  variant?: RcIconButtonVariant;\n  /** button size, with default with `medium`   */\n  size?: RcIconButtonSize;\n  /** persist background color */\n  shouldPersistBg?: boolean;\n  /** make iconButton unVisible, default with `false` */\n  invisible?: boolean;\n  /** stretch icon to same size as container */\n  stretchIcon?: boolean;\n  /** still use color when disabled */\n  useColorWhenDisabled?: boolean;\n  /** custom border radius for tag, default is `lg` */\n  radius?: keyof RcTheme['radius'];\n  /**\n   * `box-shadow` with token\n   * 0 ~ 24 for different elevation shadow\n   */\n  elevation?: keyof RcTheme['shadows'];\n  /**\n   * `box-shadow` with token when button active\n   * 0 ~ 24 for different elevation shadow\n   */\n  activeElevation?: keyof RcTheme['shadows'];\n} & RcIconButtonDeprecatedProps &\n  Pick<\n    RcIconProps,\n    | 'symbol'\n    | 'loading'\n    | 'CircularProgressProps'\n    | 'iconColor'\n    | 'iconSize'\n    | 'color'\n  > &\n  RcClassesProps<'invisible' | 'outline' | 'contained' | 'icon' | 'persistBg'> &\n  RcBaseProps<RcButtonBaseProps, 'color'>;\n\nconst _RcIconButton = memo(\n  forwardRef<HTMLButtonElement, RcIconButtonProps>((inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcIconButton' });\n    const {\n      buttonRef = ref,\n      className,\n      classes,\n      children,\n      title,\n      symbol,\n      disabled,\n      invisible,\n      type,\n      loading,\n      TouchRippleProps,\n      variant,\n      CircularProgressProps,\n      color,\n      shouldPersistBg,\n      stretchIcon,\n      iconColor,\n      iconSize,\n      disableTouchRipple,\n      useColorWhenDisabled,\n      size,\n      radius,\n      elevation,\n      activeElevation,\n      aRef,\n      tooltipTitle,\n      tooltipForceHide,\n      disableToolTip,\n      alwaysEnableTooltip,\n      tooltipPlacement,\n      ariaLabel,\n      popperProps,\n      externalLink,\n      download,\n      autoFocus,\n      href,\n      ...rest\n    } = props;\n\n    const theme = useTheme();\n\n    const isOutline = variant === 'outline';\n    const isContained = variant === 'contained';\n    const isPlain = variant === 'plain';\n\n    const IconClassName = clsx(\n      className,\n      classes!.root,\n      RcIconButtonClasses.root,\n      {\n        [RcIconButtonClasses.disabled]: disabled,\n        [RcIconButtonClasses.invisible]: invisible,\n        [RcIconButtonClasses.outline]: isOutline,\n        [RcIconButtonClasses.contained]: isContained,\n      },\n    );\n\n    const iconButton = (() => {\n      const icon =\n        React.isValidElement(children) || children === '' ? (\n          (children as ReactElement)\n        ) : (\n          <RcIcon\n            symbol={symbol}\n            className={classes!.icon}\n            loading={loading}\n            CircularProgressProps={CircularProgressProps}\n          >\n            {children as string}\n          </RcIcon>\n        );\n\n      const iconButton = (\n        <RcButtonBase\n          ref={buttonRef as any}\n          disableRipple={theme.props?.MuiButtonBase?.disableRipple || isPlain}\n          type={type}\n          disabled={disabled}\n          aria-label={ariaLabel || tooltipTitle || title}\n          title={title}\n          aria-disabled={disabled}\n          className={IconClassName}\n          TouchRippleProps={combineProps(\n            {\n              classes: RcIconButtonTouchRippleClasses,\n            },\n            TouchRippleProps,\n          )}\n          {...rest}\n        >\n          {icon}\n        </RcButtonBase>\n      );\n\n      if (download && href) {\n        return (\n          <a download href={href} ref={aRef}>\n            {iconButton}\n          </a>\n        );\n      }\n\n      if (externalLink && href) {\n        return (\n          <a rel=\"noopener noreferrer external\" target=\"_blank\" href={href}>\n            {iconButton}\n          </a>\n        );\n      }\n      return iconButton;\n    })();\n\n    if (\n      !!tooltipTitle &&\n      ((!disabled && !disableToolTip) || (disabled && alwaysEnableTooltip))\n    ) {\n      return (\n        <RcTooltip\n          title={tooltipTitle}\n          tooltipForceHide={tooltipForceHide}\n          placement={tooltipPlacement}\n          PopperProps={popperProps}\n        >\n          {iconButton}\n        </RcTooltip>\n      );\n    }\n    return iconButton;\n  }),\n);\n\nconst RcIconButton = styled(\n  withDeprecatedCheck(\n    withTooltip(_RcIconButton),\n    // TODO remove when ready\n    rcIconButtonWarning as any,\n    'RcIconButton',\n  ),\n)`\n  ${iconButtonStyle}\n`;\n\nRcIconButton.displayName = 'RcIconButton';\n\nRcIconButton.defaultProps = {\n  variant: 'round',\n  color: 'neutral.f04',\n  size: 'medium',\n  type: 'button',\n  focusRipple: true,\n  disableTouchRipple: true,\n  centerRipple: true,\n  classes: {},\n  useRcTooltip: true,\n};\n\nexport { RcIconButton };\nexport type { RcIconButtonProps, RcIconButtonSize, RcIconButtonVariant };\n","import {\n  backgroundTransition,\n  css,\n  focusVisible,\n  focusVisibleColor,\n  getParsePaletteColor,\n  nonTouchHoverMedia,\n  palette2,\n  paletteContrastText,\n  px,\n  radius,\n  RcTheme,\n  RcThemedStyled,\n  setOpacity,\n  shadows,\n} from '../../../../foundation';\nimport { RcIcon } from '../../../Icon';\nimport { RcIconButtonProps, RcIconButtonVariant } from '../IconButton';\nimport {\n  RcIconButtonClasses,\n  RcIconButtonFocusVisibleInsetSize,\n  RcIconButtonSizes,\n  RcIconButtonTouchRippleClasses,\n} from '../utils';\n\nexport const getFocusVisibleInsetSize: RcThemedStyled<RcIconButtonProps, any> =\n  ({ size }) => {\n    const inset = RcIconButtonFocusVisibleInsetSize[size!];\n    return css`\n      top: -${inset}px;\n      right: -${inset}px;\n      bottom: -${inset}px;\n      left: -${inset}px;\n    `;\n  };\n\n// * text inside button should also set style\nconst childrenClass = `&,${RcIcon}`;\n\nconst containedVariantTransitions: RcThemedStyled<RcIconButtonProps, string> =\n  ({ theme }) =>\n    theme.transitions.create(['background-color', 'box-shadow', 'border'], {\n      duration: theme.transitions.duration.short,\n    });\n\ntype PlainIconButtonFocusStyleOption = {\n  radius?: keyof RcTheme['radius'];\n};\n\nexport const plainIconButtonFocusStyle = ({\n  radius: radiusProp = 'circle',\n}: PlainIconButtonFocusStyleOption = {}) => css`\n  &:after {\n    content: '';\n    position: absolute;\n    ${getFocusVisibleInsetSize};\n    box-shadow: 0 0 0 1px ${focusVisibleColor};\n    border-radius: ${radius(radiusProp)};\n    pointer-events: none;\n    z-index: 1;\n  }\n`;\n\nexport const iconButtonStyle: RcThemedStyled<RcIconButtonProps, any> = ({\n  variant,\n  size,\n  stretchIcon,\n  color,\n  disabled,\n  useColorWhenDisabled,\n  shouldPersistBg,\n  radius: radiusProp,\n  elevation,\n  activeElevation,\n}) => {\n  const iconSize = RcIconButtonSizes[size!];\n\n  const isCircle = (\n    ['plain', 'round', 'inverse', 'contained'] as RcIconButtonVariant[]\n  ).includes(variant!);\n  const isPlain = variant === 'plain';\n  const isInverse = variant === 'inverse';\n  const isOutline = variant === 'outline';\n  const isContained = variant === 'contained';\n\n  const containerSize = px(isPlain ? iconSize : iconSize * 2);\n\n  const mainColor = getParsePaletteColor(color);\n  const mainColorContrast = paletteContrastText(mainColor);\n\n  const currRadius =\n    radiusProp || (isOutline ? 'lg' : isCircle ? 'circle' : 'zero');\n\n  const persistBgColor = setOpacity(mainColor, isInverse ? '16' : '12');\n\n  const defaultShadow = isContained ? shadows('1') : undefined;\n\n  const nowShadow =\n    elevation !== undefined ? shadows(elevation) : defaultShadow;\n\n  return css`\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n\n    width: ${containerSize};\n    height: ${containerSize};\n    color: ${mainColor};\n    border-radius: ${radius(currRadius)};\n    transition: ${backgroundTransition};\n    cursor: ${disabled ? 'default' : 'pointer'};\n    background-color: ${(shouldPersistBg || isInverse) && persistBgColor};\n    box-shadow: ${nowShadow};\n\n    ${nowShadow &&\n    css`\n      transition: ${containedVariantTransitions};\n\n      &:active {\n        box-shadow: ${shadows(\n          activeElevation ??\n            (elevation ? Math.min(+(elevation as any) + 11, 24) : '12'),\n        )};\n      }\n    `};\n\n    ${childrenClass} {\n      font-size: ${stretchIcon\n        ? containerSize\n        : px(\n            isOutline\n              ? iconSize * 1.2 // keep size same as before\n              : iconSize,\n          )};\n    }\n\n    ${nonTouchHoverMedia} {\n      &:hover {\n        background-color: ${isPlain\n          ? 'transparent'\n          : setOpacity(mainColor, isInverse ? '24' : '08')};\n\n        ${childrenClass} {\n          color: ${setOpacity(mainColor, '88')};\n        }\n      }\n    }\n\n    &:active {\n      ${childrenClass} {\n        color: ${mainColor};\n      }\n    }\n\n    ${focusVisible} {\n      background-color: ${isPlain\n        ? 'transparent'\n        : setOpacity(mainColor, isInverse ? '32' : '16')};\n\n      &:active {\n        ${childrenClass} {\n          color: ${setOpacity(mainColor, '88')};\n        }\n      }\n\n      ${isPlain && plainIconButtonFocusStyle({ radius: currRadius })};\n    }\n\n    &.${RcIconButtonClasses.persistBg} {\n      background-color: ${persistBgColor};\n    }\n\n    &.${RcIconButtonClasses.disabled} {\n      ${childrenClass} {\n        color: ${useColorWhenDisabled\n          ? setOpacity(mainColor, '32')\n          : palette2('disabled', 'f02')};\n      }\n\n      background-color: ${isInverse && setOpacity(mainColor, '12')};\n    }\n\n    &.${RcIconButtonClasses.invisible} {\n      opacity: 0;\n      visibility: hidden;\n      width: 0;\n      height: 0;\n    }\n\n    &.${RcIconButtonClasses.outline} {\n      border: 1px solid ${palette2('neutral', 'l03')};\n    }\n\n    &.${RcIconButtonClasses.contained} {\n      color: ${mainColorContrast};\n      background-color: ${mainColor};\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          background-color: ${setOpacity(mainColor, '08', true)};\n\n          ${childrenClass} {\n            color: ${mainColorContrast};\n          }\n        }\n      }\n\n      ${focusVisible} {\n        background-color: ${setOpacity(mainColor, '16', true)};\n\n        ${childrenClass} {\n          color: ${mainColorContrast};\n        }\n      }\n\n      &:active {\n        background-color: ${setOpacity(mainColor, '24', true)};\n\n        ${childrenClass} {\n          color: ${mainColorContrast};\n        }\n      }\n    }\n\n    .${RcIconButtonTouchRippleClasses.ripplePulsate} {\n      border-radius: 0;\n      animation-name: none;\n      opacity: 0;\n    }\n\n    ${\n      /**\n       * that is equilateral triangle, the third Side length is\n       * Math.sqrt(2) = 1.414213562373095, so we scale that\n       * to make that full with this square\n       */\n      !isPlain &&\n      !(['circle', 'round'] as RcIconButtonProps['radius'][]).includes(\n        currRadius,\n      ) &&\n      css`\n        .${RcIconButtonTouchRippleClasses.child} {\n          transform: scale(1.41421357);\n        }\n      `\n    }\n  `;\n};\n","import { css, radius, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcIconButtonGroupProps } from '../IconButtonGroup';\n\nexport const IconButtonGroupStyle: RcThemedStyled<RcIconButtonGroupProps, any> =\n  (props) => {\n    const { direction, gap, space: spaceProp, radius: radiusProp } = props;\n\n    const gapSpace = gap && spacing(gap!);\n\n    const paddingValue =\n      spaceProp &&\n      (spaceProp instanceof Array ? spacing(...spaceProp) : spacing(spaceProp));\n\n    const isVertical = direction === 'vertical';\n\n    return css`\n      border-radius: ${radiusProp && radius(radiusProp)};\n      display: inline-flex;\n      flex-direction: ${isVertical ? 'column' : 'row'};\n      white-space: nowrap;\n      flex-wrap: nowrap;\n      flex-shrink: 0;\n      align-items: center;\n      padding: ${paddingValue};\n\n      > * + * {\n        ${isVertical\n          ? css`\n              margin-top: ${gapSpace};\n            `\n          : css`\n              margin-left: ${gapSpace};\n            `};\n      }\n    `;\n  };\n","import React, { forwardRef, KeyboardEvent, MouseEvent } from 'react';\n\nimport {\n  RcBaseDirection,\n  RcTheme,\n  styled,\n  useA11yKeyEvent,\n  useEventCallback,\n  useThemeProps,\n} from '../../../foundation';\nimport { IconButtonGroupStyle } from './styles';\n\ntype RcIconButtonGroupProps = {\n  /** radius token for `border-radius` */\n  radius?: keyof RcTheme['radius'];\n  /** Define the padding size of that group wrapper. */\n  space?: number | number[];\n  /** Define the size of the gap between below each components. */\n  gap?: number;\n  /** The arrangement of components, default is `horizontal`  */\n  direction?: RcBaseDirection;\n  /** is Stop Propagation for the bar click */\n  isStopPropagation?: boolean;\n  /** component for render root container, default is `div` */\n  component?: React.ElementType;\n} & React.DetailedHTMLProps<\n  React.HTMLAttributes<HTMLDivElement>,\n  HTMLDivElement\n>;\n\nconst _RcIconButtonGroup = forwardRef<any, RcIconButtonGroupProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcIconButtonGroup' });\n    const {\n      children,\n      isStopPropagation,\n      onClick,\n      onKeyUp,\n      gap,\n      space,\n      radius,\n      component: Component = 'div',\n      ...rest\n    } = props;\n    const clickHandler = useEventCallback(\n      (event: MouseEvent<HTMLDivElement>) => {\n        onClick?.(event);\n        isStopPropagation && event.stopPropagation();\n      },\n    );\n\n    const handleOnKeyUp = useA11yKeyEvent(clickHandler, {\n      preventDefault: false,\n    });\n\n    /** that button bar just for put buttons inside, and can stop below all events from this bar layer. */\n    const keyUpHandler = useEventCallback(\n      (event: KeyboardEvent<HTMLDivElement>) => {\n        onKeyUp?.(event);\n        isStopPropagation && event.stopPropagation();\n        handleOnKeyUp(event);\n      },\n    );\n\n    return (\n      <Component\n        onClick={clickHandler}\n        onKeyUp={keyUpHandler}\n        ref={ref}\n        {...rest}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\n/**\n * provide IconButton group with wrapper\n */\nconst RcIconButtonGroup = styled(_RcIconButtonGroup)`\n  ${IconButtonGroupStyle}\n`;\n\nRcIconButtonGroup.defaultProps = {\n  gap: 0,\n  direction: 'horizontal',\n};\n\nRcIconButtonGroup.displayName = 'RcIconButtonGroup';\n\nexport { RcIconButtonGroup };\nexport type { RcIconButtonGroupProps };\n","import React, { FunctionComponent } from 'react';\n\nimport { styled } from '../../../../foundation';\nimport arrowDownSvg from '../../../../icon/ArrowDown';\nimport { RcIcon, RcIconProps } from '../../../Icon';\n\nexport type StyledArrowIconProps = {\n  open: boolean;\n} & RcIconProps;\n\nconst _StyledArrowIcon: FunctionComponent<StyledArrowIconProps> = (props) => (\n  <RcIcon symbol={arrowDownSvg} size=\"medium\" {...props} />\n);\n\nexport const StyledArrowIcon = styled(_StyledArrowIcon)`\n  transform: ${({ open }) => open && 'rotate(180deg)'};\n\n  &&& {\n    color: inherit;\n    margin-right: 0;\n  }\n`;\n","import {\n  css,\n  focusVisible,\n  nonTouchHoverMedia,\n  palette2,\n  px,\n  radius,\n  RcThemedStyled,\n  setOpacity,\n  spacing,\n  toSpacing,\n} from '../../../../foundation';\nimport { RcIcon } from '../../../Icon';\nimport { RcButton } from '../../Button';\nimport {\n  buttonColor,\n  buttonHoverColor,\n  buttonTextColor,\n  plainButtonTextColor,\n} from '../../Button/styles';\nimport { plainIconButtonFocusStyle } from '../../IconButton/styles';\nimport { RcIconButtonSizes } from '../../IconButton/utils';\nimport { RcSplitButtonProps } from '../SplitButton';\nimport {\n  RcSplitButtonClasses,\n  RcSplitButtonTouchRippleClasses,\n  variantIsHandler,\n} from '../utils';\n\nconst transition: RcThemedStyled<RcSplitButtonProps, any> = ({ theme }) =>\n  theme.transitions.create(\n    ['background-color', 'box-shadow', 'border-color', 'color'],\n    {\n      duration: theme.transitions.duration.short,\n    },\n  );\n\nconst borderLeft: RcThemedStyled<RcSplitButtonProps, any> = ({\n  variant,\n  color,\n  disabled,\n  theme,\n}) => {\n  switch (variant) {\n    case 'plain':\n    case 'plainIcon':\n      return css``;\n    case 'outlined':\n      return css`\n        padding-right: 1px;\n        border-left: 1px solid\n          ${disabled ? palette2('neutral', 'f02') : plainButtonTextColor};\n      `;\n    case 'text':\n    case 'round':\n      return css`\n        align-self: stretch;\n        padding-right: 1px;\n        border-left: 1px solid transparent;\n      `;\n\n    default:\n      return css`\n        padding-right: 1px;\n        border-left: 1px solid\n          ${setOpacity(buttonTextColor({ color, theme }), '24')};\n      `;\n  }\n};\n\nconst iconButtonStyle: RcThemedStyled<RcSplitButtonProps, any> = ({\n  size,\n  variant,\n}) => {\n  // * divide two for margin top and bottom\n  const currIconSize = RcIconButtonSizes[size!];\n  const currSize = currIconSize / 2;\n  const space = toSpacing(currSize);\n  // * designer define right space little small with 4px\n  const rightSpace = toSpacing(currSize - 4);\n\n  const width = px(currIconSize);\n\n  return css`\n    .${RcSplitButtonClasses.groupedHorizontal} {\n      &.${RcSplitButtonClasses.actionButton} {\n        min-width: auto;\n        ${variant === 'plainIcon'\n          ? css`\n              padding: 0;\n              box-shadow: none;\n\n              ${focusVisible} {\n                ${plainIconButtonFocusStyle({ radius: 'circle' })}\n              }\n            `\n          : css`\n              padding: ${spacing(space, rightSpace, space, space)};\n            `};\n\n        ${RcIcon} {\n          margin-right: 0;\n        }\n      }\n\n      &.${RcSplitButtonClasses.controlButton} {\n        min-width: ${width};\n        width: ${width};\n      }\n    }\n  `;\n};\n\nexport const splitButtonStyle: RcThemedStyled<RcSplitButtonProps, any> = (\n  props,\n) => {\n  const { variant, disabled, loading } = props;\n  const variantIs = variantIsHandler(variant);\n\n  const currColor = buttonColor(props as any);\n\n  const isContainer = variant === 'contained';\n  const activeColor24 = setOpacity(currColor, '24');\n  const containedActiveColor = setOpacity(currColor, '24', true);\n\n  return css`\n    .${RcSplitButtonClasses.actionButton} {\n      border-top-right-radius: 0;\n      border-bottom-right-radius: 0;\n\n      &:after {\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n      }\n    }\n\n    .${RcSplitButtonClasses.controlButton} {\n      border-top-left-radius: 0;\n      border-bottom-left-radius: 0;\n\n      &:after {\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n      }\n    }\n\n    &.${RcSplitButtonClasses.root} {\n      ${!disabled &&\n      variantIs(['outlined', 'text', 'round']) &&\n      !loading &&\n      css<any>`\n        transition: ${transition};\n\n        ${nonTouchHoverMedia} {\n          &:hover {\n            background: ${buttonHoverColor};\n          }\n        }\n      `};\n\n      ${variantIs(['text', 'round', 'plainIcon']) &&\n      css`\n        align-items: center;\n\n        ${!disabled &&\n        !loading &&\n        css`\n          ${nonTouchHoverMedia} {\n            &:hover {\n              .${RcSplitButtonClasses.controlButton} {\n                border-left-color: ${activeColor24};\n              }\n            }\n          }\n        `}\n      `};\n    }\n\n    .${RcSplitButtonClasses.groupedHorizontal} {\n      ${variantIs(['outlined', 'text', 'contained']) &&\n      css`\n        min-width: 72px;\n      `};\n\n      &.${RcSplitButtonClasses.controlButton} {\n        padding: 0;\n        min-width: 24px;\n        ${borderLeft};\n      }\n\n      &.${RcSplitButtonClasses.actionButton} {\n        border-right: ${variant === 'outlined' && 0};\n      }\n\n      &:not(.${RcSplitButtonClasses.actionButton}) {\n        margin-left: 0;\n      }\n\n      ${variantIs(['plain', 'plainIcon']) &&\n      css<any>`\n        &.${RcSplitButtonClasses.controlButton} {\n          border-top-left-radius: inherit;\n          border-bottom-left-radius: inherit;\n          box-shadow: none;\n\n          transition: ${transition};\n\n          ${!loading &&\n          css`\n            ${nonTouchHoverMedia} {\n              &:hover {\n                background: ${buttonHoverColor};\n              }\n            }\n\n            ${focusVisible} {\n              background: ${buttonHoverColor};\n            }\n          `};\n        }\n\n        &.${RcSplitButtonClasses.actionButton} {\n          border-top-right-radius: inherit;\n          border-bottom-right-radius: inherit;\n        }\n      `};\n    }\n\n    ${variant === 'plainIcon' &&\n    css`\n      &.${RcSplitButtonClasses.root},\n        .${RcSplitButtonClasses.groupedHorizontal} {\n        border-radius: ${radius('circle')};\n\n        ${RcButton} {\n          min-height: auto;\n        }\n      }\n    `};\n\n    ${variant === 'round' &&\n    css`\n      &.${RcSplitButtonClasses.root} {\n        border-radius: ${radius('round')};\n        overflow: hidden;\n\n        ${RcButton} {\n          min-height: auto;\n        }\n\n        .${RcSplitButtonTouchRippleClasses.child},\n          .${RcSplitButtonTouchRippleClasses.ripplePulsate} {\n          transform: scale(2);\n        }\n\n        .${\n            RcSplitButtonClasses.groupedHorizontal /** this safari issue, top level overflow is not work */\n          } {\n          &.${RcSplitButtonClasses.actionButton} {\n            border-top-left-radius: ${radius('round')};\n            border-bottom-left-radius: ${radius('round')};\n          }\n\n          &.${RcSplitButtonClasses.controlButton} {\n            border-top-right-radius: ${radius('round')};\n            border-bottom-right-radius: ${radius('round')};\n          }\n        }\n      }\n    `};\n\n    ${variantIs(['round', 'plainIcon']) && iconButtonStyle};\n\n    &.${RcSplitButtonClasses.menuOpen} {\n      ${!variantIs(['plain', 'plainIcon']) &&\n      css`\n        .${RcSplitButtonClasses.actionButton} {\n          background: ${!isContainer && (buttonHoverColor as any)};\n        }\n      `};\n\n      .${RcSplitButtonClasses.controlButton} {\n        background: ${isContainer ? containedActiveColor : activeColor24};\n      }\n    }\n  `;\n};\n","import React, {\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport clsx from 'clsx';\n\nimport {\n  checkDefaultPrevented,\n  combineClasses,\n  combineProps,\n  logInDev,\n  omit,\n  RcBaseProps,\n  RcClassesProps,\n  styled,\n  UnionOmit,\n  useEventCallback,\n  useForkRef,\n  useTheme,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcIconProps, RcIconSize } from '../../Icon';\nimport { RcMenu, RcMenuProps } from '../../Menu/Menu';\nimport { WithTooltipProps } from '../../Tooltip';\nimport { RcButton, RcButtonProps } from '../Button';\nimport { RcButtonGroup, RcButtonGroupProps } from '../ButtonGroup';\nimport { RcIconButtonProps } from '../IconButton';\nimport { splitButtonStyle, StyledArrowIcon } from './styles';\nimport {\n  getVariant,\n  RcSplitButtonClasses,\n  RcSplitButtonTouchRippleClasses,\n  variantIsHandler,\n} from './utils';\n\ntype RcSplitButtonChildrenProps = {\n  onClick?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  children: ReactNode;\n} & WithTooltipProps;\n\ntype CustomButtonProps = Partial<RcButtonProps & WithTooltipProps>;\n\ntype RcSplitRoundButtonSpacingSize = UnionOmit<RcIconSize, 'inherit'>;\n\ntype RcSplitButtonVariant = 'round' | 'plainIcon' | RcButtonProps['variant'];\n\ntype RcSplitButtonProps = {\n  /** type of variant, default is `contained` */\n  variant?: RcSplitButtonVariant;\n  /** left Action button (`RcButton`) props */\n  ActionButtonProps?: CustomButtonProps;\n  /** right Control button(`RcButton`) props */\n  ControlButtonProps?: { ArrowIconProps?: RcIconProps } & RcBaseProps<\n    CustomButtonProps,\n    'children'\n  >;\n  /** props for Menu component */\n  MenuProps?: RcBaseProps<RcMenuProps, 'open' | 'anchorEl'>;\n  /** emit when menu open */\n  onOpen?: () => void;\n  /** loading state */\n  loading?: boolean;\n} & Pick<RcMenuProps, 'onClose'> &\n  Pick<RcButtonProps, 'type' | 'color' | 'disabled'> &\n  RcBaseProps<\n    RcButtonGroupProps,\n    'onChange' | 'onClick' | 'orientation' | 'fullWidth'\n  > &\n  RcClassesProps<'actionButton' | 'controlButton' | 'menuOpen'> &\n  Pick<RcIconButtonProps, 'size'>;\n\nconst DEFAULT_DELAY = 166;\n\nconst _RcSplitButton = forwardRef<any, RcSplitButtonProps>(\n  (inProps: RcSplitButtonProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcSplitButton' });\n    const {\n      classes: classesProp,\n      type,\n      size,\n      color,\n      variant,\n      disabled,\n      ControlButtonProps: ControlButtonPropsProp,\n      ActionButtonProps: ActionButtonPropsProp,\n      MenuProps,\n      children: childrenProp,\n      onOpen,\n      onClose,\n      className,\n      loading,\n      ...rest\n    } = props;\n    const theme = useTheme();\n    const {\n      title: actionButtonTitle,\n      className: actionButtonClassNameProp,\n      ...ActionButtonProps\n    } = ActionButtonPropsProp!;\n\n    const variantIs = variantIsHandler(variant);\n\n    const toButtonSize = ['xlarge', 'xxlarge', 'xxxlarge'].includes(size!)\n      ? 'large'\n      : (size as RcButtonProps['size']);\n\n    const {\n      ArrowIconProps,\n      onClick: onControlButtonClick,\n      className: controlButtonClassNameProp,\n      ...ControlButtonProps\n    } = ControlButtonPropsProp!;\n\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>();\n    const [enterNextDelay, setEnterNextDelay] = useState(DEFAULT_DELAY);\n\n    const innerRef = useRef<HTMLButtonElement>(null);\n    const splitRef = useForkRef(innerRef, ref);\n\n    const isMenuOpen = !!anchorEl;\n\n    const { classes, actionButtonClassName, controlButtonClassName } =\n      useMemo(() => {\n        const result = combineClasses(RcSplitButtonClasses, classesProp);\n\n        return {\n          classes: omit(result, ['actionButton', 'controlButton', 'menuOpen']),\n          actionButtonClassName: result?.actionButton,\n          controlButtonClassName: result?.controlButton,\n        };\n      }, [classesProp]);\n\n    const handleClick = useEventCallback(\n      checkDefaultPrevented(() => {\n        setAnchorEl(innerRef.current);\n        onOpen?.();\n      }),\n    );\n\n    const handleClose = useEventCallback(\n      checkDefaultPrevented((event: {}, reason: any) => {\n        if (enterNextDelay === 0) {\n          setEnterNextDelay(DEFAULT_DELAY);\n        }\n        setAnchorEl(null);\n        MenuProps?.onClose?.(event, reason);\n        onClose?.(event, reason);\n      }),\n    );\n\n    const SharedButtonProps: RcButtonProps = useMemo(() => {\n      return {\n        type,\n        // when give size more than button accept, just set large\n        size: toButtonSize,\n        color,\n        variant: getVariant(variant),\n        disabled: loading ? true : undefined,\n        disabledVariant: loading ? 'mask' : undefined,\n      };\n    }, [color, loading, toButtonSize, type, variant]);\n\n    const { actionButtonProps, children } = useMemo(() => {\n      if (!(childrenProp instanceof Array)) {\n        logInDev({\n          component: 'RcSplitButton',\n          message:\n            'children must be implement with RcSplitButtonChildrenProps[]',\n        });\n        return {};\n      }\n\n      const _children: ReactElement[] = [];\n      let actionButtonProps: CustomButtonProps = {};\n\n      React.Children.forEach(childrenProp, (child: JSX.Element, i) => {\n        const {\n          onClick,\n          children,\n          useRcTooltip = true,\n          TooltipProps,\n          title,\n        } = child.props as RcSplitButtonChildrenProps;\n\n        if (i === 0) {\n          actionButtonProps = {\n            title: actionButtonTitle || title,\n            useRcTooltip,\n            TooltipProps,\n            onClick,\n            children,\n            className: combineClasses(\n              actionButtonClassName,\n              actionButtonClassNameProp,\n            ),\n          };\n          return;\n        }\n\n        _children.push(\n          React.cloneElement(child, {\n            // * only first item need, because that will be auto focus when keyboard open\n            ...(i === 1\n              ? {\n                  TooltipProps: {\n                    // * that provide when menu open that tooltip position issue, value calculate from Mui\n                    // * https://github.com/mui-org/material-ui/blob/6f56be2a07185be06984476aed9f518cbbd6b87d/packages/material-ui/src/Grow/Grow.js#L88\n                    enterNextDelay,\n                    onOpen: () => {\n                      if (enterNextDelay === DEFAULT_DELAY) {\n                        setEnterNextDelay(0);\n                      }\n                    },\n                  } as RcSplitButtonChildrenProps['TooltipProps'],\n                }\n              : {}),\n            ...child.props,\n            ...combineProps(\n              {\n                onClick: handleClose,\n              },\n              {\n                // run outside method first, if outside prevent default, that will not close menu\n                onClick,\n              },\n            ),\n          }),\n        );\n      });\n\n      return {\n        actionButtonProps,\n        children: _children,\n      };\n    }, [\n      actionButtonClassName,\n      actionButtonClassNameProp,\n      actionButtonTitle,\n      childrenProp,\n      enterNextDelay,\n      handleClose,\n    ]);\n\n    const TouchRippleProps = useMemo(\n      () =>\n        variant === 'round'\n          ? {\n              classes: RcSplitButtonTouchRippleClasses,\n            }\n          : ({} as any),\n      [variant],\n    );\n\n    const _ActionButtonProps = useMemo(() => {\n      return {\n        TouchRippleProps,\n        loading,\n        ...actionButtonProps,\n        ...SharedButtonProps,\n        ...ActionButtonProps,\n      };\n    }, [\n      ActionButtonProps,\n      SharedButtonProps,\n      TouchRippleProps,\n      actionButtonProps,\n      loading,\n    ]);\n\n    const _ControlButtonProps = useMemo(() => {\n      const combineControlProps = combineProps(\n        {\n          onClick: handleClick,\n          TouchRippleProps,\n          className: controlButtonClassName,\n        },\n        {\n          onClick: onControlButtonClick,\n          className: controlButtonClassNameProp,\n        },\n      );\n\n      return {\n        useRcTooltip: true,\n        ...SharedButtonProps,\n        ...combineControlProps,\n        ...ControlButtonProps,\n      };\n    }, [\n      handleClick,\n      controlButtonClassName,\n      onControlButtonClick,\n      TouchRippleProps,\n      controlButtonClassNameProp,\n      SharedButtonProps,\n      ControlButtonProps,\n    ]);\n\n    return (\n      <>\n        <RcButtonGroup\n          disableRipple={\n            theme.props?.MuiButtonGroup?.disableRipple ||\n            variantIs(['plain', 'plainIcon'])\n          }\n          {...rest}\n          className={clsx(className, {\n            [RcSplitButtonClasses.menuOpen]: isMenuOpen,\n          })}\n          innerRef={splitRef}\n          classes={classes}\n        >\n          <RcButton {..._ActionButtonProps} />\n          <RcButton aria-haspopup=\"listbox\" {..._ControlButtonProps}>\n            <StyledArrowIcon\n              open={isMenuOpen}\n              size={variantIs(['round', 'plainIcon']) ? size : toButtonSize}\n              {...ArrowIconProps}\n            />\n          </RcButton>\n        </RcButtonGroup>\n        <RcMenu\n          {...MenuProps}\n          anchorEl={anchorEl}\n          open={isMenuOpen}\n          onClose={handleClose}\n        >\n          {children}\n        </RcMenu>\n      </>\n    );\n  },\n);\n\nconst RcSplitButton = styled(_RcSplitButton)`\n  ${splitButtonStyle}\n`;\n\nRcSplitButton.displayName = 'RcSplitButton';\n\nRcSplitButton.defaultProps = {\n  size: RcButton.defaultProps!.size,\n  color: RcButton.defaultProps!.color,\n  variant: RcButton.defaultProps!.variant,\n  ControlButtonProps: {},\n  ActionButtonProps: {},\n  MenuProps: {},\n  disableElevation: true,\n};\n\nexport { RcSplitButton };\nexport type {\n  RcSplitButtonChildrenProps,\n  RcSplitButtonProps,\n  RcSplitButtonVariant,\n  RcSplitRoundButtonSpacingSize,\n};\n","import {\n  css,\n  focusVisible,\n  focusVisibleColor,\n  focusVisibleShadowStyle,\n  nonTouchHoverMedia,\n  palette2,\n  px,\n  RcThemedStyled,\n  setOpacity,\n  spacing,\n} from '../../../../foundation';\nimport { RcIconSizes } from '../../../Icon/utils';\nimport { plainIconButtonFocusStyle } from '../../IconButton/styles';\nimport { RcToggleButtonProps } from '../ToggleButton';\nimport { RcToggleButtonClasses, RcToggleButtonSpace } from '../utils';\n\nconst actionColor = palette2('action', 'grayLight');\nconst selectedBgColor = setOpacity(focusVisibleColor, '12');\n\nexport const ToggleButtonStyle: RcThemedStyled<RcToggleButtonProps, any> = (\n  props,\n) => {\n  const { size, variant, disabled } = props;\n\n  const space = spacing(RcToggleButtonSpace[size!].area);\n\n  return css`\n    color: ${palette2('neutral', 'f04')};\n    border: unset;\n\n    ${nonTouchHoverMedia} {\n      &:hover {\n        color: ${palette2('neutral', 'f06')};\n      }\n    }\n\n    &.${RcToggleButtonClasses.selected} {\n      color: ${focusVisibleColor};\n    }\n\n    &.${RcToggleButtonClasses.disabled} {\n      color: ${palette2('neutral', 'f02')};\n    }\n\n    .${RcToggleButtonClasses.label} {\n      position: relative;\n      font-size: ${px(RcIconSizes[size!] as number)};\n    }\n\n    ${variant === 'standard' &&\n    css`\n      padding: ${space};\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          background-color: ${setOpacity(actionColor, '08')};\n        }\n      }\n\n      ${focusVisibleShadowStyle('sm')};\n\n      &:active {\n        background-color: ${setOpacity(actionColor, '12')};\n      }\n\n      ${!disabled &&\n      css`\n        &.${RcToggleButtonClasses.selected},\n          &.${RcToggleButtonClasses.selected}:hover {\n          background-color: ${selectedBgColor};\n        }\n      `};\n    `};\n\n    ${variant === 'box' &&\n    css`\n      padding: ${space};\n\n      &.${RcToggleButtonClasses.selected} {\n        background-color: unset;\n      }\n\n      ${nonTouchHoverMedia} {\n        &:hover,\n        &.${RcToggleButtonClasses.selected}:hover {\n          background-color: unset;\n        }\n      }\n\n      ${focusVisible} {\n        .${RcToggleButtonClasses.label} {\n          ${plainIconButtonFocusStyle({ radius: 'sm' })}\n        }\n      }\n    `};\n  `;\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from 'react';\n\nimport MuiToggleButton from '@material-ui/lab/ToggleButton';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  removeClassName,\n  styled,\n  UnionPick,\n  useForkRef,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcIcon, RcIconProps } from '../../Icon';\nimport { withTooltip } from '../../Tooltip';\nimport { RcIconButtonProps } from '../IconButton';\nimport { ToggleButtonStyle } from './styles';\nimport { RcToggleButtonClasses } from './utils';\n\ntype RcToggleButtonVariant = 'standard' | 'box';\n\ntype RcToggleButtonProps = {\n  /** variant type for different display `ToggleButton` */\n  variant?: RcToggleButtonVariant;\n  /** IconProps apply on symbol */\n  IconProps?: RcBaseProps<RcIconProps, 'symbol'>;\n  /** button size, with default with `medium`   */\n  size?: UnionPick<\n    NonNullable<RcIconButtonProps['size']>,\n    'small' | 'medium' | 'large'\n  >;\n} & Pick<RcIconButtonProps, 'symbol'> &\n  RcBaseProps<ComponentProps<typeof MuiToggleButton>, 'size'>;\n\nconst _RcToggleButton = forwardRef<any, RcToggleButtonProps>(\n  (inProps: RcToggleButtonProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcToggleButton' });\n    const {\n      classes: classesProp,\n      children,\n      size,\n      variant,\n      symbol,\n      IconProps,\n      ...rest\n    } = props;\n    const innerRef = useRef<HTMLButtonElement>(null);\n\n    const buttonRef = useForkRef(ref, innerRef);\n\n    const classes = useMemo(\n      () => combineClasses(RcToggleButtonClasses, classesProp),\n      [classesProp],\n    );\n\n    // * need remove not need Mui-selected for render correct\n    useLayoutEffect(() => {\n      removeClassName(innerRef, 'Mui-selected');\n    });\n\n    return (\n      <MuiToggleButton\n        {...rest}\n        ref={buttonRef}\n        innerRef={buttonRef}\n        classes={classes}\n      >\n        {symbol && <RcIcon symbol={symbol} size=\"inherit\" {...IconProps} />}\n        {children}\n      </MuiToggleButton>\n    );\n  },\n);\n\nconst RcToggleButton = styled(withTooltip(_RcToggleButton))`\n  ${ToggleButtonStyle}\n`;\n\nRcToggleButton.defaultProps = {\n  disableRipple: true,\n  size: 'medium',\n  variant: 'standard',\n};\n\nRcToggleButton.displayName = 'RcToggleButton';\n\nexport { RcToggleButton };\nexport type { RcToggleButtonProps, RcToggleButtonVariant };\n","import {\n  css,\n  palette2,\n  radius,\n  RcThemedStyled,\n  shadows,\n  spacing,\n} from '../../../../foundation';\nimport { RcToggleButton } from '../../ToggleButton';\nimport { RcToggleButtonSpace } from '../../ToggleButton/utils';\nimport { RcToggleButtonGroupProps } from '../ToggleButtonGroup';\n\nexport const boxStyle: RcThemedStyled<RcToggleButtonGroupProps, any> = ({\n  size,\n  orientation,\n}) => {\n  const { inner, outer, area } = RcToggleButtonSpace[size!];\n  const isHorizontal = orientation !== 'vertical';\n\n  const radiusValue = radius('round');\n\n  const startPadding = spacing(area + inner - 0.25);\n  const endPadding = spacing(area + inner);\n\n  const outerPadding = spacing(area + outer);\n\n  return css`\n    background-color: ${palette2('neutral', 'elevation')};\n    box-shadow: ${shadows('1')};\n    border-radius: ${radius('round')};\n\n    ${RcToggleButton} {\n      ${isHorizontal\n        ? css`\n            padding-left: ${startPadding};\n            margin-left: 1px;\n            padding-right: ${endPadding};\n          `\n        : css`\n            padding-top: ${startPadding};\n            margin-top: 1px;\n            padding-bottom: ${endPadding};\n          `};\n    }\n\n    ${RcToggleButton}:first-child {\n      ${isHorizontal\n        ? css`\n            border-top-left-radius: ${radiusValue};\n            border-bottom-left-radius: ${radiusValue};\n            padding-left: ${outerPadding};\n            margin-left: 0px;\n          `\n        : css`\n            border-top-left-radius: ${radiusValue};\n            border-top-right-radius: ${radiusValue};\n            padding-top: ${outerPadding};\n            margin-top: 0px;\n          `};\n    }\n\n    ${RcToggleButton}:last-child {\n      ${isHorizontal\n        ? css`\n            border-top-right-radius: ${radiusValue};\n            border-bottom-right-radius: ${radiusValue};\n            padding-right: ${outerPadding};\n          `\n        : css`\n            border-bottom-left-radius: ${radiusValue};\n            border-bottom-right-radius: ${radiusValue};\n            padding-bottom: ${outerPadding};\n          `};\n    }\n  `;\n};\n","import { css, radius, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcToggleButtonSpace } from '../../ToggleButton/utils';\nimport { RcToggleButtonGroupProps } from '../ToggleButtonGroup';\nimport {\n  RcToggleButtonGroupClasses,\n  toggleButtonBetweenClassName,\n} from '../utils';\n\nexport const standardStyle: RcThemedStyled<RcToggleButtonGroupProps, any> = ({\n  orientation,\n  size,\n}) => {\n  const isHorizontal = orientation !== 'vertical';\n  const { inner, outer, area } = RcToggleButtonSpace[size!];\n\n  // * add 1px for border\n  const margins = isHorizontal\n    ? spacing(inner, inner, inner, inner + 0.25)\n    : spacing(inner, inner, inner + 0.25, inner);\n\n  const outerSpace = spacing(outer);\n\n  return css`\n    ${`${toggleButtonBetweenClassName},\n  .${RcToggleButtonGroupClasses.groupedHorizontal},\n  .${RcToggleButtonGroupClasses.groupedVertical}`} {\n      margin: ${margins};\n      padding: ${spacing(area)};\n      border: none;\n      border-radius: ${radius('sm')};\n\n      ${isHorizontal\n        ? css`\n            margin-top: 0;\n            margin-bottom: 0;\n          `\n        : css`\n            margin-left: 0;\n            margin-right: 0;\n          `};\n\n      &:first-child {\n        ${isHorizontal\n          ? css`\n              margin-left: ${outerSpace};\n            `\n          : css`\n              margin-top: ${outerSpace};\n            `};\n      }\n\n      &:last-child {\n        ${isHorizontal\n          ? css`\n              margin-right: ${outerSpace};\n            `\n          : css`\n              margin-bottom: ${outerSpace};\n            `};\n      }\n    }\n  `;\n};\n","import { css, palette2, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcIcon } from '../../../Icon';\nimport { RcToggleButtonSpace } from '../../ToggleButton/utils';\nimport { RcToggleButtonGroupProps } from '../ToggleButtonGroup';\nimport { RcToggleButtonGroupClasses } from '../utils';\nimport { boxStyle } from './boxStyle';\nimport { standardStyle } from './standardStyle';\n\nconst dividerColor = palette2('neutral', 'l02');\n\nexport const ToggleButtonGroupStyle: RcThemedStyled<\n  RcToggleButtonGroupProps,\n  any\n> = (props) => {\n  const { variant, size, orientation } = props;\n\n  const isHorizontal = orientation !== 'vertical';\n\n  const { area, inner } = RcToggleButtonSpace[size!];\n  const boxInnerPadding = spacing(area + inner + 0.25);\n\n  return css`\n    .${RcToggleButtonGroupClasses.groupedHorizontal}\n      + .${RcToggleButtonGroupClasses.groupedHorizontal},\n      .${RcToggleButtonGroupClasses.groupedVertical}\n      + .${RcToggleButtonGroupClasses.groupedVertical} {\n      ${RcIcon} {\n        &:before {\n          content: '';\n          position: absolute;\n          pointer-events: none;\n          background: ${dividerColor};\n          top: 0;\n          left: 0;\n\n          ${isHorizontal\n            ? css`\n                height: 100%;\n                width: 1px;\n                transform: translateX(-${boxInnerPadding});\n              `\n            : css`\n                height: 1px;\n                width: 100%;\n                transform: translateY(-${boxInnerPadding});\n              `};\n        }\n      }\n    }\n\n    ${variant === 'standard' && standardStyle};\n    ${variant === 'box' && boxStyle};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcToggleButtonProps } from '../ToggleButton';\nimport { ToggleButtonGroupStyle } from './styles';\nimport { RcToggleButtonGroupClasses } from './utils';\n\ntype RcToggleButtonGroupProps = {} & Pick<\n  RcToggleButtonProps,\n  'variant' | 'size'\n> &\n  RcBaseProps<ComponentProps<typeof MuiToggleButtonGroup>, 'size'>;\n\nconst _RcToggleButtonGroup = forwardRef<any, RcToggleButtonGroupProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({\n      props: inProps,\n      name: 'RcToggleButtonGroup',\n    });\n    const { classes: classesProp, children, variant, size, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcToggleButtonGroupClasses, classesProp),\n      [classesProp],\n    );\n    return (\n      <MuiToggleButtonGroup {...rest} ref={ref} classes={classes}>\n        {(children as any[]).map((x, i) =>\n          // * that key follow mui key logic\n          // eslint-disable-next-line react/no-array-index-key\n          React.cloneElement(x, { key: `.${i}`, size, variant }),\n        )}\n      </MuiToggleButtonGroup>\n    );\n  },\n);\n\nconst RcToggleButtonGroup = styled(_RcToggleButtonGroup)`\n  ${ToggleButtonGroupStyle}\n`;\n\nRcToggleButtonGroup.defaultProps = {\n  size: 'medium',\n  variant: 'standard',\n};\n\nRcToggleButtonGroup.displayName = 'RcToggleButtonGroup';\n\nexport { RcToggleButtonGroup };\nexport type { RcToggleButtonGroupProps };\n","import { css, palette2, radius, RcThemedStyled } from '../../../../foundation';\nimport { RcCardHoverActionsClasses } from '../../CardHoverActions/utils';\nimport { RcCardProps } from '../Card';\nimport { RcCardClasses } from '../utils';\n\nexport const CardStyle: RcThemedStyled<RcCardProps, any> = (props) => {\n  const { variant, square } = props;\n\n  const isOutline = variant === 'outlined';\n\n  return css`\n    position: relative;\n    background-color: ${palette2('neutral', 'elevation')};\n\n    ${isOutline &&\n    css`\n      border: 1px solid ${palette2('neutral', 'l02')};\n      border-radius: ${!square && radius('xl')};\n\n      &.${RcCardClasses.focusVisible}, &.${RcCardClasses.selected} {\n        border-color: ${isOutline && palette2('interactive', 'f01')};\n      }\n\n      &:not(:hover):not(:focus-within) .${RcCardHoverActionsClasses.root} {\n        &:not(.${RcCardHoverActionsClasses.visible}) {\n          opacity: ${isOutline && 0};\n        }\n      }\n    `}\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo, useState } from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiCard from '@material-ui/core/Card';\n\nimport {\n  combineClasses,\n  omit,\n  RcBaseProps,\n  RcClassesProps,\n  useThemeProps,\n} from '../../../foundation';\nimport styled from '../../../foundation/styled-components';\nimport { RcCardContext } from './CardContext';\nimport { CardStyle } from './styles';\nimport { RcCardClasses } from './utils';\n\ntype RcCardClassKey = RcClassesProps<'root' | 'selected' | 'focusVisible'>;\n\ntype RcCardProps = {\n  /** applies the visual style of selection, only applied when variant outline */\n  selected?: boolean;\n  /** sets the visible style of focus if the focus target is delegated to a child component, only applied when variant outline */\n  focusVisible?: boolean;\n} & RcCardClassKey &\n  RcBaseProps<ComponentProps<typeof MuiCard>, 'classes' | 'raised'>;\n\nconst _RcCard = forwardRef<any, RcCardProps>((inProps: RcCardProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcCard' });\n  const {\n    classes: classesProp,\n    className: classNameProp,\n    selected,\n    focusVisible: focusVisibleProp,\n    ...rest\n  } = props;\n  const [focusVisible, setFocusVisible] = useState(false);\n\n  const classes = useMemo(\n    () =>\n      combineClasses(\n        omit(RcCardClasses, ['selected', 'focusVisible']),\n        classesProp,\n      ),\n    [classesProp],\n  );\n\n  const className = clsx(classNameProp, {\n    [RcCardClasses.focusVisible]: focusVisibleProp || focusVisible,\n    [RcCardClasses.selected]: selected,\n  });\n\n  return (\n    <RcCardContext.Provider value={{ focusVisible, setFocusVisible }}>\n      <MuiCard {...rest} className={className} ref={ref} classes={classes} />\n    </RcCardContext.Provider>\n  );\n});\n\nconst RcCard = styled(_RcCard)`\n  ${CardStyle}\n`;\n\nRcCard.displayName = 'RcCard';\n\nRcCard.defaultProps = {};\n\nexport { RcCard };\nexport type { RcCardProps };\n","import {\n  css,\n  keyframes,\n  Keyframes,\n  opacity,\n  palette2,\n  RcThemedStyled,\n} from '../../../../foundation';\nimport { RcCardActionAreaProps } from '../CardActionArea';\nimport {\n  RcCardActionAreaClasses,\n  RcCardActionAreaRippleClasses,\n} from '../utils';\n\nconst rippleAnimation: RcThemedStyled<RcCardActionAreaProps, Keyframes> = ({\n  theme,\n}) =>\n  keyframes`\n  0% {\n    transform: scale(0);\n    opacity: ${theme.opacity['08']};\n  }\n  100% {\n    transform: scale(1);\n    opacity: ${theme.opacity['24']};\n  }\n`;\n\nexport const CardActionAreaStyle: RcThemedStyled<RcCardActionAreaProps, any> =\n  () => {\n    return css`\n      &.${RcCardActionAreaClasses.focusVisible}\n        .${RcCardActionAreaClasses.focusHighlight} {\n        opacity: 0;\n      }\n\n      .${RcCardActionAreaRippleClasses.root} {\n        color: ${palette2('action', 'grayLight')};\n      }\n\n      .${RcCardActionAreaRippleClasses.rippleVisible} {\n        opacity: ${opacity('24')};\n        animation-name: ${rippleAnimation};\n      }\n\n      &.${RcCardActionAreaClasses.disableRipple}:active {\n        background-color: ${palette2('action', 'grayLight', 0.24)};\n      }\n    `;\n  };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiCardActionArea from '@material-ui/core/CardActionArea';\n\nimport {\n  combineClasses,\n  combineProps,\n  omit,\n  overridableStyled,\n  RcBaseProps,\n  RcClassesProps,\n  useThemeProps,\n} from '../../../foundation';\nimport { useRcCardContext } from '../Card/CardContext';\nimport { CardActionAreaStyle } from './styles';\nimport {\n  RcCardActionAreaClasses,\n  RcCardActionAreaRippleClasses,\n} from './utils';\n\ntype RcCardActionAreaProps = {} & RcClassesProps<'disableRipple'> &\n  RcBaseProps<ComponentProps<typeof MuiCardActionArea>>;\n\ninterface RcCardActionAreaTypeMap<D extends React.ElementType = 'div'> {\n  props: RcCardActionAreaProps;\n  defaultComponent: D;\n}\n\nconst _RcCardActionArea = forwardRef<any, RcCardActionAreaProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcCardActionArea' });\n    const {\n      className: classNameProp,\n      classes: classesProp,\n      TouchRippleProps: TouchRipplePropsProp,\n      onFocusVisible,\n      onBlur,\n      disableRipple,\n      disableTouchRipple,\n      ...rest\n    } = useThemeProps({ props, name: 'MuiButtonBase' });\n\n    const { setFocusVisible } = useRcCardContext();\n\n    const events = useMemo(\n      () =>\n        combineProps(\n          {\n            onFocusVisible: () => setFocusVisible(true),\n            onBlur: () => setFocusVisible(false),\n          },\n          {\n            onFocusVisible,\n            onBlur,\n          },\n        ),\n      [onBlur, onFocusVisible, setFocusVisible],\n    );\n\n    const classes = useMemo(\n      () =>\n        combineClasses(\n          omit(RcCardActionAreaClasses, ['disableRipple']),\n          classesProp,\n        ),\n      [classesProp],\n    );\n\n    const className = clsx(classNameProp, {\n      [RcCardActionAreaClasses.disableRipple]:\n        disableRipple || disableTouchRipple,\n    });\n\n    const TouchRippleProps = useMemo(\n      () =>\n        combineProps(\n          { classes: RcCardActionAreaRippleClasses },\n          TouchRipplePropsProp,\n        ),\n      [TouchRipplePropsProp],\n    );\n\n    return (\n      <MuiCardActionArea\n        {...rest}\n        {...events}\n        ref={ref}\n        className={className}\n        classes={classes}\n        TouchRippleProps={TouchRippleProps}\n        disableRipple={disableRipple}\n        disableTouchRipple={disableTouchRipple}\n      />\n    );\n  },\n);\n\nconst RcCardActionArea = overridableStyled<RcCardActionAreaTypeMap>(\n  _RcCardActionArea,\n)`\n  ${CardActionAreaStyle}\n`;\n\nRcCardActionArea.defaultProps = {};\n\nRcCardActionArea.displayName = 'RcCardActionArea';\n\nexport { RcCardActionArea };\nexport type { RcCardActionAreaProps };\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcCardActionsProps } from '../CardActions';\n\nexport const CardActionsStyle: RcThemedStyled<RcCardActionsProps, any> = () => {\n  return css`\n    position: relative;\n    padding: ${spacing(0, 4, 4, 4)};\n    z-index: 2;\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCardActions from '@material-ui/core/CardActions';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { CardActionsStyle } from './styles';\nimport { RcCardActionsClasses } from './utils';\n\ntype RcCardActionsProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiCardActions>\n>;\n\nconst _RcCardActions = forwardRef<any, RcCardActionsProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcCardActions' });\n  const { classes: classesProp, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcCardActionsClasses, classesProp),\n    [classesProp],\n  );\n\n  return <MuiCardActions {...rest} ref={ref} classes={classes} />;\n});\n\nconst RcCardActions = styled(_RcCardActions)`\n  ${CardActionsStyle}\n`;\n\nRcCardActions.defaultProps = {};\n\nRcCardActions.displayName = 'RcCardActions';\n\nexport { RcCardActions };\nexport type { RcCardActionsProps };\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcCardContentProps } from '../CardContent';\n\nexport const CardContentStyle: RcThemedStyled<RcCardContentProps, any> = () => {\n  return css`\n    padding: ${spacing(4)};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCardContent from '@material-ui/core/CardContent';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { CardContentStyle } from './styles';\nimport { RcCardContentClasses } from './utils';\n\ntype RcCardContentProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiCardContent>\n>;\n\nconst _RcCardContent = forwardRef<any, RcCardContentProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcCardContent' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcCardContentClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiCardContent {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiCardContent>\n  );\n});\n\nconst RcCardContent = styled(_RcCardContent)`\n  ${CardContentStyle}\n`;\n\nRcCardContent.defaultProps = {};\n\nRcCardContent.displayName = 'RcCardContent';\n\nexport { RcCardContent };\nexport type { RcCardContentProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCardHeader from '@material-ui/core/CardHeader';\n\nimport {\n  combineClasses,\n  overridableStyled,\n  RcBaseProps,\n  useThemeProps,\n} from '../../../foundation';\nimport { CardHeaderStyle } from './styles';\nimport { RcCardHeaderClasses } from './utils';\n\ntype RcCardHeaderProps = {} & RcBaseProps<ComponentProps<typeof MuiCardHeader>>;\n\ninterface RcCardHeaderTypeMap<D extends React.ElementType = 'div'> {\n  props: RcCardHeaderProps;\n  defaultComponent: D;\n}\n\nconst _RcCardHeader = forwardRef<any, RcCardHeaderProps>(\n  (inProps: RcCardHeaderProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcCardHeader' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcCardHeaderClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiCardHeader {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiCardHeader>\n    );\n  },\n);\n\nconst RcCardHeader = overridableStyled<RcCardHeaderTypeMap>(_RcCardHeader)`\n  ${CardHeaderStyle}\n`;\n\nRcCardHeader.defaultProps = {};\n\nRcCardHeader.displayName = 'RcCardHeader';\n\nexport { RcCardHeader };\nexport type { RcCardHeaderProps };\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcCardHoverActionsProps } from '../CardHoverActions';\n\n// TODO: use token in theme.transitions.easing\nconst hoverTransitionEasing = `cubic-bezier(0.25, 0.8, 0.25, 1)`;\n\nexport const hoverTransition: RcThemedStyled<any, string> = ({ theme }) =>\n  theme.transitions.create(['opacity'], {\n    easing: hoverTransitionEasing,\n    duration: theme.transitions.duration.standard,\n  });\n\nexport const CardHoverActionsStyle: RcThemedStyled<\n  RcCardHoverActionsProps,\n  any\n> = () => {\n  return css`\n    position: absolute;\n    right: 0;\n    top: 0;\n    padding: ${spacing(4)};\n    transition: ${hoverTransition};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport clsx from 'clsx';\n\nimport { RcClassesProps, styled, useThemeProps } from '../../../foundation';\nimport { CardHoverActionsStyle } from './styles';\nimport { RcCardHoverActionsClasses } from './utils';\n\ntype RcCardHoverActionsClassKey = RcClassesProps<'root' | 'visible'>;\n\ntype RcCardHoverActionsProps = {\n  /** forces visibility regardless of parent card hover state */\n  visible?: boolean;\n} & RcCardHoverActionsClassKey &\n  ComponentProps<'div'>;\n\nconst _RcCardHoverActions = forwardRef<any, RcCardHoverActionsProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcCardHoverActions' });\n    const { className: classNameProp, visible, ...rest } = props;\n    const className = useMemo(\n      () =>\n        clsx(classNameProp, RcCardHoverActionsClasses.root, {\n          [RcCardHoverActionsClasses.visible]: visible,\n        }),\n      [classNameProp, visible],\n    );\n\n    return <div {...rest} ref={ref} className={className} />;\n  },\n);\n\nconst RcCardHoverActions = styled(_RcCardHoverActions)`\n  ${CardHoverActionsStyle}\n`;\n\nRcCardHoverActions.defaultProps = {};\n\nRcCardHoverActions.displayName = 'RcCardHoverActions';\n\nexport { RcCardHoverActions };\nexport type { RcCardHoverActionsProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCardMedia from '@material-ui/core/CardMedia';\n\nimport {\n  combineClasses,\n  overridableStyled,\n  RcBaseProps,\n  useThemeProps,\n} from '../../../foundation';\nimport { CardMediaStyle } from './styles';\nimport { RcCardMediaClasses } from './utils';\n\ntype RcCardMediaProps = {} & RcBaseProps<ComponentProps<typeof MuiCardMedia>>;\n\ninterface RcCardMediaTypeMap<D extends React.ElementType = 'div'> {\n  props: RcCardMediaProps;\n  defaultComponent: D;\n}\n\nconst _RcCardMedia = forwardRef<any, RcCardMediaProps>(\n  (inProps: RcCardMediaProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcCardMedia' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcCardMediaClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiCardMedia {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiCardMedia>\n    );\n  },\n);\n\nconst RcCardMedia = overridableStyled<RcCardMediaTypeMap>(_RcCardMedia)`\n  ${CardMediaStyle}\n`;\n\nRcCardMedia.defaultProps = {};\n\nRcCardMedia.displayName = 'RcCardMedia';\n\nexport { RcCardMedia };\nexport type { RcCardMediaProps };\n","import {\n  css,\n  nonTouchHoverMedia,\n  palette2,\n  px,\n  radius,\n  RcThemedStyled,\n  setOpacity,\n  shadows,\n  spacing,\n} from '../../../../foundation';\nimport { RcIconButtonSizes } from '../../../Buttons/IconButton/utils';\nimport { RcCardSelectionAreaProps } from '../CardSelectionArea';\nimport { RcCardSelectionAreaClasses } from '../utils';\n\nexport const CardSelectionAreaStyle: RcThemedStyled<\n  RcCardSelectionAreaProps,\n  any\n> = () => {\n  const innerCircleSize = RcIconButtonSizes.small;\n\n  return css`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 0;\n\n    ${nonTouchHoverMedia} {\n      &&:hover {\n        background-color: ${setOpacity(palette2('action', 'grayLight'), '08')};\n      }\n    }\n\n    .${RcCardSelectionAreaClasses.iconOuterCircle} {\n      position: absolute;\n      right: 0;\n      top: 0;\n      margin: ${spacing(2)};\n      border-radius: ${radius('circle')};\n      padding: ${spacing(1)};\n      background-color: ${palette2('neutral', 'b01')};\n      box-shadow: ${shadows('1')};\n\n      .${RcCardSelectionAreaClasses.iconInnerCircle} {\n        box-sizing: border-box;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        height: ${px(innerCircleSize)};\n        width: ${px(innerCircleSize)};\n        border-radius: ${radius('circle')};\n        border: 1px solid ${palette2('interactive', 'f01')};\n        background-color: ${palette2('neutral', 'b01')};\n      }\n    }\n\n    &.${RcCardSelectionAreaClasses.checked}\n      .${RcCardSelectionAreaClasses.iconInnerCircle} {\n      height: ${px(innerCircleSize)};\n      width: ${px(innerCircleSize)};\n      border: none;\n      background-color: ${palette2('interactive', 'f01')};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCheckBox from '@material-ui/core/Checkbox';\n\nimport {\n  combineClasses,\n  combineProps,\n  omit,\n  RcBaseProps,\n  RcClassesProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport CheckIcon from '../../../icon/Check';\nimport { RcIcon } from '../../Icon';\nimport { useRcCardContext } from '../Card/CardContext';\nimport { CardSelectionAreaStyle } from './styles';\nimport { RcCardSelectionAreaClasses } from './utils';\n\ntype RcCardSelectionAreaClassKey = RcClassesProps<\n  'iconOuterCircle' | 'iconInnerCircle' | 'icon'\n>;\n\ntype RcCardSelectionAreaProps = {} & RcCardSelectionAreaClassKey &\n  RcBaseProps<\n    ComponentProps<typeof MuiCheckBox>,\n    | 'icon'\n    | 'checkedIcon'\n    | 'size'\n    | 'color'\n    | 'edge'\n    | 'centerRipple'\n    | 'disableRipple'\n    | 'disableTouchRipple'\n    | 'TouchRippleProps'\n    | 'TouchRippleProps'\n    | 'focusRipple'\n    | 'disableFocusRipple'\n    | 'readOnly'\n    | 'required'\n    | 'indeterminate'\n    | 'indeterminateIcon'\n  >;\n\nconst SelectionIcon = ({ checked }: { checked?: boolean }) => {\n  const { iconOuterCircle, iconInnerCircle, icon } = RcCardSelectionAreaClasses;\n  return (\n    <div className={iconOuterCircle}>\n      <div className={iconInnerCircle}>\n        {checked && (\n          <RcIcon\n            className={icon}\n            symbol={CheckIcon}\n            size=\"small\"\n            color=\"neutral.f01\"\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst _RcCardSelectionArea = forwardRef<any, RcCardSelectionAreaProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({\n      props: inProps,\n      name: 'RcCardSelectionArea',\n    });\n    const { classes: classesProp, onFocusVisible, onBlur, ...rest } = props;\n    const { setFocusVisible } = useRcCardContext();\n\n    const events = useMemo(\n      () =>\n        combineProps(\n          {\n            onFocusVisible: () => setFocusVisible(true),\n            onBlur: () => setFocusVisible(false),\n          },\n          {\n            onFocusVisible,\n            onBlur,\n          },\n        ),\n      [onBlur, onFocusVisible, setFocusVisible],\n    );\n\n    const classes = useMemo(\n      () =>\n        omit(combineClasses(RcCardSelectionAreaClasses, classesProp), [\n          'iconInnerCircle',\n          'iconOuterCircle',\n          'icon',\n        ]),\n      [classesProp],\n    );\n\n    return (\n      <MuiCheckBox\n        {...rest}\n        {...events}\n        ref={ref}\n        classes={classes}\n        icon={<SelectionIcon />}\n        checkedIcon={<SelectionIcon checked />}\n        disableRipple\n      />\n    );\n  },\n);\n\nconst RcCardSelectionArea = styled(_RcCardSelectionArea)`\n  ${CardSelectionAreaStyle}\n`;\n\nRcCardSelectionArea.defaultProps = {};\n\nRcCardSelectionArea.displayName = 'RcCardSelectionArea';\n\nexport { RcCardSelectionArea };\nexport type { RcCardSelectionAreaProps };\n","import {\n  css,\n  ellipsis,\n  fakeBorder,\n  FakeBorderOption,\n  focusVisible,\n  focusVisibleColor,\n  nonTouchHoverMedia,\n  palette2,\n  radius,\n  RcThemedStyled,\n  setOpacity,\n  spacing,\n  typography,\n} from '../../../foundation';\nimport { disabledColor, textColor } from '../../Forms/TextField/styles';\nimport { RcChipProps } from '../Chip';\nimport { RcChipClasses } from '../utils';\n\nconst defaultBgColor = palette2('action', 'grayDark');\nconst errorBgColor = palette2('danger', 'f02');\n\nfunction fakePseudoRoundBorder(addOptions?: FakeBorderOption) {\n  return fakeBorder({ pseudo: true, radius: 'round', ...addOptions });\n}\n\nexport const ChipStyle: RcThemedStyled<RcChipProps, any> = (props) => {\n  const { isError, error = isError } = props;\n\n  return css`\n    height: 28px;\n    box-sizing: border-box;\n    padding: ${spacing(0.5)};\n    background-color: ${palette2('neutral', 'b03')};\n    color: ${textColor};\n    position: relative;\n    border-radius: ${radius('round')};\n    ${ellipsis};\n\n    ${typography('body1')};\n    ${fakePseudoRoundBorder()};\n\n    ${focusVisible} {\n      ${fakePseudoRoundBorder({ color: focusVisibleColor })};\n\n      background-color: ${setOpacity(\n        error ? errorBgColor : defaultBgColor,\n        '08',\n      )};\n    }\n\n    ${nonTouchHoverMedia} {\n      &:hover {\n        background-color: ${setOpacity(defaultBgColor, '12')};\n      }\n    }\n\n    &:focus {\n      background-color: ${setOpacity(defaultBgColor, '16')};\n    }\n\n    &:active {\n      background-color: ${setOpacity(defaultBgColor, '24')};\n    }\n\n    &.${RcChipClasses.disabled} {\n      color: ${disabledColor};\n      opacity: 1;\n    }\n\n    ${error &&\n    css`\n      &:not(.${RcChipClasses.disabled}) {\n        color: ${palette2('danger', 'f02')};\n        ${fakePseudoRoundBorder({ color: palette2('danger', 'f02') })};\n\n        background-color: ${palette2('danger', 'b01')};\n\n        ${nonTouchHoverMedia} {\n          &:hover {\n            background-color: ${setOpacity(errorBgColor, '08')};\n          }\n        }\n\n        &:focus {\n          background-color: ${setOpacity(errorBgColor, '16')};\n        }\n\n        &:active {\n          background-color: ${setOpacity(errorBgColor, '24')};\n        }\n      }\n    `};\n\n    .${RcChipClasses.avatar} {\n      color: ${palette2('neutral', 'b01')};\n      margin-left: 0px;\n      margin-right: -4px;\n\n      span {\n        width: auto;\n        height: auto;\n      }\n    }\n  `;\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  ReactElement,\n  useMemo,\n} from 'react';\n\nimport MuiChip from '@material-ui/core/Chip';\n\nimport {\n  combineClasses,\n  isRcElement,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport DeleteCircle from '../../icon/DeleteCircle';\nimport { RcAvatarProps } from '../Avatar';\nimport { RcIconButton, RcIconButtonProps } from '../Buttons/IconButton';\nimport { WithTooltipProps } from '../Tooltip';\nimport { ChipStyle } from './styles';\nimport { RcChipClasses } from './utils';\n\ntype RcChipProps = {\n  /** is that error chip */\n  error?: boolean;\n  /** props apply on `deleteIcon` */\n  deleteIconProps?: RcIconButtonProps & WithTooltipProps;\n  /** @deprecated should use `avatar` */\n  Avatar?: ReactElement<RcAvatarProps>;\n  /** @deprecated should use deleteIconProps with `data-test-automation-id` */\n  deleteAutomationId?: string;\n  /** @deprecated should use deleteIconProps with `title` */\n  deleteTooltip?: string;\n  /** @deprecated should use `error` */\n  isError?: boolean;\n} & RcBaseProps<\n  ComponentProps<typeof MuiChip>,\n  'color' | 'size' | 'variant' | 'icon'\n>;\n\nconst _RcChip = forwardRef<any, RcChipProps>((inProps: RcChipProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcChip' });\n  const {\n    Avatar: AvatarProp,\n    deleteTooltip,\n    deleteAutomationId,\n    isError,\n    classes: classesProp,\n    avatar: avatarProp = AvatarProp,\n    error = isError,\n    id,\n    label,\n    disabled,\n    deleteIcon: deleteIconProp,\n    deleteIconProps,\n    tabIndex,\n    ...rest\n  } = props;\n  const classes = useMemo(\n    () => combineClasses(RcChipClasses, classesProp),\n    [classesProp],\n  );\n\n  const deleteIcon = useMemo(() => {\n    return deleteIconProp ? (\n      React.cloneElement(deleteIconProp, {\n        tabIndex: -1,\n        ...deleteIconProps,\n      })\n    ) : (\n      <RcIconButton\n        tabIndex={-1}\n        disabled={disabled}\n        variant=\"plain\"\n        size=\"medium\"\n        title={deleteTooltip}\n        color={error ? 'danger.f02' : undefined}\n        data-test-automation-id={deleteAutomationId}\n        symbol={DeleteCircle}\n        {...deleteIconProps}\n      />\n    );\n  }, [\n    deleteIconProp,\n    deleteIconProps,\n    disabled,\n    deleteTooltip,\n    error,\n    deleteAutomationId,\n  ]);\n\n  const avatar = useMemo(() => {\n    if (avatarProp) {\n      if (\n        React.isValidElement(avatarProp) &&\n        isRcElement<RcAvatarProps>(avatarProp, ['RcAvatar']) &&\n        // * if that size is equal to default size medium\n        // * that mean user not want to custom that\n        avatarProp.props.size === 'medium'\n      ) {\n        return React.cloneElement(avatarProp, {\n          size: 'xxsmall',\n        });\n      }\n\n      return avatarProp;\n    }\n    return undefined;\n  }, [avatarProp]);\n\n  return (\n    <MuiChip\n      ref={ref}\n      id={id}\n      tabIndex={disabled ? -1 : tabIndex}\n      label={label}\n      disabled={disabled}\n      classes={classes}\n      avatar={avatar}\n      deleteIcon={deleteIcon}\n      data-test-automation-class=\"selected-item\"\n      data-test-automation-value={id ? id : label}\n      data-is-error={error}\n      {...rest}\n    />\n  );\n});\n\nconst RcChip = styled(_RcChip)`\n  ${ChipStyle}\n`;\n\nRcChip.defaultProps = {\n  tabIndex: 0,\n  clickable: false,\n};\n\nRcChip.displayName = 'RcChip';\n\nexport { RcChip };\nexport type { RcChipProps };\n","import { createGlobalStyle, palette2 } from '../../../foundation';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background-color:${palette2('neutral', 'elevation')};\n    margin: 0;\n    padding-right: 0 !important;\n    background: ${palette2('neutral', 'b03')};\n    padding: 0;\n    font-family: Lato, Helvetica, Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n","import React, {\n  forwardRef,\n  HTMLAttributes,\n  Ref,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n} from 'react';\n\nimport {\n  RcBaseProps,\n  styled,\n  useDebounce,\n  useEventCallback,\n  useForkRef,\n  useKeyboardMoveFocus,\n  UseLongPressEventReason,\n  useOnlyOneFocusable,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcButtonBaseProps } from '../../Buttons/ButtonBase';\nimport { RcIconButtonClasses } from '../../Buttons/IconButton/utils';\nimport { RcVisuallyHidden } from '../../VisuallyHidden';\nimport { DialPadButton, DialPadButtonProps } from '../DialPadButton';\nimport { useRcDialerContext } from '../utils';\nimport { keypadContainerStyle } from './styles';\nimport type {\n  DIALER_PAD_ICON_VALUES,\n  DialPadSoundMap,\n  RcDialPadAction,\n  RcDialPadControl,\n} from './utils';\nimport {\n  ACCEPTABLE_KEYS,\n  DIALER_PAD_ICONS,\n  DIALER_PAD_PLUS,\n  useKeyAudio,\n} from './utils';\n\ntype RcDialPadOnChangeReason = UseLongPressEventReason;\n\ntype RcDialPadProps = {\n  /** trigger when value change, `reason` for trigger from what event */\n  onChange?: (value: string, reason: RcDialPadOnChangeReason) => void;\n  /** keypad sounds */\n  sounds?: DialPadSoundMap;\n  /** volume of keypad sound */\n  volume?: number;\n  /** is keypad sound muted */\n  muted?: boolean;\n  /** long press '0' time to typing '+' */\n  longPressDelay?: number;\n  /**\n   * time of persist button background when manual trigger by 'actionRef'\n   * button background will not persist if persistBgTime less than 0\n   * @default 200\n   * */\n  persistBgTime?: number;\n  /** can manual trigger audio by ref */\n  action?: Ref<RcDialPadAction>;\n  /**\n   * control inner action,\n   * ### you should use with `useDialKeyboard`\n   */\n  control?: Ref<RcDialPadControl>;\n  /** method to get addition props for below each `DialPadButton` */\n  getDialPadButtonProps?: (\n    value: DIALER_PAD_ICON_VALUES,\n  ) => RcBaseProps<\n    RcButtonBaseProps,\n    'color' | 'value' | 'onKeyDown' | 'onFocus'\n  > &\n    Record<string, string>;\n} & RcBaseProps<HTMLAttributes<HTMLDivElement>, 'onChange'> &\n  Pick<DialPadButtonProps, 'classes'>;\n\nconst DEBOUNCE_TIME = 30;\n\nconst _RcDialPad = forwardRef<HTMLDivElement, RcDialPadProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDialPad' });\n    const {\n      sounds,\n      volume,\n      muted,\n      classes,\n      onChange: onChangeProp,\n      longPressDelay,\n      action,\n      persistBgTime,\n      control,\n      getDialPadButtonProps,\n      ...divProps\n    } = props;\n\n    const containerRef = useRef<HTMLDivElement>(null);\n    const hiddenRef = useRef<HTMLDivElement>(null);\n\n    const keyTimerMapRef = useRef<Record<string, number>>({});\n\n    const forkRef = useForkRef(containerRef, ref);\n\n    const { onInsertRef, dialPadActionRef } = useRcDialerContext();\n\n    const focusedIndexRef = useRef(0);\n\n    const { focusIndex, getItemProps, moveFocusedId } = useOnlyOneFocusable({\n      focusedIndexRef,\n      containerRef,\n    });\n\n    const dialButtonKey = `${moveFocusedId}-dial-button`;\n\n    const { onKeyFocusedIndexHandle } = useKeyboardMoveFocus({\n      options: DIALER_PAD_ICONS,\n      focusedIndexRef,\n      infinite: true,\n      columns: 3,\n      onFocusedIndexChange: (event, toIndex) => {\n        focusedIndexRef.current = toIndex;\n        focusIndex(toIndex);\n\n        event.preventDefault();\n      },\n    });\n\n    const play = useKeyAudio({\n      volume: volume!,\n      muted: muted!,\n      sounds,\n    });\n\n    const playAudio = useEventCallback((value: string) => {\n      const key = value === DIALER_PAD_PLUS ? '0' : value;\n\n      const keyButtonElm = containerRef.current?.querySelector(\n        `[${dialButtonKey}=\"${key}\"]`,\n      );\n\n      if (keyButtonElm) {\n        // * to keep color when quick trigger insert key or click very quick\n        const oldTimer = keyTimerMapRef.current[key];\n        if (oldTimer) clearTimeout(oldTimer);\n\n        keyButtonElm.classList.add(RcIconButtonClasses.persistBg);\n\n        keyTimerMapRef.current[key] = window.setTimeout(() => {\n          keyButtonElm.classList.remove(RcIconButtonClasses.persistBg);\n\n          delete keyTimerMapRef.current[key];\n        }, persistBgTime);\n      }\n\n      return play(value);\n    });\n\n    const handleChange: RcDialPadProps['onChange'] = (value, reason) => {\n      playAudio(value);\n      onInsertRef?.current?.(value, reason);\n      onChangeProp?.(value, reason);\n    };\n\n    const handleKeyboardEffect = useDebounce(\n      (value: string, isKeyup: boolean) => {\n        if (isKeyup) {\n          handleChange(value, 'keyboard');\n\n          const toIndex = ACCEPTABLE_KEYS.findIndex((x) => x === value);\n          focusedIndexRef.current = toIndex;\n          // * mean that current focus on that dialPad, move focus to dialPad container\n          if (document.activeElement?.getAttribute(dialButtonKey) !== null) {\n            hiddenRef.current?.focus();\n          }\n        }\n      },\n      DEBOUNCE_TIME,\n    );\n\n    const handleKeyEffect = useEventCallback(\n      (value: string, reason: RcDialPadOnChangeReason) => {\n        handleChange(value, reason);\n      },\n    );\n\n    const forkActionRef = useForkRef(dialPadActionRef!, action!);\n\n    useImperativeHandle(forkActionRef, () => ({ playAudio }), [playAudio]);\n\n    useImperativeHandle(control, () => ({ handleKeyboardEffect }), [\n      handleKeyboardEffect,\n    ]);\n\n    // * clean when unmount\n    useEffect(\n      () => () => {\n        for (const timer of Object.values(keyTimerMapRef.current)) {\n          clearTimeout(timer);\n        }\n      },\n      [],\n    );\n\n    return (\n      <div ref={forkRef} {...divProps}>\n        <RcVisuallyHidden ref={hiddenRef} tabIndex={-1} />\n        {DIALER_PAD_ICONS.map(([symbol, key, additionLabel], index) => {\n          const ariaLabelArr: string[] = additionLabel\n            ? [key, additionLabel]\n            : [key];\n\n          return (\n            <DialPadButton\n              classes={classes}\n              symbol={symbol}\n              key={key}\n              value={key}\n              onKeyEffect={handleKeyEffect}\n              {...getItemProps(index)}\n              aria-label={ariaLabelArr.join(',')}\n              onKeyDown={onKeyFocusedIndexHandle}\n              {...{ [dialButtonKey]: key }}\n              {...getDialPadButtonProps?.(key)}\n              {...(key === '0'\n                ? {\n                    longPressValue: DIALER_PAD_PLUS,\n                    longPressDelay,\n                  }\n                : {})}\n            />\n          );\n        })}\n      </div>\n    );\n  },\n);\n\n/** @release */\nconst RcDialPad = styled(_RcDialPad)`\n  ${keypadContainerStyle}\n`;\n\nRcDialPad.defaultProps = {\n  persistBgTime: 200,\n  volume: 1,\n  muted: false,\n  longPressDelay: 1000,\n};\n\nRcDialPad.displayName = 'RcDialPad';\n\nexport { RcDialPad };\n\nexport type { RcDialPadAction, RcDialPadOnChangeReason, RcDialPadProps };\n","import { css, palette2 } from '../../../../foundation';\nimport { RcIcon } from '../../../Icon';\n\nconst itemScale = `27.59%`;\n\nexport const buttonWrapperStyle = css`\n  && {\n    width: ${itemScale};\n    height: 0;\n  }\n\n  padding-top: ${itemScale};\n\n  ${RcIcon} {\n    position: absolute;\n    top: 0;\n    left: 0;\n    svg {\n      height: 100%;\n      width: 100%;\n      path:first-child {\n        fill: ${palette2('neutral', 'f06')};\n      }\n      path:nth-child(2) {\n        fill: ${palette2('neutral', 'f04')};\n      }\n    }\n  }\n`;\n","import React, { FunctionComponent } from 'react';\n\nimport { styled, useLongPress } from '../../../foundation';\nimport { RcIconButton, RcIconButtonProps } from '../../Buttons';\nimport { RcDialPadOnChangeReason } from '../DialPad';\nimport { buttonWrapperStyle } from './styles';\n\nexport type DialPadButtonProps = {\n  /** output value when press */\n  value: string;\n  /** output value when long press */\n  longPressValue?: string;\n  /** time for long press delay trigger */\n  longPressDelay?: number;\n  /** emit effect when trigger number enter */\n  onKeyEffect: (value: string, reason: RcDialPadOnChangeReason) => void;\n} & Pick<\n  RcIconButtonProps,\n  | 'shouldPersistBg'\n  | 'symbol'\n  | 'classes'\n  | 'tabIndex'\n  | 'onKeyDown'\n  | 'onFocus'\n>;\n\nconst _DialPadButton: FunctionComponent<DialPadButtonProps> = (props) => {\n  const { value, longPressValue, longPressDelay, onKeyEffect, ...rest } = props;\n\n  const isPressEvent =\n    typeof longPressDelay === 'number' && typeof longPressValue === 'string';\n\n  const { ref, ...events } = useLongPress(\n    {\n      onTap: (e, reason) => {\n        onKeyEffect(value, reason);\n      },\n      onPress: isPressEvent\n        ? (e, reason) => {\n            onKeyEffect(longPressValue!, reason);\n          }\n        : undefined,\n    },\n    rest as any,\n    { delay: longPressDelay },\n  );\n\n  return (\n    <RcIconButton ref={ref} variant=\"round\" stretchIcon {...rest} {...events} />\n  );\n};\n\nconst DialPadButton = styled(_DialPadButton)`\n  ${buttonWrapperStyle}\n`;\n\nDialPadButton.displayName = 'DialPadButton';\n\nexport { DialPadButton };\n","import React, {\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from 'react';\n\nimport {\n  combineProps,\n  getSelectionPosition,\n  RcBaseProps,\n  setSelectionPosition,\n  styled,\n  useEventCallback,\n  useForkRef,\n  useKeyDownOnce,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcTextField, RcTextFieldProps } from '../../Forms/TextField';\nimport { RcDialPadOnChangeReason } from '../DialPad';\nimport { ACCEPTABLE_KEYS } from '../DialPad/utils';\nimport { useRcDialerContext } from '../utils';\nimport { DialTextFieldStyle } from './styles';\nimport { getDialPadValueOnlyRegex, useFixedEndSelection } from './utils';\n\ntype RcDialTextFieldProps = {\n  /** current value */\n  value: string;\n  /** emit when value change */\n  onChange(value: string): any;\n  /**\n   * emit latest trigger value, that will be helpful when you in `keypadMode`,\n   * `reason` for trigger from what event\n   */\n  onEmit?: (value: string, reason: RcDialPadOnChangeReason) => void;\n  /** only allow keypad value */\n  onlyAllowKeypadValue?: boolean;\n  /**\n   * is that in keypad mode, keypad mode\n   *\n   * 1. can't select text\n   * 2. can't delete text\n   * 3. can't change cursor position\n   * 4. keep focus position in the latest\n   * 5. non maxLength\n   */\n  keypadMode?: boolean;\n} & RcBaseProps<\n  RcTextFieldProps,\n  | 'onChange'\n  | 'value'\n  | 'onClear'\n  | 'clearBtn'\n  | 'clearButtonProps'\n  | 'clearLabel'\n>;\n\nconst _RcDialTextField = forwardRef<any, RcDialTextFieldProps>(\n  (inProps: RcDialTextFieldProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDialTextField' });\n    const {\n      children,\n      value,\n      onChange,\n      onEmit,\n      onKeyPress,\n      onKeyDown,\n      onKeyUp,\n      inputRef: inputRefProp,\n      inputProps: inputPropsProp,\n      InputProps: InputPropsProp,\n      onlyAllowKeypadValue,\n      keypadMode,\n      ...rest\n    } = props;\n\n    const dialerContext = useRcDialerContext();\n\n    const {\n      ref: inputRef,\n      onFocus: onKeypadModeFocus,\n      onKeyDown: onKeypadModeKeyDown,\n      onClick: onKeypadModeClick,\n    } = useFixedEndSelection();\n\n    const forkContextRef = useForkRef(dialerContext.inputRef!, inputRef);\n    const forkInputRef = useForkRef(inputRefProp!, forkContextRef);\n\n    const scrollToPositionRef = useRef<number | undefined>();\n    const isNotTriggerRefocusRef = useRef(false);\n\n    const maxLength = keypadMode ? undefined : inputPropsProp?.maxLength;\n\n    const checkNotReFocus = useEventCallback(\n      (reason: RcDialPadOnChangeReason, isFocus?: boolean) => {\n        const elm = inputRef.current;\n\n        const isInputFocus = isFocus ?? document.activeElement === elm;\n\n        if (reason !== 'click' && !isInputFocus) {\n          // ! both keydown and touch, only when focus need re-focus\n          isNotTriggerRefocusRef.current = true;\n        }\n      },\n    );\n\n    /**\n     * outside clear via this method, with check current input state\n     */\n    useImperativeHandle(\n      dialerContext.onClearRef,\n      () => (e, reason) => {\n        // * when clear from keyboard,\n        // * must need re-focus, so not check,\n        if (reason !== 'keyboard') {\n          checkNotReFocus(reason);\n        }\n        scrollToPositionRef.current = 0;\n        onChange?.('');\n      },\n      [checkNotReFocus, onChange],\n    );\n\n    /**\n     * outside delete value via this method, with check current input state\n     */\n    useImperativeHandle(\n      dialerContext.onDeleteRef,\n      () => (e, reason) => {\n        const elm = inputRef.current;\n\n        if (elm && value?.length) {\n          const isFocus = document.activeElement === elm;\n\n          let toPosition: number | undefined;\n          let toValue: string | undefined;\n\n          if (isFocus) {\n            const { position, isSelectRange } = getSelectionPosition(inputRef);\n\n            if (isSelectRange) {\n              toPosition = position.start;\n              toValue =\n                value.slice(0, position.start) + value.slice(position.end);\n            } else if (position.start > 0) {\n              toPosition = position.start - 1;\n              toValue = value.slice(0, toPosition) + value.slice(position.end);\n            }\n          } else {\n            toPosition = value.length - 1;\n            toValue = value.slice(0, -1);\n          }\n\n          if (toValue !== undefined) {\n            // * when delete from keyboard and value to be empty,\n            // * must need re-focus, so not check,\n            if (!(reason === 'keyboard' && toValue === '')) {\n              checkNotReFocus(reason);\n            }\n            scrollToPositionRef.current = toPosition;\n            onChange?.(toValue);\n          }\n        }\n      },\n      [checkNotReFocus, inputRef, onChange, value],\n    );\n\n    /**\n     * outside change value via this method, with check current input state\n     */\n    useImperativeHandle(\n      dialerContext.onInsertRef,\n      () => (addValue, reason) => {\n        const elm = inputRef.current;\n\n        if (elm) {\n          const isFocus = document.activeElement === elm;\n\n          let toPosition: number;\n          let toValue: string;\n\n          // * when keypadMode also add value at latest\n          if (!isFocus || keypadMode) {\n            toValue = value + addValue;\n            toPosition = toValue.length;\n          } else {\n            const { position } = getSelectionPosition(inputRef);\n\n            toValue =\n              value.slice(0, position.start) +\n              addValue +\n              value.slice(position.end);\n            toPosition = position.start + 1;\n          }\n\n          if (\n            maxLength === undefined ||\n            (maxLength !== undefined && toValue.length <= maxLength)\n          ) {\n            checkNotReFocus(reason, isFocus);\n\n            scrollToPositionRef.current = toPosition;\n            onChange?.(toValue);\n            onEmit?.(addValue, reason);\n          }\n        }\n      },\n      [\n        checkNotReFocus,\n        inputRef,\n        keypadMode,\n        maxLength,\n        onChange,\n        onEmit,\n        value,\n      ],\n    );\n\n    useLayoutEffect(() => {\n      const scrollToPosition = scrollToPositionRef.current;\n\n      if (!isNotTriggerRefocusRef.current && scrollToPosition !== undefined) {\n        setSelectionPosition(inputRef, {\n          start: scrollToPosition,\n          end: scrollToPosition,\n          scrollIntoView: true,\n        });\n      }\n\n      scrollToPositionRef.current = undefined;\n      isNotTriggerRefocusRef.current = false;\n    });\n\n    const events = useKeyDownOnce<HTMLInputElement>(ACCEPTABLE_KEYS, {\n      onKeyDown: (e) => {\n        dialerContext.dialPadActionRef?.current?.playAudio(e.key);\n\n        if (keypadMode) {\n          if (['Delete', 'Backspace'].includes(e.key)) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n\n          onKeypadModeKeyDown(e);\n        }\n        onKeyDown?.(e);\n      },\n      onKeyUp,\n    });\n\n    const handleChange = useEventCallback(\n      (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const currValue = e.target.value;\n\n        // * handle copy paste\n        if (onlyAllowKeypadValue) {\n          const filterValue = (\n            currValue.match(getDialPadValueOnlyRegex()) || []\n          ).join('');\n\n          if (filterValue === value) return;\n\n          const newValue = filterValue.slice(-1);\n          if (newValue !== '') {\n            onEmit?.(newValue, 'keyboard');\n          }\n\n          onChange(filterValue);\n          return;\n        }\n\n        onChange(currValue);\n      },\n    );\n\n    const handleKeyPress = useEventCallback(\n      (e: React.KeyboardEvent<HTMLDivElement>): void => {\n        onKeyPress?.(e);\n\n        if (onlyAllowKeypadValue) {\n          const isMatch = getDialPadValueOnlyRegex().test(e.key);\n          if (!isMatch) {\n            e.preventDefault();\n            e.stopPropagation();\n          }\n        }\n      },\n    );\n\n    const InputProps = useMemo(\n      () =>\n        combineProps(\n          {\n            onFocus: keypadMode ? onKeypadModeFocus : undefined,\n            onClick: keypadMode ? onKeypadModeClick : undefined,\n            onKeyPress: handleKeyPress,\n            onChange: handleChange,\n            onKeyDown: events.onKeyDown,\n            onKeyUp: events.onKeyUp,\n          },\n          InputPropsProp,\n        ),\n      [\n        InputPropsProp,\n        events.onKeyDown,\n        events.onKeyUp,\n        handleChange,\n        handleKeyPress,\n        keypadMode,\n        onKeypadModeClick,\n        onKeypadModeFocus,\n      ],\n    );\n\n    const inputProps = useMemo(\n      () => ({ ...inputPropsProp, maxLength }),\n      [inputPropsProp, maxLength],\n    );\n\n    return (\n      <RcTextField\n        ref={ref}\n        inputRef={forkInputRef}\n        clearBtn={false}\n        value={value}\n        variant=\"borderLess\"\n        inputProps={inputProps}\n        InputProps={InputProps}\n        autoComplete=\"off\"\n        {...rest}\n      >\n        {children}\n      </RcTextField>\n    );\n  },\n);\n\nconst RcDialTextField = styled(_RcDialTextField)`\n  ${DialTextFieldStyle}\n`;\n\nRcDialTextField.defaultProps = {\n  inputProps: {\n    maxLength: 30,\n  },\n  textVariant: 'headline1',\n};\n\nRcDialTextField.displayName = 'RcDialTextField';\n\nexport { RcDialTextField };\nexport type { RcDialTextFieldProps };\n","import { css, RcThemedStyled } from '../../../foundation';\nimport { RcDialogProps } from '../Dialog';\nimport { RcDialogClasses, RcDialogMaxWidths } from '../utils';\n\nexport const DialogStyle: RcThemedStyled<RcDialogProps, any> = (props) => {\n  const { size } = props;\n  return css`\n    .${RcDialogClasses.paper} {\n      max-width: ${RcDialogMaxWidths[size!]};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiDialog from '@material-ui/core/Dialog';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcBaseSize,\n  styled,\n  useRcPortalWindowContext,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../foundation';\nimport { useUnmountPortalHandler } from '../PortalHost';\nimport { DialogStyle } from './styles';\nimport { RcDialogChildrenSize, RcDialogClasses } from './utils';\nimport { RcDialogContext } from './utils/DialogContext';\n\ntype RcDialogSize =\n  | RcBaseSize<'xsmall' | 'small' | 'medium' | 'large'>\n  | 'fullScreen';\n\ntype RcDialogProps = {\n  /**\n   * @deprecated size of dialog,\n   * please use `maxWidth` and `fullScreen` directly\n   *\n   * - 'fullScreen' => false\n   * - 'large' => `md`\n   * - 'medium' => `sm`\n   * - 'small' => `xs`\n   * - 'xsmall' => no longer exist, should custom by yourself\n   */\n  size?: RcDialogSize;\n  /** size apply to all dialog children */\n  childrenSize?: RcDialogChildrenSize;\n} & RcBaseProps<ComponentProps<typeof MuiDialog>>;\n\nconst _RcDialog = forwardRef<any, RcDialogProps>(\n  (inProps: RcDialogProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDialog' });\n    const {\n      classes: classesProp,\n      size = 'medium',\n      maxWidth: maxWidthProp,\n      fullWidth = true,\n      childrenSize,\n      children,\n      TransitionProps: TransitionPropsProp,\n      ...rest\n    } = props;\n    const classes = useMemo(\n      () => combineClasses(RcDialogClasses, classesProp),\n      [classesProp],\n    );\n\n    const { externalWindow } = useRcPortalWindowContext();\n\n    const maxWidth = useMemo<\n      ComponentProps<typeof MuiDialog>['maxWidth']\n    >(() => {\n      if (maxWidthProp) return maxWidthProp;\n\n      switch (size) {\n        case 'fullScreen':\n        case 'xsmall':\n          return false;\n        case 'large':\n          return 'md';\n        case 'medium':\n          return 'sm';\n        case 'small':\n        default:\n          return 'xs';\n      }\n    }, [maxWidthProp, size]);\n\n    const contextValue = useMemo(\n      () => ({ size: childrenSize }),\n      [childrenSize],\n    );\n\n    const onExited = useUnmountPortalHandler(TransitionPropsProp?.onExited);\n\n    const TransitionProps = { ...TransitionPropsProp, onExited };\n\n    return (\n      <MuiDialog\n        ref={ref}\n        fullWidth={fullWidth}\n        container={externalWindow?.document.body}\n        maxWidth={maxWidth}\n        fullScreen={size === 'fullScreen' ? true : undefined}\n        classes={classes}\n        TransitionProps={TransitionProps}\n        {...rest}\n      >\n        <RcDialogContext.Provider value={contextValue}>\n          {children}\n        </RcDialogContext.Provider>\n      </MuiDialog>\n    );\n  },\n);\n\nconst RcDialog = styled(\n  withDeprecatedCheck(\n    _RcDialog,\n    [\n      {\n        prop: 'size',\n        time: '2021-11',\n        comment: `\n   * please use \\`maxWidth\\` and \\`fullScreen\\` directly\n   *\n   * - 'fullScreen' => false\n   * - 'large' => \\`md\\`\n   * - 'medium' => \\`sm\\`\n   * - 'small' => \\`xs\\`\n   * - 'xsmall' => no longer exist, should custom by yourself\n   */`,\n      },\n    ],\n    'RcDialog',\n  ),\n)`\n  ${DialogStyle}\n`;\n\nRcDialog.defaultProps = {};\n\nRcDialog.displayName = 'RcDialog';\n\nexport { RcDialog, RcDialogContext };\nexport type { RcDialogProps, RcDialogSize };\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcDialogContentClasses } from '../../DialogContent/utils';\nimport { RcDialogActionsProps } from '../DialogActions';\nimport { RcDialogActionsSizes } from '../utils';\n\nconst itemSpace = spacing(2);\n\nexport const DialogActionsStyle: RcThemedStyled<RcDialogActionsProps, any> = (\n  props,\n) => {\n  const { size, reverse, direction, disableSpacing } = props;\n\n  const isVertical = direction === 'vertical';\n\n  const columnDirection = reverse ? 'column-reverse' : 'column';\n  const rowDirection = reverse ? 'row-reverse' : 'row';\n\n  return css`\n    padding: ${spacing(...RcDialogActionsSizes[size!])};\n    flex-direction: ${isVertical ? columnDirection : rowDirection};\n\n    ${size === 'medium' &&\n    /**\n     * use && because first is component selector, second one is dynamic selector with different props\n     * @see https://styled-components.com/docs/faqs#why-do-my-dom-nodes-have-two-classes\n     */\n    css`\n      .${RcDialogContentClasses.dividers} + && {\n        padding-top: ${spacing(5)};\n      }\n    `}\n\n    ${!disableSpacing &&\n    css`\n      > * + * {\n        ${isVertical\n          ? css`\n              ${reverse\n                ? css`\n                    margin-bottom: ${itemSpace};\n                  `\n                : css`\n                    margin-top: ${itemSpace};\n                  `}\n            `\n          : css`\n              ${reverse\n                ? css`\n                    margin-right: ${itemSpace};\n                  `\n                : css`\n                    margin-left: ${itemSpace};\n                  `}\n            `};\n      }\n    `};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiDialogActions from '@material-ui/core/DialogActions';\n\nimport {\n  combineClasses,\n  RcBaseDirection,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcDialogChildrenProps, useDialogDefaultProps } from '../utils';\nimport { DialogActionsStyle } from './styles';\nimport { RcDialogActionsClasses } from './utils';\n\ntype RcDialogActionsProps = {\n  /**\n   * direction of actions\n   *\n   * @default 'horizontal'\n   */\n  direction?: RcBaseDirection;\n  /**\n   * reverse below items\n   *\n   * @default false, when direction is `vertical`, default reverse will be `true`\n   */\n  reverse?: boolean;\n} & RcDialogChildrenProps &\n  RcBaseProps<ComponentProps<typeof MuiDialogActions>>;\n\nconst _RcDialogActions = forwardRef<any, RcDialogActionsProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDialogActions' });\n    const { classes: classesProp, size, children, reverse, ...rest } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcDialogActionsClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiDialogActions {...rest} ref={ref} classes={classes} disableSpacing>\n        {children}\n      </MuiDialogActions>\n    );\n  },\n);\n\nconst RcDialogActions = styled(_RcDialogActions).attrs(\n  (props: RcDialogActionsProps) => {\n    const toProps = useDialogDefaultProps(props);\n\n    const direction =\n      toProps.direction ??\n      (toProps.size === 'small' ? 'vertical' : 'horizontal');\n\n    const reverse = toProps.reverse ?? direction === 'vertical';\n\n    return {\n      ...toProps,\n      direction,\n      reverse,\n    };\n  },\n)`\n  ${DialogActionsStyle}\n`;\n\nRcDialogActions.defaultProps = {};\n\nRcDialogActions.displayName = 'RcDialogActions';\n\nexport { RcDialogActions };\nexport type { RcDialogActionsProps };\n","import { css, palette2, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcDialogContentProps } from '../DialogContent';\nimport { getRcDialogContentSpacings, RcDialogContentClasses } from '../utils';\n\nexport const DialogContentStyle: RcThemedStyled<RcDialogContentProps, any> = (\n  props,\n) => {\n  const { size, dividers } = props;\n\n  return css`\n    padding: ${spacing(...getRcDialogContentSpacings(dividers)[size!])};\n\n    &.${RcDialogContentClasses.dividers} {\n      border-color: ${palette2('neutral', 'l02')};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiDialogContent from '@material-ui/core/DialogContent';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcDialogChildrenProps, useDialogDefaultProps } from '../utils';\nimport { DialogContentStyle } from './styles';\nimport { RcDialogContentClasses } from './utils';\n\ntype RcDialogContentProps = {} & RcDialogChildrenProps &\n  RcBaseProps<ComponentProps<typeof MuiDialogContent>>;\n\nconst _RcDialogContent = forwardRef<any, RcDialogContentProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDialogContent' });\n    const { classes: classesProp, children, size, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcDialogContentClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiDialogContent {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiDialogContent>\n    );\n  },\n);\n\nconst RcDialogContent = styled(_RcDialogContent).attrs(useDialogDefaultProps)`\n  ${DialogContentStyle}\n`;\n\nRcDialogContent.defaultProps = {};\n\nRcDialogContent.displayName = 'RcDialogContent';\n\nexport { RcDialogContent };\nexport type { RcDialogContentProps };\n","import { css, RcThemedStyled } from '../../../../foundation';\nimport { RcDialogContentTextProps } from '../DialogContentText';\n\nexport const DialogContentTextStyle: RcThemedStyled<\n  RcDialogContentTextProps,\n  any\n> = ({ gutterBottom }) => {\n  // that is mui but, that not work with gutterBottom set\n  return css`\n    margin-bottom: ${gutterBottom === false && 0};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiDialogContentText from '@material-ui/core/DialogContentText';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcTypographyProps } from '../../Typography';\nimport { TypographyStyle } from '../../Typography/styles';\nimport {\n  MuiDefaultColor,\n  RcCustomTypographyVariant,\n} from '../../Typography/utils';\nimport { RcDialogChildrenProps, useDialogDefaultProps } from '../utils';\nimport { DialogContentTextStyle } from './styles';\nimport { RcDialogContentTextClasses } from './utils';\n\ntype RcDialogContentTextProps = {} & Pick<\n  RcTypographyProps,\n  'variant' | 'color' | 'weight' | 'component'\n> &\n  RcDialogChildrenProps &\n  RcBaseProps<ComponentProps<typeof MuiDialogContentText>, 'variant' | 'color'>;\n\nconst _RcDialogContentText = forwardRef<any, RcDialogContentTextProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({\n      props: inProps,\n      name: 'RcDialogContentText',\n    });\n    const {\n      color: colorProp,\n      component: componentProp,\n      classes: classesProp,\n      variant,\n      weight,\n      size,\n      children,\n      ...rest\n    } = props;\n\n    const component = componentProp || RcCustomTypographyVariant[variant!];\n\n    const classes = useMemo(\n      () => combineClasses(RcDialogContentTextClasses, classesProp),\n      [classesProp],\n    );\n\n    const color = useMemo(\n      () =>\n        MuiDefaultColor.includes(colorProp!) ? (colorProp as any) : undefined,\n      [colorProp],\n    );\n\n    return (\n      <MuiDialogContentText\n        // * for use html view variant\n        data-variant={variant}\n        // * for use html view color\n        data-color={color}\n        color={color}\n        ref={ref}\n        classes={classes}\n        component={component}\n        {...rest}\n      >\n        {children}\n      </MuiDialogContentText>\n    );\n  },\n);\n\nconst RcDialogContentText = styled(_RcDialogContentText).attrs(\n  (props: RcDialogContentTextProps) => {\n    const toProps = useDialogDefaultProps(props);\n\n    return {\n      variant: toProps.size === 'small' ? 'caption1' : 'body1',\n      color: 'neutral.f04',\n      ...toProps,\n    } as RcDialogContentTextProps;\n  },\n)`\n  ${DialogContentTextStyle}\n  ${TypographyStyle}\n`;\n\nRcDialogContentText.defaultProps = {};\n\nRcDialogContentText.displayName = 'RcDialogContentText';\n\nexport { RcDialogContentText };\nexport type { RcDialogContentTextProps };\n","import { css, palette2, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcDialogTitleProps } from '../DialogTitle';\nimport { RcDialogTitleSpacings } from '../utils';\n\nexport const DialogTitleStyle: RcThemedStyled<RcDialogTitleProps, any> = (\n  props,\n) => {\n  const { size, space: spaceProp, display } = props;\n\n  const paddingValue =\n    spaceProp !== undefined\n      ? spaceProp instanceof Array\n        ? spaceProp\n        : [spaceProp]\n      : RcDialogTitleSpacings[size!];\n\n  return css`\n    color: ${palette2('neutral', 'f06')};\n\n    padding: ${spacing(...paddingValue)};\n\n    display: ${display};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcTypography } from '../../Typography';\nimport { RcDialogChildrenProps, useDialogDefaultProps } from '../utils';\nimport { DialogTitleStyle } from './styles';\nimport { RcDialogTitleClasses, RcDialogTitleTypographyVariant } from './utils';\n\ntype RcDialogTitleProps = {\n  display?: 'block' | 'flex';\n  /** Define the padding size of that group wrapper. */\n  space?: number | number[];\n} & RcDialogChildrenProps &\n  RcBaseProps<ComponentProps<typeof MuiDialogTitle>>;\n\nconst _RcDialogTitle = forwardRef<any, RcDialogTitleProps>(\n  (inProps: RcDialogTitleProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDialogTitle' });\n\n    const {\n      classes: classesProp,\n      display,\n      space,\n      children,\n      disableTypography,\n      size,\n      ...rest\n    } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcDialogTitleClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiDialogTitle {...rest} disableTypography ref={ref} classes={classes}>\n        {disableTypography ? (\n          children\n        ) : (\n          <RcTypography\n            variant={RcDialogTitleTypographyVariant[size!]}\n            component=\"h2\"\n          >\n            {children}\n          </RcTypography>\n        )}\n      </MuiDialogTitle>\n    );\n  },\n);\n\nconst RcDialogTitle = styled(_RcDialogTitle).attrs(useDialogDefaultProps)`\n  ${DialogTitleStyle}\n`;\n\nRcDialogTitle.defaultProps = {};\n\nRcDialogTitle.displayName = 'RcDialogTitle';\n\nexport { RcDialogTitle };\nexport type { RcDialogTitleProps };\n","import {\n  css,\n  getParsePaletteColor,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../foundation';\nimport { RcDividerProps } from '../Divider';\n\nconst full = '100%';\n\nexport const DividerStyle: RcThemedStyled<RcDividerProps, any> = ({\n  vertical,\n  size,\n  color,\n  title,\n  titleBgColor,\n}) => {\n  const volume = `${size === 'bold' ? 2 : 1}px`;\n\n  return css`\n    position: relative;\n    margin: 0;\n    border: 0;\n    flex-shrink: 0;\n    overflow: initial;\n\n    width: ${vertical ? volume : full};\n    height: ${vertical ? full : volume};\n    background-color: ${getParsePaletteColor(color, null, false)};\n\n    ${!(vertical || !title) &&\n    css`\n      &::after {\n        content: '${title}';\n        ${typography('caption1')};\n        color: ${palette2('neutral', 'f06')};\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        padding: ${spacing(0, 4)};\n        transform: translate(-50%, -50%);\n        background-color: ${getParsePaletteColor(titleBgColor)};\n      }\n    `};\n  `;\n};\n","import React, { forwardRef } from 'react';\n\nimport { RcPaletteProp, styled, useThemeProps } from '../../foundation';\nimport { DividerStyle } from './styles';\n\ntype RcDividerProps = {\n  /** is that vertical */\n  vertical?: boolean;\n  /** size of divider */\n  size?: 'default' | 'bold';\n  /** divider color */\n  color?: RcPaletteProp;\n  /** title on divider center, only work on horizontal */\n  title?: string;\n  /** title background color */\n  titleBgColor?: RcPaletteProp;\n  /** component for render root */\n  component?: React.ElementType;\n} & React.HTMLAttributes<HTMLHRElement>;\n\nconst _RcDivider = forwardRef<any, RcDividerProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcDivider' });\n  const {\n    vertical,\n    size,\n    color,\n    title,\n    titleBgColor,\n    component: ComponentProp = 'hr',\n    ...rest\n  } = props;\n  return <ComponentProp ref={ref} role=\"separator\" {...rest} />;\n});\n\nconst RcDivider = styled(_RcDivider)`\n  ${DividerStyle}\n`;\n\nRcDivider.displayName = 'RcDivider';\n\nRcDivider.defaultProps = {\n  color: 'neutral.l02',\n  titleBgColor: 'neutral.b01',\n  size: 'default',\n};\n\nexport { RcDivider };\nexport type { RcDividerProps };\n","import {\n  css,\n  flexCenterStyle,\n  focusVisible,\n  focusVisibleColor,\n  radius,\n  RcThemedStyled,\n} from '../../../../foundation';\nimport { RcDragHandleProps } from '../DragHandle';\n\nexport const dragHandleStyle: RcThemedStyled<RcDragHandleProps, any> = () => {\n  return css`\n    outline: none;\n    margin-right: 4px;\n    padding: 2px 0;\n\n    ${flexCenterStyle};\n\n    ${focusVisible} {\n      box-shadow: 0 0 0 1px ${focusVisibleColor};\n      border-radius: ${radius('sm')};\n    }\n  `;\n};\n","import React, { forwardRef } from 'react';\n\nimport clsx from 'clsx';\n\nimport { RcClassesProps, styled, useThemeProps } from '../../../foundation';\nimport DraggableHandle from '../../../icon/DragableArea';\nimport { RcIcon } from '../../Icon';\nimport { dragHandleStyle } from './styles';\nimport { RcDragHandleClasses } from './utils';\n\ntype RcDragHandleClassesType = RcClassesProps<'root'>;\n\ntype RcDragHandleProps = {\n  className?: string;\n} & RcDragHandleClassesType;\n\nconst defaultChildren = <RcIcon size=\"xsmall\" symbol={DraggableHandle} />;\n\nconst _DragHandle = forwardRef<any, RcDragHandleProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcDragHandle' });\n  const { children = defaultChildren, className, ...rest } = props;\n  const ClassName = clsx(RcDragHandleClasses.root, className);\n\n  return (\n    <div {...rest} className={ClassName} ref={ref}>\n      {children}\n    </div>\n  );\n});\n\nconst RcDragHandle = styled(_DragHandle)`\n  ${dragHandleStyle}\n`;\n\nRcDragHandle.defaultProps = {};\n\nRcDragHandle.displayName = 'RcDragHandle';\n\nexport { RcDragHandle };\nexport type { RcDragHandleProps };\n","import {\n  createGlobalStyle,\n  fakeBorder,\n  opacity,\n  palette2,\n  shadows,\n} from '../../../../foundation';\nimport { RcDraggableClasses } from '../../Draggable/utils';\n\nexport const GlobalDraggableStyle = createGlobalStyle`\n  .${RcDraggableClasses.root} {\n    &::before, &::after {\n      content: '';\n      opacity: 0;\n      transition: opacity .2s;\n    }\n  }\n\n  .${RcDraggableClasses.isDragging} {\n    &::before, &::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 1;\n    }\n\n    &::before {\n      background-color: ${palette2('action', 'grayLight')};\n      opacity: ${opacity('16')};\n    }\n\n    &::after {\n      box-shadow: ${shadows('8')};\n    }\n\n    background-color: ${palette2('neutral', 'elevation')} !important;\n    ${fakeBorder()};\n    opacity: ${opacity('88')} !important;\n    position: relative;\n  }\n`;\n","import React, {\n  ComponentProps,\n  forwardRef,\n  HTMLAttributes,\n  memo,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  combineClasses,\n  combineProps,\n  CustomStyledComponentResult,\n  omit,\n  RcBaseProps,\n  RcClassesProps,\n  styled,\n  useEventCallback,\n  useForkRef,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../foundation';\nimport ArrowDown from '../../icon/ArrowDown';\nimport ArrowUp from '../../icon/ArrowUp';\nimport { RcIconButtonProps } from '../Buttons/IconButton';\nimport { RcChip } from '../Chip';\nimport { RcTextFieldProps } from '../Forms/TextField';\nimport { ClearIconButton } from '../Forms/TextField/styles/ClearIconButton';\nimport { RcPopperProps } from '../Popper';\nimport { WithTooltipProps } from '../Tooltip';\nimport { RcVisuallyHidden } from '../VisuallyHidden';\nimport {\n  ArrowDownButton,\n  DownshiftStyle,\n  EndAdornment,\n  PopperPosition,\n  RcDownshiftInput,\n  StyledPopper,\n  StyledTextField,\n} from './styles';\nimport { RcSuggestionList, RcSuggestionListProps } from './SuggestionList';\nimport {\n  DEFAULT_GET_OPTION_LABEL,\n  DEFAULT_KEY_TO_CHIPS,\n  DEFAULT_LIMIT_CHIPS,\n  RcDownshiftDefaultFilterOptions,\n  RcDownshiftFilterOptions,\n  RcDownshiftGroupedOption,\n  RcDownshiftInputClasses,\n  RcDownshiftSelectedItem,\n  useDownshift,\n  useDownshiftError,\n} from './utils';\n\nexport interface RcDownshiftRenderOptionState {\n  /** current input value */\n  inputValue?: string;\n  /** is that item selected */\n  selected: boolean;\n  /** that item index */\n  index: number;\n  /** if that item is group title, that have that `expanded` state */\n  expanded?: boolean;\n  /** if that item is group title, that will have that `expandIconProps` */\n  expandIconProps?: Partial<RcIconButtonProps>;\n}\n\nexport type RcDownshiftCloseReason =\n  | 'toggleInput'\n  | 'escape'\n  | 'select-option'\n  | 'blur';\n\ntype RcDownshiftProps<\n  T = RcDownshiftSelectedItem,\n  K = T & RcDownshiftSelectedItem,\n> = {\n  /**\n   * display mode,\n   * when be `autocomplete`, that `multiple` will be `false`\n   *\n   * @default tags\n   */\n  variant?: 'tags' | 'autocomplete';\n  /**\n   * @requires\n   * this is required, must have options, but because need with old code suggestionItems, so make that to be optional\n   */\n  options?: T[];\n  /** selectedItems array list */\n  value?: T[];\n  /**\n   * If `true`, will allow disabled items highlightable.\n   */\n  disabledItemsHighlightable?: boolean;\n  /** emit tags change event */\n  onChange?: (selectedItems: T[]) => void;\n  /** is that can select multiple, default is `false` */\n  multiple?: boolean;\n  /** If `true`, the popup will ignore the blur event. You can inspect the popup markup with your browser tools. Consider this option when you need to customize the component. */\n  debug?: boolean;\n  /** This is the initial isOpen value when downshift is initialized. */\n  initialIsOpen?: boolean;\n  /**\n   * If `true`, the popup won't close when a value is selected.\n   */\n  disableCloseOnSelect?: boolean;\n  /**\n   * Used to determine the string value for a given option.\n   * It's used to fill the input (and the list box options if `renderOption` is not provided).\n   *\n   * @param {T} option\n   * @returns {string}\n   */\n  getOptionLabel?: (option: T) => string;\n  /**\n   * A filter function that determines the options that are eligible.\n   *\n   * @param {T[]} options The options to render.\n   * @param {object} state The state of the component.\n   * @returns {T[]}\n   */\n  filterOptions?: RcDownshiftFilterOptions<T>;\n  /** emit current input value */\n  onInputChange?: (value: string) => any;\n  /**\n   * Render the option, use `getOptionLabel` by default.\n   *\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderOption?: (\n    option: T & RcDownshiftSelectedItem,\n    state: RcDownshiftRenderOptionState,\n  ) => React.ReactNode;\n  /**\n   * group layout mode\n   *\n   * - `normal`: use group name as group title\n   * - `expanded`: use first-item as group title, and that is `clickable`\n   *\n   * @default 'normal'\n   */\n  groupVariant?: 'normal' | 'expanded';\n  /**\n   * group expanded state, you can control expanded state by that,\n   * use when `groupVariant` is `expanded`\n   *\n   * - `true`: expand all\n   * - `false`: collapse all\n   * - `{key: boolean}`: control group state\n   */\n  groupExpanded?: Record<string, boolean> | boolean;\n  /**\n   * If provided, the options will be grouped under the returned string.\n   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.\n   *\n   * @param {T} option The options to group.\n   * @returns {string} The group key\n   */\n  groupBy?: (option: T) => string;\n  /**\n   * Render the group title item, also with for toggle button props.\n   *\n   * > when you have set custom `renderOption`, the `renderGroup` must be set.\n   *\n   * @param {T} option The option to render.\n   * @param {object} state The state of the component.\n   * @returns {ReactNode}\n   */\n  renderGroup?: (\n    option: T & RcDownshiftSelectedItem,\n    state: RcDownshiftRenderOptionState,\n  ) => React.ReactNode;\n  /**\n   * Trigger when group item expanded state change.\n   *\n   * @param {object} group The state of the group.\n   * @param {object} groupStateMap The whole group state\n   */\n  onGroupExpanded?: (\n    group: RcDownshiftGroupedOption<T>,\n    groupStateMap: Record<string, boolean>,\n  ) => any;\n  /** SuggestionList VirtualizedList Props */\n  SuggestionListProps?: RcSuggestionListProps<T>;\n  /**\n   * @param event keydown event\n   * @param highlightedIndex current menu highlightedIndex\n   */\n  onKeyDown?: (\n    event: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement>,\n    highlightedIndex?: number | null,\n  ) => void;\n  /**\n   * If `true`, the RcDownshift is free solo, meaning that the user input is not bound to provided options.\n   */\n  freeSolo?: boolean;\n  /**\n   * Render the selected value.\n   *\n   * @param {T[]} value The `value` provided to the component.\n   * @param {function} getTagProps A tag props getter.\n   * @returns {ReactNode}\n   */\n  renderTags?: (\n    selectedItems: K[],\n    getTagProps: (\n      selectedItem: K,\n      index: number,\n    ) => Omit<React.HTMLAttributes<HTMLElement>, 'children'> & {\n      onDelete?: React.EventHandler<any>;\n    },\n  ) => React.ReactNode;\n  /**\n   * Render when search no have any options.\n   *\n   * @param {object} additionItems\n   * render when not have any options,\n   * if set that the freeSolo auto add items will not be cover\n   */\n  renderNoOptions?: (\n    getNoOptionsProps: (\n      additionProps?: HTMLAttributes<HTMLElement>,\n    ) => HTMLAttributes<HTMLElement>,\n    additionItem?: RcDownshiftSelectedItem,\n  ) => React.ReactNode;\n  /**\n   * one of that character, also can be confirm a tag\n   * @default\n   * [',', ';', '↵']\n   */\n  keyToTags?: string[];\n  /**\n   * max number of tags,\n   * @default 20\n   */\n  maxFreeSolo?: number;\n  /** emit when bigger than maxFreeSolo number */\n  onMaxFreeSolo?: (max?: number) => any;\n  /**\n   * If `true`, the selected option becomes the value of the input\n   * when the input loses focus unless the user chooses\n   * a different option or changes the character string in the input.\n   */\n  autoSelect?: boolean;\n  /** props for apply on `RcPopper` */\n  PopperProps?: RcBaseProps<\n    RcPopperProps,\n    'open' | 'keepMounted' | 'anchorEl' | 'style'\n  >;\n  /** is have ToggleButton */\n  toggleButton?: boolean;\n  /** Props for apply on ToggleButton */\n  ToggleButtonProps?: RcBaseProps<\n    RcIconButtonProps & WithTooltipProps,\n    'symbol'\n  >;\n  /**\n   * A ref for imperative actions.\n   *\n   * - `getActiveIndex`: get current active index\n   * - `setActiveIndex`: set current active index;\n   * - `getFilterResultItems`: get current filter result option items;\n   * - `getHighlightedIndex`: get current highlight index;\n   * - `setHighlightedIndex`: set current highlight index;\n   * - `openMenu`: open the listbox menu\n   * - `closeMenu`: close the listbox menu\n   * - `focus`: focus on text field input\n   * - `reset(isFocus)`: reset whole downshift, `isFocus` default is `false`\n   */\n  action?: React.Ref<RcDownshiftRef<T>>;\n  /** auto close menu when options filter result is zero */\n  autoClose?: boolean;\n  /**\n   * If `true`, the popup will open on input focus.\n   * and that also set `disableCloseOnSelect` to `true`\n   */\n  openOnFocus?: boolean;\n  /** get expand addition props  */\n  getExpandIconProps?: (\n    group: RcDownshiftGroupedOption,\n  ) => Partial<RcIconButtonProps>;\n  /**\n   * If `true`, the first option is automatically highlighted.\n   * @default true\n   */\n  autoHighlight?: boolean;\n  /**\n   * Used to determine the disabled state for a given option.\n   *\n   * @param {T} option The option to test.\n   * @returns {boolean}\n   */\n  getOptionDisabled?: (option: T) => boolean;\n  /**\n   * Props applied to the Input element\n   */\n  InputProps?: RcClassesProps<'container'>;\n  /**\n   * Render the input, default is `RcTextField`\n   */\n  renderInput?: (params: Partial<RcTextFieldProps>) => React.ReactNode;\n  /**\n   * Control the popup` open state.\n   */\n  open?: boolean;\n  /**\n   * Callback fired when the popup requests to be opened.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen?: (event: React.ChangeEvent<{}>) => void;\n  /**\n   * Callback fired when the popup requests to be closed.\n   * Use in controlled mode (see open).\n   *\n   * @param {object} event The event source of the callback.\n   * @param {string} reason Can be: `\"toggleInput\"`, `\"escape\"`, `\"select-option\"`, `\"blur\"`.\n   */\n  onClose?: (\n    event: React.ChangeEvent<{}>,\n    reason: RcDownshiftCloseReason,\n  ) => void;\n} & RcBaseProps<\n  Partial<RcTextFieldProps>,\n  | 'children'\n  | 'value'\n  | 'onChange'\n  | 'onKeyDown'\n  | 'variant'\n  | 'radius'\n  | 'size'\n  | 'defaultValue'\n  | 'multiline'\n  | 'rows'\n  | 'minRows'\n  | 'maxRows'\n  | 'align'\n  | 'textVariant'\n  | 'autoSelect'\n  | 'focusOnMount'\n  | 'selectOnMount'\n  | 'autoFocusDelay'\n  | 'clearLabel'\n  | 'clearAriaLabel'\n> & {\n    /**\n     * @deprecated\n     * if you don't want close popup when select, use `disableCloseOnSelect` with `true` to replace that\n     */\n    defaultIsOpen?: boolean;\n    /** @deprecated should use `onChange` */\n    onSelectChange?: (selectedItems: T[]) => void;\n    /** @deprecated  should use `options` to replace */\n    suggestionItems?: T[];\n    /** @deprecated  not need any more */\n    selectedItems?: T[];\n    /** @deprecated use `getOptionLabel` to replace that */\n    itemToString?: (item: T) => string;\n    /** @deprecated should use `renderOption` to replace that */\n    MenuItem?: React.ComponentType<any>;\n    /** @deprecated suggestion list row min height for virtual list, please replace with `estimatedItemSize` */\n    minRowHeight?: number;\n    /** @deprecated enable free chip mode, should use `freeSolo` to replace that */\n    enableFreeChips?: boolean;\n    /** @deprecated please use `label` to replace that */\n    inputLabel?: RcTextFieldProps['label'];\n    /** current text field input value */\n    inputValue?: string;\n    /** @deprecated input element placeholder attribute */\n    inputPlaceholder?: RcTextFieldProps['placeholder'];\n    /** @deprecated input element maxlength, please use `TextFieldProps.inputProps.maxLength` */\n    maxLength?: number;\n    /** @deprecated should use `screenReaderProps` */\n    screenReader?: {\n      entry: string;\n      entries: string;\n    };\n    /** @deprecated wrapper automationId, should use `data-test-automation-id` directly */\n    automationId?: string;\n    /** @deprecated just use the `renderTags` to render whole tags  */\n    InputItem?: React.ComponentType<any>;\n    /**\n     * @deprecated\n     * just use the `helperText` to control helper text\n     */\n    allowPlainHelperText?: boolean;\n    /** @deprecated please calculate error outside by your self with `renderTags`, or prepare ready items with error field */\n    emailError?: string;\n    /** @deprecated please calculate error outside by your self with `renderTags`, or prepare ready items with error field */\n    errorSelectedItems?: (string | number | undefined)[];\n    /** @deprecated replace to `error` */\n    nameError?: boolean;\n    /**\n     * @deprecated\n     * ! no have any function\n     */\n    autoSwitchEmail?: boolean;\n    /** @deprecated rename to `keyToTags` */\n    keyToChips?: string[];\n    /** @deprecated should use `max` */\n    limitOfFreeChips?: number;\n    /** @deprecated should use `autoSelect` */\n    enableAutoTransform?: boolean;\n    /** @deprecated should use `inputRef` */\n    messageRef?: RcTextFieldProps['inputRef'];\n    /** @deprecated TextField props */\n    TextFieldProps?: Pick<RcTextFieldProps, 'required' | 'inputProps'>;\n  };\n\ntype RcDownshiftRef<T = RcDownshiftSelectedItem> = {\n  /** get current active index */\n  getActiveIndex: () => number;\n  /** set current active index */\n  setActiveIndex: (index: number) => void;\n  /** get current filter result option items; */\n  getFilterResultItems: () => T[];\n  /** get current highlight index */\n  getHighlightedIndex: () => number;\n  /** set current highlight index */\n  setHighlightedIndex: (index: number) => void;\n  /**\n   * keep highlightedIndex for next render when options change,\n   * can use when lazy load more options\n   */\n  keepHighlightedIndex: () => void;\n  /** open the listbox menu */\n  openMenu: () => void;\n  /** close the listbox menu */\n  closeMenu: () => void;\n  /** focus on text field input */\n  focus: () => void;\n  /** reset whole downshift, isFocus default is `false` */\n  reset: (isFocus?: boolean) => void;\n  /** method to clean input value */\n  clearInput: () => void;\n};\n\nconst _RcDownshift = memo(\n  forwardRef<any, RcDownshiftProps<RcDownshiftSelectedItem>>((inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDownshift' });\n\n    const {\n      itemToString = DEFAULT_GET_OPTION_LABEL,\n      keyToChips = DEFAULT_KEY_TO_CHIPS,\n      limitOfFreeChips = DEFAULT_LIMIT_CHIPS,\n      minRowHeight,\n      suggestionItems,\n      messageRef,\n      MenuItem,\n      inputLabel,\n      nameError,\n      maxLength,\n      InputItem,\n      emailError,\n      autoSwitchEmail,\n      enableFreeChips,\n      inputPlaceholder,\n      errorSelectedItems,\n      enableAutoTransform,\n      allowPlainHelperText,\n      TextFieldProps,\n      selectedItems: selectedItemsProp,\n      automationId,\n      screenReader,\n      onSelectChange,\n      variant,\n      groupExpanded,\n      groupVariant = 'normal',\n      getExpandIconProps,\n      groupBy,\n      value: valueProp = selectedItemsProp,\n      autoHighlight = true,\n      fullWidth = true,\n      clearBtn = false,\n      toggleButton = false,\n      multiple = false,\n      clearButtonProps,\n      onClear,\n      ToggleButtonProps,\n      inputValue: inputValueProp,\n      onKeyDown: onKeyDownProp,\n      helperText: helperTextProp,\n      options,\n      openOnFocus,\n      getOptionLabel = itemToString,\n      renderInput,\n      label = inputLabel,\n      inputRef: inputRefProp = messageRef,\n      error = nameError,\n      placeholder = inputPlaceholder,\n      freeSolo = enableFreeChips,\n      keyToTags = keyToChips,\n      maxFreeSolo = limitOfFreeChips,\n      SuggestionListProps,\n      autoSelect = enableAutoTransform,\n      PopperProps,\n      initialIsOpen,\n      disabled,\n      required: requiredProp,\n      defaultIsOpen = openOnFocus,\n      disableCloseOnSelect = defaultIsOpen,\n      onChange: onChangeProp = onSelectChange,\n      onInputChange: onInputChangeProp,\n      onMaxFreeSolo,\n      FormHelperTextProps: FormHelperTextPropsProp,\n      action,\n      filterOptions,\n      renderOption,\n      renderTags,\n      getOptionDisabled,\n      renderGroup,\n      onGroupExpanded,\n      renderNoOptions,\n      InputProps: InputPropsProp,\n      debug,\n      disabledItemsHighlightable,\n      open: openProp,\n      onOpen,\n      onClose,\n      ...rest\n    } = props;\n\n    const [position, setPosition] = useState<PopperPosition>('bottom');\n\n    const innerInputRef = useRef<HTMLInputElement>(null);\n    const textFieldRef = useRef<HTMLDivElement>(null);\n    const inputRef = useForkRef(inputRefProp!, innerInputRef);\n    const inputContainerRef = useRef<HTMLDivElement>(null);\n\n    // * if that have pass old suggestionItems mean that use old logic\n    const isNew = !suggestionItems;\n\n    let oneOfTagError = false;\n\n    useDownshiftError({ isNew, MenuItem, InputItem });\n\n    const required = requiredProp || TextFieldProps?.required;\n\n    const {\n      focusInput,\n      optionItems,\n      optionsGroupList,\n      selectedItems,\n      highlightedIndex,\n      getToggleButtonProps,\n      getTagProps,\n      getTagListBoxProps,\n      getMenuProps,\n      getPopperProps,\n      getInputProps,\n      getInputAriaProps,\n      getLabelProps,\n      getItemProps,\n      isOpen,\n      inputValue,\n      isTagsFocus,\n      activeIndex,\n      setActiveIndex,\n      setHighlightedIndex,\n      onInputChange,\n      keepHighlightedIndex,\n      changeHighlightedIndexReason,\n      closeMenu,\n      openMenu,\n      reset,\n      getClearButtonProps,\n      noOptionItem,\n      getNoOptionsProps,\n      isKeepHighlightedIndex,\n    } = useDownshift({\n      open: openProp,\n      variant,\n      onOpen,\n      onClose,\n      wrapperRef: textFieldRef,\n      inputContainerRef,\n      inputRef: innerInputRef,\n      value: valueProp,\n      inputValue: inputValueProp,\n      getOptionDisabled,\n      groupExpanded: groupVariant === 'normal' ? true : groupExpanded,\n      getExpandIconProps,\n      options: suggestionItems || options,\n      freeSolo,\n      label,\n      multiple,\n      keyToTags,\n      maxFreeSolo,\n      autoSelect,\n      disableCloseOnSelect,\n      initialIsOpen,\n      disabled,\n      required,\n      openOnFocus,\n      autoHighlight,\n      groupBy,\n      groupVariant,\n      onChange: onChangeProp,\n      onInputChange: onInputChangeProp,\n      getOptionLabel,\n      filterOptions,\n      onMaxFreeSolo,\n      renderNoOptions,\n      onKeyDown: onKeyDownProp,\n      disabledItemsHighlightable,\n      onGroupExpanded,\n    });\n\n    const open = Boolean((isOpen || noOptionItem) && textFieldRef.current);\n\n    const { onBlur, ...InputProps } = getInputProps();\n\n    const helperText = isNew\n      ? helperTextProp\n      : nameError || allowPlainHelperText\n      ? helperTextProp\n      : undefined;\n\n    const describedbyId = `${InputProps.id}-helper-text`;\n    const FormHelperTextProps = FormHelperTextPropsProp || {};\n\n    const screenReaderText = useMemo(() => {\n      if (!screenReader || !selectedItems.length) return;\n      const { entry, entries } = screenReader;\n      return `${selectedItems.length === 1 ? entry : entries}`.trim();\n    }, [screenReader, selectedItems.length]);\n\n    if (screenReaderText) {\n      if (!helperText) {\n        InputProps['aria-describedby'] = describedbyId;\n      } else if (helperText) {\n        FormHelperTextProps['aria-label'] =\n          `${screenReaderText} ${helperText}`.trim();\n      }\n    }\n\n    const toTextFieldRef = useForkRef(textFieldRef, ref);\n\n    const startAdornment = (() => {\n      if (variant === 'autocomplete') {\n        return undefined;\n      }\n      const getCustomizedTagProps = (\n        selectedItem: RcDownshiftSelectedItem,\n        index: number,\n      ) => {\n        const tagProps = getTagProps({\n          selectedItem,\n          index,\n          label: getOptionLabel(selectedItem),\n          disabled,\n        });\n\n        if (selectedItem.error) {\n          oneOfTagError = true;\n        }\n\n        return tagProps;\n      };\n\n      return renderTags\n        ? renderTags(selectedItems, getCustomizedTagProps)\n        : selectedItems.map((selectedItem, index) => {\n            const itemChipProps = getCustomizedTagProps(selectedItem, index);\n            // TODO: here should be remove\n            if (InputItem) {\n              // TODO: should remove when all migrate\n              const isError =\n                (emailError && emailError === selectedItem.label?.trim()) ||\n                (selectedItem.id &&\n                  errorSelectedItems?.includes(selectedItem.id)) ||\n                selectedItem.isError ||\n                selectedItem.error;\n\n              return (\n                <InputItem\n                  {...selectedItem}\n                  {...itemChipProps}\n                  isError={isError}\n                />\n              );\n            }\n            return (\n              <RcChip\n                {...itemChipProps}\n                deleteIconProps={{\n                  'aria-label': 'remove',\n                }}\n              />\n            );\n          });\n    })();\n\n    const endAdornment = (toggleButton || clearBtn) && (\n      <EndAdornment>\n        {clearBtn && (\n          <ClearIconButton {...getClearButtonProps(clearButtonProps as any)} />\n        )}\n        {toggleButton && (\n          <ArrowDownButton\n            variant=\"plain\"\n            aria-hidden\n            color={error ? 'danger.f02' : 'neutral.f04'}\n            size=\"large\"\n            symbol={isOpen ? ArrowUp : ArrowDown}\n            {...getToggleButtonProps(ToggleButtonProps)}\n          />\n        )}\n      </EndAdornment>\n    );\n\n    const { containerClassName, TextFieldInputProps } = (() => {\n      const { classes, ...restInputPropsProp } = InputPropsProp || {};\n\n      const toClasses = combineClasses(classes, RcDownshiftInputClasses);\n\n      return {\n        containerClassName: toClasses.container,\n        TextFieldInputProps: combineProps(\n          {\n            classes: omit(toClasses, ['container']),\n            endAdornment,\n            inputComponent: RcDownshiftInput,\n            ...(getTagListBoxProps() as any),\n            ...InputProps,\n            onBlur: debug ? undefined : onBlur,\n          },\n          restInputPropsProp,\n        ),\n      };\n    })();\n\n    useImperativeHandle(action, () => ({\n      getActiveIndex: () => activeIndex,\n      setActiveIndex,\n      getFilterResultItems: () => optionItems,\n      getHighlightedIndex: () => highlightedIndex,\n      setHighlightedIndex: (index) =>\n        setHighlightedIndex(index, { reason: 'auto', reRender: true }),\n      closeMenu,\n      openMenu,\n      reset,\n      clearInput: () => onInputChange('', false),\n      keepHighlightedIndex: () => keepHighlightedIndex(),\n      focus: focusInput,\n    }));\n\n    const hasTags = selectedItems.length > 0;\n    const isRenderNoOptions = !!noOptionItem;\n\n    const popperRef: ComponentProps<typeof StyledPopper>['popperRef'] =\n      useRef(null);\n\n    const handleUpdatePopper = useEventCallback(() => {\n      popperRef.current?.update();\n    });\n\n    return (\n      <>\n        <StyledTextField\n          renderInput={renderInput}\n          hasTags={hasTags}\n          ref={toTextFieldRef}\n          inputRef={inputRef}\n          data-test-automation-id={automationId}\n          fullWidth={fullWidth}\n          placeholder={!hasTags ? placeholder : undefined}\n          label={label}\n          focused={isTagsFocus ? true : undefined}\n          disabled={disabled}\n          required={required}\n          // * if below one of tag is error, that main downshift default will be error\n          error={error ?? oneOfTagError}\n          FormHelperTextProps={FormHelperTextProps}\n          InputProps={TextFieldInputProps}\n          helperText={helperText}\n          {...combineProps(\n            {\n              InputLabelProps: getLabelProps(),\n              inputProps: {\n                startAdornment,\n                containerClassName,\n                maxLength,\n                containerRef: inputContainerRef,\n                ...getInputAriaProps(TextFieldProps?.inputProps),\n              },\n            },\n            rest,\n          )}\n          value={inputValue}\n          clearBtn={false}\n        />\n        {!helperText && screenReaderText && (\n          <RcVisuallyHidden id={describedbyId}>\n            {screenReaderText}\n          </RcVisuallyHidden>\n        )}\n        <StyledPopper\n          open={open}\n          position={position}\n          anchorEl={textFieldRef.current}\n          data-test-automation-id=\"suggestions-list\"\n          popperRef={popperRef}\n          // * view type in popper.js\n          popperOptions={{\n            onUpdate: (e: any) => {\n              const currPosition = e.placement;\n              if (position !== currPosition) {\n                setPosition(currPosition);\n              }\n            },\n          }}\n          {...getPopperProps(PopperProps)}\n        >\n          {isOpen && (\n            <RcSuggestionList\n              highlightedIndex={highlightedIndex}\n              optionsGroupList={optionsGroupList}\n              options={optionItems}\n              groupVariant={groupVariant}\n              groupExpanded={groupExpanded}\n              renderGroup={renderGroup}\n              MenuItem={MenuItem}\n              renderOption={renderOption}\n              inputValue={inputValue}\n              getItemProps={getItemProps}\n              getMenuProps={getMenuProps}\n              changeHighlightedIndexReason={changeHighlightedIndexReason}\n              getOptionDisabled={getOptionDisabled}\n              isKeepHighlightedIndex={isKeepHighlightedIndex}\n              onUpdatePopper={handleUpdatePopper}\n              maxContainerHeight={180}\n              getOptionLabel={getOptionLabel}\n              {...(SuggestionListProps as any)}\n            />\n          )}\n          {isRenderNoOptions &&\n            renderNoOptions?.(getNoOptionsProps, noOptionItem)}\n        </StyledPopper>\n      </>\n    );\n  }),\n);\n\nconst RcDownshift = styled(\n  withDeprecatedCheck(\n    _RcDownshift,\n    [\n      {\n        prop: 'onSelectChange',\n        time: '2021-10',\n        comment: `@deprecated should use \\`onChange\\` */`,\n      },\n      {\n        prop: 'suggestionItems',\n        time: '2021-10',\n        comment: `@deprecated  should use \\`options\\` to replace */`,\n      },\n      {\n        prop: 'selectedItems',\n        time: '2021-10',\n        comment: `@deprecated  not need any more */`,\n      },\n      {\n        prop: 'itemToString',\n        time: '2021-10',\n        comment: `@deprecated use \\`getOptionLabel\\` to replace that */`,\n      },\n      {\n        prop: 'MenuItem',\n        time: '2021-10',\n        comment: `@deprecated should use \\`renderOption\\` to replace that */`,\n      },\n      {\n        prop: 'minRowHeight',\n        time: '2021-10',\n        comment: `@deprecated suggestion list row min height for virtual list */`,\n      },\n      {\n        prop: 'enableFreeChips',\n        time: '2021-10',\n        comment: `@deprecated enable free chip mode, should use \\`freeSolo\\` to replace that */`,\n      },\n      {\n        prop: 'inputLabel',\n        time: '2021-10',\n        comment: `@deprecated please use \\`label\\` to replace that */`,\n      },\n      {\n        prop: 'inputPlaceholder',\n        time: '2021-10',\n        comment: `@deprecated input element placeholder attribute */`,\n      },\n      {\n        prop: 'maxLength',\n        time: '2021-10',\n        comment: `@deprecated input element maxlength, please use \\`TextFieldProps.inputProps.maxLength\\` */`,\n      },\n      {\n        prop: 'screenReader',\n        time: '2021-10',\n        comment: `@deprecated should use \\`screenReaderProps\\` */`,\n      },\n      {\n        prop: 'automationId',\n        time: '2021-10',\n        comment: `@deprecated wrapper automationId, should use \\`data-test-automation-id\\` directly */`,\n      },\n      {\n        prop: 'InputItem',\n        time: '2021-10',\n        comment: `@deprecated just use the \\`renderTags\\` to render whole tags  */`,\n      },\n      {\n        prop: 'emailError',\n        time: '2021-10',\n        comment: `@deprecated please calculate error outside by your self with \\`renderTags\\`, or prepare ready items with error field */`,\n      },\n      {\n        prop: 'errorSelectedItems',\n        time: '2021-10',\n        comment: `@deprecated please calculate error outside by your self with \\`renderTags\\`, or prepare ready items with error field */`,\n      },\n      {\n        prop: 'nameError',\n        time: '2021-10',\n        comment: `@deprecated replace to \\`error\\` */`,\n      },\n      {\n        prop: 'keyToChips',\n        time: '2021-10',\n        comment: `@deprecated rename to \\`keyToTags\\` */`,\n      },\n      {\n        prop: 'limitOfFreeChips',\n        time: '2021-10',\n        comment: `@deprecated should use \\`max\\` */`,\n      },\n      {\n        prop: 'enableAutoTransform',\n        time: '2021-10',\n        comment: `@deprecated should use \\`autoSelect\\` */`,\n      },\n      {\n        prop: 'messageRef',\n        time: '2021-10',\n        comment: `@deprecated should use \\`inputRef\\` */`,\n      },\n      {\n        prop: 'TextFieldProps',\n        time: '2021-10',\n        comment: `@deprecated TextField props */`,\n      },\n    ],\n    'RcDownshift',\n  ),\n)`\n  ${DownshiftStyle}\n`;\n\nRcDownshift.defaultProps = {};\n\nRcDownshift.displayName = 'RcDownshift';\n\nconst ExportType: <T extends RcDownshiftSelectedItem>(\n  props: RcDownshiftProps<T>,\n) => JSX.Element & CustomStyledComponentResult<RcDownshiftProps<T>> =\n  RcDownshift as any;\n\nexport { ExportType as RcDownshift, RcDownshiftDefaultFilterOptions };\nexport type { RcDownshiftProps, RcDownshiftRef };\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { InnerSuggestionListProps } from '../SuggestionList';\nimport { RcSuggestionListClasses } from '../utils';\n\nexport const SuggestionListStyle: RcThemedStyled<\n  InnerSuggestionListProps,\n  any\n> = () => {\n  return css`\n    .${RcSuggestionListClasses.toggle} {\n      margin-right: -${spacing(3)};\n\n      transform: rotate(0deg);\n      transition: transform 150ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n\n      &.${RcSuggestionListClasses.expanded} {\n        transform: rotate(180deg);\n      }\n    }\n  `;\n};\n","import React, {\n  createContext,\n  forwardRef,\n  HTMLAttributes,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from 'react';\n\nimport clsx from 'clsx';\n\nimport {\n  combineClasses,\n  combineProps,\n  omit,\n  RcBaseProps,\n  RcClassesProps,\n  styled,\n  useForkRef,\n  usePrevious,\n  useRetry,\n  useSleep,\n  useThemeProps,\n} from '../../../foundation';\nimport ArrowDown2 from '../../../icon/ArrowDown2';\nimport { RcBox } from '../../Box';\nimport { RcIconButton } from '../../Buttons/IconButton';\nimport { RcMenuItem } from '../../Menu/MenuItem';\nimport { StyledMenuListPadding } from '../../VirtualizedMenu/styles';\nimport {\n  Components,\n  IndexLocationWithAlign,\n  useDynamicHeight,\n  useHighlightScroll,\n  Virtuoso,\n  VirtuosoHandle,\n  VirtuosoProps,\n} from '../../Virtuoso';\nimport { RcDownshiftProps } from '../Downshift';\nimport {\n  RcDownshiftGetItemPropsOptions,\n  RcDownshiftGroupedOption,\n  RcDownshiftHighlightChangeReason,\n  RcDownshiftSelectedItem,\n} from '../utils';\nimport { SuggestionListStyle } from './styles';\nimport { RcSuggestionListClasses } from './utils';\n\nexport type RcSuggestionListProps<T> = RcBaseProps<\n  Partial<VirtuosoProps<T>>,\n  'totalCount' | 'itemContent' | 'data'\n> & {\n  /**\n   * that virtual list container height,\n   *\n   * @default 100%\n   */\n  maxContainerHeight?: number | '100%';\n  /**\n   * vertical padding from the list\n   *\n   * @default false\n   */\n  padding?: boolean | number;\n} & RcClassesProps<'root' | 'toggle' | 'expanded' | 'groupTitle'>;\n\nexport type InnerSuggestionListProps = {\n  /** current highlightedIndex */\n  highlightedIndex: number;\n  /** select options */\n  options: RcDownshiftSelectedItem[];\n  /** each item props getter */\n  getItemProps: (\n    options: RcDownshiftGetItemPropsOptions<RcDownshiftSelectedItem>,\n  ) => any;\n  /** menu wrapper props getter */\n  getMenuProps: (\n    restMenuProps?: HTMLAttributes<HTMLElement> | undefined,\n  ) => HTMLAttributes<HTMLElement>;\n  /** that reason that change highlighted */\n  changeHighlightedIndexReason: RcDownshiftHighlightChangeReason | undefined;\n  /** is that need keep highlighted index, that will be helpful when you need load more options when scroll */\n  isKeepHighlightedIndex: boolean;\n  /** trigger when need update outside popper position */\n  onUpdatePopper?: () => any;\n  /** options group list, use for calculate `aria-setsize` */\n  optionsGroupList?: RcDownshiftGroupedOption<RcDownshiftSelectedItem>[];\n} & Pick<\n  RcDownshiftProps,\n  | 'inputValue'\n  | 'MenuItem'\n  | 'renderOption'\n  | 'getOptionDisabled'\n  | 'renderGroup'\n  | 'groupExpanded'\n  | 'groupVariant'\n  | 'getOptionLabel'\n> &\n  RcSuggestionListProps<any>;\n\nconst SuggestionListContext = createContext<React.RefObject<HTMLElement>>(\n  null as any,\n);\n\nconst List = forwardRef<any, any>((props, ref) => {\n  const listRef = useContext(SuggestionListContext);\n\n  const forkRef = useForkRef(ref, listRef);\n\n  return <div ref={forkRef} data-suggestion-list {...props} />;\n});\n\nconst SuggestionList = forwardRef<any, InnerSuggestionListProps>(\n  (inProps: InnerSuggestionListProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcSuggestionList' });\n    const {\n      highlightedIndex,\n      options,\n      getItemProps,\n      getMenuProps,\n      renderOption,\n      inputValue,\n      groupVariant,\n      groupExpanded,\n      renderGroup,\n      optionsGroupList,\n      getOptionDisabled,\n      MenuItem,\n      changeHighlightedIndexReason,\n      isKeepHighlightedIndex,\n      components: componentsProp,\n      onUpdatePopper,\n      getOptionLabel,\n      padding,\n      maxContainerHeight = '100%',\n      className: classNameProp,\n      classes: classesProp,\n      ...rest\n    } = props;\n\n    const vlRef = useRef<VirtuosoHandle>(null);\n    const forkVlRef = useForkRef(ref, vlRef);\n\n    const isTitleGroup = groupVariant === 'normal';\n\n    const listRef = useRef<HTMLElement>(null);\n\n    const itemData = options;\n    const itemCount = options.length;\n\n    const classes = combineClasses(RcSuggestionListClasses, classesProp);\n    const className = clsx(classNameProp, classes?.root);\n\n    const { totalListHeightChanged, style, containerHeighRef } =\n      useDynamicHeight({\n        itemCount,\n        maxContainerHeight,\n        onContainerHeightChange: (changeHeight) => {\n          const scroller = scrollerRef.current;\n          if (scroller?.style) {\n            scroller.style.height = `${changeHeight}px`;\n\n            onUpdatePopper?.();\n          }\n        },\n      });\n\n    const { sleep } = useSleep();\n\n    const { retry: scrollToIndexWithRetry } = useRetry(\n      async (location: number | IndexLocationWithAlign) => {\n        vlRef.current?.scrollToIndex(location);\n\n        const toIndex =\n          typeof location === 'number' ? location : location.index;\n\n        await sleep(0);\n        // confirm that scrollInto view\n        const toElm = listRef.current?.querySelector<HTMLElement>(\n          `[data-item-index=\"${toIndex}\"]`,\n        );\n\n        if (toElm) {\n          return true;\n        }\n\n        return false;\n      },\n      {\n        retryTimes: 10,\n        intervalTime: 20,\n      },\n    );\n\n    const {\n      scrollerRef,\n      scrollerRefFn,\n      itemsRendered,\n      scrollToHighlightedIndex,\n    } = useHighlightScroll({\n      containerHeighRef,\n      scrollToIndex: scrollToIndexWithRetry,\n    });\n\n    const prevHighlightedIndex = usePrevious(() => highlightedIndex, true);\n\n    useLayoutEffect(() => {\n      if (\n        vlRef.current &&\n        !isKeepHighlightedIndex &&\n        // * only scroll when reason is 'keyboard'\n        changeHighlightedIndexReason &&\n        changeHighlightedIndexReason !== 'mouse'\n      ) {\n        scrollToHighlightedIndex(\n          prevHighlightedIndex,\n          highlightedIndex,\n          // when title group topHighlightIndex to be 1, first item is group title\n          isTitleGroup ? 1 : 0,\n        );\n      }\n    });\n\n    const handleScrolling = (scrolling: boolean) => {\n      const list = listRef.current;\n      if (list && list.style) {\n        if (scrolling) {\n          list.style.pointerEvents = 'none';\n        } else {\n          list.style.pointerEvents = '';\n        }\n      }\n    };\n\n    const itemContent = (index: number, option: RcDownshiftSelectedItem) => {\n      const currGroup = option.group;\n      const isGroupTitle = option === currGroup?.options[0];\n\n      const groupIndex =\n        optionsGroupList?.findIndex((x) => x.group === currGroup?.group) || 0;\n\n      const isFixedGroupExpanded = typeof groupExpanded === 'boolean';\n\n      const expandIconProps =\n        !isTitleGroup && !isFixedGroupExpanded && isGroupTitle\n          ? option.group?.getExpandIconProps?.({\n              className: clsx(classes.toggle, {\n                [classes.expanded]: option.group?.expanded,\n              }),\n            })\n          : undefined;\n\n      const itemProps = getItemProps({\n        item: option,\n        index,\n        className: isGroupTitle ? classes.groupTitle : undefined,\n      });\n\n      const selected = highlightedIndex === index;\n\n      const resultProps = {\n        ...option,\n        ...itemProps,\n        'aria-setsize':\n          itemCount - (isTitleGroup ? optionsGroupList?.length || 0 : 0),\n        'aria-posinset': index - (isTitleGroup ? groupIndex : 0),\n        key: itemProps.id,\n      };\n\n      // * when item is not disabled, that should check outside is that disabled\n      if (!resultProps.freeSolo && !resultProps.disabled && getOptionDisabled) {\n        resultProps.disabled = getOptionDisabled(option);\n      }\n\n      const state = {\n        inputValue,\n        selected,\n        index,\n      };\n\n      if (renderGroup && isGroupTitle) {\n        return renderGroup(resultProps, {\n          ...state,\n          expanded: option.group?.expanded,\n          expandIconProps,\n        });\n      }\n\n      if (renderOption) {\n        // * as any for VirtualizedListWithAutoSizer type issue\n        return renderOption(resultProps, state) as any;\n      }\n\n      // TODO: that MenuItem will be remove\n      if (MenuItem) {\n        return (\n          <MenuItem\n            {...resultProps}\n            itemId={option.id}\n            data-suggestion-item-id={option.id}\n            isHighlighted={selected}\n            isMember={option.isMember}\n          />\n        );\n      }\n\n      return (\n        <RcMenuItem\n          component=\"div\"\n          selected={selected}\n          {...omit(resultProps, [\n            'isSuggestion',\n            'freeSolo',\n            'label',\n            'unSelectable',\n          ])}\n        >\n          {getOptionLabel ? getOptionLabel(option) : option.label}\n          <RcBox flex=\"1 1 auto\" />\n          {expandIconProps && (\n            <RcIconButton {...expandIconProps} symbol={ArrowDown2} />\n          )}\n        </RcMenuItem>\n      );\n    };\n\n    const PaddingComponent = useMemo(() => {\n      return padding !== undefined\n        ? typeof padding === 'number'\n          ? () => <StyledMenuListPadding height={padding} />\n          : StyledMenuListPadding\n        : undefined;\n    }, [padding]);\n\n    const components = useMemo<Components>(() => {\n      return {\n        List,\n        Header: PaddingComponent,\n        Footer: PaddingComponent,\n        ...componentsProp,\n      };\n    }, [componentsProp, PaddingComponent]);\n\n    return (\n      <SuggestionListContext.Provider value={listRef}>\n        <Virtuoso\n          ref={forkVlRef}\n          totalCount={itemCount}\n          data={itemData}\n          className={className}\n          components={components}\n          itemContent={itemContent}\n          {...(getMenuProps() as any)}\n          {...combineProps(\n            {\n              scrollerRef: scrollerRefFn,\n              itemsRendered,\n              totalListHeightChanged,\n              style,\n              isScrolling: handleScrolling,\n            },\n            rest,\n          )}\n        />\n      </SuggestionListContext.Provider>\n    );\n  },\n);\n\nexport const RcSuggestionList = styled(SuggestionList)`\n  ${SuggestionListStyle};\n`;\n\nRcSuggestionList.displayName = 'RcSuggestionList';\n","import { css, px, RcThemedStyled, spacing, styled } from '../../../foundation';\nimport { RcIconButton } from '../../Buttons/IconButton';\nimport { RcChip } from '../../Chip';\nimport { RcChipClasses } from '../../Chip/utils';\nimport { RcDownshiftProps } from '../Downshift';\nimport { RcDownshiftInputClasses } from '../utils';\n\nexport const ArrowDownButton = styled(RcIconButton)``;\n\nexport const EndAdornment = styled.div`\n  right: 0;\n  position: absolute;\n`;\n\nexport const DownshiftStyle: RcThemedStyled<RcDownshiftProps, any> = ({\n  toggleButton = false, // 24 + 12\n  clearBtn = false, // 20 + 12\n}) => {\n  const paddingRight = (toggleButton ? 36 : 0) + (clearBtn ? 32 : 0);\n  return css`\n    .${RcDownshiftInputClasses.root} {\n      flex-wrap: wrap;\n      padding: 0 ${px(paddingRight)} 0 0;\n\n      ${RcChip} {\n        margin: ${spacing(0.5)};\n\n        .${RcChipClasses.deleteIcon} {\n          margin-left: -${spacing(1.5)};\n        }\n      }\n\n      &:before,\n      &:after {\n        z-index: 1;\n      }\n    }\n\n    .${RcDownshiftInputClasses.container} {\n      display: flex;\n      flex-wrap: wrap;\n      overflow-y: auto;\n      max-height: 132px;\n      width: 100%;\n    }\n  `;\n};\n","import React, { forwardRef } from 'react';\n\nimport { css, palette2, radius, shadows, styled } from '../../../foundation';\nimport { RcPopper, RcPopperProps } from '../../Popper';\n\nconst radiusLg = radius('lg');\n\nexport type PopperPosition = 'top' | 'bottom';\n\nconst _StyledPopper = forwardRef<\n  any,\n  RcPopperProps & { position: PopperPosition }\n>(({ position, ...rest }, ref) => {\n  return <RcPopper ref={ref} {...rest} />;\n});\n\nexport const StyledPopper = styled(_StyledPopper)`\n  box-shadow: ${shadows('1')};\n  background-color: ${palette2('neutral', 'elevation')};\n  overflow: hidden;\n\n  ${({ position }) =>\n    position === 'top'\n      ? css`\n          border-top-right-radius: ${radiusLg};\n          border-top-left-radius: ${radiusLg};\n        `\n      : css`\n          border-bottom-right-radius: ${radiusLg};\n          border-bottom-left-radius: ${radiusLg};\n        `}\n`;\n","import React, { forwardRef } from 'react';\n\nimport { styled } from '../../../foundation';\nimport { RcTextField, RcTextFieldProps } from '../../Forms/TextField';\nimport { clearBtnInactiveStyle } from '../../Forms/TextField/styles';\nimport { RcDownshiftProps } from '../Downshift';\nimport { RcDownshiftInputClasses } from '../utils';\n\ntype StyledTextFieldProps = {\n  hasTags: boolean;\n} & RcTextFieldProps &\n  Pick<RcDownshiftProps, 'renderInput'>;\n\nconst _StyledTextField = forwardRef<any, StyledTextFieldProps>(\n  ({ hasTags, renderInput, ...rest }, ref) => {\n    if (renderInput) {\n      const child = renderInput({ ...rest, ref });\n\n      return child as any;\n    }\n    return <RcTextField ref={ref} {...rest} />;\n  },\n);\n\nexport const StyledTextField = styled(_StyledTextField)`\n  .${RcDownshiftInputClasses.input} {\n    flex: 1;\n    min-width: 30px;\n  }\n\n  ${({ hasTags }) => hasTags && clearBtnInactiveStyle}\n`;\n","import { css, radius, RcThemedStyled } from '../../../foundation';\nimport { RcPaper } from '../../Paper';\nimport { RcDrawerProps } from '../Drawer';\nimport { drawerRadius, RcDrawerClasses } from '../utils';\n\nexport const DrawerStyle: RcThemedStyled<RcDrawerProps, any> = (props) => {\n  const { radius: radiusProp, inlinePaper, anchor = 'left' } = props;\n\n  const currRadiusValue = (() => {\n    if (!radiusProp) return null;\n\n    const radiusValue = radius(radiusProp!)(props);\n\n    if (radiusValue === '0px' || radiusValue === 0) return null;\n\n    return drawerRadius[anchor]\n      .map((x) => (x === 1 ? radiusValue : 0))\n      .join(' ');\n  })();\n\n  return css`\n    .${RcDrawerClasses.paper} {\n      border-radius: ${currRadiusValue};\n\n      ${inlinePaper &&\n      css`\n        background: transparent;\n        box-shadow: none;\n        align-items: center;\n        justify-content: center;\n        overflow: unset;\n\n        ${RcPaper} {\n          border-radius: ${currRadiusValue};\n        }\n      `}\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiDrawer from '@material-ui/core/Drawer';\n\nimport {\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  RcTheme,\n  styled,\n  useRcPortalWindowContext,\n  useThemeProps,\n} from '../../foundation';\nimport { DrawerStyle } from './styles';\nimport { RcDrawerClasses } from './utils';\n\ntype RcDrawerProps = {\n  /** custom radius for paper, default is `lg` */\n  radius?: keyof RcTheme['radius'];\n  /**\n   * when variant is `temporary` if you want only render your children content,\n   * you can set that as `true`, that will overwrite default paper\n   * background as `transparent` and remove `shadow` and keep chidden in `center`\n   */\n  inlinePaper?: boolean;\n} & RcBaseProps<ComponentProps<typeof MuiDrawer>>;\n\nconst _RcDrawer = forwardRef<any, RcDrawerProps>(\n  (inProps: RcDrawerProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcDrawer' });\n    const {\n      inlinePaper,\n      radius,\n      classes: classesProp,\n      children,\n      PaperProps: PaperPropsProp,\n      onClose,\n      ...rest\n    } = props;\n\n    const { externalWindow } = useRcPortalWindowContext();\n\n    const PaperProps = useMemo(\n      () =>\n        combineProps(\n          {\n            ['data-mui-paper' as any]: true,\n            onClick: inlinePaper\n              ? (e) => {\n                  if ((e.target as any)?.dataset.muiPaper) {\n                    onClose?.(e, 'backdropClick');\n                  }\n                }\n              : undefined,\n          },\n          PaperPropsProp,\n        ),\n      [PaperPropsProp, inlinePaper, onClose],\n    );\n\n    const classes = useMemo(\n      () => combineClasses(RcDrawerClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiDrawer\n        {...rest}\n        ref={ref}\n        container={externalWindow?.document.body}\n        classes={classes}\n        onClose={onClose}\n        PaperProps={PaperProps}\n      >\n        {children}\n      </MuiDrawer>\n    );\n  },\n);\n\nconst RcDrawer = styled(_RcDrawer)`\n  ${DrawerStyle}\n`;\n\nRcDrawer.defaultProps = {\n  radius: 'lg',\n};\n\nRcDrawer.displayName = 'RcDrawer';\n\nexport { RcDrawer };\nexport type { RcDrawerProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCheckbox from '@material-ui/core/Checkbox';\n\nimport {\n  combineClasses,\n  RcBaseFormControlLabelProps,\n  RcBaseLabelPlacement,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport indeterminateIcon from '../../../icon/Indeterminate';\nimport selectIcon from '../../../icon/Selects';\nimport unSelectIcon from '../../../icon/Unselect';\nimport { RcIconButtonSize } from '../../Buttons/IconButton';\nimport { withTooltip } from '../../Tooltip';\nimport { RcFormControlLabel } from '../FormControlLabel';\nimport { CustomIconPropsGetter, RcCheckedStyledProps } from '../utils';\nimport { CheckboxStyle } from './styles';\nimport { RcCheckboxClasses } from './utils';\n\ntype RcCheckboxLabelPlacement = RcBaseLabelPlacement;\n\ntype RcCheckboxFormControlLabelProps =\n  RcBaseFormControlLabelProps<RcCheckboxLabelPlacement>;\n\ntype RcCheckboxProps = {\n  /** @deprecated using size to replace that */\n  iconSize?: RcIconButtonSize;\n} & RcCheckedStyledProps<RcCheckboxFormControlLabelProps> &\n  RcBaseProps<\n    ComponentProps<typeof MuiCheckbox>,\n    'size' | 'color' | 'title' | 'edge'\n  >;\n\nconst getIconProps = CustomIconPropsGetter({\n  icon: unSelectIcon,\n  checkedIcon: selectIcon,\n  indeterminateIcon,\n});\n\nconst _RcCheckbox = forwardRef<any, RcCheckboxProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcCheckbox' });\n  const {\n    label,\n    formControlLabelProps,\n    color,\n    error,\n    followColorWhenUnChecked,\n    classes: classesProp,\n    iconSize,\n    size: sizeProp,\n    icon,\n    checkedIcon,\n    ...rest\n  } = props;\n\n  let size = sizeProp;\n  // TODO: switch to size\n  if (iconSize) {\n    size = iconSize;\n  }\n\n  const classes = useMemo(\n    () => combineClasses(RcCheckboxClasses, classesProp),\n    [classesProp],\n  );\n\n  const iconProps = useMemo(\n    () => getIconProps({ size, icon, checkedIcon }),\n    [checkedIcon, icon, size],\n  );\n\n  const Checkbox = (\n    <MuiCheckbox\n      {...iconProps}\n      {...rest}\n      ref={ref}\n      color=\"default\"\n      classes={classes}\n    />\n  );\n\n  if (label) {\n    return (\n      <RcFormControlLabel\n        {...formControlLabelProps}\n        label={label}\n        control={Checkbox}\n      />\n    );\n  }\n  return Checkbox;\n});\n\nconst RcCheckbox = styled(\n  withDeprecatedCheck(\n    withTooltip(_RcCheckbox),\n    [\n      {\n        prop: 'iconSize',\n        time: '2021-4',\n        comment: `@deprecated using size to replace that`,\n      },\n    ],\n    'RcCheckbox',\n  ),\n)`\n  ${CheckboxStyle}\n`;\n\nRcCheckbox.displayName = 'RcCheckbox';\n\nRcCheckbox.defaultProps = {\n  color: 'interactive.f01',\n  size: 'medium',\n};\n\nexport { RcCheckbox };\nexport type {\n  RcCheckboxFormControlLabelProps,\n  RcCheckboxLabelPlacement,\n  RcCheckboxProps,\n};\n","import { css, RcThemedStyled } from '../../../../foundation';\nimport { checkedStyles } from '../../utils';\nimport { RcCheckboxProps } from '../Checkbox';\nimport { RcCheckboxClasses } from '../utils';\n\nexport const CheckboxStyle: RcThemedStyled<RcCheckboxProps, any> = ({\n  ...rest\n}) => {\n  return css`\n    ${checkedStyles({ ...rest, classes: RcCheckboxClasses })}\n  `;\n};\n","import {\n  css,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcCheckboxClasses } from '../../Checkbox/utils';\nimport { RcRadioClasses } from '../../Radio/utils';\nimport { RcSwitchClasses } from '../../Switch/utils';\nimport { RcFormControlLabelProps } from '../FormControlLabel';\nimport { RcFormControlLabelClasses } from '../utils';\n\nconst controlsClassName = `.${RcCheckboxClasses.root}, .${RcRadioClasses.root}`;\n\nexport const FormControlLabelStyle: RcThemedStyled<\n  RcFormControlLabelProps,\n  any\n> = () => {\n  return css`\n    color: ${palette2('neutral', 'f06')};\n    ${typography('body2')};\n\n    .${RcFormControlLabelClasses.disabled} {\n      color: ${palette2('disabled', 'f02')};\n    }\n\n    ${controlsClassName} {\n      margin-left: 0;\n      margin-right: ${spacing(1)};\n    }\n\n    .${RcSwitchClasses.root} {\n      margin: ${spacing(3)};\n    }\n\n    &.${RcFormControlLabelClasses.labelPlacementStart} {\n      ${controlsClassName} {\n        margin-left: ${spacing(1)};\n        margin-right: 0;\n      }\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiFormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { FormControlLabelStyle } from './styles';\nimport { RcFormControlLabelClasses } from './utils';\n\ntype RcFormControlLabelProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiFormControlLabel>\n>;\n\nconst _RcFormControlLabel = forwardRef<any, RcFormControlLabelProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcFormControlLabel' });\n    const { classes: classesProp, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcFormControlLabelClasses, classesProp),\n      [classesProp],\n    );\n\n    return <MuiFormControlLabel {...rest} ref={ref} classes={classes} />;\n  },\n);\n\nconst RcFormControlLabel = styled(_RcFormControlLabel)`\n  ${FormControlLabelStyle}\n`;\n\nRcFormControlLabel.defaultProps = {};\n\nRcFormControlLabel.displayName = 'RcFormControlLabel';\n\nexport { RcFormControlLabel };\nexport type { RcFormControlLabelProps };\n","import React, { forwardRef } from 'react';\n\nimport MuiFormLabel, {\n  FormLabelProps as MuiFormLabelProps,\n} from '@material-ui/core/FormLabel';\n\nimport {\n  palette2,\n  RcBaseProps,\n  styled,\n  typography,\n  useThemeProps,\n} from '../../foundation';\n\ntype RcFormLabelProps = RcBaseProps<MuiFormLabelProps>;\n\nconst _RcFormLabel = React.memo(\n  forwardRef<any, RcFormLabelProps>((inProps: RcFormLabelProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcFormLabel' });\n    return <MuiFormLabel ref={ref} {...props} />;\n  }),\n);\n\nconst RcFormLabel = styled(_RcFormLabel)`\n  ${typography('subheading2')};\n  color: ${palette2('interactive', 'f01')};\n`;\n\nRcFormLabel.displayName = 'RcFormLabel';\n\nexport { RcFormLabel };\nexport type { RcFormLabelProps };\n","import { styled, typography } from '../../../../../foundation';\nimport { RcIconButtonClasses } from '../../../../Buttons/IconButton/utils';\nimport { PickerBaseIconButton } from '../../styles';\nimport { RcDatePickerIconWidths } from '../utils';\n\nexport const StyledDay = styled(PickerBaseIconButton)`\n  &.${RcIconButtonClasses.root} {\n    width: ${({ size }) => RcDatePickerIconWidths[size!]};\n    height: ${({ size }) => RcDatePickerIconWidths[size!]};\n    margin: 0 2px;\n    visibility: ${({ hidden }) => hidden && 'hidden'};\n    ${typography('caption1')};\n  }\n`;\n","import { styled, typography } from '../../../../../foundation';\nimport { RcIconButtonClasses } from '../../../../Buttons/IconButton/utils';\nimport { PickerBaseIconButton } from '../../styles';\n\nexport const StyledYear = styled(PickerBaseIconButton)`\n  &.${RcIconButtonClasses.root} {\n    width: 56px;\n    min-width: 56px;\n    height: 28px;\n    margin: 4px 0;\n    ${typography('body1')};\n  }\n`;\n","import {\n  css,\n  flexCenterStyle,\n  focusVisible,\n  focusVisibleColor,\n  focusVisibleShadowStyle,\n  nonTouchHoverMedia,\n  palette2,\n  radius,\n  spacing,\n  styled,\n  typography,\n} from '../../../../../foundation';\nimport { RcIconButton, RcIconButtonGroup } from '../../../../Buttons';\nimport { RcIconButtonClasses } from '../../../../Buttons/IconButton/utils';\nimport { RcIcon } from '../../../../Icon';\nimport { DatePickerHeaderProps } from '../DatePickerHeader';\nimport { textColor } from '../utils';\n\ntype StyledCurrentMonthProps = Pick<DatePickerHeaderProps, 'view'>;\n\nconst monthInactiveStyle = css`\n  &,\n  ${RcIcon} {\n    color: ${focusVisibleColor};\n  }\n`;\n\nconst StyledCurrentMonth = styled.button<StyledCurrentMonthProps>`\n  background: none;\n  border: none;\n  cursor: pointer;\n  outline: inherit;\n\n  ${flexCenterStyle};\n  position: relative;\n  cursor: pointer;\n  margin-left: ${spacing(5)};\n  color: ${textColor};\n  ${typography('body2')};\n  border-radius: ${radius('sm')};\n\n  padding: ${spacing(1, 0, 1, 1)};\n\n  ${focusVisibleShadowStyle('sm')};\n\n  ${RcIcon} {\n    margin-left: ${spacing(2)};\n    transform: rotate(${({ view }) => (view === 'day' ? '0' : '180')}deg);\n    color: ${palette2('neutral', 'f04')};\n  }\n\n  ${focusVisible} {\n    ${monthInactiveStyle};\n  }\n\n  ${nonTouchHoverMedia} {\n    &:hover {\n      ${monthInactiveStyle};\n    }\n  }\n`;\n\nconst SwitchHeaderWrapper = styled.div<Pick<DatePickerHeaderProps, 'size'>>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n\n  ${({ size }) => {\n    if (size === 'small') {\n      return '';\n    }\n    return css`\n      height: 24px;\n      margin-bottom: 12px;\n    `;\n  }}\n`;\n\ntype SwitchHeaderProps = Pick<DatePickerHeaderProps, 'size' | 'view'>;\n\nconst SwitchHeaderButtonWrapper = styled(RcIconButtonGroup)<SwitchHeaderProps>`\n  flex: 1;\n  display: ${({ view }) => (view === 'day' ? 'flex' : 'none')};\n  justify-content: flex-end;\n  padding-right: 12px;\n\n  ${({ size }) => {\n    if (size === 'small') {\n      return css`\n        flex: 1 1 100%;\n      `;\n    }\n    return css`\n      height: 24px;\n    `;\n  }}\n`;\n\nconst SwitchHeaderButton = styled(RcIconButton)`\n  &.${RcIconButtonClasses.root} {\n    ${RcIcon} {\n      font-size: 24px;\n    }\n  }\n`;\n\nexport {\n  StyledCurrentMonth,\n  SwitchHeaderButton,\n  SwitchHeaderButtonWrapper,\n  SwitchHeaderWrapper,\n};\n","import MuiTypography from '@material-ui/core/Typography';\nimport MuiSlideTransition from '@material-ui/pickers/views/Calendar/SlideTransition';\n\nimport {\n  css,\n  fakeBorder,\n  flexCenterStyle,\n  palette2,\n  spacing,\n  styled,\n  typography,\n} from '../../../../../foundation';\nimport { RcDatePickerProps } from '../DatePicker';\nimport { RcDatePickerSizes } from '../utils';\n\nconst CalendarSlideTransitionWrapper = styled(MuiSlideTransition)`\n  min-height: 160px;\n  margin: ${spacing(0, 0, 3)};\n`;\n\nconst ProgressContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst WeekWrapper = styled.div<Pick<RcDatePickerProps, 'size'>>`\n  display: flex;\n  justify-content: center;\n\n  ${({ size }) => {\n    if (size === 'small') {\n      return css`\n        height: 28px;\n      `;\n    }\n    return css`\n      height: 32px;\n\n      & > div:not(:first-child) {\n        margin-left: ${spacing(1)};\n      }\n    `;\n  }};\n`;\n\nconst StyledDaysHeader = styled.div`\n  ${flexCenterStyle};\n  height: 32px;\n`;\n\ntype StyledDayLabelProps = Pick<RcDatePickerProps, 'size'>;\n\nconst StyledDayLabel = styled(MuiTypography)<StyledDayLabelProps>`\n  ${({ size }) => {\n    if (size === 'small') {\n      return css`\n        &:not(:first-child) {\n          margin-left: ${spacing(0.5)};\n        }\n      `;\n    }\n    return css`\n      width: 32px;\n\n      &:not(:first-child) {\n        margin-left: ${spacing(1)};\n      }\n    `;\n  }}\n\n  text-align: center;\n  ${typography('caption1')};\n  color: ${palette2('neutral', 'f04')};\n`;\n\nconst DatePickerWrapper = styled.div<Pick<RcDatePickerProps, 'size'>>`\n  ${({ size }) => {\n    const { width, height } = RcDatePickerSizes[size!];\n    return css`\n      width: ${width};\n      height: ${height};\n    `;\n  }};\n\n  box-sizing: border-box;\n  padding: ${spacing(3, 0)};\n  display: flex;\n  flex-direction: column;\n  background-color: ${palette2('neutral', 'elevation')};\n  ${fakeBorder()};\n  overflow: hidden;\n`;\n\nconst DaysWrapper = styled.div`\n  min-height: 216px;\n`;\n\nconst DayFooterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  bottom: ${spacing(3)};\n  left: 0;\n  width: 100%;\n`;\n\nexport {\n  CalendarSlideTransitionWrapper,\n  DatePickerWrapper,\n  DayFooterWrapper,\n  DaysWrapper,\n  ProgressContainer,\n  StyledDayLabel,\n  StyledDaysHeader,\n  WeekWrapper,\n};\n","import { styled } from '../../../../../foundation';\n\ntype YearsWrapperProps = {\n  columns: number;\n};\n\nexport const YearsWrapper = styled.ul<YearsWrapperProps>`\n  display: flex;\n  margin: 0;\n  padding: 0;\n  flex-wrap: wrap;\n  overflow-y: auto;\n  padding-left: 16px;\n\n  li {\n    list-style: none;\n\n    &:not(:nth-child(${({ columns }) => columns}n + 1)) {\n      margin-left: 4px;\n    }\n  }\n`;\n","import React, {\n  ButtonHTMLAttributes,\n  forwardRef,\n  memo,\n  useImperativeHandle,\n} from 'react';\n\nimport { runKeyHandler } from '@material-ui/pickers/_shared/hooks/useKeyDown';\n\nimport {\n  styled,\n  useChange,\n  useEventCallback,\n  useRefState,\n} from '../../../../foundation';\nimport { TIME_SYSTEM_TEXT } from './constant';\nimport { StyledTimeIconButton } from './styles';\nimport { RcClickFiledStyleProps } from './TimePicker';\nimport { RcTimePickerUtils } from './utils';\nimport { isClick } from './utils/A11yUtils';\n\ntype ToggleTextProps = {\n  /** when user click th display text to change */\n  onUpdateValue: (value: TIME_SYSTEM_TEXT) => void;\n  /** trigger when inner update */\n  onInnerChange?: (value: TIME_SYSTEM_TEXT) => void;\n  /** initial value */\n  value: TIME_SYSTEM_TEXT;\n  /** get label for screen reader */\n  getScreenReaderLabel?: (value: string) => string;\n  /** trigger when confirm value */\n  onClose: (event: React.KeyboardEvent<HTMLButtonElement>) => void;\n} & RcClickFiledStyleProps &\n  Omit<ButtonHTMLAttributes<HTMLButtonElement>, 'onClick' | 'value'>;\n\ntype ToggleTextRef = {\n  value: TIME_SYSTEM_TEXT;\n};\n\nconst _ToggleText = memo(\n  forwardRef<ToggleTextRef, ToggleTextProps>(\n    (\n      {\n        onUpdateValue,\n        onInnerChange,\n        value,\n        size,\n        disabled,\n        getScreenReaderLabel,\n        onClose,\n        ...rest\n      },\n      ref,\n    ) => {\n      const [innerValueRef, setInnerValue] = useRefState(value);\n\n      useChange(\n        () => {\n          if (innerValueRef.current !== value) {\n            setInnerValue(value, false);\n          }\n        },\n        () => value,\n      );\n\n      const innerValue = innerValueRef.current;\n\n      const label = getScreenReaderLabel?.(innerValue);\n\n      const nextValue =\n        innerValue === TIME_SYSTEM_TEXT.AM\n          ? TIME_SYSTEM_TEXT.PM\n          : TIME_SYSTEM_TEXT.AM;\n\n      const handleClick = useEventCallback((event: React.MouseEvent) => {\n        if (disabled || !isClick(event)) return;\n        onUpdateValue(nextValue);\n      });\n\n      const handleToggleKeyDown = useEventCallback(\n        (event: React.KeyboardEvent<HTMLButtonElement>) => {\n          if (disabled) {\n            return;\n          }\n\n          const togglePeriod = () => {\n            setInnerValue(nextValue);\n            onInnerChange?.(nextValue);\n          };\n\n          const keydownSubmit = () => {\n            event.stopPropagation();\n            onUpdateValue(innerValue);\n            onClose(event);\n          };\n\n          runKeyHandler(event.nativeEvent as KeyboardEvent, {\n            ArrowUp: togglePeriod,\n            ArrowDown: togglePeriod,\n            Enter: keydownSubmit,\n            ' ': keydownSubmit,\n          });\n        },\n      );\n\n      useImperativeHandle(\n        ref,\n        () => ({\n          value: innerValue,\n        }),\n        [innerValue],\n      );\n\n      return (\n        <StyledTimeIconButton\n          wrapperSize={size}\n          onClick={handleClick}\n          onKeyDown={handleToggleKeyDown}\n          disabled={disabled}\n          color=\"informative.f02\"\n          aria-live=\"assertive\"\n          aria-label={label}\n          {...rest}\n        >\n          <>{innerValue}</>\n        </StyledTimeIconButton>\n      );\n    },\n  ),\n);\n\nconst ToggleText = styled(_ToggleText)`\n  margin-left: ${({ size }) => RcTimePickerUtils[size!].timeSystem.margin};\n`;\n\nToggleText.displayName = 'ToggleText';\n\nexport { ToggleText };\nexport type { ToggleTextProps, ToggleTextRef };\n","import {\n  focusVisible,\n  focusVisibleShadowStyle,\n  palette2,\n  spacing,\n  styled,\n} from '../../../../../foundation';\nimport { RcIconButton } from '../../../../Buttons';\nimport { RcIconButtonClasses } from '../../../../Buttons/IconButton/utils';\n\nexport const StyledNumberPicker = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  outline: none;\n  border: 1px solid transparent;\n  position: relative;\n\n  ${focusVisibleShadowStyle('lg')};\n\n  ${focusVisible} {\n    ${RcIconButton} {\n      ${`&:not(.${RcIconButtonClasses.disabled})`} .icon {\n        color: ${palette2('interactive', 'f01')};\n      }\n    }\n  }\n\n  > * + * {\n    margin-top: ${spacing(2)};\n  }\n`;\n","import React, { forwardRef } from 'react';\n\nimport { css, styled, typography } from '../../../../../foundation';\nimport { PickerBaseIconButton, PickerBaseIconButtonProps } from '../../styles';\nimport { RcTimePickerSize } from '../TimePicker';\nimport { HALF_DAY_HOURS, RcTimePickerIconWidths } from '../utils';\n\nexport type StyledTimeIconButtonProps = {\n  wrapperSize?: RcTimePickerSize;\n  /** item length of data source */\n  itemLength?: number;\n} & PickerBaseIconButtonProps;\n\nconst _StyledTimeIconButton = forwardRef<any, StyledTimeIconButtonProps>(\n  ({ itemLength, wrapperSize, ...rest }, ref) => {\n    return <PickerBaseIconButton ref={ref} {...rest} />;\n  },\n);\n\nexport const StyledTimeIconButton = styled(_StyledTimeIconButton)`\n  && {\n    ${({ wrapperSize, itemLength }) => {\n      const iconWidth = RcTimePickerIconWidths[wrapperSize!];\n\n      if (itemLength! > HALF_DAY_HOURS) {\n        return css`\n          width: ${iconWidth.s12};\n          height: ${iconWidth.s24};\n        `;\n      }\n\n      return css`\n        width: ${iconWidth.s12};\n        height: ${iconWidth.s12};\n      `;\n    }};\n\n    ${({ wrapperSize }) =>\n      typography(wrapperSize === 'medium' ? 'title1' : 'subheading1')};\n  }\n`;\n","import {\n  css,\n  flexCenterStyle,\n  palette2,\n  spacing,\n  styled,\n} from '../../../../../foundation';\nimport { RcTimePickerProps } from '../TimePicker';\nimport { RcTimePickerUtils } from '../utils';\n\nexport const StyledPickerPopperWrap = styled.div<RcTimePickerProps>`\n  ${({ size }) => {\n    const { width, height } = RcTimePickerUtils[size!];\n\n    return css`\n      ${flexCenterStyle};\n      box-sizing: border-box;\n      width: ${width};\n      height: ${height};\n      padding: ${spacing(3, 4)};\n      color: ${palette2('neutral', 'f06')};\n    `;\n  }}\n`;\n","import { spacing, styled, typography } from '../../../../../foundation';\nimport { StyledTimeIconButton } from './StyledTimeIconButton';\n\nexport const StyledSelectionItem = styled(StyledTimeIconButton)`\n  && {\n    ${typography('body1')};\n    /* when itemLength is 4 which makes it to become two line, so add padding for it. */\n    margin: ${({ itemLength, wrapperSize }) =>\n      spacing(wrapperSize === 'small' && itemLength === 4 ? 2 : 1)};\n  }\n`;\n","import {\n  css,\n  flexCenterStyle,\n  spacing,\n  styled,\n} from '../../../../../foundation';\nimport { RcClickFiledStyleProps } from '../TimePicker';\nimport { RcTimePickerUtils } from '../utils';\n\nexport const StyledSelectionView = styled.div<RcClickFiledStyleProps>`\n  ${({ size }) => {\n    const { width, height } = RcTimePickerUtils[size!];\n\n    return css`\n      ${flexCenterStyle};\n      box-sizing: border-box;\n      padding: ${spacing(2)};\n      flex-wrap: wrap;\n      width: ${width};\n      height: ${height};\n      margin: ${spacing(-3, -4)};\n    `;\n    /** reset wrapper margin */\n  }};\n`;\n","import React, { forwardRef } from 'react';\n\nimport {\n  css,\n  nonTouchHoverMedia,\n  RcThemedStyled,\n  styled,\n} from '../../../../foundation';\nimport { RcTextField, RcTextFieldProps } from '../../TextField';\nimport { RcTextFieldInputClasses } from '../../TextField/utils';\n\nconst _RcTextField = forwardRef<any, RcTextFieldProps>((props, ref) => {\n  const { ...rest } = props;\n  return <RcTextField ref={ref} {...rest} clearBtn={false} />;\n});\n\nconst cleanStyle: RcThemedStyled<RcTextFieldProps, any> = ({\n  value,\n  clearBtn,\n  disabled,\n}) => {\n  // TODO: in touch screen, that will directly trigger remove button, confirm that\n  return (\n    value &&\n    clearBtn &&\n    !disabled &&\n    css`\n      ${nonTouchHoverMedia} {\n        .${RcTextFieldInputClasses.root} {\n          &:hover {\n            .picker-action {\n              display: none;\n            }\n            .picker-clear {\n              display: inline-flex;\n            }\n          }\n        }\n      }\n    `\n  );\n};\n\nconst StyledPickerTextField = styled(_RcTextField)`\n  .picker-clear {\n    display: none;\n  }\n\n  .${RcTextFieldInputClasses.root}, .${RcTextFieldInputClasses.input} {\n    cursor: pointer;\n  }\n\n  .${RcTextFieldInputClasses.disabled} {\n    cursor: auto;\n  }\n\n  .picker-action {\n    margin: 0;\n  }\n\n  ${cleanStyle};\n`;\n\nexport { StyledPickerTextField };\n","import { fakeBorder, styled } from '../../../../foundation';\nimport { RcPopover } from '../../../Popover';\nimport { RcDatePickerClasses } from '../DatePicker/utils';\nimport { RcTimePickerClasses } from '../TimePicker/utils';\n\nexport const StyledPopover = styled(RcPopover)`\n  .${RcDatePickerClasses.popoverPaper}, .${RcTimePickerClasses.popoverPaper} {\n    ${fakeBorder({ pseudo: true, radius: 'lg' })};\n  }\n`;\n","import { css, px, RcThemedStyled } from '../../../../foundation';\nimport { RcIconButtonSizes } from '../../../Buttons/IconButton/utils';\nimport { checkedStyles } from '../../utils';\nimport { RcRadioProps } from '../Radio';\nimport { RadioButtonIconClasses, RcRadioClasses } from '../utils';\n\nexport const RadioStyle: RcThemedStyled<RcRadioProps, any> = ({\n  size,\n  ...rest\n}) => {\n  // * for overwrite Mui fontSize in default Radio\n  // * 1.2 for mui icon have some apace in radio\n  const currSize = RcIconButtonSizes[size!];\n\n  const fontSize = px(currSize * 1.2);\n\n  // * 0.2 / 2 for both direction\n  const disSize = px(currSize * 0.1);\n\n  return css`\n    ${checkedStyles({ size, ...rest, classes: RcRadioClasses })};\n\n    .${RadioButtonIconClasses.root} {\n      svg {\n        font-size: ${fontSize};\n        margin: -${disSize};\n      }\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiRadio from '@material-ui/core/Radio';\n// @ts-ignore\nimport RadioButtonIcon from '@material-ui/core/Radio/RadioButtonIcon';\n\nimport {\n  combineClasses,\n  RcBaseFormControlLabelProps,\n  RcBaseLabelPlacement,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { withTooltip } from '../../Tooltip';\nimport { RcFormControlLabel } from '../FormControlLabel';\nimport { CustomIconPropsGetter, RcCheckedStyledProps } from '../utils';\nimport { RadioStyle } from './styles';\nimport { RadioButtonIconClasses, RcRadioClasses } from './utils';\n\n// * remember when upgrade version with Mui, should check that classes have change in 4.11.0\ntype RcRadioLabelPlacement = RcBaseLabelPlacement<'start' | 'end'>;\n\ntype RcRadioFormControlLabelProps =\n  RcBaseFormControlLabelProps<RcRadioLabelPlacement>;\n\ntype RcRadioProps = {} & RcCheckedStyledProps<RcRadioFormControlLabelProps> &\n  RcBaseProps<\n    ComponentProps<typeof MuiRadio>,\n    'size' | 'color' | 'title' | 'edge'\n  >;\n\nconst getIconProps = CustomIconPropsGetter({\n  checkedIcon: <RadioButtonIcon checked classes={RadioButtonIconClasses} />,\n  icon: <RadioButtonIcon classes={RadioButtonIconClasses} />,\n});\n\nconst _RcRadio = forwardRef<any, RcRadioProps>((inProps: RcRadioProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcRadio' });\n  const {\n    label,\n    formControlLabelProps,\n    color,\n    error,\n    followColorWhenUnChecked,\n    classes: classesProp,\n    size,\n    icon,\n    checkedIcon,\n    ...rest\n  } = props;\n\n  const classes = useMemo(\n    () => combineClasses(RcRadioClasses, classesProp),\n    [classesProp],\n  );\n\n  const iconProps = useMemo(\n    () => getIconProps({ size, icon, checkedIcon }),\n    [checkedIcon, icon, size],\n  );\n\n  const Radio = (\n    <MuiRadio\n      {...iconProps}\n      {...rest}\n      ref={ref}\n      color=\"default\"\n      classes={classes}\n    />\n  );\n\n  if (label) {\n    return (\n      <RcFormControlLabel\n        {...formControlLabelProps}\n        label={label}\n        control={Radio}\n      />\n    );\n  }\n\n  return Radio;\n});\n\nconst RcRadio = styled(withTooltip(_RcRadio))`\n  ${RadioStyle}\n`;\n\nRcRadio.defaultProps = {\n  color: 'interactive.f01',\n  size: 'medium',\n};\n\nRcRadio.displayName = 'RcRadio';\n\nexport { RcRadio };\nexport type {\n  RcRadioFormControlLabelProps,\n  RcRadioLabelPlacement,\n  RcRadioProps,\n};\n","import React, { forwardRef, useMemo } from 'react';\n\nimport { PopoverOrigin } from '@material-ui/core/Popover';\nimport { SelectProps as MuiSelectProps } from '@material-ui/core/Select';\n\nimport {\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  RcBaseSize,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcMenu } from '../../Menu/Menu';\nimport { RcVirtualizedMenu } from '../../VirtualizedMenu';\nimport { RcTextFieldProps } from '../TextField';\nimport { SelectArrowDownIcon, selectStyle } from './styles';\nimport {\n  RcSelectClasses,\n  RcSelectInputClasses,\n  RcSelectInputClassesMap,\n  RcSelectInputWhenPlaceholderClasses,\n  RcSelectTextField,\n  SelectInput,\n  SelectInputProps,\n} from './utils';\n\ntype RcSelectVariant = 'box' | 'line';\n\ntype RcSelectSize = RcBaseSize<'medium' | 'large'>;\n\ntype RcSelectProps = {\n  /** size with type 'medium' , 'large' , default with medium */\n  size?: RcSelectSize;\n  /** variant for select component */\n  variant?: RcSelectVariant;\n  /** apply for inputComponent component, you can custom `MenuComponent`, `MenuProps` here */\n  SelectInputProps?: SelectInputProps;\n  /** is that menu virtualize  */\n  virtualize?: boolean;\n} & RcBaseProps<\n  MuiSelectProps,\n  | 'variant'\n  | 'color'\n  | 'rows'\n  | 'rowsMax'\n  | 'rowsMin'\n  | 'maxRows'\n  | 'minRows'\n  | 'startAdornment'\n  | 'disableUnderline'\n  | 'autoWidth'\n  | 'renderSuffix'\n  | 'multiline'\n  | 'margin'\n> &\n  Pick<\n    RcTextFieldProps,\n    | 'InputProps'\n    | 'helperText'\n    | 'label'\n    | 'validate'\n    | 'focused'\n    | 'gutterBottom'\n    | 'textVariant'\n  >;\n\nconst leftBottomAnchorOrigin: PopoverOrigin = {\n  horizontal: 'left',\n  vertical: 'bottom',\n};\n\n/** @release */\nconst _RcSelect = forwardRef<any, RcSelectProps>(\n  (inProps: RcSelectProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcSelect' });\n    const {\n      children,\n      onChange,\n      SelectInputProps: SelectInputPropsProp,\n      textVariant,\n      placeholder,\n      renderValue,\n      displayEmpty,\n      variant,\n      size,\n      value,\n      virtualize,\n      // * below is should pick into TextField props\n      focused,\n      gutterBottom,\n      helperText,\n      label,\n      id,\n      className,\n      validate,\n      InputProps,\n      required,\n      fullWidth,\n      disabled,\n      error,\n      ...rest\n    } = props;\n    const nonValue =\n      value === undefined ||\n      value === null ||\n      // * if that can't displayEmpty, and that value === '', same as no value\n      (!displayEmpty && value === '') ||\n      (value instanceof Array && value.length === 0);\n\n    const applyClasses = useMemo(() => {\n      const variantClasses = RcSelectInputClassesMap[variant!];\n\n      return combineClasses(RcSelectInputClasses, variantClasses);\n    }, [variant]);\n\n    const _SelectProps = useMemo<MuiSelectProps>(() => {\n      const additionProps: Partial<SelectInputProps> = {\n        MenuComponent: undefined,\n        MenuProps: undefined,\n      };\n      if (rest?.multiple) {\n        additionProps.MenuComponent = RcMenu;\n        additionProps.MenuProps = {\n          anchorOrigin: leftBottomAnchorOrigin,\n        };\n      }\n      if (virtualize) {\n        additionProps.MenuComponent = RcVirtualizedMenu;\n        additionProps.MenuProps = {\n          anchorOrigin: {\n            vertical: 'top',\n            horizontal: 'left',\n          },\n          transformOrigin: { horizontal: 0, vertical: 8 },\n        };\n      }\n\n      return {\n        renderValue,\n        classes: combineClasses(RcSelectClasses, rest?.classes),\n        IconComponent: SelectArrowDownIcon,\n        displayEmpty,\n        inputComponent: SelectInput as any,\n        inputProps: {\n          ...additionProps,\n          ...rest?.inputProps,\n          ...(SelectInputPropsProp as any),\n        },\n        ...rest,\n      };\n    }, [rest, virtualize, renderValue, displayEmpty, SelectInputPropsProp]);\n\n    const _InputProps = useMemo<RcSelectProps['InputProps']>(() => {\n      let result = InputProps;\n\n      if (placeholder && nonValue) {\n        result = combineProps(\n          {\n            classes: combineClasses(\n              RcSelectInputWhenPlaceholderClasses,\n              applyClasses,\n            ),\n            disableUnderline: variant === 'box',\n          },\n          result,\n        );\n      }\n\n      return combineProps(\n        {\n          classes: applyClasses,\n        },\n        result,\n      );\n    }, [InputProps, variant, placeholder, nonValue, applyClasses]);\n\n    const valueIsNumber = typeof value === 'number';\n\n    return (\n      <RcSelectTextField\n        ref={ref}\n        id={id}\n        className={className}\n        // for when that is select type that type will be select onChange, just any for ignore that\n        onChange={onChange as any}\n        select\n        focused={focused}\n        gutterBottom={gutterBottom}\n        helperText={helperText}\n        label={label}\n        value={valueIsNumber ? value : value || ''}\n        validate={validate}\n        required={required}\n        fullWidth={fullWidth}\n        disabled={disabled}\n        error={error}\n        InputProps={_InputProps}\n        clearBtn={false}\n        placeholder={placeholder}\n        SelectProps={_SelectProps}\n      >\n        {children}\n      </RcSelectTextField>\n    );\n  },\n);\n\nconst RcSelect = styled(_RcSelect)`\n  ${selectStyle};\n`;\n\nRcSelect.displayName = 'RcSelect';\n\nRcSelect.defaultProps = {\n  size: 'medium',\n  variant: 'line',\n};\n\nexport { RcSelect };\nexport type { RcSelectProps, RcSelectSize, RcSelectVariant };\n","import {\n  css,\n  fakeBorder,\n  palette2,\n  px,\n  radius,\n  RcThemedStyled,\n  setOpacity,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { disabledColor, placeholderColor } from '../../TextField/styles';\nimport { RcSelectProps } from '../Select';\nimport {\n  RcBoxSelectInputClasses,\n  RcBoxSelectInputHeights,\n  RcLineSelectInputClasses,\n  RcSelectClasses,\n  RcSelectInputClasses,\n  RcSelectInputWhenPlaceholderClasses,\n} from '../utils';\n\nconst boxBackgroundColor = palette2('neutral', 'b03');\nconst boxActionBackgroundColor = palette2('action', 'grayDark');\n\nconst lineSelectStyle = css<RcSelectProps>`\n  .${RcLineSelectInputClasses.input} {\n    ${({ textVariant }) => typography(textVariant || 'subheading1')};\n    line-height: unset;\n\n    &:focus {\n      background-color: ${setOpacity(palette2('action', 'grayDark'), '08')};\n    }\n  }\n`;\n\nconst boxSelectStyle = css<RcSelectProps>`\n  > .${RcBoxSelectInputClasses.root} {\n    margin-top: ${({ label }: any) => label && spacing(5)};\n    box-sizing: border-box;\n    height: ${({ size }: any) => px(RcBoxSelectInputHeights[size!])};\n    border-radius: ${radius('lg')};\n    background-color: ${boxBackgroundColor};\n\n    &:not(.${RcBoxSelectInputClasses.disabled}):hover {\n      background-color: ${setOpacity(boxActionBackgroundColor, '12')};\n    }\n\n    &:before {\n      content: '';\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      border-radius: ${radius('lg')};\n\n      transition: none;\n      border-bottom: none !important;\n      pointer-events: none;\n      ${fakeBorder({ color: palette2('highContrast') })};\n    }\n\n    &:after {\n      display: none;\n    }\n  }\n\n  > .${RcBoxSelectInputClasses.focused} {\n    background-color: ${setOpacity(boxActionBackgroundColor, '16')};\n\n    &:before {\n      ${fakeBorder({ color: palette2('interactive', 'f01') })};\n    }\n  }\n\n  > .${RcBoxSelectInputClasses.error} {\n    &:before {\n      ${fakeBorder({ color: palette2('danger', 'f02') })};\n    }\n  }\n\n  > .${RcBoxSelectInputClasses.disabled} {\n    background-color: ${setOpacity(palette2('action', 'grayLight'), '12')};\n    &:before {\n      ${fakeBorder({ color: 'transparent', allowTransparent: true })};\n    }\n  }\n\n  .${RcBoxSelectInputClasses.input} {\n    padding: ${spacing(1.5, 6, 1.5, 2)};\n    ${({ textVariant }) => typography(textVariant || 'body1')};\n    line-height: ${({ size }: any) =>\n      // here -12 for make this input height same as container\n      px(RcBoxSelectInputHeights[size!] - 12)};\n\n    &:focus {\n      background: transparent;\n    }\n  }\n`;\n\nexport const selectStyle: RcThemedStyled<RcSelectProps, any> = ({\n  variant,\n  placeholder,\n}) => css`\n  .${RcSelectClasses.icon} {\n    color: ${palette2('neutral', 'f04')};\n  }\n\n  .${RcSelectInputClasses.focused} {\n    .${RcSelectClasses.icon} {\n      color: ${palette2('interactive', 'f01')};\n    }\n  }\n\n  .${RcSelectInputClasses.error} {\n    .${RcSelectClasses.icon} {\n      color: ${palette2('danger', 'f02')};\n    }\n  }\n\n  .${RcSelectInputWhenPlaceholderClasses.input} {\n    color: ${placeholderColor};\n    &:before {\n      content: ${`'${placeholder}'`};\n      border: none;\n    }\n  }\n\n  .${RcSelectInputClasses.disabled} {\n    color: ${disabledColor};\n    .${RcSelectClasses.icon} {\n      color: ${disabledColor};\n    }\n  }\n\n  ${variant === 'line' && lineSelectStyle};\n  ${variant === 'box' && boxSelectStyle};\n`;\n","import {\n  css,\n  getContrastBgColor,\n  nonTouchHoverMedia,\n  palette2,\n  RcThemedStyled,\n  setOpacity,\n} from '../../../../foundation';\nimport { RcSliderProps } from '../Slider';\nimport { RcSliderClasses } from '../utils';\n\nexport const SliderStyle: RcThemedStyled<RcSliderProps, any> = (props) => {\n  const [currColor, contrastBgColor] = getContrastBgColor(props);\n\n  const actionThumbColor = setOpacity(currColor, '16');\n\n  return css`\n    color: ${currColor};\n\n    &.${RcSliderClasses.trackInverted} {\n      .${RcSliderClasses.track} {\n        background-color: ${contrastBgColor};\n      }\n    }\n\n    .${RcSliderClasses.thumb} {\n      &.${RcSliderClasses.focusVisible} {\n        box-shadow: 0 0 0 8px ${actionThumbColor};\n      }\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          box-shadow: 0 0 0 8px ${actionThumbColor};\n        }\n      }\n\n      &.${RcSliderClasses.active} {\n        box-shadow: 0 0 0 14px ${actionThumbColor};\n      }\n    }\n\n    &.${RcSliderClasses.disabled} {\n      color: ${palette2('disabled', 'f02')};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiSlider from '@material-ui/core/Slider';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcPaletteKeys,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { SliderStyle } from './styles';\nimport { RcSliderClasses } from './utils';\n\ntype RcSliderProps = {\n  /** custom color for Slider */\n  color?: RcPaletteKeys;\n} & RcBaseProps<ComponentProps<typeof MuiSlider>, 'color'>;\n\nconst _RcSlider = forwardRef<any, RcSliderProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcSlider' });\n  const { classes: classesProp, color, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcSliderClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiSlider {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiSlider>\n  );\n});\n\nconst RcSlider = styled(_RcSlider)`\n  ${SliderStyle}\n`;\n\nRcSlider.defaultProps = {\n  valueLabelDisplay: 'auto',\n  color: 'interactive.f01',\n};\n\nRcSlider.displayName = 'RcSlider';\n\nexport { RcSlider };\nexport type { RcSliderProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiSwitch from '@material-ui/core/Switch';\n\nimport {\n  combineClasses,\n  omit,\n  RcPaletteProp,\n  useThemeProps,\n} from '../../../foundation';\nimport styled from '../../../foundation/styled-components';\nimport {\n  RcBaseFormControlLabelProps,\n  RcBaseLabelPlacement,\n  RcBaseProps,\n} from '../../../foundation/typings';\nimport { RcFormControlLabel } from '../FormControlLabel';\nimport { RcCheckedStyledProps } from '../utils';\nimport { SwitchStyle } from './styles';\nimport { RcSwitchClasses } from './utils';\n\ntype RcSwitchLabelPlacement = RcBaseLabelPlacement<'start' | 'end'>;\n\ntype RcSwitchFormControlLabelProps =\n  RcBaseFormControlLabelProps<RcSwitchLabelPlacement>;\n\ntype RcSwitchProps = {\n  /** custom trackColor when unchecked status */\n  trackColor?: RcPaletteProp;\n} & RcBaseProps<\n  RcCheckedStyledProps<RcSwitchFormControlLabelProps>,\n  'size' | 'error' | 'followColorWhenUnChecked'\n> &\n  RcBaseProps<\n    ComponentProps<typeof MuiSwitch>,\n    | 'size'\n    | 'color'\n    | 'edge'\n    | 'checkedIcon'\n    | 'icon'\n    | 'disableFocusRipple'\n    | 'centerRipple'\n    | 'disableRipple'\n    | 'disableTouchRipple'\n    | 'focusRipple'\n    | 'TouchRippleProps'\n  >;\n\nconst _RcSwitch = forwardRef<any, RcSwitchProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcSwitch' });\n  const {\n    label,\n    formControlLabelProps = {},\n    focusVisibleClassName: focusVisibleClassNameProp,\n    classes: classesProp,\n    color,\n    trackColor,\n    ...rest\n  } = props;\n\n  const classes = useMemo(\n    () => combineClasses(omit(RcSwitchClasses, ['focusVisible']), classesProp),\n    [classesProp],\n  );\n\n  const focusVisibleClassName = useMemo(\n    () => clsx(RcSwitchClasses.focusVisible, focusVisibleClassNameProp),\n    [focusVisibleClassNameProp],\n  );\n\n  const Switch = (\n    <MuiSwitch\n      ref={ref}\n      focusVisibleClassName={focusVisibleClassName}\n      classes={classes}\n      {...rest}\n      color=\"default\"\n      size=\"medium\"\n      disableRipple\n      disableTouchRipple\n    />\n  );\n\n  if (label) {\n    return (\n      <RcFormControlLabel\n        {...formControlLabelProps}\n        label={label}\n        control={Switch}\n      />\n    );\n  }\n\n  return Switch;\n});\n\nconst RcSwitch = styled(_RcSwitch)`\n  ${SwitchStyle}\n`;\n\nRcSwitch.defaultProps = {\n  color: 'interactive.f01',\n};\n\nRcSwitch.displayName = 'RcSwitch';\n\nexport { RcSwitch };\nexport type {\n  RcSwitchFormControlLabelProps,\n  RcSwitchLabelPlacement,\n  RcSwitchProps,\n};\n","import {\n  css,\n  fakeBorder,\n  getParsePaletteColor,\n  nonTouchHoverMedia,\n  palette2,\n  PaletteReturnType,\n  radius,\n  RcTheme,\n  RcThemedStyled,\n  setOpacity,\n  spacing,\n} from '../../../../foundation';\nimport { RcSwitchProps } from '../Switch';\nimport { RcSwitchClasses } from '../utils';\n\nconst thumbColor = palette2('neutral', 'f01');\nconst disabledColor = palette2('disabled', 'f02');\nconst defaultTrackColorArray = ['neutral', 'f02'];\n\nconst heightCss = css`\n  height: 20px;\n`;\nconst widthCss = css`\n  width: 36px;\n`;\nconst thumbSize = css`\n  height: 12px;\n  width: 12px;\n`;\n\nconst notDisabledSwitchBase = (\n  opacity: keyof RcTheme['opacity'],\n  checkedColor: PaletteReturnType,\n  trackedColor: PaletteReturnType,\n) => css`\n  .${RcSwitchClasses.switchBase} {\n    &:not(.${RcSwitchClasses.disabled}) {\n      & + .${RcSwitchClasses.track} {\n        background-color: ${setOpacity(trackedColor, opacity, true)};\n      }\n\n      &.${RcSwitchClasses.checked} + .${RcSwitchClasses.track} {\n        background-color: ${setOpacity(checkedColor, opacity, true)};\n      }\n    }\n  }\n`;\n\nexport const SwitchStyle: RcThemedStyled<RcSwitchProps, any> = ({\n  color: colorProp,\n  trackColor: trackColorProp,\n}) => {\n  const checkedColor = getParsePaletteColor(colorProp);\n  const trackColor = getParsePaletteColor(\n    trackColorProp,\n    defaultTrackColorArray,\n  );\n\n  return css`\n    &.${RcSwitchClasses.root} {\n      padding: 0px;\n      ${widthCss};\n      ${heightCss};\n\n      .${RcSwitchClasses.switchBase} {\n        ${widthCss};\n        ${heightCss};\n        padding: 0;\n        background-color: transparent;\n        transform: translateX(${spacing(-2)});\n\n        &.${RcSwitchClasses.checked} {\n          transform: translateX(${spacing(2)});\n        }\n      }\n\n      .${RcSwitchClasses.thumb} {\n        ${thumbSize};\n        background-color: ${thumbColor};\n        box-shadow: none;\n      }\n\n      .${RcSwitchClasses.track} {\n        ${heightCss};\n        opacity: 1;\n        margin: 0;\n        border-radius: ${radius('round')};\n        background-color: ${trackColor};\n      }\n\n      .${RcSwitchClasses.checked} + .${RcSwitchClasses.track} {\n        background-color: ${checkedColor};\n      }\n\n      .${RcSwitchClasses.disabled} + .${RcSwitchClasses.track} {\n        background-color: ${disabledColor};\n      }\n\n      .${RcSwitchClasses.focusVisible} + .${RcSwitchClasses.track} {\n        &:after {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          box-sizing: border-box;\n          border-radius: ${radius('round')};\n          border: 1px solid ${palette2('interactive', 'f01')};\n          ${fakeBorder({ color: palette2('neutral', 'f11') })}\n        }\n      }\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          ${notDisabledSwitchBase('08', checkedColor, trackColor)};\n        }\n      }\n\n      &:active {\n        ${notDisabledSwitchBase('24', checkedColor, trackColor)};\n      }\n    }\n  `;\n};\n","import React, {\n  forwardRef,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport MuiTextField, {\n  StandardTextFieldProps as MuiStandardTextFieldProps,\n} from '@material-ui/core/TextField';\n\nimport {\n  clearReactReferencesInNode,\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  RcBaseSize,\n  RcTheme,\n  styled,\n  useEventCallback,\n  useForkRef,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport DeleteCircle from '../../../icon/DeleteCircle';\nimport { RcIconButtonProps } from '../../Buttons';\nimport { WithTooltipProps } from '../../Tooltip';\nimport { RcTypographyProps } from '../../Typography';\nimport { useRcFormContext } from '../Form/Form/FormContext';\nimport { ClearIconButton, TextFieldStyle } from './styles';\nimport {\n  RcOutlineTextFieldIconSizes,\n  RcOutlineTextFieldInputClasses,\n  RcTextFieldClasses,\n  RcTextFieldFormHelperTextClasses,\n  RcTextFieldInputClasses,\n  RcTextFieldInputLabelClasses,\n} from './utils';\n\ntype RcOutlineTextSizeRadius = keyof RcTheme['radius'];\n\ntype RcOutlineTextSize = RcBaseSize<'small' | 'medium' | 'large'>;\n\ntype RcTextFieldVariant = 'standard' | 'outline' | 'borderLess';\n\ntype RcTextFieldProps = {\n  /** variant type for different display TextField */\n  variant?: RcTextFieldVariant;\n  /** border radius for outline text field */\n  radius?: RcOutlineTextSizeRadius;\n  /** size for TextField when `variant=\"outline\"` */\n  size?: RcOutlineTextSize;\n  /** align for text */\n  align?: 'left' | 'center' | 'right';\n  /** set input text size when `variant=\"borderLess\"` */\n  textVariant?: RcTypographyProps['variant'];\n  /** is should show clear button */\n  clearBtn?: boolean;\n  /** when clear button trigger */\n  onClear?: React.MouseEventHandler<HTMLButtonElement>;\n  /** props apply on default clear button */\n  clearButtonProps?: RcIconButtonProps & WithTooltipProps;\n  /** If `true`, the input element will be `select` during the first mount. */\n  autoSelect?: boolean;\n\n  /** @deprecated please use `autoFocus` to replace that */\n  focusOnMount?: boolean;\n  /** @deprecated please use `autoSelect` to replace that */\n  selectOnMount?: boolean;\n  /** @deprecated */\n  autoFocusDelay?: number;\n  /** @deprecated clear button label, please use `clearButtonProps` with `title` replace that */\n  clearLabel?: string;\n  /** @deprecated clear button aria-label, use `clearButtonProps` with `aria-label` replace that */\n  clearAriaLabel?: string;\n  /** if you use validate, the error you pass in will not take effect anymore */\n  validate?: (value: RcTextFieldProps['value']) => string | false;\n} & RcBaseProps<\n  MuiStandardTextFieldProps,\n  | 'variant'\n  | 'color'\n  | 'hiddenLabel'\n  | 'select'\n  | 'SelectProps'\n  | 'size'\n  | 'margin'\n  | 'rowsMax'\n> &\n  Pick<RcTypographyProps, 'gutterBottom'>;\n\nconst combineOutlineClasses = combineClasses(\n  RcTextFieldInputClasses,\n  RcOutlineTextFieldInputClasses,\n);\n\nconst _RcTextField = forwardRef<any, RcTextFieldProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcTextField' });\n  const {\n    classes: classesProp,\n    InputLabelProps: InputLabelPropsProp,\n    FormHelperTextProps: FormHelperTextPropsProp,\n    value: valueProp,\n    focusOnMount,\n    selectOnMount,\n    clearAriaLabel,\n    // TODO: remove when remove focusOnMount\n    autoFocus: autoFocusProp = focusOnMount,\n    InputProps: InputPropsProp,\n    error,\n    helperText,\n    defaultValue,\n    inputRef: inputRefProp,\n    autoSelect = selectOnMount,\n    autoFocusDelay,\n    clearLabel,\n    clearButtonProps,\n    clearBtn,\n    validate,\n    onChange,\n    onBlur,\n    onFocus,\n    onClear,\n    id,\n    // #region outline pick props\n    variant,\n    radius,\n    size,\n    align,\n    textVariant,\n    gutterBottom,\n    // #endregion\n    ...rest\n  } = props;\n  const formContext = useRcFormContext();\n\n  const innerRef = useRef<HTMLInputElement>();\n  const inputRef = useForkRef(inputRefProp!, innerRef);\n\n  const [validateMessage, setValidateMessage] = useState('');\n\n  const runValidate = useEventCallback((value = valueProp) => {\n    let validateMessage: string | false = false;\n\n    if (validate) {\n      validateMessage = validate(value);\n\n      setValidateMessage(validateMessage !== false ? validateMessage : '');\n    }\n    return validateMessage;\n  });\n\n  const handleClear = useEventCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      const fakeEvent = { target: { value: '' } } as any;\n\n      onClear?.(event);\n      onChange?.(fakeEvent);\n      setValidateMessage('');\n    },\n  );\n\n  const endAdornment = useMemo(() => {\n    const getCleanButton = () => {\n      const iconTitle = clearLabel || clearButtonProps?.title;\n\n      const combineClearProps = combineProps(\n        {\n          TooltipProps: {\n            tooltipForceHide: !iconTitle,\n          },\n          onClick: handleClear,\n          size: RcOutlineTextFieldIconSizes[size!],\n        },\n        clearButtonProps,\n      );\n\n      return (\n        <ClearIconButton\n          title={iconTitle}\n          aria-label={clearAriaLabel || iconTitle}\n          symbol={DeleteCircle}\n          {...combineClearProps}\n        />\n      );\n    };\n\n    if (InputPropsProp?.endAdornment) {\n      if (clearBtn) {\n        return (\n          <>\n            {getCleanButton()}\n            {InputPropsProp.endAdornment}\n          </>\n        );\n      }\n      return InputPropsProp.endAdornment;\n    }\n\n    return clearBtn ? getCleanButton() : undefined;\n  }, [\n    InputPropsProp,\n    clearAriaLabel,\n    clearBtn,\n    clearButtonProps,\n    clearLabel,\n    handleClear,\n    size,\n  ]);\n\n  const events = useMemo(\n    () =>\n      combineProps(\n        {\n          onBlur: () => {\n            runValidate();\n          },\n          onFocus: () => {\n            if (validateMessage !== '') {\n              setValidateMessage('');\n            }\n          },\n        },\n        {\n          onBlur,\n          onFocus,\n        },\n      ),\n    [onBlur, onFocus, runValidate, validateMessage],\n  );\n\n  const classes = useMemo(\n    () => combineClasses(RcTextFieldClasses, classesProp),\n    [classesProp],\n  );\n\n  const InputProps = useMemo(() => {\n    const curr = {\n      outline: combineOutlineClasses,\n      borderLess: undefined,\n      standard: undefined,\n    }[variant!];\n\n    return combineProps(\n      {\n        classes: curr || RcTextFieldInputClasses,\n        disableUnderline: ['outline', 'borderLess', 'inline'].includes(\n          variant as any,\n        ),\n      },\n      {\n        ...InputPropsProp,\n        endAdornment,\n      },\n    );\n  }, [InputPropsProp, endAdornment, variant]);\n\n  const FormHelperTextProps = useMemo(\n    () =>\n      combineProps(\n        { classes: RcTextFieldFormHelperTextClasses },\n        FormHelperTextPropsProp,\n      ),\n    [FormHelperTextPropsProp],\n  );\n\n  const InputLabelProps = useMemo(\n    () =>\n      combineProps(\n        { classes: RcTextFieldInputLabelClasses, shrink: true },\n        InputLabelPropsProp,\n      ),\n    [InputLabelPropsProp],\n  );\n\n  useLayoutEffect(() => {\n    const inputElm = innerRef.current;\n    const autoFocus = autoFocusProp || InputPropsProp?.autoFocus;\n\n    let timerId: ReturnType<typeof setTimeout> | null = null;\n\n    if (autoSelect && inputElm?.value) {\n      inputElm.select();\n    } else {\n      const focus = () => inputElm?.focus();\n\n      if (autoFocus) {\n        if (autoFocusDelay) {\n          timerId = setTimeout(focus, autoFocusDelay);\n        } else {\n          focus();\n        }\n      }\n    }\n\n    return () => {\n      if (timerId) clearTimeout(timerId);\n\n      if (inputElm) {\n        clearReactReferencesInNode(inputElm);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (id) formContext.set(id, { validate: () => runValidate() });\n\n    return () => {\n      if (id) formContext.delete(id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <MuiTextField\n      {...rest}\n      {...events}\n      id={id}\n      value={valueProp}\n      onChange={onChange}\n      defaultValue={defaultValue}\n      error={validate ? !!validateMessage : error}\n      helperText={validateMessage || helperText}\n      classes={classes}\n      FormHelperTextProps={FormHelperTextProps}\n      InputLabelProps={InputLabelProps}\n      InputProps={InputProps}\n      inputRef={inputRef}\n      ref={ref}\n    />\n  );\n});\n\n/** @release */\nconst RcTextField = styled(\n  withDeprecatedCheck(\n    _RcTextField,\n    [\n      {\n        prop: 'focusOnMount',\n        time: '2021-4',\n        comment: `please use \\`autoFocus\\` to replace that`,\n      },\n      {\n        prop: 'selectOnMount',\n        time: '2021-4',\n        comment: `please use \\`autoSelect\\` to replace that`,\n      },\n      {\n        prop: 'clearLabel',\n        time: '2021-4',\n        comment: `clear button label, please use \\`clearButtonProps\\` with \\`title\\` replace that`,\n      },\n      {\n        prop: 'clearAriaLabel',\n        time: '2021-4',\n        comment: `clear button aria-label, use \\`clearButtonProps\\` with \\`aria-label\\` replace that`,\n      },\n    ],\n    'RcTextField',\n  ),\n)`\n  ${TextFieldStyle}\n`;\n\nRcTextField.defaultProps = {\n  clearBtn: true,\n  variant: 'standard',\n  radius: 'lg',\n  size: 'medium',\n  textVariant: 'subheading1',\n};\n\nRcTextField.displayName = 'RcTextField';\n\nexport { RcOutlineTextFieldIconSizes, RcTextField };\nexport type {\n  RcOutlineTextSize,\n  RcOutlineTextSizeRadius,\n  RcTextFieldProps,\n  RcTextFieldVariant,\n};\n","import {\n  css,\n  fakeBorder,\n  palette2,\n  px,\n  radius as radiusFn,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcTextFieldProps } from '../TextField';\nimport {\n  belowIconButtonSpacing,\n  RcOutlineTextFieldFontStyles,\n  RcOutlineTextFieldHeights,\n  RcOutlineTextFieldInputClasses,\n  RcOutlineTextFieldLabelMargins,\n  RcOutlineTextFieldSpaces,\n  RcTextFieldClasses,\n} from '../utils';\n\nexport const OutlineTextFieldStyle: RcThemedStyled<RcTextFieldProps, any> = ({\n  radius,\n  size,\n}) => {\n  const height = px(RcOutlineTextFieldHeights[size!]);\n  const { inside, outside, insideLeft } = RcOutlineTextFieldSpaces[size!];\n  const labelMargin = RcOutlineTextFieldLabelMargins[size!];\n  const typographyToken = RcOutlineTextFieldFontStyles[size!];\n\n  const currRadius = radiusFn(radius!);\n\n  // `-webkit-tap-highlight-color` for cover background color, prevent color be cover by browser\n  return css`\n    .${RcOutlineTextFieldInputClasses.input} {\n      ${typography(typographyToken)};\n    }\n\n    ${belowIconButtonSpacing(spacing(inside))};\n\n    * + .${RcOutlineTextFieldInputClasses.input} {\n      margin-left: ${spacing(insideLeft || inside)};\n    }\n\n    &.${RcTextFieldClasses.root} {\n      label + .${RcOutlineTextFieldInputClasses.root} {\n        margin-top: ${spacing(labelMargin)};\n      }\n    }\n\n    .${RcOutlineTextFieldInputClasses.root} {\n      -webkit-tap-highlight-color: transparent;\n      height: ${height};\n      min-height: ${height};\n      background: ${palette2('neutral', 'b01')};\n      padding: ${spacing(outside)};\n      border-radius: ${currRadius};\n\n      &:before {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        border-radius: ${currRadius};\n        transition: none;\n        border-bottom: none !important;\n        pointer-events: none;\n        ${fakeBorder({ color: palette2('neutral', 'l03') })};\n      }\n\n      &:not(.${RcOutlineTextFieldInputClasses.focused}):not(.${RcOutlineTextFieldInputClasses.disabled}):hover {\n        background: ${palette2('neutral', 'b02')};\n      }\n    }\n\n    .${RcOutlineTextFieldInputClasses.focused} {\n      &:before {\n        ${fakeBorder({ color: palette2('interactive', 'f01') })};\n      }\n    }\n\n    .${RcOutlineTextFieldInputClasses.error} {\n      &:before {\n        ${fakeBorder({ color: palette2('danger', 'f02') })};\n      }\n    }\n\n    .${RcOutlineTextFieldInputClasses.disabled} {\n      background: ${palette2('neutral', 'b03')};\n      &:before {\n        ${fakeBorder({ color: palette2('disabled', 'f02') })};\n      }\n    }\n  `;\n};\n","import {\n  css,\n  isFilled,\n  nonTouchHoverMedia,\n  palette2,\n  px,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcIconButtonSizes } from '../../../Buttons/IconButton/utils';\nimport { RcTextFieldProps } from '../TextField';\nimport {\n  belowIconButtonSpacing,\n  RcTextFieldClasses,\n  RcTextFieldFormHelperTextClasses,\n  RcTextFieldInputClasses,\n  RcTextFieldInputLabelClasses,\n} from '../utils';\nimport { ClearIconButton } from './ClearIconButton';\nimport { OutlineTextFieldStyle } from './OutlineTextFieldStyle';\n\nconst idleColor = palette2('neutral', 'f04');\n\nconst errorTextColor = palette2('danger', 'f02');\nconst errorColor = palette2('danger', 'f02');\n\nexport const textColor = palette2('neutral', 'f06');\n\nexport const disabledColor = palette2('disabled', 'f02');\nexport const placeholderColor = palette2('neutral', 'f03');\n\nexport const RcDefaultTextFieldWidth = '168px';\n\nconst focusWithNotDisabled = `.${RcTextFieldInputClasses.root}:hover:not(.${RcTextFieldInputClasses.disabled})`;\n\nconst TextFieldInputHoverFocusStyle = css`\n  ${ClearIconButton} {\n    display: inline-flex;\n  }\n`;\n\nexport const clearBtnInactiveStyle = css`\n  ${nonTouchHoverMedia} {\n    ${focusWithNotDisabled} {\n      ${TextFieldInputHoverFocusStyle}\n    }\n  }\n\n  .${RcTextFieldInputClasses.focused} {\n    ${TextFieldInputHoverFocusStyle}\n  }\n`;\n\nexport const TextFieldStyle: RcThemedStyled<RcTextFieldProps, any> = ({\n  value,\n  variant,\n  fullWidth,\n  clearBtn,\n  size,\n  textVariant,\n  gutterBottom,\n  align,\n}) => {\n  const showClean = isFilled({ value });\n\n  return css`\n    ${belowIconButtonSpacing(spacing(3))};\n\n    width: ${!fullWidth && RcDefaultTextFieldWidth};\n\n    ${gutterBottom &&\n    css`\n      &.${RcTextFieldClasses.root} {\n        margin: 0 0 ${spacing(4)} 0;\n      }\n    `};\n\n    .${RcTextFieldInputLabelClasses.root} {\n      ${typography('caption2')};\n      color: ${idleColor};\n      transform: scale(1);\n    }\n\n    .${RcTextFieldInputLabelClasses.focused} {\n      color: ${palette2('interactive', 'f01')};\n    }\n\n    .${RcTextFieldInputClasses.root} {\n      color: ${textColor};\n\n      ${ClearIconButton} {\n        display: none;\n      }\n    }\n\n    ${showClean && clearBtnInactiveStyle};\n\n    .${RcTextFieldInputClasses.input} {\n      ${typography(variant === 'borderLess' ? textVariant! : 'subheading1')};\n      text-align: ${align};\n\n      ::placeholder {\n        color: ${placeholderColor};\n        opacity: 1;\n      }\n\n      ${clearBtn &&\n      align &&\n      align !== 'left' &&\n      css`\n        width: calc(100% - ${px(RcIconButtonSizes[size!])});\n      `};\n    }\n\n    .${RcTextFieldInputClasses.underline} {\n      &:before {\n        border-bottom-color: ${palette2('neutral', 'f02')};\n      }\n\n      ${nonTouchHoverMedia} {\n        &:hover:not(.${RcTextFieldInputClasses.disabled}) {\n          &:before {\n            border-bottom-color: ${palette2('neutral', 'f06')};\n          }\n        }\n      }\n\n      &:after {\n        border-bottom-color: ${palette2('interactive', 'f01')};\n      }\n    }\n\n    .${RcTextFieldInputClasses.error} {\n      &:after {\n        border-bottom-color: ${errorColor};\n      }\n    }\n\n    .${RcTextFieldInputClasses.disabled} {\n      color: ${disabledColor};\n      // * safari need that in disabled input\n      -webkit-text-fill-color: ${disabledColor};\n      ::placeholder {\n        color: ${disabledColor};\n      }\n      &:before {\n        border-bottom-style: solid;\n        border-bottom-color: ${disabledColor};\n      }\n      &:after {\n        border-bottom-style: none;\n      }\n    }\n\n    .${RcTextFieldFormHelperTextClasses.root} {\n      ${typography('caption1')};\n      color: ${idleColor};\n    }\n\n    .${RcTextFieldFormHelperTextClasses.error},\n      .${RcTextFieldInputLabelClasses.error} {\n      color: ${errorTextColor};\n    }\n\n    .${RcTextFieldFormHelperTextClasses.disabled},\n      .${RcTextFieldInputLabelClasses.disabled} {\n      color: ${disabledColor};\n    }\n\n    /* clears the 'X' from Internet Explorer */\n    input[type='search']::-ms-clear,\n    input[type='search']::-ms-reveal {\n      display: none;\n      width: 0;\n      height: 0;\n    }\n\n    /* clears the 'X' from Chrome */\n    input[type='search']::-webkit-search-decoration,\n    input[type='search']::-webkit-search-cancel-button,\n    input[type='search']::-webkit-search-results-button,\n    input[type='search']::-webkit-search-results-decoration {\n      display: none;\n    }\n\n    ${variant === 'outline' && OutlineTextFieldStyle}\n  `;\n};\n","import {\n  css,\n  RcClasses,\n  RcThemedStyled,\n  spacing,\n} from '../../../../foundation';\nimport { RcIconButton } from '../../../Buttons/IconButton';\nimport { RcTextFieldProps } from '../TextField';\n\nexport const RcTextFieldClasses = RcClasses<RcTextFieldProps>(\n  ['root'],\n  'RcTextField',\n);\n\nexport const RcTextFieldInputClasses = RcClasses<\n  RcTextFieldProps['InputProps']\n>(\n  ['root', 'underline', 'error', 'focused', 'disabled', 'input'],\n  'RcTextFieldInput',\n);\n\nexport const RcTextFieldInputLabelClasses = RcClasses<\n  RcTextFieldProps['InputLabelProps']\n>(['root', 'error', 'focused', 'disabled'], 'RcTextFieldInputLabel');\n\nexport const RcTextFieldFormHelperTextClasses = RcClasses<\n  RcTextFieldProps['FormHelperTextProps']\n>(['root', 'error', 'disabled'], 'RcTextFieldFormHelperText');\n\nexport const belowIconButtonSpacing = (\n  spaceNum: ReturnType<typeof spacing>,\n) => {\n  const themeFn: RcThemedStyled<RcTextFieldProps, any> = ({ clearBtn }) => {\n    if (clearBtn) {\n      return css`\n        *:not(input) + ${RcIconButton} {\n          margin-left: ${spaceNum};\n        }\n      `;\n    }\n\n    return css`\n      ${RcIconButton} {\n        margin-left: ${spaceNum};\n      }\n    `;\n  };\n\n  return themeFn;\n};\n","import {\n  css,\n  fakeBorder,\n  nonTouchHoverMedia,\n  palette2,\n  RcThemedStyled,\n  spacing,\n} from '../../../../foundation';\nimport { RcTextareaProps } from '../Textarea';\nimport { RcTextareaInputClasses } from '../utils';\n\nexport const TextareaStyle: RcThemedStyled<RcTextareaProps, any> = ({\n  disabled,\n}) => {\n  return css`\n    .${RcTextareaInputClasses.inputMultiline} {\n      margin: ${spacing(1)} 0 0 0;\n\n      background: ${palette2('neutral', 'b03')};\n      ${fakeBorder()};\n      ${!disabled &&\n      css`\n        ${nonTouchHoverMedia} {\n          &:hover {\n            background: transparent;\n          }\n        }\n      `};\n    }\n\n    .${RcTextareaInputClasses.root} {\n      padding: 0;\n    }\n  `;\n};\n","import React, { forwardRef, useMemo } from 'react';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcTextField, RcTextFieldProps } from '../TextField';\nimport { TextareaStyle } from './styles';\nimport { RcTextareaInputClasses } from './utils';\n\ntype RcTextareaProps = {} & RcBaseProps<\n  RcTextFieldProps,\n  'clearBtn' | 'clearButtonProps' | 'clearLabel' | 'clearAriaLabel'\n>;\n\nconst _RcTextarea = forwardRef<any, RcTextareaProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcTextarea' });\n  const {\n    classes,\n    InputProps: InputPropsProp,\n    rows: rowsProp,\n    minRows,\n    maxRows,\n    ...rest\n  } = props;\n  const InputProps = useMemo(\n    () =>\n      combineProps(\n        {\n          classes: RcTextareaInputClasses,\n        },\n        InputPropsProp,\n      ),\n    [InputPropsProp],\n  );\n\n  let rows = rowsProp;\n\n  // when have minRows and maxRows, not set rows to Mui\n  if (minRows || maxRows) {\n    rows = undefined;\n  }\n\n  return (\n    <RcTextField\n      {...rest}\n      rows={rows}\n      minRows={minRows}\n      maxRows={maxRows}\n      multiline\n      InputProps={InputProps}\n      clearBtn={false}\n      ref={ref}\n    />\n  );\n});\n\n/** @release */\nconst RcTextarea = styled(_RcTextarea)`\n  ${TextareaStyle}\n`;\n\nRcTextarea.defaultProps = {\n  rows: 3,\n};\n\nRcTextarea.displayName = 'RcTextarea';\n\nexport { RcTextarea };\nexport type { RcTextareaProps };\n","import { ReactNode } from 'react';\n\nimport {\n  css,\n  getParsePaletteColor,\n  nonTouchHoverMedia,\n  palette2,\n  px,\n  RcBaseLabelPlacement,\n  RcClassesProps,\n  RcPaletteProp,\n  RcThemedStyled,\n  setOpacity,\n} from '../../../foundation';\nimport { RcIconButtonSize } from '../../Buttons/IconButton';\nimport { RcIconButtonSizes } from '../../Buttons/IconButton/utils';\n\nconst backgroundColor = palette2('neutral', 'f02');\nconst disabledColor = palette2('disabled', 'f02');\nconst errorColor = palette2('danger', 'b04');\n\nexport type CheckedStyledClasses = RcClassesProps<\n  'root' | 'checked' | 'disabled'\n>;\n\nexport type RcCheckedStyledProps<T = RcBaseLabelPlacement> = {\n  /** label for control */\n  label?: ReactNode;\n  /** formControlLabelProps when have label */\n  formControlLabelProps?: T;\n  /** that below icon size */\n  size?: RcIconButtonSize;\n  /** more palette color support */\n  color?: RcPaletteProp;\n  /** is that error */\n  error?: boolean;\n  /** show color when not checked */\n  followColorWhenUnChecked?: boolean;\n};\n\n/** provide custom color for check icon */\nexport const checkedStyles: RcThemedStyled<\n  RcCheckedStyledProps<any> & Required<CheckedStyledClasses>,\n  any\n> = ({ color, error, followColorWhenUnChecked, size, classes }) => {\n  const _color = error ? errorColor : getParsePaletteColor(color);\n  const ripplePaddingSize = px(RcIconButtonSizes[size!] / 2);\n\n  return css`\n    &.${classes.root} {\n      color: ${followColorWhenUnChecked ? _color : backgroundColor};\n      padding: ${ripplePaddingSize};\n\n      &.${classes.checked} {\n        color: ${_color};\n      }\n\n      ${nonTouchHoverMedia} {\n        &:hover {\n          background-color: ${setOpacity(\n            followColorWhenUnChecked ? _color : backgroundColor,\n            '12',\n          )};\n\n          &.${classes.checked} {\n            color: ${setOpacity(_color, '08', true)};\n            background-color: ${setOpacity(_color, '12')};\n          }\n        }\n      }\n\n      &.${classes.disabled} {\n        color: ${disabledColor};\n      }\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiGrid from '@material-ui/core/Grid';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { GridStyle } from './styles';\nimport { RcGridClasses } from './utils';\n\ntype RcGridProps = {} & RcBaseProps<ComponentProps<typeof MuiGrid>>;\n\nconst _RcGrid = forwardRef<any, RcGridProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcGrid' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcGridClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiGrid {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiGrid>\n  );\n});\n\nconst RcGrid = styled(_RcGrid)`\n  ${GridStyle}\n`;\n\nRcGrid.defaultProps = {};\n\nRcGrid.displayName = 'RcGrid';\n\nexport { RcGrid };\nexport type { RcGridProps };\n","import {\n  css,\n  getParsePaletteColor,\n  px,\n  RcThemedStyled,\n} from '../../../foundation';\nimport { RcIconProps } from '../Icon';\nimport { RcIconSizes, switchSize } from '../utils';\n\nexport const IconStyle: RcThemedStyled<RcIconProps, any> = (props) => {\n  const {\n    onClick,\n    size: sizeProp,\n    color,\n    iconColor: iconColorProp,\n    iconSize,\n  } = props;\n\n  // TODO: should remove switchSize in release\n  const size = switchSize(iconSize || sizeProp) as any;\n\n  const currentSize = RcIconSizes[size!];\n\n  const fontSize =\n    typeof currentSize === 'number' ? px(currentSize) : currentSize;\n\n  const iconColor = getParsePaletteColor(color || iconColorProp, null);\n\n  return css`\n    display: inline-flex;\n    cursor: ${onClick && 'pointer'};\n    font-size: ${fontSize};\n    color: ${iconColor};\n  `;\n};\n","import React, {\n  forwardRef,\n  FunctionComponent,\n  HTMLAttributes,\n  memo,\n} from 'react';\n\nimport clsx from 'clsx';\n\nimport {\n  RcBaseProps,\n  RcBaseSize,\n  RcPaletteProp,\n  styled,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../foundation';\nimport { RcCircularProgress, RcCircularProgressProps } from '../Progress';\nimport { IconStyle, StyledSvg } from './styles';\nimport { RcIconSizes } from './utils';\nimport { useIconService } from './utils/IconService';\n\nexport type RcIconSize = RcBaseSize<\n  | 'xsmall'\n  | 'small'\n  | 'medium'\n  | 'large'\n  | 'inherit'\n  | 'xlarge'\n  | 'xxlarge'\n  | 'xxxlarge'\n>;\n\n// TODO this will be removed when released.\n/** @deprecated please use `RcIconSize` */\nexport type IconSize =\n  | 'extraSmall'\n  | 'small'\n  | 'medium'\n  | 'large'\n  | 'inherit'\n  | 'moreLarge'\n  | 'extraLarge'\n  | 'mediumLarge';\n\ntype BrowserSpriteSymbol = {\n  id: string;\n  viewBox: string;\n  content: string;\n  node?: SVGSymbolElement;\n};\n\ntype SvgSymbol = BrowserSpriteSymbol | React.ComponentType<any>;\n\ntype RcIconProps = {\n  /** Component for render */\n  symbol?: SvgSymbol;\n  /** is that icon replace to loading */\n  loading?: boolean;\n  /** Props send to `RcCircularProgress` when loading is `true` */\n  CircularProgressProps?: RcCircularProgressProps;\n  /** color of icon */\n  color?: RcPaletteProp;\n  /** size of icon */\n  size?: RcIconSize;\n  // ---------------------@deprecated-----------------------------\n  /** @deprecated use CircularProgressProps to replace that */\n  loadingSize?: RcCircularProgressProps['size'];\n  /** @deprecated use loading to replace that */\n  useLoading?: boolean;\n  /** @deprecated this props will be remove when using svg */\n  icon?: string;\n  /** @deprecated */\n  desc?: string;\n  /** @deprecated use color replace that */\n  iconColor?: RcPaletteProp;\n  /** @deprecated use size replace that */\n  iconSize?: IconSize;\n} & RcBaseProps<HTMLAttributes<HTMLSpanElement>, 'color'>;\n\n/**\n * * this is a component alway have same props,\n * * that just for render a icon, so here we can memo that\n */\nconst _RcIcon = memo(\n  forwardRef<any, RcIconProps>((inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcIcon' });\n    const {\n      loadingSize,\n      useLoading,\n      iconColor,\n      iconSize,\n      icon,\n      desc,\n      className,\n      loading = useLoading,\n      CircularProgressProps,\n      symbol,\n      children,\n      // * pick props\n      color,\n      size,\n      ...rest\n    } = props;\n    const { iconMap = {} } = useIconService();\n\n    let href = '';\n    let Icon: FunctionComponent | null = null;\n    let iconName: string = '';\n    let renderDom;\n\n    if (symbol) {\n      if (typeof symbol === 'object' && symbol.id) {\n        href = `#${symbol.id}`;\n        iconName = `${symbol.id}`;\n      } else {\n        Icon = symbol as FunctionComponent;\n        renderDom = <Icon />;\n        iconName = symbol['iconName'];\n      }\n      // TODO: this will be remove when all using svg\n    } else if (typeof children === 'string' || icon) {\n      const childrenIconKey = (children && children.toString()) || icon || '';\n      Icon = iconMap[childrenIconKey];\n\n      iconName = childrenIconKey;\n\n      if (Icon) {\n        renderDom = <Icon />;\n      }\n    } else {\n      renderDom = children;\n    }\n\n    const _className = clsx(className, iconName, 'icon');\n\n    if (loading) {\n      const progressSize = RcIconSizes[size!];\n\n      return (\n        <RcCircularProgress\n          // TODO: here will be remove when loadingSize remove\n          size={\n            loadingSize || typeof progressSize === 'string'\n              ? '1em' // default size as 16px\n              : progressSize\n          }\n          ref={ref}\n          {...CircularProgressProps}\n        />\n      );\n    }\n\n    return (\n      <span className={_className} {...rest} ref={ref}>\n        {renderDom && <StyledSvg>{renderDom}</StyledSvg>}\n        {href && (\n          <StyledSvg>\n            <svg role=\"img\">\n              {!!desc && <title>{desc}</title>}\n              <use xlinkHref={href} href={href} />\n            </svg>\n          </StyledSvg>\n        )}\n      </span>\n    );\n  }),\n);\n\nconst RcIcon = styled(\n  withDeprecatedCheck(\n    _RcIcon,\n    [\n      {\n        prop: 'icon',\n        time: '2021-1',\n        comment: 'please use symbol to replace icon',\n      },\n      {\n        prop: 'children',\n        time: '2021-1',\n        comment: 'please use symbol to replace children',\n      },\n      {\n        prop: 'iconSize',\n        time: '2021-1',\n        comment: 'please use size',\n      },\n      {\n        prop: 'iconColor',\n        time: '2021-1',\n        comment: 'please use color',\n      },\n      {\n        prop: 'useLoading',\n        time: '2021-1',\n        comment: 'please use loading',\n      },\n      {\n        prop: 'loadingSize',\n        time: '2021-1',\n        comment:\n          'please use CircularProgressProps={{ size: 24 }} to set custom loading size',\n      },\n      {\n        prop: 'desc',\n        time: '2021-1',\n        comment: 'please use symbol',\n      },\n    ],\n    'RcIcon',\n  ),\n)`\n  ${IconStyle}\n`;\n\nRcIcon.defaultProps = {\n  size: 'large',\n};\nRcIcon.displayName = 'RcIcon';\n\nexport { RcIcon };\nexport type { RcIconProps, SvgSymbol };\n","import React, {\n  ComponentType,\n  createRef,\n  RefObject,\n  SyntheticEvent,\n} from 'react';\n\nimport cloneDeep from 'lodash/cloneDeep';\nimport values from 'lodash/values';\n\nimport styled from '../../foundation/styled-components';\nimport ImageBroken from '../../icon/ImageBroken';\nimport { RcIcon } from '../Icon';\n\nconst StyledLoadingPage = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst StyledBackground = styled.div<{\n  visibility: string;\n  height?: number;\n  width?: number;\n}>`\n  display: block;\n  overflow: hidden;\n  box-shadow: ${({ theme }) => theme.shadows[7]};\n  visibility: ${({ visibility }) => visibility};\n  user-select: none;\n  height: ${({ height }) => height}px;\n  width: ${({ width }) => width}px;\n`;\n\nconst HiddenImage = styled.img`\n  visibility: hidden;\n  display: none;\n`;\n\ntype RcImageProps = React.DetailedHTMLProps<\n  React.ImgHTMLAttributes<HTMLImageElement>,\n  HTMLImageElement\n> & {\n  imageRef?: RefObject<HTMLDivElement & HTMLImageElement>;\n  loadingPlaceHolder?: ComponentType<any>;\n  thumbnailSrc?: string;\n  onSizeLoad?: (naturalWidth: number, naturalHeight: number) => void;\n  onLoad?: () => void;\n  onError?: () => void;\n  performanceTracerStart?: () => void;\n  performanceTracerEnd?: () => void;\n  width?: number;\n  height?: number;\n};\n\ntype RcImageState = {\n  currentShow: 'raw' | 'thumbnail';\n  loadings: {\n    raw: boolean;\n    thumbnail?: boolean;\n  };\n  errors: {\n    raw: boolean;\n    thumbnail?: boolean;\n  };\n};\n\nfunction isThumbnailMode(props: RcImageProps) {\n  return props.thumbnailSrc && props.thumbnailSrc !== props.src;\n}\n\nclass RcImageView extends React.Component<RcImageProps, RcImageState> {\n  static initState: RcImageState = {\n    loadings: {\n      raw: true,\n    },\n    errors: {\n      raw: false,\n    },\n    currentShow: 'raw',\n  };\n\n  static initThumbnailModeState: RcImageState = {\n    loadings: {\n      raw: true,\n      thumbnail: true,\n    },\n    errors: {\n      raw: false,\n      thumbnail: false,\n    },\n    currentShow: 'thumbnail',\n  };\n\n  private _imageRef: RefObject<HTMLDivElement & HTMLImageElement> = createRef();\n\n  private _canvasRef: RefObject<HTMLCanvasElement> = createRef();\n\n  constructor(props: RcImageProps) {\n    super(props);\n    const { performanceTracerStart } = this.props;\n    performanceTracerStart?.();\n    this.state = this.getInitState(props);\n    const { width, height, onSizeLoad } = this.props;\n    if (width && height && onSizeLoad) {\n      onSizeLoad?.(Number(width), Number(height));\n    }\n  }\n\n  getInitState(props: RcImageProps): RcImageState {\n    if (isThumbnailMode(props)) {\n      return cloneDeep(RcImageView.initThumbnailModeState);\n    }\n    return cloneDeep(RcImageView.initState);\n  }\n\n  getImageRef = (): RefObject<HTMLDivElement & HTMLImageElement> =>\n    this.props.imageRef || this._imageRef;\n\n  private _errorView() {\n    if (!this.error) {\n      return null;\n    }\n    return (\n      <StyledLoadingPage>\n        <RcIcon size=\"xxxlarge\" color=\"neutral.f02\" symbol={ImageBroken} />\n      </StyledLoadingPage>\n    );\n  }\n\n  private _hiddenRawLoader() {\n    const { loadings, errors, currentShow } = this.state;\n    const { onSizeLoad, src } = this.props;\n    return (\n      currentShow !== 'raw' && (\n        <HiddenImage\n          src={src}\n          onLoad={(event: SyntheticEvent<HTMLImageElement>) => {\n            const { naturalWidth, naturalHeight } = event.currentTarget;\n            onSizeLoad?.(naturalWidth, naturalHeight);\n            this.setState({\n              loadings: {\n                ...loadings,\n                raw: false,\n              },\n              currentShow: 'raw',\n            });\n          }}\n          onError={() => {\n            this.setState({\n              loadings: {\n                ...loadings,\n                raw: false,\n              },\n              errors: {\n                ...errors,\n                raw: true,\n              },\n            });\n          }}\n        />\n      )\n    );\n  }\n\n  get error() {\n    const { errors } = this.state;\n    return values(errors).every((status: boolean) => status);\n  }\n\n  private _drawToCanvas = (imgBitmap: ImageBitmap | HTMLImageElement) => {\n    const canvasE = this._canvasRef.current;\n    if (!canvasE) {\n      return;\n    }\n    const ctx = canvasE.getContext('2d');\n    if (ctx) {\n      if (!imgBitmap) {\n        return;\n      }\n      const { width: naturalWidth, height: naturalHeight } = imgBitmap;\n      canvasE.width = naturalWidth;\n      canvasE.height = naturalHeight;\n      ctx.drawImage(\n        imgBitmap,\n        0,\n        0,\n        naturalWidth,\n        naturalHeight,\n        0,\n        0,\n        naturalWidth,\n        naturalHeight,\n      );\n    }\n  };\n\n  private _loadHandler = async (event: SyntheticEvent<HTMLImageElement>) => {\n    const { loadings, currentShow } = this.state;\n    const { onSizeLoad, onLoad } = this.props;\n    if (currentShow === 'raw') {\n      const { naturalWidth, naturalHeight } = event.currentTarget;\n      onSizeLoad?.(naturalWidth, naturalHeight);\n      onLoad?.();\n      const { performanceTracerEnd } = this.props;\n      performanceTracerEnd?.();\n    }\n    this.setState({\n      loadings: {\n        ...loadings,\n        [currentShow]: false,\n      },\n    });\n    if (!this._canvasRef.current) {\n      return;\n    }\n    const target = event.target as HTMLImageElement;\n    if ('createImageBitmap' in window) {\n      const bitmap = await createImageBitmap(target);\n      this._drawToCanvas(bitmap);\n    } else {\n      this._drawToCanvas(target);\n    }\n  };\n\n  private _errorHandler = () => {\n    const { loadings, errors, currentShow } = this.state;\n    const { onError } = this.props;\n    if (currentShow === 'raw') {\n      onError?.();\n    }\n    this.setState({\n      loadings: {\n        ...loadings,\n        [currentShow]: false,\n      },\n      errors: {\n        ...errors,\n        [currentShow]: true,\n      },\n    });\n    onError?.();\n  };\n\n  get _imageAttributes() {\n    const {\n      onSizeLoad,\n      onLoad,\n      onError,\n      loadingPlaceHolder,\n      imageRef: viewRef,\n      thumbnailSrc,\n      src,\n      performanceTracerEnd,\n      performanceTracerStart,\n      ...rest\n    } = this.props;\n    return { ...rest, ref: this.getImageRef() };\n  }\n\n  private rawImageLoader = () => {\n    const { currentShow } = this.state;\n    const { thumbnailSrc, src } = this.props;\n    const currentShowSrc = currentShow === 'raw' ? src : thumbnailSrc;\n    if (!currentShowSrc) {\n      return null;\n    }\n    const pathName = new URL(currentShowSrc).pathname;\n    const isGif = /\\.gif$/.test(pathName);\n    if (isGif) {\n      return (\n        <img\n          src={currentShowSrc}\n          alt=\"\"\n          onLoad={this._loadHandler}\n          onError={this._errorHandler}\n          {...this._imageAttributes}\n        />\n      );\n    }\n    return (\n      <>\n        {this.canvasRenderer()}\n        <HiddenImage\n          src={currentShowSrc}\n          onLoad={this._loadHandler}\n          onError={this._errorHandler}\n        />\n      </>\n    );\n  };\n\n  canvasRenderer = () => {\n    return (\n      <StyledBackground\n        {...this._imageAttributes}\n        visibility={this.error ? 'hidden' : 'visible'}\n      >\n        <canvas ref={this._canvasRef} style={{ width: '100%' }} />\n      </StyledBackground>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        {this.rawImageLoader()}\n        {this._hiddenRawLoader()}\n        {this._errorView()}\n      </>\n    );\n  }\n}\nexport { RcImageView };\n","import { css, palette2, radius } from '../../../foundation';\nimport { RcInlineEditableClasses } from '../utils';\n\nconst interactionStyle = css`\n  background-color: ${palette2('neutral', 'b01')};\n`;\n\nconst baseInputStyles = css`\n  position: absolute;\n  width: 100%;\n  border: 1px solid transparent;\n  padding: 2px;\n  background-color: transparent;\n  color: transparent;\n  line-height: inherit;\n  white-space: pre-wrap;\n  box-sizing: border-box;\n  font: inherit;\n  outline: none;\n  border-radius: ${radius('lg')};\n\n  ::placeholder {\n    font: inherit;\n    opacity: 0;\n    color: ${palette2('neutral', 'f03')};\n  }\n\n  &:hover {\n    ${interactionStyle};\n    border: 1px solid ${palette2('neutral', 'l02')};\n  }\n\n  &:focus {\n    ${interactionStyle};\n    border: 2px solid ${palette2('interactive', 'f01')};\n    color: inherit;\n\n    ::placeholder {\n      opacity: 1;\n    }\n\n    & ~ .${RcInlineEditableClasses.label} {\n      visibility: hidden;\n    }\n  }\n`;\n\nexport const inputStyle = css`\n  ${baseInputStyles}\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`;\n\nexport const textareaStyle = css`\n  ${baseInputStyles};\n  height: 100%;\n  overflow: hidden;\n  resize: none;\n`;\n","import {\n  css,\n  ellipsis,\n  getParsePaletteColor,\n  RcThemedStyled,\n  typography,\n} from '../../../foundation';\nimport { placeholderColor } from '../../Forms/TextField/styles';\nimport { RcInlineEditableProps } from '../InlineEditable';\nimport { RcInlineEditableClasses } from '../utils';\nimport { inputStyle, textareaStyle } from './textFieldStyle';\n\nexport const InlineEditableStyle: RcThemedStyled<RcInlineEditableProps, any> =\n  ({ variant, multiline, fullWidth, disabled, color }) => {\n    return css`\n      ${typography(variant!)};\n      position: relative;\n      display: inline-block;\n      width: ${multiline || fullWidth ? '100%' : 'auto'};\n      min-width: 32px;\n      margin: -4px;\n      color: ${getParsePaletteColor(color)};\n\n      &.${RcInlineEditableClasses.saving} {\n        pointer-events: none;\n      }\n\n      .${RcInlineEditableClasses.label} {\n        margin: 4px;\n        position: relative;\n        outline: none;\n        box-sizing: border-box;\n        pointer-events: ${disabled ? 'initial' : 'none'};\n        ${ellipsis()};\n        overflow-wrap: ${multiline && 'anywhere'};\n        white-space: ${multiline ? 'pre-wrap' : 'pre'};\n\n        ${\n          ''\n          /*\n        1. the single '\\n' would be ignore in the last line. so need append ' ' after '\\n' when multiline.\n        2. need keep content height when placeholder is empty.\n        */\n        }\n        ::after {\n          content: ' ';\n          width: 0;\n          visibility: hidden;\n          display: inline-block;\n        }\n\n        ${\n          '' /* prevent select double content when the input has a value and not disabled (input would be removed when disabled) */\n        }\n        user-select: ${!disabled && 'none'};\n      }\n\n      .${RcInlineEditableClasses.placeholder} {\n        ${\n          '' /* prevent select placeholder when the input does not have a value */\n        }\n        user-select: none;\n        color: ${placeholderColor};\n      }\n\n      .${RcInlineEditableClasses.textField} {\n        ${multiline ? textareaStyle : inputStyle}\n      }\n    `;\n  };\n","import React, {\n  CSSProperties,\n  DOMAttributes,\n  forwardRef,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\nimport clsx from 'clsx';\nimport isString from 'lodash/isString';\nimport trimEnd from 'lodash/trimEnd';\n\nimport { InputProps } from '@material-ui/core/Input';\n\nimport {\n  clearReactReferencesInNode,\n  clearWindowSelection,\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  RcClassesProps,\n  RcPaletteKeys,\n  RcTypographyKeys,\n  styled,\n  useDepsChange,\n  useEventCallback,\n  useRefState,\n  useThemeProps,\n} from '../../foundation';\nimport { RcTooltip, RcTooltipProps } from '../Tooltip';\nimport { InlineEditableStyle } from './styles';\nimport { RcInlineEditableClasses } from './utils';\n\ntype RcInlineEditableOnChangeReason = 'leave' | 'confirm';\n\ntype RcInlineEditableProps = {\n  /** inline value */\n  value: string;\n  /**\n   * trigger when value change apply\n   *\n   * reason:\n   * - leave: trigger when blur input\n   * - confirm: trigger when keydown enter\n   */\n  onChange?: (value: string, reason?: RcInlineEditableOnChangeReason) => void;\n  /** text variant, default is `body1` */\n  variant?: RcTypographyKeys;\n  /** color for apply to text, support full palette, default is `neutral.f06` */\n  color?: RcPaletteKeys;\n  /** maxLength of that value */\n  maxLength?: number;\n  /**\n   * If `true`, a textarea element will be rendered instead of an input.\n   */\n  multiline?: boolean;\n  /**\n   * If `true`, the editable state will be saving mode\n   */\n  saving?: boolean;\n  /**\n   * If `true`, the editable state will be disable, just plain string render.\n   */\n  disabled?: boolean;\n  /**\n   * The short hint displayed in the input before the user enters a value.\n   */\n  placeholder?: string;\n  /**\n   * class apply to root component\n   */\n  className?: string;\n  /**\n   * class apply to root component\n   */\n  style?: CSSProperties;\n  /**\n   * If `true`, the input will take up the full width of its container.\n   */\n  fullWidth?: boolean;\n  /** apply title on label */\n  title?: string;\n  /** props for pass into `RcTooltip` when is not editing */\n  TooltipProps?: RcBaseProps<RcTooltipProps, 'children'>;\n\n  /** @deprecated not need set anymore */\n  shouldRemoveNode?: boolean;\n  /** @deprecated use `data-test-automation-id=\"your-key\"` directly */\n  automationId?: string;\n  /**\n   * @deprecated\n   * use `onChange` to replace that, if your have async method,\n   * should set `saving` when async method not complete\n   */\n  onSave?: (draft: string) => void;\n  /** @deprecated use `TooltipProps` with `title` to replace that */\n  tooltipTitle?: string;\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps?: InputProps['inputProps'];\n} & Pick<\n  DOMAttributes<HTMLDivElement>,\n  'onKeyDown' | 'onFocus' | 'onBlur' | 'onMouseDown'\n> &\n  RcClassesProps<'placeholder' | 'label' | 'textField' | 'saving'>;\n\nconst _RcInlineEditable = forwardRef<any, RcInlineEditableProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcInlineEditable' });\n    const {\n      onSave,\n      automationId,\n      tooltipTitle,\n      shouldRemoveNode = true,\n      TooltipProps,\n      onChange,\n      onKeyDown,\n      onFocus,\n      onBlur,\n      onMouseDown,\n      value,\n      variant,\n      multiline,\n      disabled,\n      maxLength,\n      placeholder,\n      fullWidth,\n      title,\n      classes: classesProp,\n      color,\n      className,\n      saving: savingProp,\n      inputProps,\n      ...rest\n    } = props;\n\n    const [isEditing, setEditing] = useState(false);\n    const [isSaving, setSaving] = useState(false);\n\n    const [draftRef, setDraft] = useRefState('');\n\n    const isNotNeedSaveWhenBlurRef = useRef(false);\n\n    const textFieldRef = useRef<HTMLInputElement & HTMLTextAreaElement>();\n\n    const labelRef = useRef<HTMLDivElement>(null);\n\n    const saving = isSaving || savingProp;\n\n    const handleSave = async (\n      newValue: string,\n      reason?: RcInlineEditableOnChangeReason,\n    ) => {\n      const outputValue = multiline ? trimEnd(newValue) : newValue.trim();\n\n      if (value !== newValue) {\n        if (onChange) {\n          onChange?.(outputValue, reason);\n        } else if (onSave) {\n          // TODO: that method will be remove\n          setSaving(true);\n          await onSave?.(outputValue);\n          setSaving(false);\n        }\n      }\n    };\n\n    const handleKeyDown = useEventCallback(\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\n        onKeyDown?.(e);\n        const { key, shiftKey } = e;\n\n        if (!isEditing || (multiline && key === 'Enter' && shiftKey)) {\n          return;\n        }\n\n        const moveFocus = () => {\n          e.stopPropagation();\n          e.preventDefault();\n\n          if (textFieldRef.current) {\n            isNotNeedSaveWhenBlurRef.current = true;\n            // * enter/esc should blur the input (tab does this automatically)\n            textFieldRef.current.blur();\n\n            // ! blur input will move the focus to body\n            // * should trap the focus at current position for esc/tab to work\n            labelRef.current?.focus({ preventScroll: true });\n          }\n        };\n\n        switch (key) {\n          case 'Enter':\n            moveFocus();\n            handleSave(draftRef.current, 'confirm');\n            break;\n          case 'Escape':\n            moveFocus();\n            break;\n\n          default:\n            break;\n        }\n      },\n    );\n\n    const handleFocus = useEventCallback((e) => {\n      onFocus?.(e);\n      setEditing(true);\n    });\n\n    const focusTextField = useEventCallback(\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\n        if (e.key === 'Enter') {\n          textFieldRef.current?.focus({ preventScroll: true });\n          e.preventDefault();\n        }\n      },\n    );\n\n    const handleBlur = useEventCallback((e) => {\n      onBlur?.(e);\n      // * clear selection for make that can select all when refocus\n      clearWindowSelection();\n\n      const isNeedSave = !isNotNeedSaveWhenBlurRef.current;\n\n      // * when already save in keydown, not need save again\n      if (isNeedSave) {\n        handleSave(draftRef.current, 'leave');\n      }\n\n      setEditing(false);\n      isNotNeedSaveWhenBlurRef.current = false;\n    });\n\n    const handleMouseDown = useEventCallback((e) => {\n      onMouseDown?.(e);\n      if (disabled) return;\n\n      setEditing(true);\n    });\n\n    const handleDraftChange = useEventCallback(\n      (\n        e:\n          | React.ChangeEvent<HTMLInputElement>\n          | React.ChangeEvent<HTMLTextAreaElement>,\n      ) => {\n        setDraft(e.target.value);\n      },\n    );\n\n    const handleFocusCapture = useEventCallback((e) => {\n      e.stopPropagation();\n    });\n\n    const classes = useMemo(\n      () => combineClasses(RcInlineEditableClasses, classesProp),\n      [classesProp],\n    );\n\n    useEffect(() => {\n      return () => {\n        if (shouldRemoveNode && textFieldRef && textFieldRef.current) {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          clearReactReferencesInNode(textFieldRef.current);\n        }\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const Component = multiline ? 'textarea' : 'input';\n\n    useDepsChange(() => {\n      if (!(isEditing || saving)) {\n        setDraft(value, false);\n      }\n    }, [isEditing, saving, value]);\n\n    const draft = draftRef.current;\n\n    const displayValue = isEditing || saving ? draft : value;\n\n    const toTooltipTitle =\n      (isString(TooltipProps?.title) ? TooltipProps?.title : undefined) ??\n      tooltipTitle;\n\n    const children = (\n      <div\n        ref={ref}\n        data-test-automation-id={automationId}\n        onKeyDown={handleKeyDown}\n        className={clsx(className, {\n          [classes.saving]: saving,\n        })}\n        onMouseDown={handleMouseDown}\n        {...rest}\n      >\n        {disabled ? null : (\n          <Component\n            ref={textFieldRef as any}\n            value={draft}\n            autoComplete=\"off\"\n            maxLength={maxLength}\n            placeholder={placeholder}\n            {...{\n              ...(multiline\n                ? {}\n                : {\n                    type: 'text',\n                    'aria-label': toTooltipTitle,\n                  }),\n            }}\n            {...combineProps(\n              {\n                onChange: handleDraftChange,\n                onFocus: handleFocus,\n                onBlurCapture: handleBlur,\n                className: classes.textField,\n              },\n              inputProps,\n            )}\n          />\n        )}\n        <div\n          ref={labelRef}\n          title={title || displayValue}\n          className={clsx(classes.label, {\n            [classes.placeholder]: !displayValue,\n          })}\n          tabIndex={-1}\n          onFocusCapture={handleFocusCapture}\n          onKeyDown={disabled || saving ? undefined : focusTextField}\n        >\n          {displayValue || placeholder}\n        </div>\n      </div>\n    );\n\n    if (!disabled && toTooltipTitle && (TooltipProps || tooltipTitle)) {\n      return (\n        <RcTooltip\n          tooltipForceHide={isEditing}\n          disableFocusListener\n          {...TooltipProps}\n          title={toTooltipTitle}\n        >\n          {children}\n        </RcTooltip>\n      );\n    }\n\n    return children;\n  },\n);\n\nconst RcInlineEditable = styled(_RcInlineEditable)`\n  ${InlineEditableStyle}\n`;\n\nRcInlineEditable.defaultProps = {\n  variant: 'body1',\n  color: 'neutral.f06',\n};\n\nRcInlineEditable.displayName = 'RcInlineEditable';\n\nexport { RcInlineEditable };\nexport type { RcInlineEditableProps };\n","import {\n  css,\n  focusVisible,\n  getParsePaletteColor,\n  nonTouchHoverMedia,\n  palette2,\n  RcThemedStyled,\n  setOpacity,\n  typography,\n} from '../../../foundation';\nimport { RcLinkProps } from '../Link';\nimport { RcLinkTypographies } from '../utils';\n\nexport const LinkStyle: RcThemedStyled<RcLinkProps, any> = ({\n  disabled,\n  color: colorProp,\n  size,\n  underline,\n  variant,\n}) => {\n  const color = disabled\n    ? palette2('disabled', 'f02')\n    : colorProp === 'primary'\n    ? palette2('informative', 'f02')\n    : getParsePaletteColor(colorProp);\n\n  return css`\n    text-decoration: ${underline ? 'underline' : 'none'};\n    ${typography(RcLinkTypographies[size!] || variant)};\n    color: ${color};\n\n    &:focus {\n      outline: none;\n    }\n\n    ${focusVisible} {\n      text-decoration: underline;\n    }\n\n    ${!disabled\n      ? css`\n          cursor: pointer;\n\n          ${nonTouchHoverMedia} {\n            &:hover {\n              text-decoration: underline;\n            }\n          }\n\n          &:active {\n            color: ${setOpacity(color, '24', true)};\n          }\n        `\n      : css`\n          pointer-events: none;\n        `};\n  `;\n};\n","import React, { AnchorHTMLAttributes, forwardRef } from 'react';\n\nimport {\n  RcBaseProps,\n  RcBaseSize,\n  RcPaletteProp,\n  styled,\n  useA11yKeyEvent,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../foundation';\nimport { RcTypographyVariant } from '../Typography';\nimport { LinkStyle } from './styles';\n\ntype RcLinkSize = RcBaseSize;\n\ntype RcLinkProps = {\n  /** variant of Link, default is body1 */\n  variant?: RcTypographyVariant;\n  /** is that link is disabled */\n  disabled?: boolean;\n  /** color for Link display, support palette pass */\n  color?: RcPaletteProp;\n  /** root render element, default is `<a />` */\n  Component?: keyof JSX.IntrinsicElements;\n  /** is that have underline default */\n  underline?: boolean;\n  /** is that href can be download */\n  download?: boolean;\n  /**\n   * @deprecated size of Link, default is medium, please use variant directly\n   * `small` => `caption1`\n   * `medium` => `body1`\n   * `large` => `headline1`\n   */\n  size?: RcLinkSize;\n  /** @deprecated use onClick replace that */\n  handleOnClick?:\n    | ((event: React.MouseEvent<HTMLSpanElement>) => void)\n    | undefined;\n} & RcBaseProps<AnchorHTMLAttributes<HTMLAnchorElement>, 'download' | 'color'>;\n\nconst _RcLink = forwardRef<any, RcLinkProps>((inProps: RcLinkProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcLink' });\n  const {\n    handleOnClick: _handleOnClick,\n    Component: ComponentProp,\n    onKeyDown,\n    onClick,\n    disabled,\n    children,\n    tabIndex,\n    color,\n    underline,\n    variant,\n    ...rest\n  } = props;\n\n  // TODO: remove when handleOnClick removed\n  const handleOnClick = _handleOnClick ? _handleOnClick : onClick;\n\n  const handleOnKeyDown = useA11yKeyEvent(handleOnClick, {\n    checkKeys: ['Enter'],\n  });\n\n  // * prevent tsc error with dynamic component type\n  const Component = ComponentProp! as any;\n  return (\n    <Component\n      {...rest}\n      tabIndex={disabled ? -1 : tabIndex}\n      ref={ref}\n      onClick={handleOnClick}\n      onKeyDown={onKeyDown || handleOnKeyDown}\n    >\n      {children}\n    </Component>\n  );\n});\n\n/**\n * @release\n * that onClick event will be trigger with `enter` like `<a>`, when have custom onKeydown event, that will be cover by outside\n * */\nconst RcLink = styled(\n  withDeprecatedCheck(\n    _RcLink,\n    [\n      {\n        prop: 'size',\n        time: '2021-4',\n        comment: `@deprecated size of Link, default is medium, please use variant directly\n   * \\`small\\` => \\`caption1\\`\n   * \\`medium\\` => \\`body1\\`\n   * \\`large\\` => \\`headline1\\`\n   */`,\n      },\n      {\n        prop: 'handleOnClick',\n        time: '2021-4',\n        comment: `@deprecated use onClick replace that */`,\n      },\n    ],\n    'RcLink',\n  ),\n)`\n  ${LinkStyle}\n`;\n\nRcLink.defaultProps = {\n  variant: 'body1',\n  color: 'informative.f02',\n  disabled: false,\n  Component: 'a',\n};\n\nRcLink.displayName = 'RcLink';\n\nexport { RcLink };\nexport type { RcLinkProps, RcLinkSize };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiList from '@material-ui/core/List';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { ListStyle } from './styles';\nimport { RcListClasses } from './utils';\n\ntype RcListProps = {} & RcBaseProps<ComponentProps<typeof MuiList>>;\n\nconst _RcList = forwardRef<any, RcListProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcList' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcListClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiList {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiList>\n  );\n});\n\nconst RcList = styled(_RcList)`\n  ${ListStyle}\n`;\n\nRcList.defaultProps = {\n  disablePadding: true,\n};\n\nRcList.displayName = 'RcList';\n\nexport { RcList };\nexport type { RcListProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiListItem from '@material-ui/core/ListItem';\n\nimport {\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  RcBaseSize,\n  RcPaletteProp,\n  styled,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport { withTooltip, WithTooltipProps } from '../../Tooltip';\nimport { ListItemStyle } from './styles';\nimport {\n  RcListItemClasses,\n  RcListItemMultilineClassName,\n  RcListItemRippleClasses,\n} from './utils';\n\ntype RcListItemColor = 'primary' | 'secondary' | 'black';\n\ntype RcListItemSize = RcBaseSize<'small' | 'medium'>;\n\ntype RcListItemProps = {\n  /** ListItem size, default is 'medium' */\n  size?: RcListItemSize;\n  /** ? when hover on item, display different background, default is true */\n  canHover?: boolean;\n  /** ? display of ListItem */\n  isInline?: boolean;\n  /** is single line, default is false */\n  singleLine?: boolean;\n  /**\n   * listItem use this color to calc hover, pressed, selected, disabled background color\n   *\n   * @default action.grayLight\n   */\n  color?: RcPaletteProp;\n  /**\n   * @deprecated should use color directly\n   *\n   * listItem use this color to calc hover, pressed, selected, disabled background color\n   * default to black\n   */\n  baseColor?: RcListItemColor;\n  /** Is this listItem highlighted */\n  highlighted?: boolean;\n  /** The component used for the root node. Either a string to use a HTML element or a component.\n   * By default, it's a li when button is false and a div when button is true. */\n  component?: React.ElementType;\n  /** If true, the list item will be a button (using ButtonBase).\n   * Props intended for ButtonBase can then be applied to ListItem. */\n  button?: boolean;\n  /** @deprecated max-width for ListItem, recommend using classes to define. */\n  maxWidth?: number;\n  /** native value attribute */\n  value?: React.LiHTMLAttributes<'li'>['value'];\n} & WithTooltipProps &\n  RcBaseProps<ComponentProps<typeof MuiListItem>, 'title' | 'button'>;\n\nconst _RcListItem = forwardRef<any, RcListItemProps>(\n  (inProps: RcListItemProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcListItem' });\n    const {\n      classes: classesProp,\n      color,\n      TouchRippleProps: TouchRipplePropsProp,\n      children,\n      className,\n      singleLine,\n      button,\n      size,\n      canHover,\n      isInline,\n      baseColor,\n      title,\n      highlighted,\n      maxWidth,\n      ...rest\n    } = props;\n    const classes = useMemo(\n      () => combineClasses(RcListItemClasses, classesProp),\n      [classesProp],\n    );\n\n    const ListItemClassName = useMemo(\n      () =>\n        clsx(className, {\n          [RcListItemMultilineClassName]: !singleLine,\n        }),\n      [className, singleLine],\n    );\n\n    // * when not button can't have TouchRippleProps\n    const additionProps = useMemo<Partial<RcListItemProps>>(\n      () =>\n        button\n          ? {\n              TouchRippleProps: combineProps(\n                { classes: RcListItemRippleClasses },\n                TouchRipplePropsProp,\n              ),\n            }\n          : {},\n      [TouchRipplePropsProp, button],\n    );\n\n    return (\n      <MuiListItem\n        {...rest}\n        {...additionProps}\n        ref={ref}\n        title={typeof title === 'string' ? title : undefined}\n        classes={classes}\n        className={ListItemClassName}\n        button={button as any}\n      >\n        {children}\n      </MuiListItem>\n    );\n  },\n);\n\nconst RcListItem = styled(\n  withDeprecatedCheck(\n    withTooltip(_RcListItem),\n    [\n      {\n        prop: 'baseColor',\n        time: '2021-9',\n        comment: '@deprecated should use color directly',\n      },\n      {\n        prop: 'maxWidth',\n        time: '2021-4',\n        comment: 'recommend using classes to define',\n      },\n    ],\n    'RcListItem',\n  ),\n)`\n  ${ListItemStyle};\n`;\n\nRcListItem.defaultProps = {\n  singleLine: false,\n  button: true,\n  canHover: true,\n  size: 'medium',\n};\n\nRcListItem.displayName = 'RcListItem';\n\nexport { RcListItem };\nexport type { RcListItemColor, RcListItemProps, RcListItemSize };\n","import {\n  css,\n  getParsePaletteColor,\n  nonTouchHoverMedia,\n  palette2,\n  px,\n  RcThemedStyled,\n  setAlpha,\n  setOpacity,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcFormControlLabel } from '../../../Forms/FormControlLabel';\nimport { RcSwitch } from '../../../Forms/Switch';\nimport { RcListItemProps } from '../ListItem';\nimport {\n  colorMap,\n  RcListItemClasses,\n  RcListItemRippleClasses,\n  RcListItemTopAndBottomPaddings,\n} from '../utils';\n\nexport const ListItemFormControlStyle = css`\n  ${RcFormControlLabel} {\n    margin-right: 0;\n\n    > ${RcSwitch} {\n      /** The DOM structure of Switch is special,\n        should remove this after fix Switch as common control */\n      margin-left: ${spacing(1)};\n      margin-right: ${spacing(1)};\n    }\n  }\n`;\n\nexport const ListItemStyle: RcThemedStyled<RcListItemProps, any> = ({\n  maxWidth,\n  isInline,\n  size,\n  onClick,\n  color,\n  canHover,\n  baseColor: baseColorProp = 'black',\n  highlighted,\n}) => {\n  const baseColor = getParsePaletteColor(color ?? colorMap[baseColorProp!]);\n\n  const defaultPadding = RcListItemTopAndBottomPaddings[size!];\n\n  return css`\n    ${typography('body1')};\n    width: ${maxWidth ? px(maxWidth) : '100%'};\n    padding-top: ${defaultPadding};\n    padding-bottom: ${defaultPadding};\n    display: ${isInline ? 'inline-flex' : 'flex'};\n    color: ${palette2('neutral', 'f06')};\n    cursor: ${onClick ? 'pointer' : 'default'};\n\n    ${highlighted &&\n    css`\n      background-color: ${setAlpha(baseColor, 0.05)};\n    `};\n\n    &.${RcListItemClasses.focusVisible} {\n      background-color: ${setOpacity(baseColor, '16')};\n    }\n\n    ${nonTouchHoverMedia} {\n      &:hover {\n        background-color: ${canHover ? setOpacity(baseColor, '08') : 'unset'};\n      }\n    }\n\n    &.${RcListItemClasses.selected} {\n      &,\n      &:hover {\n        background-color: ${setOpacity(baseColor, '12')};\n      }\n    }\n\n    .${RcListItemRippleClasses.rippleVisible} {\n      color: ${baseColor};\n    }\n\n    &.${RcListItemClasses.gutters} {\n      padding-left: ${spacing(4)};\n      padding-right: ${spacing(4)};\n    }\n\n    &.${RcListItemClasses.dense} {\n      padding-top: ${spacing(1)};\n      padding-bottom: ${spacing(1)};\n    }\n\n    ${ListItemFormControlStyle};\n  `;\n};\n","import {\n  css,\n  flexCenterStyle,\n  RcThemedStyled,\n  spacing,\n} from '../../../../foundation';\nimport { RcListItemAvatarProps } from '../ListItemAvatar';\n\nexport const ListItemAvatarStyle: RcThemedStyled<RcListItemAvatarProps, any> =\n  () => css`\n    margin: ${spacing(0.75, 2, 0.75, 0)};\n    min-width: 0;\n    ${flexCenterStyle};\n  `;\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { ListItemAvatarStyle } from './styles';\nimport { RcListItemAvatarClasses } from './utils';\n\ntype RcListItemAvatarProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiListItemAvatar>\n>;\n\nconst _RcListItemAvatar = forwardRef<any, RcListItemAvatarProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcListItemAvatar' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcListItemAvatarClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiListItemAvatar {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiListItemAvatar>\n    );\n  },\n);\n\nconst RcListItemAvatar = styled(_RcListItemAvatar)`\n  ${ListItemAvatarStyle};\n`;\n\nRcListItemAvatar.defaultProps = {};\n\nRcListItemAvatar.displayName = 'RcListItemAvatar';\n\nexport { RcListItemAvatar };\nexport type { RcListItemAvatarProps };\n","import {\n  css,\n  flexCenterStyle,\n  getParsePaletteColor,\n  RcThemedStyled,\n  spacing,\n} from '../../../../foundation';\nimport { RcIconButton } from '../../../Buttons/IconButton';\nimport { RcCheckbox } from '../../../Forms/Checkbox';\nimport { RcRadio } from '../../../Forms/Radio';\nimport { RcSwitch } from '../../../Forms/Switch';\nimport { RcIcon } from '../../../Icon';\nimport { RcListItemIconProps } from '../ListItemIcon';\n\nexport const ListItemIconStyle: RcThemedStyled<RcListItemIconProps, any> = ({\n  color,\n}) => {\n  return css`\n    ${flexCenterStyle};\n    width: auto;\n    height: unset;\n    color: ${getParsePaletteColor(color, ['neutral', 'f04'])};\n    min-width: unset;\n\n    > ${RcRadio}, > ${RcCheckbox} {\n      margin-right: ${spacing(1)};\n    }\n\n    > ${RcSwitch} {\n      /** The DOM structure of Switch is special,\n        should remove margin-left after fix Switch as common control */\n      margin-left: ${spacing(1)};\n      margin-right: ${spacing(1)};\n    }\n\n    > ${RcIconButton}, > ${RcIcon} {\n      margin-right: ${spacing(2)};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcPaletteProp,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { ListItemIconStyle } from './styles';\nimport { RcListItemIconClasses } from './utils';\n\ntype RcListItemIconProps = {\n  /** color for root container */\n  color?: RcPaletteProp;\n} & RcBaseProps<ComponentProps<typeof MuiListItemIcon>>;\n\nconst _RcListItemIcon = forwardRef<any, RcListItemIconProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcListItemIcon' });\n  const { classes: classesProp, children, color, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcListItemIconClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiListItemIcon {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiListItemIcon>\n  );\n});\n\nconst RcListItemIcon = styled(_RcListItemIcon)`\n  ${ListItemIconStyle};\n`;\n\nRcListItemIcon.defaultProps = {};\n\nRcListItemIcon.displayName = 'RcListItemIcon';\n\nexport { RcListItemIcon };\nexport type { RcListItemIconProps };\n","import {\n  css,\n  flexCenterStyle,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcCheckbox } from '../../../Forms/Checkbox';\nimport { RcFormControlLabel } from '../../../Forms/FormControlLabel';\nimport { RcRadio } from '../../../Forms/Radio';\nimport { RcSwitch } from '../../../Forms/Switch';\nimport { RcListItemSecondaryActionProps } from '../ListItemSecondaryAction';\n\nexport const ListItemSecondaryActionStyle: RcThemedStyled<\n  RcListItemSecondaryActionProps,\n  any\n> = () => {\n  return css`\n    ${flexCenterStyle};\n    ${typography('caption1')};\n    color: ${palette2('neutral', 'f04')};\n\n    ${RcFormControlLabel} {\n      margin-right: -${spacing(2)};\n\n      > ${RcRadio}, > ${RcCheckbox}, > ${RcSwitch} {\n        margin-right: 0;\n      }\n    }\n\n    > * + * {\n      margin-left: ${spacing(2)};\n    }\n  `;\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from 'react';\n\nimport MuiListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  removeClassName,\n  styled,\n  useForkRef,\n  useThemeProps,\n} from '../../../foundation';\nimport { ListItemSecondaryActionStyle } from './styles';\nimport { RcListItemSecondaryActionClasses } from './utils';\n\ntype RcListItemSecondaryActionProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiListItemSecondaryAction>\n>;\n\nconst _RcListItemSecondaryAction = forwardRef<\n  any,\n  RcListItemSecondaryActionProps\n>((inProps, ref) => {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'RcListItemSecondaryAction',\n  });\n  const { classes: classesProp, children, ...rest } = props;\n  const innerRef = useRef<HTMLDivElement>(null);\n  const divRef = useForkRef(innerRef, ref);\n\n  const classes = useMemo(\n    () => combineClasses(RcListItemSecondaryActionClasses, classesProp),\n    [classesProp],\n  );\n\n  // * need remove not need MuiButton-iconSizeMedium for icon render correct\n  useLayoutEffect(() => {\n    removeClassName(innerRef, 'MuiListItemSecondaryAction-root');\n  });\n\n  return (\n    <MuiListItemSecondaryAction {...rest} ref={divRef} classes={classes}>\n      {children}\n    </MuiListItemSecondaryAction>\n  );\n});\n\nconst RcListItemSecondaryAction = styled(_RcListItemSecondaryAction)`\n  ${ListItemSecondaryActionStyle}\n`;\n\nRcListItemSecondaryAction.defaultProps = {};\n\nRcListItemSecondaryAction.displayName = 'RcListItemSecondaryAction';\n\nexport { RcListItemSecondaryAction };\nexport type { RcListItemSecondaryActionProps };\n","import {\n  css,\n  ellipsis,\n  getParsePaletteColor,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcListItemTextProps } from '../ListItemText';\nimport { RcListItemTextClasses } from '../utils';\n\nexport const ListItemTextStyle: RcThemedStyled<RcListItemTextProps, any> = ({\n  alignCenter,\n  primaryColor: primaryColorProp,\n  lineThrough,\n  primaryTypographyProps,\n  secondaryTypographyProps,\n  isEllipsis,\n}) => {\n  const primaryColor = getParsePaletteColor(\n    primaryColorProp || primaryTypographyProps?.color,\n    palette2('neutral', 'f06'),\n  );\n  const secondaryColor = getParsePaletteColor(\n    secondaryTypographyProps?.color,\n    palette2('neutral', 'f04'),\n  );\n\n  const primaryTypography = typography(\n    primaryTypographyProps?.variant || 'body1',\n  );\n  const secondaryTypography = typography(\n    secondaryTypographyProps?.variant || 'caption1',\n  );\n\n  const textDisplay = css`\n    ${isEllipsis && ellipsis()};\n    text-decoration-line: ${lineThrough ? 'line-through' : 'inherit'};\n  `;\n\n  return css`\n    ${alignCenter &&\n    css`\n      flex: 'none !important';\n    `}\n\n    padding: 0;\n    /** for next ListSecondaryAction default margin */\n    margin: 0 ${spacing(2)} 0 0;\n\n    &.${RcListItemTextClasses.multiline} {\n      margin: ${spacing(1, 2, 1, 0)};\n    }\n\n    &.${RcListItemTextClasses.inset} {\n      padding-left: ${spacing(14)};\n    }\n\n    .${RcListItemTextClasses.primary} {\n      ${textDisplay};\n      ${primaryTypography};\n      color: ${primaryColor};\n    }\n\n    .${RcListItemTextClasses.secondary} {\n      ${textDisplay};\n      ${secondaryTypography};\n      color: ${secondaryColor};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiListItemText from '@material-ui/core/ListItemText';\n\nimport {\n  combineClasses,\n  omit,\n  RcBaseProps,\n  RcPaletteProp,\n  styled,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport { RcTypographyProps } from '../../Typography';\nimport { ListItemTextStyle } from './styles';\nimport { RcListItemTextClasses } from './utils';\n\ntype TypographyProps = RcBaseProps<RcTypographyProps, 'weight'>;\n\ntype RcListItemTextProps = {\n  /** is text Ellipsis, default is true. */\n  isEllipsis?: boolean;\n  /** These props will be forwarded to the primary typography component (as long as disableTypography is not true). */\n  primaryTypographyProps?: TypographyProps;\n  /** These props will be forwarded to the secondary typography component (as long as disableTypography is not true). */\n  secondaryTypographyProps?: TypographyProps;\n  /** @deprecated define color for primary, recommend use primaryTypographyProps color prop */\n  primaryColor?: RcPaletteProp;\n  /** @deprecated is alignCenter, recommend using classes to define it. */\n  alignCenter?: boolean;\n  /** @deprecated is lineThrough, recommend using classes to define it. */\n  lineThrough?: boolean;\n} & RcBaseProps<\n  ComponentProps<typeof MuiListItemText>,\n  'primaryTypographyProps' | 'secondaryTypographyProps'\n>;\n\nconst _RcListItemText = forwardRef<any, RcListItemTextProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcListItemText' });\n  const {\n    classes: classesProp,\n    children,\n    isEllipsis,\n    primaryTypographyProps: primaryTypographyPropsProp,\n    secondaryTypographyProps: secondaryTypographyPropsProp,\n    primaryColor,\n    alignCenter,\n    lineThrough,\n    ...rest\n  } = props;\n\n  const classes = useMemo(\n    () => combineClasses(RcListItemTextClasses, classesProp),\n    [classesProp],\n  );\n\n  const primaryTypographyProps = useMemo(\n    () => omit(primaryTypographyPropsProp, ['color', 'variant']),\n    [primaryTypographyPropsProp],\n  );\n\n  const secondaryTypographyProps = useMemo(\n    () => omit(secondaryTypographyPropsProp, ['color', 'variant']),\n    [secondaryTypographyPropsProp],\n  );\n\n  return (\n    <MuiListItemText\n      {...rest}\n      ref={ref}\n      classes={classes}\n      primaryTypographyProps={primaryTypographyProps}\n      secondaryTypographyProps={secondaryTypographyProps}\n    >\n      {children}\n    </MuiListItemText>\n  );\n});\n\nconst RcListItemText = styled(\n  withDeprecatedCheck(\n    _RcListItemText,\n    [\n      {\n        prop: 'primaryColor',\n        time: '2021-4',\n        comment: 'recommend use primaryTypographyProps color prop',\n      },\n      {\n        prop: 'alignCenter',\n        time: '2021-4',\n        comment: `recommend using classes to define it`,\n      },\n      {\n        prop: 'lineThrough',\n        time: '2021-4',\n        comment: `recommend using classes to define it`,\n      },\n    ],\n    'RcListItemText',\n  ),\n)`\n  ${ListItemTextStyle}\n`;\n\nRcListItemText.defaultProps = {\n  isEllipsis: true,\n  primaryTypographyProps: {\n    variant: 'body1',\n    color: 'neutral.f06',\n  },\n  secondaryTypographyProps: {\n    variant: 'caption1',\n    color: 'neutral.f04',\n  },\n};\n\nRcListItemText.displayName = 'RcListItemText';\n\nexport { RcListItemText };\nexport type { RcListItemTextProps };\n","import {\n  css,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcListSubheaderProps } from '../ListSubheader';\nimport { RcListSubheaderClasses } from '../utils';\n\nexport const ListSubheaderStyle: RcThemedStyled<RcListSubheaderProps, any> =\n  () => {\n    return css`\n      height: 36px;\n      padding-top: ${spacing(3)};\n      padding-bottom: ${spacing(1)};\n      display: flex;\n      background: ${palette2('neutral', 'b01')};\n      color: ${palette2('neutral', 'f04')};\n      ${typography('body1')};\n\n      &.${RcListSubheaderClasses.gutters} {\n        padding-left: ${spacing(4)};\n        padding-right: ${spacing(2)};\n      }\n\n      &.${RcListSubheaderClasses.inset} {\n        padding-left: ${spacing(18)};\n      }\n    `;\n  };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiListSubheader from '@material-ui/core/ListSubheader';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { ListSubheaderStyle } from './styles';\nimport { RcListSubheaderClasses } from './utils';\n\ntype RcListSubheaderProps = {\n  /** The component used for the root node. Either a string to use a HTML element or a component. */\n  component?: React.ElementType;\n} & RcBaseProps<ComponentProps<typeof MuiListSubheader>, 'color'>;\n\nconst _RcListSubheader = forwardRef<any, RcListSubheaderProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcListSubheader' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcListSubheaderClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiListSubheader {...rest} ref={ref} classes={classes} color=\"default\">\n        {children}\n      </MuiListSubheader>\n    );\n  },\n);\n\nconst RcListSubheader = styled(_RcListSubheader)`\n  ${ListSubheaderStyle}\n`;\n\nRcListSubheader.defaultProps = {\n  component: 'li',\n};\n\nRcListSubheader.displayName = 'RcListSubheader';\n\nexport { RcListSubheader };\nexport type { RcListSubheaderProps };\n","import React from 'react';\n\nimport { opacity, palette2, styled, withDelay } from '../../../foundation';\nimport { RcCircularProgress } from '../../Progress/CircularProgress';\n\nexport type StyledLoadingPageProps = {\n  size?: number;\n  backgroundType?: 'mask';\n  disableShrink?: boolean;\n};\n\nexport const StyledLoadingPage = styled.div<StyledLoadingPageProps>`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  top: 0px;\n  left: 0px;\n  opacity: ${({ backgroundType }) =>\n    backgroundType ? opacity('40', true) : 1};\n  background: ${palette2('neutral', 'b01')};\n  z-index: 1000;\n`;\n\nexport const RcDefaultLoadingWithDelay = withDelay(\n  ({ backgroundType, size, disableShrink }: StyledLoadingPageProps) => (\n    <StyledLoadingPage\n      data-test-automation-id=\"loading-page\"\n      backgroundType={backgroundType}\n    >\n      <RcCircularProgress size={size} disableShrink={disableShrink} />\n    </StyledLoadingPage>\n  ),\n);\n","import { css, RcThemedStyled } from '../../../../foundation';\nimport { DividerInMenuStyle } from '../../MenuList/styles';\nimport { RcMenuProps } from '../Menu';\n\nexport const MenuStyle: RcThemedStyled<RcMenuProps, any> = () => {\n  return css`\n    ${DividerInMenuStyle};\n  `;\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  memo,\n  useMemo,\n  useState,\n} from 'react';\n\nimport MuiMenu from '@material-ui/core/Menu';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useEventCallback,\n  useId,\n  useRcPortalWindowContext,\n  useThemeProps,\n} from '../../../foundation';\nimport type {\n  RcMenuContextType,\n  RcMenuOnCloseReasonsType,\n} from './MenuContext';\nimport { RcMenuContext } from './MenuContext';\nimport { MenuStyle } from './styles';\nimport { RcMenuClasses } from './utils';\n\ntype RcMenuProps = {\n  /** auto close menu when menu item clicked */\n  autoClose?: boolean;\n  /** emit when menu closed */\n  onClose?: (event: {}, reason: RcMenuOnCloseReasonsType) => void;\n} & RcBaseProps<\n  ComponentProps<typeof MuiMenu>,\n  'disableEnforceFocus' | 'onClose'\n>;\n\nconst MemoMuiMenu = memo(MuiMenu);\n\nconst _RcMenu = forwardRef<any, RcMenuProps>((inProps: RcMenuProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcMenu' });\n  const { classes: classesProp, children, autoClose, onClose, ...rest } = props;\n  const [focusedMenuItemId, setFocusedMenuItemId] = useState(null);\n  const id = useId('menu-', true);\n\n  const { externalWindow } = useRcPortalWindowContext();\n\n  const classes = useMemo(\n    () => combineClasses(RcMenuClasses, classesProp),\n    [classesProp],\n  );\n\n  const handleClose = useEventCallback(\n    (event: {}, reason: RcMenuOnCloseReasonsType) => {\n      onClose?.(event, reason);\n    },\n  );\n\n  const ctxValue: RcMenuContextType = useMemo(\n    () => ({\n      menuId: id,\n      autoClose: !!autoClose,\n      focusedMenuItemId,\n      setFocusedMenuItemId,\n      closeMenu: handleClose,\n    }),\n    [autoClose, focusedMenuItemId, handleClose, id],\n  );\n\n  return (\n    <RcMenuContext.Provider value={ctxValue}>\n      <MemoMuiMenu\n        container={externalWindow?.document.body}\n        {...rest}\n        ref={ref}\n        classes={classes}\n        onClose={handleClose}\n        disableEnforceFocus\n      >\n        {children}\n      </MemoMuiMenu>\n    </RcMenuContext.Provider>\n  );\n});\n\nconst RcMenu = styled(_RcMenu)`\n  ${MenuStyle};\n`;\n\nRcMenu.defaultProps = {\n  variant: 'selectedMenu',\n  getContentAnchorEl: null,\n  anchorReference: 'anchorEl',\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n};\n\nRcMenu.displayName = 'RcMenu';\n\nexport { RcMenu, RcMenuContext };\n\nexport type { RcMenuContextType, RcMenuProps };\n","import {\n  css,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  styled,\n  typography,\n} from '../../../../foundation';\nimport { RcIcon } from '../../../Icon';\nimport { ListItemFormControlStyle } from '../../../List/ListItem/styles';\nimport { RcMenuItemProps } from '../MenuItem';\nimport {\n  RcMenuItemClasses,\n  RcMenuItemLeftAndRightPaddings,\n  RcMenuItemTopAndBottomPaddings,\n} from '../utils';\n\nexport const StyledCheckIcon = styled(RcIcon)`\n  height: 22px;\n`;\n\nexport const MenuItemStyle: RcThemedStyled<RcMenuItemProps, any> = ({\n  size,\n}) => {\n  const topAndBottomPadding = RcMenuItemTopAndBottomPaddings[size!];\n  const leftAndRightPadding = RcMenuItemLeftAndRightPaddings[size!];\n\n  return css`\n    outline: none;\n    box-sizing: border-box;\n    ${typography('body1')};\n    color: ${palette2('neutral', 'f06')};\n    height: auto;\n    min-height: 32px;\n    min-width: 112px;\n    padding-top: ${topAndBottomPadding};\n    padding-bottom: ${topAndBottomPadding};\n\n    .${RcMenuItemClasses.gutters} {\n      padding-left: ${leftAndRightPadding};\n      padding-right: ${leftAndRightPadding};\n    }\n\n    &.${RcMenuItemClasses.dense} {\n      padding-top: ${spacing(1)};\n      padding-bottom: ${spacing(1)};\n      min-height: auto;\n      line-height: 22px;\n      font-weight: 700;\n    }\n\n    ${ListItemFormControlStyle};\n  `;\n};\n","import React, {\n  ComponentProps,\n  ElementType,\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  Ref,\n  useContext,\n  useImperativeHandle,\n  useMemo,\n} from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiMenuItem from '@material-ui/core/MenuItem';\n\nimport {\n  Classes,\n  combineClasses,\n  isRcElement,\n  logInDev,\n  omit,\n  RcBaseProps,\n  RcBaseSize,\n  RcClassesProps,\n  styled,\n  useEventCallback,\n  useId,\n  useThemeProps,\n} from '../../../foundation';\nimport checkSvg from '../../../icon/Check';\nimport { RcIcon, RcIconProps } from '../../Icon';\nimport { RcListItemSecondaryAction } from '../../List';\nimport { RcListItemAvatar } from '../../List/ListItemAvatar';\nimport { RcListItemIcon } from '../../List/ListItemIcon';\nimport { withTooltip, WithTooltipProps } from '../../Tooltip';\nimport { RcMenuContext } from '../Menu/MenuContext';\nimport { RcMenuListContext } from '../MenuList/MenuListContext';\nimport { RcSubMenuContext } from '../SubMenu/SubMenuContext';\nimport { MenuItemStyle, StyledCheckIcon } from './styles';\nimport { RcMenuItemClasses } from './utils';\n\ntype RcMenuItemSize = RcBaseSize<'large' | 'medium'>;\n\ntype RcMenuItemType = 'checked' | 'selected';\n\ntype RcMenuItemClassesType = RcClassesProps<\n  Classes<ComponentProps<typeof MuiMenuItem>> | 'checked' | 'unchecked'\n>;\n\ntype RcMenuItemInnerProps = {\n  /** id ref, can get menu item id */\n  idRef?: Ref<string>;\n  /** for subMenu component, use prevent click */\n  isSubMenuItem?: boolean;\n};\n\ntype RcMenuItemProps = {\n  /** MenuItem size */\n  size?: RcMenuItemSize;\n  /** The component used for the root node. Either a string to use a HTML element or a component. */\n  component?: ElementType;\n  /** checked for that should render checked icon */\n  type?: RcMenuItemType;\n  /** if type to be `checked`, the checked prop for that should render checked icon */\n  checked?: boolean;\n  /** MenuItem with icon, can use `RcListItemIcon` */\n  icon?: ReactNode;\n  /** pass to the icon, can use RcIcon with symbol prop */\n  symbol?: RcIconProps['symbol'];\n  /** MenuItem with avatar, can use ListItemAvatar */\n  avatar?: ReactElement;\n  /** MenuItem with subAction, can use ListItemSecondaryAction */\n  secondaryAction?: ReactNode;\n} & RcMenuItemClassesType &\n  WithTooltipProps &\n  RcBaseProps<ComponentProps<typeof MuiMenuItem>, 'classes' | 'title'>;\n\nconst _RcMenuItem = forwardRef<any, RcMenuItemProps & RcMenuItemInnerProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcMenuItem' });\n    const {\n      classes: classesProp,\n      children,\n      className,\n      onMouseEnter,\n      onClick,\n      onFocus,\n      size,\n      type,\n      checked,\n      icon,\n      symbol,\n      avatar,\n      secondaryAction,\n      idRef,\n      isSubMenuItem,\n      title,\n      ...rest\n    } = props;\n\n    const isCheckedType = type === 'checked';\n    const menuItemId = useId('menu-item', true);\n\n    const menuContext = useContext(RcMenuContext);\n    const menuListContext = useContext(RcMenuListContext);\n    const subMenuContext = useContext(RcSubMenuContext);\n\n    const setFocusedMenuItemId = useEventCallback(() => {\n      if (!menuItemId) return;\n\n      if (menuListContext.menuListId) {\n        menuListContext.setFocusedMenuItemId(menuItemId);\n      } else if (menuContext.menuId) {\n        menuContext.setFocusedMenuItemId(menuItemId);\n      }\n    });\n\n    const classes = useMemo(\n      () => combineClasses(RcMenuItemClasses, classesProp),\n      [classesProp],\n    );\n\n    const toClasses = useMemo(\n      () => omit(classes, ['checked', 'unchecked']),\n      [classes],\n    );\n\n    const itemAvatar = useMemo(() => {\n      if (React.isValidElement(avatar)) {\n        return isRcElement(avatar, ['RcListItemAvatar']) ? (\n          avatar\n        ) : (\n          <RcListItemAvatar>{avatar}</RcListItemAvatar>\n        );\n      }\n      return null;\n    }, [avatar]);\n\n    const itemIcon = useMemo(() => {\n      if (symbol) {\n        return (\n          <RcListItemIcon>\n            <RcIcon size=\"small\" symbol={symbol} />\n          </RcListItemIcon>\n        );\n      }\n\n      if (React.isValidElement(icon)) {\n        return isRcElement(icon, ['RcListItemIcon']) ? (\n          icon\n        ) : (\n          <RcListItemIcon>{icon}</RcListItemIcon>\n        );\n      }\n\n      if (typeof icon === 'string') {\n        logInDev({\n          component: 'RcMenuItem',\n          message: 'please use symbol to replace icon string',\n        });\n        return (\n          <RcListItemIcon>\n            <RcIcon size=\"small\">{icon}</RcIcon>\n          </RcListItemIcon>\n        );\n      }\n\n      return null;\n    }, [icon, symbol]);\n\n    const itemSubAction = useMemo(() => {\n      if (isCheckedType && checked) {\n        return (\n          <RcListItemSecondaryAction>\n            <StyledCheckIcon\n              size=\"large\"\n              symbol={checkSvg}\n              color={['interactive', 'f01']}\n            />\n          </RcListItemSecondaryAction>\n        );\n      }\n\n      return secondaryAction ? (\n        isRcElement(secondaryAction, ['RcListItemSecondaryAction']) ? (\n          secondaryAction\n        ) : (\n          <RcListItemSecondaryAction>\n            {secondaryAction}\n          </RcListItemSecondaryAction>\n        )\n      ) : null;\n    }, [checked, isCheckedType, secondaryAction]);\n\n    const handleMouseEnter = useEventCallback(\n      (e: React.MouseEvent<HTMLLIElement>) => {\n        onMouseEnter?.(e);\n        setFocusedMenuItemId();\n      },\n    );\n\n    const handleClick = useEventCallback(\n      (e: React.MouseEvent<HTMLLIElement>) => {\n        onClick?.(e);\n\n        if (menuContext.autoClose && !isSubMenuItem) {\n          menuContext.closeMenu(e, 'itemClick');\n        }\n        if (subMenuContext.autoClose && !isSubMenuItem) {\n          subMenuContext?.closeSubMenu?.(e, 'itemClick');\n        }\n      },\n    );\n\n    const handleFocus = useEventCallback(\n      (e: React.FocusEvent<HTMLLIElement>) => {\n        setFocusedMenuItemId();\n        onFocus?.(e);\n      },\n    );\n\n    useImperativeHandle(idRef, () => menuItemId, [menuItemId]);\n\n    return (\n      <MuiMenuItem\n        aria-checked={isCheckedType && checked ? true : undefined}\n        {...rest}\n        ref={ref as any}\n        title={typeof title === 'string' ? title : undefined}\n        classes={toClasses}\n        className={clsx(className, {\n          [classes!.checked]: isCheckedType && checked,\n          [classes!.unchecked]: isCheckedType && !checked,\n        })}\n        onMouseEnter={handleMouseEnter}\n        onClick={handleClick}\n        onFocus={handleFocus}\n        data-menuitem-id={menuItemId}\n      >\n        {itemAvatar}\n        {itemIcon}\n        {children}\n        {itemSubAction}\n      </MuiMenuItem>\n    );\n  },\n);\n\nconst RcMenuItem = styled(withTooltip(_RcMenuItem))`\n  ${MenuItemStyle};\n`;\n\nRcMenuItem.defaultProps = {\n  size: 'medium',\n};\n\nRcMenuItem.displayName = 'RcMenuItem';\n\nexport { RcMenuItem };\nexport type {\n  RcMenuItemClassesType,\n  RcMenuItemProps,\n  RcMenuItemSize,\n  RcMenuItemType,\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  memo,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\n\nimport MuiMenuList from '@material-ui/core/MenuList';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useId,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcSubMenuContext } from '../SubMenu/SubMenuContext';\nimport type {\n  RcMenuListContextType,\n  RcMenuListOnCloseReasonsType,\n} from './MenuListContext';\nimport { RcMenuListContext } from './MenuListContext';\nimport { MenuListStyle } from './styles';\nimport { RcMenuListClasses } from './utils';\n\ntype RcMenuListProps = {\n  /** setting max-Height for MenuList, when overflow, scroll */\n  maxHeight?: number;\n  /** auto close menu when menu item clicked */\n  autoClose?: boolean;\n  /** emit for subMenu closed */\n  onClose?: (event: {}, reason: RcMenuListOnCloseReasonsType) => void;\n} & RcBaseProps<ComponentProps<typeof MuiMenuList>>;\n\nconst MemoMuiListMenu = memo(MuiMenuList);\n\nconst _RcMenuList = forwardRef<any, RcMenuListProps>(\n  (inProps: RcMenuListProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcMenuList' });\n    const {\n      classes: classesProp,\n      children,\n      autoClose,\n      onClose: onCloseProp,\n      maxHeight,\n      ...rest\n    } = props;\n\n    const [focusedMenuItemId, setFocusedMenuItemId] = useState(null);\n    const id = useId('menu-list', true);\n\n    const classes = useMemo(\n      () => combineClasses(RcMenuListClasses, classesProp),\n      [classesProp],\n    );\n\n    const subMenuContext = useContext(RcSubMenuContext);\n\n    const ctxValue: RcMenuListContextType = useMemo(\n      () => ({\n        menuListId: id,\n        autoClose: !!autoClose || subMenuContext.autoClose,\n        focusedMenuItemId,\n        setFocusedMenuItemId,\n        onClose: onCloseProp,\n      }),\n      [autoClose, focusedMenuItemId, id, onCloseProp, subMenuContext.autoClose],\n    );\n\n    return (\n      <RcMenuListContext.Provider value={ctxValue}>\n        <MemoMuiListMenu {...rest} ref={ref} classes={classes}>\n          {children}\n        </MemoMuiListMenu>\n      </RcMenuListContext.Provider>\n    );\n  },\n);\n\nconst RcMenuList = styled(_RcMenuList)`\n  ${MenuListStyle};\n`;\n\nRcMenuList.defaultProps = {\n  variant: 'selectedMenu',\n};\n\nRcMenuList.displayName = 'RcMenuList';\n\nexport { RcMenuList, RcMenuListContext };\nexport type { RcMenuListContextType, RcMenuListProps };\n","import { css, px, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcDivider } from '../../../Divider';\nimport { RcMenuListProps } from '../MenuList';\n\nexport const DividerInMenuStyle = css`\n  ${RcDivider} {\n    margin: ${spacing(2, 0)};\n  }\n`;\n\nexport const MenuListStyle: RcThemedStyled<RcMenuListProps, any> = ({\n  maxHeight,\n}) => {\n  return css`\n    overflow: auto;\n    max-height: ${maxHeight && px(maxHeight)};\n    ${DividerInMenuStyle};\n  `;\n};\n","import MuiGrow from '@material-ui/core/Grow';\n\nimport { css, RcThemedStyled, styled } from '../../../../foundation';\nimport { RcListItemSecondaryAction } from '../../../List/ListItemSecondaryAction';\nimport { RcSubMenuProps } from '../SubMenu';\n\nexport const StyledListItemSecondaryAction = styled(RcListItemSecondaryAction)`\n  position: relative;\n  transform: none;\n  right: 0;\n  top: 0;\n`;\n\nexport const StyledGrow = styled(MuiGrow)`\n  transform-origin: 'center top';\n`;\n\nexport const SubMenuStyle: RcThemedStyled<RcSubMenuProps, any> = () => {\n  return css``;\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  memo,\n  ReactNode,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport {\n  a11yKeyboard,\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useEventCallback,\n  useForkRef,\n  useId,\n  useRcPortalWindowContext,\n  useThemeProps,\n} from '../../../foundation';\nimport ArrowRight from '../../../icon/ArrowRight';\nimport { ClickAwayListener } from '../../ClickAwayListener';\nimport { RcIcon } from '../../Icon';\nimport { RcListItemText } from '../../List/ListItemText';\nimport { RcPaper } from '../../Paper';\nimport { RcPopper, RcPopperProps } from '../../Popper';\nimport { RcMenuContext } from '../Menu/MenuContext';\nimport { RcMenuItem, RcMenuItemProps } from '../MenuItem/MenuItem';\nimport { RcMenuList, RcMenuListProps } from '../MenuList/MenuList';\nimport { RcMenuListContext } from '../MenuList/MenuListContext';\nimport {\n  StyledGrow,\n  StyledListItemSecondaryAction,\n  SubMenuStyle,\n} from './styles';\nimport type {\n  RcSubMenuContextType,\n  RcSubMenuOnCloseReasonsType,\n} from './SubMenuContext';\nimport { RcSubMenuContext } from './SubMenuContext';\nimport { RcSubMenuClasses } from './utils';\n\ntype RcSubMenuProps = {\n  /** SubMenuItem's title */\n  title: ReactNode;\n  /** children, use MenuItem array */\n  children: ReactNode;\n  /** Popper props */\n  PopperProps?: RcBaseProps<\n    RcPopperProps,\n    | 'open'\n    | 'anchorEl'\n    | 'transition'\n    | 'placement'\n    | 'modifiers'\n    | 'itemRef'\n    | 'popperRef'\n    | 'children'\n  >;\n  /** MenuList props */\n  MenuListProps?: RcBaseProps<\n    RcMenuListProps,\n    'autoFocusItem' | 'ref' | 'itemRef' | 'innerRef' | 'onClose'\n  >;\n  /** emit when sub menu popper closed */\n  onClose?: (e: {}, reason: RcSubMenuOnCloseReasonsType) => void;\n} & RcBaseProps<RcMenuItemProps, 'type' | 'checked' | 'title'>;\n\nconst POPPER_OFFSET = 2;\n\nconst MemoMenuList = memo(RcMenuList);\n\nconst _RcSubMenu = forwardRef<any, RcSubMenuProps>(\n  (inProps: RcSubMenuProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcSubMenu' });\n    const {\n      classes: classesProp,\n      children,\n      title: titleProp,\n      disabled,\n      onKeyDown,\n      onMouseEnter,\n      onMouseLeave,\n      MenuListProps,\n      PopperProps = {},\n      onClose,\n      ...rest\n    } = props;\n\n    const _popperRef = useRef<HTMLDivElement>(null);\n    const popperRef = useForkRef(_popperRef, PopperProps!.ref || null);\n    const popperId = useId(PopperProps!.id);\n    const menuItemIdRef = useRef<string>(null);\n\n    const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n    const [open, setOpen] = useState<boolean>(false);\n\n    const menuListContext = useContext(RcMenuListContext);\n    const menuContext = useContext(RcMenuContext);\n    const subMenuContext = useContext(RcSubMenuContext);\n\n    const { externalWindow } = useRcPortalWindowContext();\n\n    const handleClose = useEventCallback(\n      (e: {}, reason: RcSubMenuOnCloseReasonsType) => {\n        onClose?.(e, reason);\n        menuListContext?.onClose?.(e, reason);\n      },\n    );\n\n    const handleItemKeyDown = useEventCallback(\n      (e: React.KeyboardEvent<HTMLLIElement>) => {\n        const { key } = e;\n        const { ArrowRight, Space, Enter } = a11yKeyboard;\n\n        if ([ArrowRight, Space, Enter].includes(key)) {\n          openPopper(e);\n        }\n\n        onKeyDown?.(e);\n      },\n    );\n\n    const handleItemMouseEnter = useEventCallback(\n      (e: React.MouseEvent<HTMLLIElement>) => {\n        openPopper(e);\n        onMouseEnter?.(e);\n      },\n    );\n\n    const handleItemMouseLeave = useEventCallback(\n      (e: React.MouseEvent<HTMLLIElement>) => {\n        onMouseLeave?.(e);\n\n        if (!_popperRef.current || !e.currentTarget) {\n          return;\n        }\n        const { clientX } = e;\n        const { left, width } = _popperRef.current.getBoundingClientRect();\n        const isMoveToPopper =\n          left < clientX + POPPER_OFFSET &&\n          clientX - POPPER_OFFSET < left + width;\n\n        if (!isMoveToPopper) {\n          closePopper();\n          handleClose(e, 'subMenuItemAnchorMouseLeave');\n        }\n      },\n    );\n\n    const classes = useMemo(\n      () => combineClasses(RcSubMenuClasses, classesProp),\n      [classesProp],\n    );\n\n    const title = useMemo(\n      () =>\n        typeof titleProp === 'string' ? (\n          <RcListItemText>{titleProp}</RcListItemText>\n        ) : (\n          titleProp\n        ),\n      [titleProp],\n    );\n\n    const {\n      onKeyDown: onPopperKeyDown,\n      onMouseLeave: onPopperMouseLeave,\n      ...restPopperProps\n    } = PopperProps;\n\n    const openPopper = useEventCallback(\n      (event: React.MouseEvent | React.KeyboardEvent) => {\n        if (!disabled && event.currentTarget) {\n          setAnchorEl(event.currentTarget as HTMLElement);\n          setOpen(true);\n        }\n      },\n    );\n\n    const closePopper = useEventCallback(() => {\n      setOpen(false);\n      setAnchorEl(null);\n    });\n\n    const handleCloseSubMenu = useEventCallback(() => {\n      anchorEl?.focus();\n      closePopper();\n    });\n\n    const handlePopperKeyDown = useEventCallback(\n      (e: React.KeyboardEvent<HTMLDivElement>) => {\n        const { key } = e;\n        const { ArrowLeft, Escape, Tab } = a11yKeyboard;\n\n        e.stopPropagation();\n\n        if (key === ArrowLeft) {\n          handleCloseSubMenu();\n          handleClose(e, 'subMenuItemArrowLeftKeyDown');\n        } else if ([Escape, Tab].includes(key)) {\n          const reason = key === Escape ? 'escapeKeyDown' : 'tabKeyDown';\n          handleCloseSubMenu();\n          menuContext.closeMenu(e, reason);\n          subMenuContext?.closeSubMenu?.(e, reason);\n          handleClose(e, reason);\n        }\n\n        onPopperKeyDown?.(e);\n      },\n    );\n\n    const handlePopperClickAway = useEventCallback(\n      (e: React.MouseEvent<Document, MouseEvent>) => {\n        if (\n          anchorEl &&\n          e.target &&\n          !anchorEl.contains(e.target as HTMLElement)\n        ) {\n          closePopper();\n          handleClose(e, 'backdropClick');\n        }\n      },\n    );\n\n    const handlePopperMouseLeave = useEventCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        closePopper();\n        onPopperMouseLeave?.(e);\n\n        if (!anchorEl || !e.currentTarget) {\n          return;\n        }\n\n        const { clientX } = e;\n        const { left, width } = anchorEl.getBoundingClientRect();\n        const isMoveToAnchor =\n          left < clientX + POPPER_OFFSET &&\n          clientX - POPPER_OFFSET < left + width;\n\n        if (!isMoveToAnchor) {\n          handleClose(e, 'popperMouseLeave');\n        }\n      },\n    );\n\n    useLayoutEffect(() => {\n      if (\n        open &&\n        menuListContext.menuListId !== '' &&\n        menuListContext.focusedMenuItemId !== menuItemIdRef.current\n      ) {\n        /** 1. keyboard open the sub-menu\n         *  2. mouse hover the sub-menu next item\n         *  3. should close the sub-menu popper\n         */\n        handleCloseSubMenu();\n      }\n    }, [\n      handleCloseSubMenu,\n      menuListContext.focusedMenuItemId,\n      menuListContext.menuListId,\n      open,\n    ]);\n\n    useLayoutEffect(() => {\n      if (\n        open &&\n        menuListContext.menuListId === '' &&\n        menuContext.focusedMenuItemId !== menuItemIdRef.current\n      ) {\n        /**\n         * 1. keyboard open the menu inner sub menu\n         * 2. mouse hover the sub-menu next item\n         * 3. should close all sub-menu popper\n         */\n        handleCloseSubMenu();\n      }\n    }, [\n      handleCloseSubMenu,\n      menuContext.focusedMenuItemId,\n      menuListContext.menuListId,\n      open,\n    ]);\n\n    const ctxValue: RcSubMenuContextType = useMemo(\n      () => ({\n        autoClose: menuListContext.autoClose,\n        closeSubMenu: (e: {}, reason: RcSubMenuOnCloseReasonsType) => {\n          handleCloseSubMenu();\n          subMenuContext?.closeSubMenu?.(e, reason);\n          menuListContext?.onClose?.(e, reason);\n        },\n      }),\n      [handleCloseSubMenu, menuListContext, subMenuContext],\n    );\n\n    const modifiers: ComponentProps<typeof RcPopper>['modifiers'] = useMemo(\n      () => ({\n        flip: {\n          enabled: true,\n        },\n        offset: {\n          offset: -8,\n        },\n        preventOverflow: {\n          enabled: true,\n          boundariesElement: externalWindow ? 'window' : 'viewport',\n        },\n      }),\n      [externalWindow],\n    );\n\n    return (\n      <>\n        <RcMenuItem\n          aria-controls={popperId}\n          {...rest}\n          ref={ref}\n          disabled={disabled}\n          classes={classes}\n          onKeyDown={handleItemKeyDown}\n          onMouseEnter={handleItemMouseEnter}\n          onMouseLeave={handleItemMouseLeave}\n          idRef={menuItemIdRef}\n          isSubMenuItem\n          aria-haspopup=\"true\"\n          aria-expanded={open}\n        >\n          {title}\n          <StyledListItemSecondaryAction>\n            <RcIcon size=\"medium\" color=\"neutral.f04\" symbol={ArrowRight} />\n          </StyledListItemSecondaryAction>\n        </RcMenuItem>\n        <RcPopper\n          role=\"menu\"\n          id={popperId}\n          container={externalWindow?.document.body}\n          {...restPopperProps}\n          ref={popperRef}\n          open={open}\n          anchorEl={anchorEl}\n          transition\n          placement=\"right-start\"\n          modifiers={modifiers}\n          onKeyDown={handlePopperKeyDown}\n          onMouseLeave={handlePopperMouseLeave}\n        >\n          {({ TransitionProps }) => (\n            <StyledGrow {...TransitionProps} timeout=\"auto\">\n              <RcPaper>\n                <RcSubMenuContext.Provider value={ctxValue}>\n                  <ClickAwayListener onClickAway={handlePopperClickAway}>\n                    <MemoMenuList {...MenuListProps} autoFocusItem>\n                      {children}\n                    </MemoMenuList>\n                  </ClickAwayListener>\n                </RcSubMenuContext.Provider>\n              </RcPaper>\n            </StyledGrow>\n          )}\n        </RcPopper>\n      </>\n    );\n  },\n);\n\nconst RcSubMenu = styled(_RcSubMenu)`\n  ${SubMenuStyle};\n`;\n\nRcSubMenu.defaultProps = {};\n\nRcSubMenu.displayName = 'RcSubMenu';\n\nexport { RcSubMenu, RcSubMenuContext };\n\nexport type { RcSubMenuContextType, RcSubMenuProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiPagination from '@material-ui/lab/Pagination';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { paginationStyle } from './styles';\nimport { RcPaginationClasses } from './utils';\n\ntype RcPaginationProps = {} & RcBaseProps<ComponentProps<typeof MuiPagination>>;\n\nconst _RcPagination = forwardRef<any, RcPaginationProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcPagination' });\n  const { classes: classesProp, ...reset } = props;\n\n  const classes = useMemo(\n    () => combineProps(RcPaginationClasses, classesProp),\n    [classesProp],\n  );\n\n  return <MuiPagination ref={ref} classes={classes} {...reset} />;\n});\n\n/** @release */\nconst RcPagination = styled(_RcPagination)`\n  ${paginationStyle}\n`;\n\nRcPagination.defaultProps = {};\n\nRcPagination.displayName = 'RcPagination';\n\nexport { RcPagination };\nexport type { RcPaginationProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiPaper from '@material-ui/core/Paper';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { PaperStyle } from './styles';\nimport { RcPaperClasses } from './utils';\n\ntype RcPaperProps = {} & RcBaseProps<ComponentProps<typeof MuiPaper>>;\n\nconst _RcPaper = forwardRef<any, RcPaperProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcPaper' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcPaperClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiPaper {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiPaper>\n  );\n});\n\nconst RcPaper = styled(_RcPaper)`\n  ${PaperStyle}\n`;\n\nRcPaper.defaultProps = {};\n\nRcPaper.displayName = 'RcPaper';\n\nexport { RcPaper };\nexport type { RcPaperProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiPopover from '@material-ui/core/Popover';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useRcPortalWindowContext,\n  useThemeProps,\n} from '../../foundation';\nimport { PopoverStyle } from './styles';\nimport { RcPopoverClasses } from './utils';\n\ntype RcPopoverProps = {} & RcBaseProps<ComponentProps<typeof MuiPopover>>;\n\nconst _RcPopover = forwardRef<any, RcPopoverProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcPopover' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcPopoverClasses, classesProp),\n    [classesProp],\n  );\n  const { externalWindow } = useRcPortalWindowContext();\n\n  return (\n    <MuiPopover\n      container={externalWindow?.document.body}\n      {...rest}\n      ref={ref}\n      classes={classes}\n    >\n      {children}\n    </MuiPopover>\n  );\n});\n\nconst RcPopover = styled(_RcPopover)`\n  ${PopoverStyle};\n`;\n\nRcPopover.defaultProps = {\n  anchorOrigin: { vertical: 'top', horizontal: 'left' },\n  anchorReference: 'anchorEl',\n};\n\nRcPopover.displayName = 'RcPopover';\n\nexport { RcPopover };\nexport type { RcPopoverProps };\n","import { css, RcThemedStyled, zIndex } from '../../../foundation';\nimport { RcPopperProps } from '../Popper';\n\nexport const PopperStyle: RcThemedStyled<RcPopperProps, any> = () => {\n  return css`\n    z-index: ${zIndex('modal')};\n  `;\n};\n","import React, { ComponentProps, forwardRef } from 'react';\n\nimport MuiPopper from '@material-ui/core/Popper';\n\nimport {\n  RcBaseProps,\n  styled,\n  useRcPortalWindowContext,\n  useThemeProps,\n} from '../../foundation';\nimport { PopperStyle } from './styles';\n\ntype RcPopperProps = {} & RcBaseProps<ComponentProps<typeof MuiPopper>>;\n\nconst _RcPopper = forwardRef<any, RcPopperProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcPopper' });\n  const { children, ...rest } = props;\n  const { externalWindow } = useRcPortalWindowContext();\n\n  return (\n    <MuiPopper container={externalWindow?.document.body} {...rest} ref={ref}>\n      {children}\n    </MuiPopper>\n  );\n});\n\nconst RcPopper = styled(_RcPopper)`\n  ${PopperStyle};\n`;\n\nRcPopper.defaultProps = {};\n\nRcPopper.displayName = 'RcPopper';\n\nexport { RcPopper };\nexport type { RcPopperProps };\n","import { css, palette2, styled } from '../../../foundation';\nimport { RcPresenceProps } from '../Presence';\nimport { RcPresenceInnerIconSizes } from '../utils';\n\nexport const StyledDND = styled.div<RcPresenceProps>`\n  ${({ size }) => {\n    const value = RcPresenceInnerIconSizes[size!];\n    return css`\n      width: ${value[0]}px;\n      height: ${value[1]}px;\n    `;\n  }};\n  background: ${palette2('neutral', 'f01')};\n`;\n","import React, { forwardRef } from 'react';\n\nimport {\n  css,\n  getParsePaletteColor,\n  palette2,\n  px,\n  styled,\n} from '../../../foundation';\nimport { RcIcon } from '../../Icon';\nimport { RcPresenceProps } from '../Presence';\nimport {\n  RcPresenceAvailableIconSizes,\n  RcPresenceColors,\n  RcPresenceSizes,\n} from '../utils';\n\nexport const _StyledPresence = forwardRef<any, RcPresenceProps>(\n  ({ color, borderSize, type, size, ...rest }, ref) => (\n    <div ref={ref} {...rest} />\n  ),\n);\n\nexport const StyledPresence = styled(_StyledPresence)`\n  display: flex;\n  flex-shrink: 0;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  box-sizing: content-box;\n\n  ${({ size, borderSize, type, color }) => {\n    const sizeValue = px(RcPresenceSizes[size!][0]);\n\n    const availableSize = RcPresenceAvailableIconSizes[size!];\n\n    const iconSizeValue = px(availableSize[0]);\n    const scaleRate = availableSize[1];\n\n    return css`\n      width: ${sizeValue};\n      height: ${sizeValue};\n      border: ${RcPresenceSizes[borderSize || size!][1]}px solid\n        ${palette2('neutral', 'l01')};\n      background: ${color\n        ? getParsePaletteColor(color)\n        : RcPresenceColors[type!]};\n\n      ${RcIcon} {\n        transform: ${scaleRate && `scale(${scaleRate})`};\n\n        svg {\n          width: ${iconSizeValue};\n          height: ${iconSizeValue};\n        }\n      }\n    `;\n  }};\n`;\n","import {\n  css,\n  getParsePaletteColor,\n  RcThemedStyled,\n} from '../../../../foundation';\nimport { RcCircularProgressProps } from '../CircularProgress';\n\nexport const CircularProgressStyle: RcThemedStyled<\n  RcCircularProgressProps,\n  any\n> = (props) => {\n  const { color } = props;\n  const currColor = getParsePaletteColor(color);\n\n  return css`\n    color: ${currColor};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiCircularProgress from '@material-ui/core/CircularProgress';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcPaletteKeys,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { CircularProgressStyle } from './styles';\nimport { RcCircularProgressClasses } from './utils';\n\ntype RcCircularProgressProps = {\n  /** custom color */\n  color?: RcPaletteKeys | 'inherit';\n} & RcBaseProps<ComponentProps<typeof MuiCircularProgress>, 'color'>;\n\nconst _RcCircularProgress = forwardRef<any, RcCircularProgressProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcCircularProgress' });\n    const { classes: classesProp, color, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcCircularProgressClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiCircularProgress\n        {...rest}\n        color=\"inherit\"\n        ref={ref}\n        classes={classes}\n      />\n    );\n  },\n);\n\nconst RcCircularProgress = styled(_RcCircularProgress)`\n  ${CircularProgressStyle}\n`;\n\nRcCircularProgress.defaultProps = {\n  size: 24,\n  color: 'interactive.f01',\n};\n\nRcCircularProgress.displayName = 'RcCircularProgress';\n\nexport { RcCircularProgress };\nexport type { RcCircularProgressProps };\n","import {\n  css,\n  getContrastBgColor,\n  RcThemedStyled,\n} from '../../../../foundation';\nimport { RcLinearProgressProps } from '../LinearProgress';\nimport { RcLinearProgressClasses } from '../utils';\n\nexport const LinearProgressStyle: RcThemedStyled<RcLinearProgressProps, any> = (\n  props,\n) => {\n  const [currColor, contrastBgColor] = getContrastBgColor(props);\n\n  return css`\n    &:not(.${RcLinearProgressClasses.buffer}),\n    .${RcLinearProgressClasses.colorPrimary} {\n      background-color: ${contrastBgColor};\n    }\n\n    .${RcLinearProgressClasses.barColorPrimary} {\n      background-color: ${currColor};\n    }\n\n    .${RcLinearProgressClasses.dashedColorPrimary} {\n      background-image: radial-gradient(\n        ${contrastBgColor} 0%,\n        ${contrastBgColor} 16%,\n        transparent 42%\n      );\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiLinearProgress from '@material-ui/core/LinearProgress';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcPaletteKeys,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { LinearProgressStyle } from './styles';\nimport { RcLinearProgressClasses } from './utils';\n\ntype RcLinearProgressProps = {\n  /** custom color */\n  color?: RcPaletteKeys;\n} & RcBaseProps<ComponentProps<typeof MuiLinearProgress>, 'color'>;\n\nconst _RcLinearProgress = forwardRef<any, RcLinearProgressProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcLinearProgress' });\n    const { classes: classesProp, color, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcLinearProgressClasses, classesProp),\n      [classesProp],\n    );\n\n    return <MuiLinearProgress {...rest} ref={ref} classes={classes} />;\n  },\n);\n\nconst RcLinearProgress = styled(_RcLinearProgress)`\n  ${LinearProgressStyle}\n`;\n\nRcLinearProgress.defaultProps = {\n  color: 'interactive.f01',\n};\n\nRcLinearProgress.displayName = 'RcLinearProgress';\n\nexport { RcLinearProgress };\nexport type { RcLinearProgressProps };\n","import React from 'react';\n\nimport {\n  css,\n  focusVisibleColor,\n  getParsePaletteColor,\n  isRcElement,\n  opacity,\n  palette2,\n  radius,\n  RcThemedStyled,\n  setOpacity,\n} from '../../../foundation';\nimport { RcRatingProps } from '../Rating';\nimport { RcRatingClasses } from '../utils';\n\nconst getColor: RcThemedStyled<RcRatingProps> = ({ emphasized, color }) => {\n  return emphasized ? palette2('warning', 'f01') : getParsePaletteColor(color);\n};\n\nexport const RatingStyle: RcThemedStyled<RcRatingProps, any> = (props) => {\n  const { icon, emptyIcon, emphasized, color } = props;\n\n  const isIcon =\n    React.isValidElement(icon) &&\n    React.isValidElement(emptyIcon) &&\n    isRcElement(icon, ['RcIcon']) &&\n    isRcElement(emptyIcon, ['RcIcon']);\n\n  return css`\n    &.${RcRatingClasses.focusVisible}\n      .${RcRatingClasses.iconActive},\n      input:focus\n      + .${RcRatingClasses.pristine} {\n      outline: none;\n      border-radius: ${radius('xxl')};\n      box-shadow: 0 0 0 1px ${focusVisibleColor};\n    }\n\n    .${RcRatingClasses.iconActive} {\n      transform: scale(1, 1);\n    }\n\n    .${RcRatingClasses.label} {\n      padding: 0 8px;\n    }\n\n    .${RcRatingClasses.iconFilled} {\n      color: ${getColor};\n    }\n\n    .${RcRatingClasses.iconEmpty} {\n      color: ${palette2('neutral', 'f04')};\n    }\n\n    &.${RcRatingClasses.disabled} {\n      opacity: 1;\n\n      .${RcRatingClasses.iconFilled} {\n        ${isIcon\n          ? css`\n              color: ${color === 'neutral.f06' && !emphasized\n                ? palette2('neutral', 'f04')\n                : setOpacity(getColor(props), '40', true)};\n            `\n          : css`\n              opacity: ${opacity('64')};\n            `}\n      }\n\n      .${RcRatingClasses.iconEmpty} {\n        color: ${palette2('disabled', 'f02')};\n      }\n    }\n\n    &.${RcRatingClasses.readOnly} .${RcRatingClasses.icon} {\n      padding: 0 8px;\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useCallback, useMemo } from 'react';\n\nimport MuiRating, {\n  IconContainerProps as MuiIconContainerProps,\n} from '@material-ui/lab/Rating';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  RcPaletteProp,\n  styled,\n  useEventCallback,\n  useThemeProps,\n} from '../../foundation';\nimport Star from '../../icon/Star';\nimport StarBorder from '../../icon/StarBorder';\nimport { RcIcon } from '../Icon';\nimport { RcTooltip, RcTooltipProps } from '../Tooltip';\nimport { RatingStyle } from './styles';\nimport { RcRatingClasses } from './utils';\n\nconst defaultSize = 'xlarge';\n\nconst defaultIcon = <RcIcon size={defaultSize} symbol={Star} />;\n\nconst defaultEmptyIcon = <RcIcon size={defaultSize} symbol={StarBorder} />;\n\ntype RcRatingProps = {\n  /** content of tooltip, array for each icon, `['first icon', 'second icon', ...]` */\n  tooltips?: string[];\n  /** whether use emphasized style, emphasized means will use palette color `warning.f02` */\n  emphasized?: boolean;\n  /** disable tooltip */\n  disableTooltip?: boolean;\n  /** props for pass into `RcTooltip` */\n  TooltipProps?: Omit<Partial<RcTooltipProps>, 'title' | 'open'>;\n  /** color for rating icon, when is not emphasized */\n  color?: RcPaletteProp;\n} & RcBaseProps<\n  ComponentProps<typeof MuiRating>,\n  'size' | 'precision' | 'IconContainerComponent'\n>;\n\nconst _RcRating = forwardRef<any, RcRatingProps>(\n  (inProps: RcRatingProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcRating' });\n    const {\n      TooltipProps,\n      disableTooltip,\n      classes: classesProp,\n      onChangeActive: onChangeActiveProp,\n      max,\n      tooltips,\n      emphasized,\n      color,\n      ...rest\n    } = props;\n\n    const tooltipOpenStatus = useMemo(() => {\n      const tooltipOpenStatus: boolean[] = [];\n      for (let i = 0; i < max!; i++) {\n        tooltipOpenStatus.push(false);\n      }\n      return tooltipOpenStatus;\n    }, [max]);\n\n    const IconContainer = useCallback(\n      (containerProps: MuiIconContainerProps) => {\n        const { value: itemValue, children, ...other } = containerProps;\n\n        return (\n          <span {...other}>\n            {!disableTooltip && tooltips?.[itemValue - 1] ? (\n              <RcTooltip\n                title={tooltips[itemValue - 1]}\n                open={!!tooltipOpenStatus[itemValue - 1]}\n                {...TooltipProps}\n              >\n                {children as React.ReactElement<any, any>}\n              </RcTooltip>\n            ) : (\n              children\n            )}\n          </span>\n        );\n      },\n      [disableTooltip, tooltips, tooltipOpenStatus, TooltipProps],\n    );\n\n    const onChangeActive = useEventCallback(\n      (e: React.ChangeEvent<{}>, value: number) => {\n        tooltipOpenStatus.forEach((v, i) => {\n          tooltipOpenStatus[i] = i === value - 1;\n        });\n        onChangeActiveProp?.(e, value);\n      },\n    );\n\n    const classes = useMemo(\n      () => combineClasses(RcRatingClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiRating\n        ref={ref}\n        classes={classes}\n        max={max}\n        IconContainerComponent={IconContainer}\n        onChangeActive={onChangeActive}\n        {...rest}\n      />\n    );\n  },\n);\n\nconst RcRating = styled(_RcRating)`\n  ${RatingStyle}\n`;\n\nRcRating.defaultProps = {\n  icon: defaultIcon,\n  emptyIcon: defaultEmptyIcon,\n  tooltips: [],\n  emphasized: true,\n  disableTooltip: false,\n  name: 'rating',\n  color: 'neutral.f06',\n  max: 5,\n};\n\nRcRating.displayName = 'RcRating';\n\nexport { RcRating };\nexport type { RcRatingProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport Slide from '@material-ui/core/Slide';\nimport MuiSnackbar from '@material-ui/core/Snackbar';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { useUnmountPortalHandler } from '../PortalHost';\nimport { RcSnackbarContent, RcSnackbarContentProps } from './SnackbarContent';\nimport { SnackbarStyle } from './styles';\nimport { RcSnackbarClasses } from './utils';\n\ntype RcSnackbarProps = {\n  /** props apply for `RcSnackbarContent` */\n  ContentProps?: RcSnackbarContentProps;\n} & RcBaseProps<ComponentProps<typeof MuiSnackbar>> &\n  Pick<RcSnackbarContentProps, 'size' | 'type'>;\n\nconst _RcSnackbar = forwardRef<any, RcSnackbarProps>(\n  (inProps: RcSnackbarProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcSnackbar' });\n    const {\n      classes: classesProp,\n      size,\n      type,\n      message,\n      action,\n      ContentProps,\n      children,\n      TransitionProps: TransitionPropsProp,\n      ...rest\n    } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcSnackbarClasses, classesProp),\n      [classesProp],\n    );\n\n    const onExited = useUnmountPortalHandler(TransitionPropsProp?.onExited);\n\n    const TransitionProps = { ...TransitionPropsProp, onExited };\n\n    return (\n      <MuiSnackbar\n        ref={ref}\n        classes={classes}\n        TransitionProps={TransitionProps}\n        {...rest}\n      >\n        {children || (\n          <RcSnackbarContent\n            size={size}\n            type={type}\n            message={message}\n            action={action}\n            {...ContentProps}\n          />\n        )}\n      </MuiSnackbar>\n    );\n  },\n);\n\nconst RcSnackbar = styled(_RcSnackbar)`\n  ${SnackbarStyle}\n`;\n\nRcSnackbar.defaultProps = {\n  TransitionComponent: Slide,\n  anchorOrigin: {\n    vertical: 'top',\n    horizontal: 'center',\n  },\n};\n\nRcSnackbar.displayName = 'RcSnackbar';\n\nexport { RcSnackbar };\nexport type { RcSnackbarProps };\n","import {\n  css,\n  fakeBorder,\n  focusVisible,\n  getParsePaletteColor,\n  opacity,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcSnackbarContentLineHeight } from '../../SnackbarContent/utils';\nimport { RcSnackbarActionProps } from '../SnackbarAction';\nimport { RcSnackbarActionClasses } from '../utils';\n\nexport const snackbarContentActionStyle: RcThemedStyled<\n  RcSnackbarActionProps,\n  any\n> = ({ color }) => {\n  return css`\n    color: ${color && getParsePaletteColor(color)};\n\n    &.${RcSnackbarActionClasses.text} {\n      ${typography('body2')};\n      line-height: ${RcSnackbarContentLineHeight};\n      text-decoration: underline;\n    }\n\n    & + &.${RcSnackbarActionClasses.text} {\n      margin-left: ${spacing(3)};\n    }\n\n    & + &.${RcSnackbarActionClasses.icon} {\n      margin-left: ${spacing(4)};\n    }\n\n    &:active {\n      opacity: ${opacity('24', true)};\n    }\n\n    &:disabled {\n      opacity: ${opacity('24')};\n    }\n\n    &.Mui-focusVisible,\n    ${focusVisible} {\n      ${fakeBorder({\n        pseudo: true,\n        color: 'currentColor',\n        inset: false,\n        radius: 'sm',\n      })}\n    }\n  `;\n};\n","import React, { ComponentProps, FunctionComponent, useMemo } from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiButtonBase from '@material-ui/core/ButtonBase';\n\nimport {\n  omit,\n  RcBaseProps,\n  RcClassesProps,\n  RcPaletteProp,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcIcon, RcIconProps, SvgSymbol } from '../../Icon';\nimport { RcSnackbarContent, RcSnackbarContentSize } from '../SnackbarContent';\nimport { snackbarContentActionStyle } from './styles';\nimport { RcSnackbarActionClasses } from './utils';\n\ntype RcSnackbarActionProps = {\n  /** variant of action */\n  variant?: 'text' | 'icon';\n  /** text color */\n  color?: RcPaletteProp;\n  /** size for action */\n  size?: RcSnackbarContentSize;\n  /** @deprecated should use symbol to replace that */\n  icon?: SvgSymbol;\n} & RcClassesProps<'icon' | 'text'> &\n  RcBaseProps<ComponentProps<typeof MuiButtonBase>, 'color'> &\n  Pick<RcIconProps, 'symbol'>;\n\nconst _RcSnackbarAction: FunctionComponent<RcSnackbarActionProps> = (\n  inProps,\n) => {\n  const props = useThemeProps({ props: inProps, name: 'RcSnackbarAction' });\n  const {\n    children,\n    variant,\n    size,\n    icon,\n    symbol = icon,\n    classes: classesProp,\n    color,\n    className: classNameProp,\n    ...rest\n  } = props;\n\n  const className = useMemo(\n    () =>\n      clsx(classNameProp, {\n        [RcSnackbarActionClasses.text]: variant === 'text',\n        [RcSnackbarActionClasses.icon]: variant === 'icon',\n      }),\n    [classNameProp, variant],\n  );\n\n  const classes = useMemo(\n    () => omit(classesProp, ['text', 'icon']),\n    [classesProp],\n  );\n\n  return (\n    <MuiButtonBase className={className} classes={classes} {...rest}>\n      {variant === 'icon' ? (\n        <RcIcon size={size} symbol={symbol}>\n          {children}\n        </RcIcon>\n      ) : (\n        children\n      )}\n    </MuiButtonBase>\n  );\n};\n\nconst RcSnackbarAction = styled(_RcSnackbarAction)`\n  ${snackbarContentActionStyle}\n`;\n\nRcSnackbarAction.displayName = 'RcSnackbarAction';\n\nRcSnackbarAction.defaultProps = {\n  disableRipple: true,\n  variant: 'text',\n  size: RcSnackbarContent.defaultProps!.size,\n};\n\nexport { RcSnackbarAction };\nexport type { RcSnackbarActionProps };\n","import {\n  css,\n  getParsePaletteColor,\n  palette2,\n  radius,\n  RcThemedStyled,\n  shadows,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { RcSnackbarContentProps } from '../SnackbarContent';\nimport {\n  RcSnackbarContentClasses,\n  RcSnackbarContentColors,\n  RcSnackbarContentLineHeight,\n  RcSnackbarContentPaddings,\n} from '../utils';\n\nconst contentBgColor: RcThemedStyled<RcSnackbarContentProps> = ({ type }) =>\n  getParsePaletteColor(RcSnackbarContentColors[type!].bgColor);\n\nconst contentTextColor: RcThemedStyled<RcSnackbarContentProps> = ({ type }) =>\n  getParsePaletteColor(RcSnackbarContentColors[type!].textColor);\n\nexport const snackbarContentStyle: RcThemedStyled<RcSnackbarContentProps, any> =\n  ({ fullWidth, square, messageAlign, size }) => {\n    let radiusValue: any = radius('lg');\n    if (square) {\n      radiusValue = 0;\n    }\n    // when square use false, also can use radius\n    else if (fullWidth && square !== false) {\n      radiusValue = 0;\n    }\n\n    return css`\n      ${typography('body1')};\n      line-height: ${RcSnackbarContentLineHeight};\n      overflow: hidden;\n      background-color: ${contentBgColor};\n      color: ${contentTextColor};\n      box-shadow: ${shadows(4)};\n      border-radius: ${radiusValue};\n      min-width: 248px;\n      max-width: ${fullWidth ? '100%' : '640px'};\n      width: ${fullWidth && '100%'};\n      box-sizing: border-box;\n      margin: 0 auto;\n      pointer-events: auto;\n      align-items: baseline;\n      padding: ${RcSnackbarContentPaddings[size!]};\n\n      .${RcSnackbarContentClasses.message} {\n        margin: auto;\n        flex: 1;\n        padding: ${spacing(0)};\n        text-align: ${messageAlign};\n\n        word-break: break-word;\n\n        a {\n          color: ${palette2('informative', 'f02')};\n          font-style: italic;\n        }\n      }\n\n      .${RcSnackbarContentClasses.action} {\n        text-decoration: underline;\n        margin-right: 0;\n        height: ${RcSnackbarContentLineHeight};\n      }\n    `;\n  };\n","import React, {\n  ComponentProps,\n  forwardRef,\n  isValidElement,\n  useMemo,\n} from 'react';\n\nimport MuiSnackbarContent from '@material-ui/core/SnackbarContent';\n\nimport {\n  combineClasses,\n  isRcElement,\n  RcBaseProps,\n  RcBaseSize,\n  styled,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../../foundation';\nimport { RcCircularProgress } from '../../Progress/CircularProgress';\nimport { snackbarContentStyle } from './styles';\nimport {\n  RcSnackbarContentClasses,\n  RcSnackbarContentLoadingSizes,\n} from './utils';\n\ntype RcSnackbarContentMessageAlignment = 'left' | 'center' | 'right';\ntype RcSnackbarContentSize = RcBaseSize<'small' | 'medium'>;\ntype RcSnackbarContentType = 'warn' | 'success' | 'error' | 'info';\n\ntype RcSnackbarContentProps = {\n  /** message type */\n  type?: RcSnackbarContentType;\n  /** message size, default is `medium` */\n  size?: RcSnackbarContentSize;\n  /** message align  */\n  messageAlign?: RcSnackbarContentMessageAlignment;\n  /**\n   * If `true`, the input will take up the full width of its container\n   * when fullWidth the square will be `true`, if you still want square\n   * set square={false}\n   */\n  fullWidth?: boolean;\n  /** is use loading in action */\n  loading?: boolean;\n  /** @deprecated please use `aria-label` directly */\n  ariaLabel?: string;\n} & RcBaseProps<\n  ComponentProps<typeof MuiSnackbarContent>,\n  'variant' | 'elevation'\n>;\n\n/** @release */\nconst _RcSnackbarContent = forwardRef<any, RcSnackbarContentProps>(\n  (inProps: RcSnackbarContentProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcSnackbarContent' });\n    const {\n      classes: classesProp,\n      loading,\n      size,\n      messageAlign,\n      type,\n      fullWidth,\n      action: actionProp,\n      ...rest\n    } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcSnackbarContentClasses, classesProp),\n      [classesProp],\n    );\n\n    const action = useMemo(() => {\n      const getItem = (item: any) => {\n        if (isValidElement(item) && isRcElement(item, ['RcSnackbarAction'])) {\n          /** when size is not equal default size, that mean user want to custom size */\n          if (size !== RcSnackbarContent.defaultProps!.size) {\n            return item;\n          }\n\n          return React.cloneElement(item as JSX.Element, { size });\n        }\n        return item;\n      };\n\n      if (actionProp instanceof Array) {\n        return actionProp.map(getItem);\n      }\n\n      return getItem(actionProp);\n    }, [actionProp, size]);\n\n    return (\n      <MuiSnackbarContent\n        {...rest}\n        ref={ref}\n        classes={classes}\n        action={\n          loading ? (\n            <RcCircularProgress\n              color=\"inherit\"\n              size={RcSnackbarContentLoadingSizes[size!]}\n            />\n          ) : (\n            action\n          )\n        }\n      />\n    );\n  },\n);\n\nconst RcSnackbarContent = styled(\n  withDeprecatedCheck(\n    _RcSnackbarContent,\n    [\n      {\n        prop: 'ariaLabel',\n        time: '2021-3',\n        comment: `please use \\`aria-label\\` directly `,\n      },\n    ],\n    'RcSnackbarContent',\n  ),\n)`\n  ${snackbarContentStyle}\n`;\n\nRcSnackbarContent.defaultProps = {\n  type: 'success',\n  messageAlign: 'center',\n  size: 'medium',\n};\n\nRcSnackbarContent.displayName = 'RcSnackbarContent';\n\nexport { RcSnackbarContent };\nexport type {\n  RcSnackbarContentProps,\n  RcSnackbarContentSize,\n  RcSnackbarContentType,\n};\n","import { css, RcThemedStyled, spacing } from '../../../../foundation';\nimport { RcStepProps } from '../Step';\nimport { RcStepClasses } from '../utils';\n\nconst stepPadding = spacing(4);\n\nexport const StepStyle: RcThemedStyled<RcStepProps, any> = () => {\n  return css`\n    &.${RcStepClasses.horizontal} {\n      padding-left: ${stepPadding};\n      padding-right: ${stepPadding};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiStep from '@material-ui/core/Step';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { StepStyle } from './styles';\nimport { RcStepClasses } from './utils';\n\ntype RcStepProps = {} & RcBaseProps<ComponentProps<typeof MuiStep>>;\n\nconst _RcStep = forwardRef<any, RcStepProps>((inProps: RcStepProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcStep' });\n  const { classes: classesProp, children, ...rest } = props;\n  const classes = useMemo(\n    () => combineClasses(RcStepClasses, classesProp),\n    [classesProp],\n  );\n\n  return (\n    <MuiStep {...rest} ref={ref} classes={classes}>\n      {children}\n    </MuiStep>\n  );\n});\n\nconst RcStep = styled(_RcStep)`\n  ${StepStyle}\n`;\n\nRcStep.defaultProps = {};\n\nRcStep.displayName = 'RcStep';\n\nexport { RcStep };\nexport type { RcStepProps };\n","import { css, RcThemedStyled } from '../../../../foundation';\nimport { RcStepButtonProps } from '../StepButton';\nimport { RcStepButtonClasses } from '../utils';\n\nexport const StepButtonStyle: RcThemedStyled<RcStepButtonProps, any> = () => {\n  return css`\n    .${RcStepButtonClasses.touchRipple} {\n      z-index: 1;\n    }\n  `;\n};\n","import React, {\n  cloneElement,\n  ComponentProps,\n  forwardRef,\n  useMemo,\n} from 'react';\n\nimport MuiStepButton from '@material-ui/core/StepButton';\n\nimport {\n  combineClasses,\n  combineProps,\n  isRcElement,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcStepLabel, RcStepLabelProps } from '../StepLabel';\nimport { StepButtonStyle } from './styles';\nimport { RcStepButtonClasses } from './utils';\n\ntype RcStepButtonProps = {\n  /** props apply for `StepLabel` */\n  StepLabelProps?: RcStepLabelProps;\n} & RcBaseProps<ComponentProps<typeof MuiStepButton>> &\n  Pick<RcStepLabelProps, 'error' | 'editable'>;\n\nconst _RcStepButton = forwardRef<any, RcStepButtonProps>(\n  (inProps: RcStepButtonProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcStepButton' });\n    const {\n      classes: classesProp,\n      children: childrenProp,\n      icon,\n      optional,\n      error,\n      StepLabelProps,\n      editable,\n      ...rest\n    } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcStepButtonClasses, classesProp),\n      [classesProp],\n    );\n\n    const children = useMemo(() => {\n      const childProps: RcStepLabelProps | undefined = combineProps(\n        {\n          icon,\n          optional,\n          error,\n          StepIconProps: { editable },\n        },\n        StepLabelProps,\n      );\n\n      return isRcElement(childrenProp, ['RcStepLabel']) ? (\n        cloneElement(childrenProp as any, childProps)\n      ) : (\n        <RcStepLabel {...childProps}>{childrenProp}</RcStepLabel>\n      );\n    }, [StepLabelProps, childrenProp, editable, error, icon, optional]);\n\n    return (\n      <MuiStepButton\n        {...rest}\n        icon={icon}\n        optional={optional}\n        ref={ref}\n        classes={classes}\n      >\n        {children}\n      </MuiStepButton>\n    );\n  },\n);\n\nconst RcStepButton = styled(_RcStepButton)`\n  ${StepButtonStyle}\n`;\n\nRcStepButton.defaultProps = {\n  alternativeLabel: true,\n};\n\nRcStepButton.displayName = 'RcStepButton';\n\nexport { RcStepButton };\nexport type { RcStepButtonProps };\n","import { css, palette2, RcThemedStyled } from '../../../../foundation';\nimport { RcStepConnectorProps } from '../StepConnector';\nimport { RcStepConnectorClasses } from '../utils';\n\nexport const StepConnectorStyle: RcThemedStyled<RcStepConnectorProps, any> =\n  () => {\n    return css`\n      .${RcStepConnectorClasses.line} {\n        border-color: ${palette2('neutral', 'l02')};\n      }\n    `;\n  };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiStepConnector from '@material-ui/core/StepConnector';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { StepConnectorStyle } from './styles';\nimport { RcStepConnectorClasses } from './utils';\n\ntype RcStepConnectorProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiStepConnector>\n>;\n\nconst _RcStepConnector = forwardRef<any, RcStepConnectorProps>(\n  (inProps: RcStepConnectorProps, ref) => {\n    const prop = useThemeProps({ props: inProps, name: 'RcStepConnector' });\n    const { classes: classesProp, ...rest } = prop;\n    const classes = useMemo(\n      () => combineClasses(RcStepConnectorClasses, classesProp),\n      [classesProp],\n    );\n\n    return <MuiStepConnector {...rest} ref={ref} classes={classes} />;\n  },\n);\n\n/** inner component */\nconst RcStepConnector = styled(_RcStepConnector)`\n  ${StepConnectorStyle}\n`;\n\nRcStepConnector.defaultProps = {};\n\nRcStepConnector.displayName = 'RcStepConnector';\n\nexport { RcStepConnector };\nexport type { RcStepConnectorProps };\n","import React, { FunctionComponent } from 'react';\n\nimport { flexCenterStyle, radius, styled } from '../../../../foundation';\nimport { RcIcon, RcIconProps } from '../../../Icon';\nimport { iconColor, iconTextColor } from '../utils';\n\nexport type StyledCircleIconProps = { isEdit?: boolean } & RcIconProps;\n\nexport const _StyledCircleIcon: FunctionComponent<StyledCircleIconProps> = ({\n  isEdit,\n  ...rest\n}) => {\n  return <RcIcon {...rest} />;\n};\n\nexport const StyledCircleIcon = styled(_StyledCircleIcon)`\n  width: 24px;\n  height: 24px;\n  ${flexCenterStyle};\n  color: ${iconTextColor};\n  svg {\n    stroke-width: ${({ isEdit }) => (isEdit ? 1 : 2)}px;\n  }\n  border-radius: ${radius('circle')};\n  background: ${iconColor};\n`;\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiStepIcon from '@material-ui/core/StepIcon';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport Check from '../../../icon/Check';\nimport Edit from '../../../icon/Edit';\nimport { StepIconStyle } from './styles';\nimport { StyledCircleIcon } from './styles/StyledCircleIcon';\nimport { RcStepIconClasses, useIsEditable } from './utils';\n\ntype RcStepIconProps = {\n  /** is that icon editable */\n  editable?: boolean;\n} & RcBaseProps<ComponentProps<typeof MuiStepIcon>>;\n\nconst _RcStepIcon = forwardRef<any, RcStepIconProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcStepIcon' });\n  const {\n    icon: iconProp,\n    classes: classesProp,\n    editable,\n    completed,\n    children,\n    ...rest\n  } = props;\n\n  const classes = useMemo(\n    () => combineClasses(RcStepIconClasses, classesProp),\n    [classesProp],\n  );\n\n  // * get current value again\n  const isEdit = useIsEditable(props);\n\n  const icon = useMemo(() => {\n    if (editable) {\n      return <StyledCircleIcon isEdit symbol={Edit} size=\"small\" />;\n    }\n\n    return completed ? (\n      <StyledCircleIcon\n        isEdit={isEdit}\n        symbol={isEdit ? Edit : Check}\n        size=\"small\"\n      />\n    ) : (\n      iconProp\n    );\n  }, [editable, completed, isEdit, iconProp]);\n\n  return <MuiStepIcon {...rest} ref={ref} classes={classes} icon={icon} />;\n});\n\n/** inner component */\nconst RcStepIcon = styled(_RcStepIcon)`\n  ${StepIconStyle}\n`;\n\nRcStepIcon.defaultProps = {};\n\nRcStepIcon.displayName = 'RcStepIcon';\n\nexport { RcStepIcon };\nexport type { RcStepIconProps };\n","import {\n  css,\n  palette2,\n  RcThemedStyled,\n  typography,\n} from '../../../../foundation';\nimport { RcStepIconProps } from '../StepIcon';\nimport { iconColor, iconTextColor, RcStepIconClasses } from '../utils';\n\nexport const StepIconStyle: RcThemedStyled<RcStepIconProps, any> = () => {\n  return css`\n    .${RcStepIconClasses.root} {\n      color: ${palette2('neutral', 'b04')};\n    }\n\n    .${RcStepIconClasses.active} {\n      color: ${iconColor};\n    }\n\n    .${RcStepIconClasses.text} {\n      fill: ${iconTextColor};\n      ${typography('body1', true)};\n      /* for font size change with font */\n      transform: translateY(1px);\n    }\n  `;\n};\n","import {\n  css,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../../foundation';\nimport { StepIconStyle } from '../../StepIcon/styles';\nimport { RcStepIconClasses } from '../../StepIcon/utils';\nimport { RcStepLabelProps } from '../StepLabel';\nimport { RcStepLabelClasses } from '../utils';\n\n// * follow mr and release: https://github.com/mui-org/material-ui/pull/22559\n/* TODO: this will be move into RcStepIcon, that need mui fix */\nexport const StepLabelStyle: RcThemedStyled<RcStepLabelProps, any> = () => {\n  return css`\n    ${StepIconStyle};\n\n    .${RcStepLabelClasses.labelContainer} {\n      .${RcStepLabelClasses.alternativeLabel} {\n        margin-top: ${spacing(3)};\n      }\n    }\n\n    .${RcStepLabelClasses.label} {\n      ${typography('body1')};\n\n      color: ${palette2('neutral', 'f04')};\n    }\n\n    .${RcStepLabelClasses.active} {\n      ${typography('body2')};\n\n      color: ${palette2('neutral', 'f06')};\n    }\n\n    &.${RcStepLabelClasses.error} {\n      .${RcStepIconClasses.root} {\n        color: ${palette2('danger', 'f02')};\n      }\n\n      .${RcStepLabelClasses.label} {\n        color: ${palette2('danger', 'f02')};\n      }\n    }\n\n    &.${RcStepLabelClasses.disabled} {\n      .${RcStepIconClasses.root} {\n        color: ${palette2('disabled', 'f02')};\n      }\n\n      .${RcStepLabelClasses.label} {\n        color: ${palette2('disabled', 'f02')};\n      }\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport { StepButtonProps as MuiStepButtonProps } from '@material-ui/core/StepButton';\nimport MuiStepLabel from '@material-ui/core/StepLabel';\n\nimport {\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcStepIcon, RcStepIconProps } from '../StepIcon';\nimport { StepLabelStyle } from './styles';\nimport { RcStepLabelClasses } from './utils';\n\ntype RcStepLabelProps = {\n  /**\n   * Props applied to the `RcStepIcon` element.\n   */\n  StepIconProps?: Partial<RcStepIconProps>;\n} & RcBaseProps<ComponentProps<typeof MuiStepLabel>, 'StepIconProps'> &\n  Pick<MuiStepButtonProps, 'active' | 'completed'> &\n  Pick<RcStepIconProps, 'editable'>;\n\nconst _RcStepLabel = forwardRef<any, RcStepLabelProps>(\n  (inProps: RcStepLabelProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcStepLabel' });\n    const {\n      classes: classesProp,\n      StepIconProps: StepIconPropsProp,\n      children,\n      disabled,\n      editable,\n      onClick,\n      ...rest\n    } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcStepLabelClasses, classesProp),\n      [classesProp],\n    );\n\n    const StepIconProps = useMemo(\n      () => combineProps({ editable }, StepIconPropsProp),\n      [StepIconPropsProp, editable],\n    );\n\n    return (\n      <MuiStepLabel\n        ref={ref}\n        StepIconComponent={RcStepIcon}\n        StepIconProps={StepIconProps}\n        classes={classes}\n        disabled={disabled}\n        onClick={disabled ? undefined : onClick}\n        {...rest}\n      >\n        {children}\n      </MuiStepLabel>\n    );\n  },\n);\n\nconst RcStepLabel = styled(_RcStepLabel)`\n  ${StepLabelStyle}\n`;\n\nRcStepLabel.defaultProps = {};\n\n// ! that tell muiName our `RcStepLabel` is same as MuiStepLabel\n(RcStepLabel as any).muiName = (MuiStepLabel as any).muiName;\n\nRcStepLabel.displayName = 'RcStepLabel';\n\nexport { RcStepLabel };\nexport type { RcStepLabelProps };\n","import { css, RcThemedStyled, spacing } from '../../../foundation';\nimport { RcStepperProps } from '../Stepper';\n\nexport const StepperStyle: RcThemedStyled<RcStepperProps, any> = () => {\n  return css`\n    padding: ${spacing(6, 0, 6, 0)};\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiStepper from '@material-ui/core/Stepper';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { RcStepConnector } from './StepConnector';\nimport { StepperStyle } from './styles';\nimport { RcStepperClasses } from './utils';\n\ntype RcStepperProps = {} & RcBaseProps<\n  ComponentProps<typeof MuiStepper>,\n  'orientation'\n>;\n\nconst _RcStepper = forwardRef<any, RcStepperProps>(\n  (inProps: RcStepperProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcStepper' });\n    const { classes: classesProp, children, ...rest } = props;\n\n    const classes = useMemo(\n      () => combineClasses(RcStepperClasses, classesProp),\n      [classesProp],\n    );\n\n    return (\n      <MuiStepper {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiStepper>\n    );\n  },\n);\n\nconst RcStepper = styled(_RcStepper)`\n  ${StepperStyle}\n`;\n\nRcStepper.defaultProps = {\n  alternativeLabel: true,\n  nonLinear: true,\n  connector: <RcStepConnector />,\n};\n\nRcStepper.displayName = 'RcStepper';\n\nexport { RcStepper };\nexport type { RcStepperProps };\n","import React, { memo } from 'react';\n\nimport { TablePaginationActionsProps } from '@material-ui/core/TablePagination/TablePaginationActions';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  spacing,\n  styled,\n} from '../../../foundation';\nimport ArrowLeft from '../../../icon/ArrowLeft2';\nimport ArrowRight from '../../../icon/ArrowRight';\nimport { RcIconButtonProps } from '../../Buttons/IconButton';\nimport { RcIconButton } from '../../Buttons/IconButton/IconButton';\nimport { WithTooltipProps } from '../../Tooltip';\n\nconst TablePaginationActionsWrapper = styled.div`\n  display: flex;\n  margin-left: ${spacing(5)};\n`;\n\ntype IconButtonProps = RcIconButtonProps & WithTooltipProps;\n\nexport type RcTablePaginationActionsProps = {\n  /** back icon button props */\n  backIconButtonProps?: Partial<IconButtonProps>;\n  /** next icon button props */\n  nextIconButtonProps?: Partial<IconButtonProps>;\n} & RcBaseProps<\n  TablePaginationActionsProps,\n  'backIconButtonProps' | 'nextIconButtonProps' | 'onChangePage'\n>;\n\nexport const RcTablePaginationActions = memo<RcTablePaginationActionsProps>(\n  (props) => {\n    const {\n      onPageChange,\n      page,\n      count,\n      rowsPerPage,\n      className,\n      backIconButtonProps,\n      nextIconButtonProps,\n    } = props;\n\n    const handleBackButtonClick = (event: any) => {\n      onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event: any) => {\n      onPageChange(event, page + 1);\n    };\n\n    const prevDisabled = page === 0;\n\n    const nextDisabled =\n      count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false;\n\n    return (\n      <TablePaginationActionsWrapper className={className}>\n        <RcIconButton\n          symbol={ArrowLeft}\n          onClick={handleBackButtonClick}\n          size=\"medium\"\n          disabled={prevDisabled}\n          {...combineProps(\n            { TooltipProps: { tooltipForceHide: prevDisabled } },\n            backIconButtonProps,\n          )}\n        />\n        <RcIconButton\n          symbol={ArrowRight}\n          onClick={handleNextButtonClick}\n          size=\"medium\"\n          disabled={nextDisabled}\n          {...combineProps(\n            { TooltipProps: { tooltipForceHide: nextDisabled } },\n            nextIconButtonProps,\n          )}\n        />\n      </TablePaginationActionsWrapper>\n    );\n  },\n);\n","import MuiTableCell from '@material-ui/core/TableCell';\n\nimport {\n  css,\n  palette2,\n  RcThemedStyled,\n  spacing,\n  styled,\n  typography,\n} from '../../../foundation';\nimport { RcSelect } from '../../Forms/Select';\nimport {\n  RcLineSelectInputClasses,\n  RcSelectClasses,\n} from '../../Forms/Select/utils';\nimport { RcMenuItem } from '../../Menu/MenuItem';\nimport { RcTablePaginationProps } from '../TablePagination';\nimport { RcTablePaginationClasses } from '../utils';\n\nexport const TablePaginationMenuItem = styled(RcMenuItem)`\n  min-width: unset;\n`;\n\nexport const TablePaginationStyle: RcThemedStyled<RcTablePaginationProps, any> =\n  () => {\n    return css`\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      color: ${palette2('neutral', 'f06')};\n      ${typography('body1')};\n\n      &:last-child {\n        padding: 0;\n      }\n\n      .${RcTablePaginationClasses.toolbar} {\n        min-height: 52px;\n        padding-right: 2px;\n      }\n\n      .${RcTablePaginationClasses.selectRoot} {\n        margin-right: ${spacing(7)};\n        max-width: none;\n      }\n\n      .${RcLineSelectInputClasses.input} {\n        font-size: inherit;\n        padding: ${spacing(1.5, 6, 1.5, 2)};\n      }\n\n      .${RcTablePaginationClasses.toolbar} {\n        min-height: 52px;\n        padding-right: 2px;\n      }\n\n      .${RcTablePaginationClasses.caption} {\n        flex-shrink: 0;\n        margin: 0px;\n      }\n\n      ${RcSelect} {\n        width: auto;\n      }\n\n      .${RcSelectClasses.icon} {\n        transform: scale(0.75);\n      }\n    `;\n  };\n\nexport const TablePaginationRoot = styled(MuiTableCell)``;\n","import React, { ComponentProps, ElementType, forwardRef, useMemo } from 'react';\n\nimport clsx from 'clsx';\n\nimport MuiTableCell from '@material-ui/core/TableCell';\nimport MuiTablePagination from '@material-ui/core/TablePagination';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { RcSelect, RcSelectProps } from '../Forms/Select';\nimport { RcToolbar } from '../Toolbar';\nimport { RcTypography } from '../Typography';\nimport {\n  RcTablePaginationActions,\n  RcTablePaginationActionsProps,\n  TablePaginationMenuItem,\n  TablePaginationRoot,\n  TablePaginationStyle,\n} from './styles';\nimport {\n  defaultLabelDisplayedRows,\n  defaultLabelOfPage,\n  OfPageInfo,\n  RcTablePaginationClasses,\n} from './utils';\n\ntype RcTablePaginationProps = {\n  component?: ElementType;\n  /**\n   * type of that pagination, when set pageSelection,\n   * that will can select to go page directly\n\n  * @default displayedRows\n   */\n  type?: 'pageSelection' | 'displayedRows';\n  /**\n   * action components\n   */\n  ActionsComponent?: ElementType<RcTablePaginationActionsProps>;\n  /**\n   * action components\n   */\n  SelectProps?: Partial<RcSelectProps>;\n  /** of page render string */\n  labelOfPage?: (pageInfo: OfPageInfo) => string;\n} & RcBaseProps<\n  ComponentProps<typeof MuiTablePagination>,\n  | 'ActionsComponent'\n  | 'backIconButtonProps'\n  | 'nextIconButtonProps'\n  | 'SelectProps'\n> &\n  Pick<\n    RcTablePaginationActionsProps,\n    'backIconButtonProps' | 'nextIconButtonProps'\n  >;\n\nconst _RcTablePagination = forwardRef<any, RcTablePaginationProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcTablePagination' });\n\n    const {\n      classes: classesProp,\n      type = 'displayedRows',\n      ActionsComponent = RcTablePaginationActions,\n      className,\n      colSpan: colSpanProp,\n      component = MuiTableCell,\n      count,\n      labelDisplayedRows = defaultLabelDisplayedRows,\n      labelOfPage = defaultLabelOfPage,\n      labelRowsPerPage = 'Rows per page:',\n      onPageChange,\n      onRowsPerPageChange,\n      rowsPerPageOptions = [10, 25, 50, 100],\n      SelectProps = {},\n      page,\n      rowsPerPage,\n      backIconButtonProps,\n      nextIconButtonProps,\n      // getItemAriaLabel = defaultGetAriaLabel,\n      // showFirstButton = false,\n      // showLastButton = false,\n      ...rest\n    } = props;\n\n    const MenuItemComponent = SelectProps.native\n      ? 'option'\n      : TablePaginationMenuItem;\n\n    const totalPage = Math.ceil(count / rowsPerPage);\n    const isPageSelection = type === 'pageSelection';\n\n    const classes = useMemo(\n      () => combineClasses(RcTablePaginationClasses, classesProp),\n      [classesProp],\n    );\n\n    // const selectId = useId(SelectProps.id);\n    // const labelId = useId(SelectProps.labelId);\n\n    let colSpan;\n    if (component === MuiTableCell || component === 'td') {\n      colSpan = colSpanProp || 1000; // col-span over everything\n    }\n\n    const getLabelDisplayedRowsTo = () => {\n      if (count === -1) return (page + 1) * rowsPerPage;\n      return rowsPerPage === -1\n        ? count\n        : Math.min(count, (page + 1) * rowsPerPage);\n    };\n\n    const menuItems = useMemo(() => {\n      const menus: JSX.Element[] = [];\n\n      if (!isPageSelection) return menus;\n\n      for (let i = 0; i < totalPage; i++) {\n        menus.push(\n          <MenuItemComponent\n            value={i}\n            selected={i === page}\n            key={i}\n            className={classes!.menuItem}\n            onClick={(e: any) => {\n              onPageChange?.(e, i);\n            }}\n          >\n            {i + 1}\n          </MenuItemComponent>,\n        );\n      }\n      return menus;\n    }, [\n      MenuItemComponent,\n      classes,\n      isPageSelection,\n      onPageChange,\n      page,\n      totalPage,\n    ]);\n\n    return (\n      <TablePaginationRoot\n        colSpan={colSpan}\n        ref={ref}\n        as={component}\n        className={clsx(classes.root, className)}\n        {...rest}\n      >\n        <RcToolbar className={classes.toolbar}>\n          <div className={classes.spacer} />\n          {rowsPerPageOptions!.length > 1 && (\n            <RcTypography\n              color=\"inherit\"\n              variant=\"body1\"\n              className={classes!.caption}\n              // id={labelId}\n            >\n              {labelRowsPerPage}\n            </RcTypography>\n          )}\n\n          {rowsPerPageOptions.length > 1 && (\n            <RcSelect\n              className={classes!.selectRoot}\n              InputProps={{ disableUnderline: true }}\n              value={rowsPerPage}\n              onChange={onRowsPerPageChange}\n              {...SelectProps}\n            >\n              {rowsPerPageOptions!.map((rowsPerPageOption) => {\n                const value = (rowsPerPageOption as any).value\n                  ? (rowsPerPageOption as any).value\n                  : rowsPerPageOption;\n\n                const label = (rowsPerPageOption as any).label\n                  ? (rowsPerPageOption as any).label\n                  : rowsPerPageOption;\n\n                return (\n                  <MenuItemComponent\n                    className={classes!.menuItem}\n                    key={value}\n                    value={value}\n                  >\n                    {label}\n                  </MenuItemComponent>\n                );\n              })}\n            </RcSelect>\n          )}\n\n          {isPageSelection ? (\n            <>\n              <RcSelect\n                value={page}\n                InputProps={{ disableUnderline: true }}\n                renderValue={(p: number) => p + 1}\n                virtualize\n              >\n                {menuItems}\n              </RcSelect>\n              <p className={classes.caption}>{labelOfPage({ totalPage })}</p>\n            </>\n          ) : (\n            <p className={classes.caption}>\n              {labelDisplayedRows({\n                from: count === 0 ? 0 : page * rowsPerPage + 1,\n                to: getLabelDisplayedRowsTo(),\n                count: count === -1 ? -1 : count,\n                page,\n              })}\n            </p>\n          )}\n\n          <ActionsComponent\n            className={classes.actions}\n            backIconButtonProps={backIconButtonProps}\n            count={count}\n            nextIconButtonProps={nextIconButtonProps}\n            onPageChange={onPageChange!}\n            page={page}\n            rowsPerPage={rowsPerPage}\n            // showFirstButton={showFirstButton}\n            // showLastButton={showLastButton}\n            // getItemAriaLabel={getItemAriaLabel}\n          />\n        </RcToolbar>\n      </TablePaginationRoot>\n    );\n  },\n);\n\nconst RcTablePagination = styled(_RcTablePagination)`\n  ${TablePaginationStyle}\n`;\n\nRcTablePagination.displayName = 'RcTablePagination';\n\nexport { RcTablePagination };\nexport type { RcTablePaginationProps };\n","import { palette2, setOpacity, styled } from '../../foundation';\n\nexport const RcTableRow = styled.tr`\n  outline: none;\n\n  &:not(:last-child) {\n    border-bottom: 1px solid ${palette2('neutral', 'l02')};\n  }\n\n  &:hover {\n    background-color: ${setOpacity(palette2('action', 'grayLight'), '08')};\n  }\n`;\n","import React, { forwardRef } from 'react';\n\nimport { styled } from '../../foundation';\nimport { RcTypography, RcTypographyProps } from '../Typography';\nimport { COLUMN_TEXT_ALIGN } from './types';\n\ntype RcTableBodyCellContentProps = {\n  readonly textAlign?: COLUMN_TEXT_ALIGN;\n} & RcTypographyProps;\n\nconst _RcTableBodyCellContent = forwardRef<any, RcTableBodyCellContentProps>(\n  ({ children, noWrap = true, ...rest }, ref) => (\n    <RcTypography\n      ref={ref}\n      noWrap={noWrap}\n      component=\"div\"\n      color=\"neutral.f05\"\n      {...rest}\n    >\n      {children}\n    </RcTypography>\n  ),\n);\n\nconst RcTableBodyCellContent = styled(_RcTableBodyCellContent)`\n  text-align: ${({ textAlign }) => textAlign};\n`;\n\nexport { RcTableBodyCellContent };\n","import { KeyboardEventHandler } from 'react';\n\nimport {\n  css,\n  fakeBorder,\n  focusVisibleShadowStyle,\n  focusWithin,\n  palette2,\n  spacing,\n  styled,\n} from '../../foundation';\nimport {\n  COLUMN_TEXT_ALIGN,\n  ORDER_TABLE_BY,\n  TABLE_BORDER_TYPE,\n  TABLE_STICKY_TYPE,\n  TABLE_TYPE,\n} from './types';\n\ninterface StyledTableCellProps {\n  readonly width?: number | string;\n  readonly sortDirection: any;\n  readonly hasSortKey?: boolean;\n  readonly onClickCapture?: KeyboardEventHandler<HTMLTableHeaderCellElement>;\n  readonly onKeyDown?: KeyboardEventHandler<HTMLTableHeaderCellElement>;\n}\n\ninterface StyledTableHeadCellContentProps {\n  readonly textAlign?: COLUMN_TEXT_ALIGN;\n}\n\nconst TableWrapper = styled('div')`\n  height: 100%;\n  width: 100%;\n  overflow: auto;\n\n  background-color: ${palette2('neutral', 'b01')};\n  &.${TABLE_BORDER_TYPE.BORDERED} {\n    border-radius: 4px;\n    border: 1px solid ${palette2('neutral', 'l02')};\n  }\n`;\n\ninterface StyledTableProps {\n  readonly minWidth?: number | string;\n}\n\nconst StyledTable = styled('table')<StyledTableProps>`\n  border-collapse: collapse;\n  table-layout: fixed;\n  width: 100%;\n  display: table;\n  /* scroll when viewport is less than 960px including the 332px from left navs */\n  min-width: ${spacing(157)};\n\n  @media only screen and (max-width: ${spacing(157)}) {\n    table-layout: auto;\n  }\n\n  &.${TABLE_STICKY_TYPE.STICKY} th {\n    position: sticky;\n    top: 0;\n  }\n\n  thead {\n    border-bottom: 1px solid ${palette2('neutral', 'l02')};\n    width: 100%;\n    position: sticky;\n    top: 0;\n    display: table-header-group;\n    z-index: 5;\n  }\n\n  tbody {\n    display: table-row-group;\n  }\n\n  tr {\n    display: table-row;\n    padding-left: ${spacing(4)};\n\n    th,\n    td {\n      -webkit-box-sizing: border-box;\n      -moz-box-sizing: border-box;\n      box-sizing: border-box;\n      vertical-align: middle;\n    }\n    td:first-child {\n      padding-left: ${spacing(4)};\n      margin-left: -${spacing(4)};\n    }\n    td:not(:first-child) {\n      padding-left: ${spacing(4)};\n      padding-right: ${spacing(4)};\n    }\n  }\n\n  &.${TABLE_TYPE.MODAL} tr td {\n    overflow: hidden;\n    height: 40px;\n  }\n\n  &.${TABLE_TYPE.CARD} tr td {\n    overflow: hidden;\n    height: 52px;\n  }\n\n  &.${TABLE_TYPE.FULL} tr td {\n    overflow: hidden;\n    height: 64px;\n  }\n\n  &.${TABLE_TYPE.AUTO} tr td {\n    overflow: hidden;\n    padding: ${spacing(3, 4)};\n    height: auto;\n  }\n`;\n\nconst StyledTableRow = styled('tr')`\n  height: 25px;\n  display: table-row;\n  font-size: 12px;\n  text-align: left;\n  vertical-align: middle;\n`;\n\nconst StyledSortIconWrapper = styled.div`\n  padding-left: 8px;\n  padding-right: 8px;\n  vertical-align: middle;\n  display: inline-flex;\n\n  & path {\n    fill: ${palette2('neutral', 'f04')};\n  }\n`;\n\nconst StyledTableHeadText = styled.div`\n  text-overflow: ellipsis;\n  overflow: auto;\n`;\n\nconst StyledTableHeadCell = styled('th')<StyledTableCellProps>`\n  color: ${(props) =>\n    props.sortDirection === ORDER_TABLE_BY.NONE\n      ? palette2('neutral', 'f06')\n      : palette2('interactive', 'f01')};\n  user-select: none;\n  text-align: left;\n  background-color: ${(props) =>\n    props.sortDirection === ORDER_TABLE_BY.NONE\n      ? palette2('neutral', 'b02')\n      : palette2('neutral', 'b03')};\n  z-index: 100;\n  line-height: 32px;\n  width: ${(props) => props.width};\n  padding-top: 0;\n  padding-bottom: 0;\n  display: table-cell;\n  white-space: nowrap;\n  overflow: hidden;\n\n  & > div {\n    border: 1px solid inherit;\n    padding-left: ${spacing(4)};\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n  }\n\n  ${({ hasSortKey }) =>\n    hasSortKey &&\n    css`\n      ${focusWithin} {\n        background-color: ${palette2('neutral', 'b03')};\n        ${fakeBorder()};\n        cursor: pointer;\n        outline: none;\n      }\n      position: relative;\n      ${focusVisibleShadowStyle()};\n    `}\n`;\n\n// for keep vscode styled-component color\ntype P = StyledTableHeadCellContentProps;\n\nconst StyledTableHeadCellContent = styled.div<P>`\n  display: flex;\n  align-items: center;\n\n  flex-direction: ${({ textAlign }) =>\n    textAlign === COLUMN_TEXT_ALIGN.RIGHT ? 'row-reverse' : 'row'};\n  padding-left: ${({ textAlign }) =>\n    textAlign === COLUMN_TEXT_ALIGN.RIGHT ? 0 : spacing(4)};\n  padding-right: ${({ textAlign }) =>\n    textAlign === COLUMN_TEXT_ALIGN.RIGHT ? spacing(4) : 0};\n`;\n\nexport {\n  TableWrapper,\n  StyledTable,\n  StyledTableRow,\n  StyledSortIconWrapper,\n  StyledTableHeadCell,\n  StyledTableHeadText,\n  StyledTableHeadCellContent,\n};\n","import {\n  css,\n  palette2,\n  px,\n  RcThemedStyled,\n  typography,\n} from '../../../../foundation';\nimport { RcTabProps } from '../Tab';\nimport { RcTabClasses } from '../utils';\n\nconst getMinHeight = (size: RcTabProps['size']) => (size === 'large' ? 60 : 32);\n\nexport const TabStyle: RcThemedStyled<RcTabProps, any> = (props) => {\n  const { size, direction: directionProp } = props;\n\n  const isVertical = directionProp === 'vertical';\n\n  return css`\n    text-transform: none;\n    box-sizing: border-box;\n    ${typography('body1')};\n    color: ${palette2('tab', 'default')};\n\n    &.${RcTabClasses.selected} {\n      ${typography('body2')};\n      color: ${palette2('tab', 'selected')};\n    }\n\n    min-height: ${px(getMinHeight(size!))};\n    min-width: 32px;\n\n    ${directionProp !== undefined &&\n    css`\n      .${RcTabClasses.wrapper} {\n        flex-direction: ${isVertical ? 'row' : 'column'};\n      }\n\n      &.${RcTabClasses.labelIcon} .${RcTabClasses.wrapper} > *:first-child {\n        margin-bottom: ${isVertical && 'unset'};\n        // 6px is follow mui\n        margin-right: ${isVertical && '6px'};\n      }\n    `}\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiTab from '@material-ui/core/Tab';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  RcBaseSize,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { TabStyle } from './styles';\nimport { RcTabClasses } from './utils';\n\ntype RcTabSize = RcBaseSize<'small' | 'large'>;\n\ntype RcTabProps = {\n  /** tab size, default is `small` */\n  size?: RcTabSize;\n  /** tab wrapper flex direction, default is `vertical` */\n  direction?: 'vertical' | 'horizontal';\n} & RcBaseProps<ComponentProps<typeof MuiTab>, 'wrapped' | 'textColor'>;\n\nconst _RcTab = forwardRef<any, RcTabProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcTab' });\n  const { classes: classesProp, children, direction, ...rest } = props;\n  const classes = useMemo(\n    () => combineProps(RcTabClasses, classesProp),\n    [classesProp],\n  );\n\n  return <MuiTab {...rest} ref={ref} classes={classes} />;\n});\n\nconst RcTab = styled(_RcTab)`\n  ${TabStyle}\n`;\n\nRcTab.defaultProps = {\n  size: 'small',\n};\n\nRcTab.displayName = 'RcTab';\n\nexport { RcTab };\nexport type { RcTabProps };\n","/**\n * this file origin from Mui source to change below Tabs content\n * ! just change the MuiTabs component to our RcTabs\n * https://github.com/mui-org/material-ui/blob/master/packages/material-ui-lab/src/TabList/TabList.js\n */\nimport React, { forwardRef, useMemo } from 'react';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcTabProps } from '../Tab/Tab';\nimport { getPanelId, getTabId, useTabContext } from '../TabContext';\nimport { RcTabs, RcTabsProps } from '../Tabs';\nimport { TabListStyle } from './styles';\nimport { RcTabListClasses } from './utils';\n\ntype RcTabListProps = {} & RcBaseProps<RcTabsProps>;\n\nconst _RcTabList = forwardRef<any, RcTabListProps>(\n  (inProps: RcTabListProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcTabList' });\n    const { classes: classesProp, children: childrenProp, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcTabListClasses, classesProp),\n      [classesProp],\n    );\n\n    const context = useTabContext();\n    if (context === null) {\n      throw new TypeError('[RcTabList] No TabContext provided');\n    }\n\n    const children = React.Children.map(\n      childrenProp,\n      (child: React.ReactElement<RcTabProps>) => {\n        const { value } = child.props;\n        return React.cloneElement(child, {\n          'aria-controls': getPanelId(context, value),\n          id: getTabId(context, value),\n        });\n      },\n    );\n\n    return (\n      <RcTabs {...rest} ref={ref} classes={classes} value={context.value}>\n        {children}\n      </RcTabs>\n    );\n  },\n);\n\nconst RcTabList = styled(_RcTabList)`\n  ${TabListStyle}\n`;\n\nRcTabList.defaultProps = {};\n\nRcTabList.displayName = 'RcTabList';\n\nexport { RcTabList };\nexport type { RcTabListProps };\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiTabPanel from '@material-ui/lab/TabPanel';\n\nimport {\n  combineClasses,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { useTabContext } from '../TabContext';\nimport { TabPanelStyle } from './styles';\nimport { RcTabPanelClasses } from './utils';\n\ntype RcTabPanelProps = {} & RcBaseProps<ComponentProps<typeof MuiTabPanel>>;\n\nconst _RcTabPanel = forwardRef<any, RcTabPanelProps>(\n  (inProps: RcTabPanelProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcTabPanel' });\n    const { classes: classesProp, children, ...rest } = props;\n    const classes = useMemo(\n      () => combineClasses(RcTabPanelClasses, classesProp),\n      [classesProp],\n    );\n\n    // * that just check is that have context, others let mui handle inner\n    const context = useTabContext();\n    if (context === null) {\n      throw new TypeError('[RcTabList] No RcTabContext provided');\n    }\n\n    return (\n      <MuiTabPanel {...rest} ref={ref} classes={classes}>\n        {children}\n      </MuiTabPanel>\n    );\n  },\n);\n\nconst RcTabPanel = styled(_RcTabPanel)`\n  ${TabPanelStyle}\n`;\n\nRcTabPanel.defaultProps = {};\n\nRcTabPanel.displayName = 'RcTabPanel';\n\nexport { RcTabPanel };\nexport type { RcTabPanelProps };\n","import { css, RcThemedStyled } from '../../../../../foundation';\nimport { MoreMenuTabProps } from '../MoreMenuTab';\n\nexport const MoreMenuTabStyle: RcThemedStyled<MoreMenuTabProps, any> = ({\n  orientation,\n}) => {\n  const isVertical = orientation === 'vertical';\n\n  return css`\n    position: absolute;\n    bottom: 0;\n\n    ${isVertical\n      ? css`\n          width: 100%;\n        `\n      : css`\n          top: 0;\n          right: 0;\n        `}\n  `;\n};\n","import React, { forwardRef, useMemo, useState } from 'react';\n\nimport {\n  RcBaseProps,\n  styled,\n  useEventCallback,\n  useId,\n} from '../../../../foundation';\nimport MoreHorizIcon from '../../../../icon/MoreHoriz';\nimport { RcIcon } from '../../../Icon';\nimport { RcListItemIcon, RcListItemText } from '../../../List';\nimport { RcMenu, RcMenuItem, RcMenuProps } from '../../../Menu';\nimport { RcTooltip, RcTooltipProps } from '../../../Tooltip';\nimport { RcTab, RcTabProps } from '../../Tab';\nimport { getKey } from '../MoreMenuTabs/utils';\nimport { MoreMenuTabStyle } from './styles';\n\ntype MoreMenuTabProps = {\n  menuItems: RcBaseProps<RcTabProps>[];\n  MenuProps?: RcBaseProps<RcMenuProps, 'anchorEl' | 'open' | 'variant'>;\n  TooltipProps?: RcBaseProps<RcTooltipProps, 'children'>;\n  onChange?: (event: React.MouseEvent<HTMLLIElement>, value: any) => void;\n  orientation?: 'horizontal' | 'vertical';\n  MoreIcon?: JSX.Element;\n} & RcBaseProps<RcTabProps, 'onChange'>;\n\nconst DEFAULT_MORE_MENU_TAB_LABEL = 'more_menu_tab';\n\nconst _MoreMenuTab = forwardRef<any, MoreMenuTabProps>((props, ref) => {\n  const {\n    menuItems,\n    MenuProps = {},\n    TooltipProps,\n    onChange,\n    MoreIcon: MoreIconProp,\n    ...rest\n  } = props;\n  const {\n    id: menuIdProp,\n    onClose: onMenuCloseProp,\n    ...MenuPropsRest\n  } = MenuProps;\n\n  const menuId = useId(menuIdProp);\n  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n  const MoreIcon = useMemo(() => {\n    const Icon = MoreIconProp || (\n      <RcIcon size=\"medium\" color=\"neutral.f04\" symbol={MoreHorizIcon} />\n    );\n    if (TooltipProps?.title) {\n      return <RcTooltip {...(TooltipProps as any)}>{Icon}</RcTooltip>;\n    }\n    return Icon;\n  }, [MoreIconProp, TooltipProps]);\n\n  const handleTabClick = useEventCallback(\n    (event: React.MouseEvent<HTMLButtonElement>) => {\n      setAnchorEl(event.currentTarget);\n    },\n  );\n\n  const handleMenuClose = useEventCallback(\n    (event: {}, reason: 'backdropClick' | 'escapeKeyDown') => {\n      setAnchorEl(null);\n      onMenuCloseProp?.(event, reason);\n    },\n  );\n\n  const MenuList = useMemo(() => {\n    if (!menuItems || menuItems.length === 0) {\n      return null;\n    }\n    return menuItems.map((item, idx) => {\n      const {\n        icon,\n        label,\n        value,\n        disabled,\n        onClick,\n        selected,\n        ...menuItemRest\n      } = item;\n\n      const handleClick = (event: React.MouseEvent<HTMLLIElement>) => {\n        onChange?.(event, value);\n        onClick?.(event);\n      };\n\n      return (\n        <RcMenuItem\n          key={getKey(menuItemRest.key!, idx)}\n          disabled={disabled}\n          selected={selected}\n          value={value}\n          onClick={handleClick}\n          data-test-automation-id={menuItemRest['data-test-automation-id']}\n        >\n          {icon ? <RcListItemIcon>{icon}</RcListItemIcon> : null}\n          <RcListItemText primary={label || value} />\n        </RcMenuItem>\n      );\n    });\n  }, [menuItems, onChange]);\n\n  return (\n    <>\n      <RcTab\n        {...rest}\n        ref={ref}\n        onClick={handleTabClick}\n        label={MoreIcon}\n        value={DEFAULT_MORE_MENU_TAB_LABEL}\n        aria-haspopup=\"true\"\n        aria-controls={menuId}\n      />\n      <RcMenu\n        autoClose\n        {...MenuPropsRest}\n        id={menuId}\n        anchorEl={anchorEl}\n        open={Boolean(anchorEl)}\n        variant=\"menu\"\n        onClose={handleMenuClose}\n      >\n        {MenuList}\n      </RcMenu>\n    </>\n  );\n});\n\n/** inner component */\nconst MoreMenuTab = styled(_MoreMenuTab)`\n  ${MoreMenuTabStyle}\n`;\n\nMoreMenuTab.defaultProps = {\n  label: DEFAULT_MORE_MENU_TAB_LABEL,\n  value: DEFAULT_MORE_MENU_TAB_LABEL,\n};\n\nMoreMenuTab.displayName = 'MoreMenuTab';\n\nexport { DEFAULT_MORE_MENU_TAB_LABEL, MoreMenuTab };\n\nexport type { MoreMenuTabProps };\n","import { css, palette2, RcThemedStyled } from '../../../../foundation';\nimport { RcTabsProps } from '../Tabs';\nimport { RcTabsClasses } from '../utils';\n\nexport const TabsStyle: RcThemedStyled<RcTabsProps, any> = () => {\n  return css`\n    min-height: auto;\n\n    .${RcTabsClasses.indicator} {\n      background-color: ${palette2('tab', 'selected')};\n    }\n  `;\n};\n","import React, { ComponentProps, forwardRef, useMemo } from 'react';\n\nimport MuiTabs from '@material-ui/core/Tabs';\n\nimport {\n  combineProps,\n  RcBaseProps,\n  styled,\n  useThemeProps,\n} from '../../../foundation';\nimport { RcTabProps } from '../Tab';\nimport type {\n  MoreButtonProps,\n  RcTabsMoreMenuGroupInfoType,\n} from './MoreMenuTabs';\nimport { MoreMenuTabs } from './MoreMenuTabs';\nimport { TabsStyle } from './styles';\nimport { RcTabsClasses } from './utils';\n\ntype RcTabsVariant = 'standard' | 'scrollable' | 'fullWidth' | 'moreMenu';\n\ntype RcTabsProps = {\n  /**\n   *  Determines additional display behavior of the tabs:\n   *\n   *  - `scrollable` will invoke scrolling properties and allow for horizontally\n   *  scrolling (or swiping) of the tab bar.\n   *  -`fullWidth` will make the tabs grow to use all the available space,\n   *  which should be used for small views, like on mobile.\n   *  - `moreMenu` will add more menu icon button,\n   *  display options that exceed the width of the Tabs in the Menu.\n   *  - `standard` will render the default state.\n   */\n  variant?: RcTabsVariant;\n  /** set tab size, default is `small` */\n  size?: RcTabProps['size'];\n  /**\n   * Props applied to the tab indicator element.\n   */\n  TabIndicatorProps?: Omit<\n    ComponentProps<typeof MuiTabs>['TabIndicatorProps'],\n    'color'\n  >;\n  /**\n   * Props applied to the `moreMenu` variant more button\n   */\n  MoreButtonProps?: MoreButtonProps;\n} & RcBaseProps<\n  ComponentProps<typeof MuiTabs>,\n  'variant' | 'indicatorColor' | 'TabIndicatorProps' | 'textColor' | 'disabled'\n>;\n\nconst _RcTabs = forwardRef<any, RcTabsProps>((inProps: RcTabsProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcTabs' });\n  const {\n    classes: classesProp,\n    children: childrenProp,\n    variant: variantProp,\n    size,\n    MoreButtonProps,\n    ...rest\n  } = props;\n\n  const isMore = variantProp === 'moreMenu';\n\n  const classes = useMemo(\n    () => combineProps(RcTabsClasses, classesProp),\n    [classesProp],\n  );\n\n  const children = React.Children.map(\n    childrenProp,\n    (child: React.ReactElement<RcTabProps>) =>\n      React.cloneElement(child, { size }),\n  );\n\n  if (isMore) {\n    return (\n      <MoreMenuTabs\n        {...rest}\n        ref={ref}\n        classes={classes}\n        size={size}\n        MoreButtonProps={MoreButtonProps}\n      >\n        {children}\n      </MoreMenuTabs>\n    );\n  }\n\n  return (\n    <MuiTabs\n      {...rest}\n      ref={ref}\n      classes={classes}\n      variant={isMore ? 'standard' : (variantProp as any)}\n      indicatorColor=\"primary\"\n      textColor=\"primary\"\n    >\n      {children}\n    </MuiTabs>\n  );\n});\n\nconst RcTabs = styled(_RcTabs)`\n  ${TabsStyle}\n`;\n\nRcTabs.defaultProps = {\n  variant: 'standard',\n  size: 'small',\n};\n\nRcTabs.displayName = 'RcTabs';\n\nexport { RcTabs };\nexport type { RcTabsMoreMenuGroupInfoType, RcTabsProps };\n","import {\n  css,\n  ellipsis,\n  getParsePaletteColor,\n  radius,\n  RcThemedStyled,\n  spacing,\n  typography,\n} from '../../../foundation';\nimport { RcTagProps } from '../Tag';\nimport { colorMap } from '../utils';\n\nexport const TagStyle: RcThemedStyled<RcTagProps, any> = ({\n  textColor,\n  color,\n  borderColor,\n  radius: radiusProp,\n}) => {\n  const backgroundColor = getParsePaletteColor(\n    (typeof color === 'string' && colorMap[color as string]) || color,\n  );\n\n  return css`\n    display: inline-block;\n\n    background-color: ${backgroundColor};\n    color: ${getParsePaletteColor(textColor!)};\n    ${borderColor &&\n    css`\n      border: 1px solid ${getParsePaletteColor(borderColor)};\n    `};\n\n    border-radius: ${radius(radiusProp!)};\n    text-align: center;\n    padding: ${spacing(0, 2)};\n    ${typography('caption1')};\n    min-width: ${spacing(9)};\n    max-width: ${spacing(41)};\n    ${ellipsis}\n  `;\n};\n","import React, { forwardRef, HTMLAttributes, memo } from 'react';\n\nimport {\n  RcBaseProps,\n  RcPaletteProp,\n  RcTheme,\n  styled,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../foundation';\nimport { TagStyle } from './styles';\nimport { colorMap } from './utils';\n\ntype RcTagProps = {\n  // TODO: remove colorMap\n  /** tag color, default is 'highlight.b03' */\n  color?: RcPaletteProp | keyof typeof colorMap;\n  /** tag border color */\n  borderColor?: RcPaletteProp;\n  /** text color, default is 'neutral.f01' */\n  textColor?: RcPaletteProp;\n  /** The content of the tag. */\n  children?: React.ReactNode;\n  /** custom border radius for tag, default is `xl` */\n  radius?: keyof RcTheme['radius'];\n  /** @deprecated The content of the tag, please use children directly */\n  content?: string;\n} & RcBaseProps<HTMLAttributes<HTMLSpanElement>, 'color'>;\n\nconst _RcTag = memo(\n  forwardRef<any, RcTagProps>((inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcTag' });\n    const {\n      color,\n      children,\n      content,\n      textColor,\n      borderColor,\n      radius,\n      ...rest\n    } = props;\n\n    return (\n      <span {...rest} ref={ref}>\n        {content || children}\n      </span>\n    );\n  }),\n);\n\nconst RcTag = styled(\n  withDeprecatedCheck(_RcTag, [\n    {\n      prop: 'content',\n      comment: 'you should replace with children',\n      time: '2021-1',\n    },\n  ]),\n)`\n  ${TagStyle}\n`;\n\nRcTag.defaultProps = {\n  color: 'highlight.b03',\n  textColor: 'neutral.f01',\n  radius: 'xl',\n};\n\nRcTag.displayName = 'RcTag';\n\nexport { RcTag };\nexport type { RcTagProps };\n","import { css, palette2, RcThemedStyled } from '../../../foundation';\nimport { RcTextProps } from '../Text';\n\nexport const highlightClassName = 'highlight-term';\n\nexport const textStyle: RcThemedStyled<RcTextProps, any> = (props) => {\n  const { titleWhenOverflow, flexFull } = props;\n\n  return css`\n    ${typeof titleWhenOverflow === 'number' &&\n    css`\n      overflow: hidden;\n      display: -webkit-box;\n      -webkit-line-clamp: ${titleWhenOverflow};\n      -webkit-box-orient: vertical;\n      white-space: normal;\n    `};\n\n    flex: ${flexFull && '1 1 auto'};\n\n    &.${highlightClassName} {\n      color: ${palette2('highlight', 'f01')} !important;\n      background-color: ${palette2('highlight', 'b02')} !important;\n    }\n  `;\n};\n","import React, { forwardRef, useMemo, useRef, useState } from 'react';\n\nimport clsx from 'clsx';\nimport isString from 'lodash/isString';\n\nimport {\n  combineProps,\n  styled,\n  useForkRef,\n  useOverflow,\n  useThemeProps,\n} from '../../foundation';\nimport { RcTypography, RcTypographyProps } from '../Typography';\nimport { highlightClassName, textStyle } from './styles';\n\ntype RcTextProps = {\n  /** when set `true`, add style `flex: 1 1 auto` */\n  flexFull?: boolean;\n  /** highlight for text with color and background to be mentionMe */\n  highlight?: boolean;\n  /**\n   * is show title only when truncated, use `number` value to truncate text at a specific number of lines.\n   * ### should not change titleWhenOverflow dynamically, keep that be same value, that will cause hook issue\n   */\n  titleWhenOverflow?: boolean | number;\n} & RcTypographyProps;\n\nconst _RcText = forwardRef<any, RcTextProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcText' });\n  const {\n    children,\n    className: classNameProp,\n    flexFull,\n    highlight,\n    title,\n    titleWhenOverflow,\n    useRcTooltip,\n    TooltipProps: TooltipPropsProp,\n    ...rest\n  } = props;\n  const [isShowTitle, setIsShowTitle] = useState(true);\n\n  const innerRef = useRef<HTMLElement>(null);\n\n  const textRef = useForkRef(innerRef, ref);\n\n  // * here put hook in if else, titleWhenOverflow not change any more\n  if (titleWhenOverflow) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useOverflow(innerRef, (state) => setIsShowTitle(state));\n  }\n\n  const className = useMemo(\n    () => clsx(classNameProp, { [highlightClassName]: highlight }),\n    [classNameProp, highlight],\n  );\n\n  const TooltipProps = useMemo(\n    () =>\n      combineProps(\n        {\n          tooltipForceHide: !isShowTitle,\n        },\n        TooltipPropsProp,\n      ),\n    [TooltipPropsProp, isShowTitle],\n  );\n\n  return (\n    <RcTypography\n      ref={textRef}\n      title={\n        isShowTitle || useRcTooltip // * if useRcTooltip always keep title pass into\n          ? // * if user pass title, use title first\n            title || (isString(children) ? children : undefined)\n          : undefined\n      }\n      TooltipProps={TooltipProps}\n      useRcTooltip={useRcTooltip}\n      variant={highlight ? 'inherit' : undefined}\n      component={highlight ? 'span' : undefined}\n      className={className}\n      {...rest}\n    >\n      {children}\n    </RcTypography>\n  );\n});\n\n/**\n * `RcText` will auto add title with children when that children is string\n *  and the default wrap is noWrap,\n *  also bring with show title only when overflow\n */\nconst RcText = styled(_RcText)`\n  ${textStyle}\n`;\n\nRcText.defaultProps = {\n  noWrap: true,\n};\n\nexport { RcText };\nexport type { RcTextProps };\n","import React, { ComponentProps, forwardRef } from 'react';\n\nimport { Typography as MuiTypography } from '@material-ui/core';\n\nimport { ellipsis, useDeprecatedLog } from '../../foundation';\nimport styled from '../../foundation/styled-components';\n\nconst _RcTextWithEllipsis = forwardRef<\n  any,\n  ComponentProps<typeof MuiTypography>\n>((props, ref) => {\n  useDeprecatedLog({\n    component: 'RcTextWithEllipsis',\n    message:\n      'should not use that, just use `RcText` with `titleWhenOverflow` and `flexFull`',\n  });\n\n  return <MuiTypography {...props} ref={ref} />;\n});\n\n/** @deprecated should not use that, just use `RcText` with `titleWhenOverflow` and `flexFull` */\nconst RcTextWithEllipsis = styled(_RcTextWithEllipsis)`\n  ${ellipsis()};\n  flex: 1 1 auto;\n`;\n\nexport { RcTextWithEllipsis };\n","import { css, fakeBorder, palette2, radius, styled } from '../../../foundation';\nimport { RcThumbnailProps } from '../Thumbnail';\nimport { RcThumbnailSizes } from '../utils';\n\nexport const StyledThumbnail = styled.span<RcThumbnailProps>`\n  ${({ size, src }) => css`\n    width: ${RcThumbnailSizes[size!]}px;\n    height: ${RcThumbnailSizes[size!]}px;\n    background-image: url(${src});\n    border-radius: ${radius(size === 'small' ? 'sm' : 'lg')};\n  `};\n  display: inline-block;\n  background-color: ${palette2('neutral', 'b03')};\n  ${fakeBorder()};\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center;\n`;\n","import { css, getParsePaletteColor, RcThemedStyled } from '../../../foundation';\nimport { RcTooltipProps } from '../Tooltip';\nimport {\n  RcTooltipClasses,\n  RcTooltipPadding,\n  RcTooltipSpace,\n  RcTooltipTypography,\n} from '../utils';\n\nconst tooltipTypography: RcThemedStyled<RcTooltipProps, any> = ({ size }) =>\n  RcTooltipTypography[size!];\n\nconst placementSpace: RcThemedStyled<RcTooltipProps, string> = ({ size }) =>\n  RcTooltipSpace[size!];\n\nconst tooltipPadding: RcThemedStyled<RcTooltipProps, string> = ({ size }) =>\n  RcTooltipPadding[size!];\n\nconst tooltipColor: RcThemedStyled<RcTooltipProps> = ({ color }) =>\n  getParsePaletteColor(color);\n\nconst tooltipTextColor: RcThemedStyled<RcTooltipProps> = ({ textColor }) =>\n  getParsePaletteColor(textColor);\n\nconst arrowSize = {\n  vertical: css`\n    height: 0.4em;\n    width: 0.6em;\n  `,\n  horizontal: css`\n    height: 0.6em;\n    width: 0.4em;\n  `,\n};\n\nconst marginOffset = '-0.4em';\n\nconst horizontalMarginTopAndMarginBottom = css`\n  margin-top: 3px;\n  margin-bottom: 3px;\n`;\n\nexport const tooltipStyle: RcThemedStyled<RcTooltipProps, any> = () => {\n  return css`\n    .${RcTooltipClasses.tooltip} {\n      ${tooltipTypography};\n      background-color: ${tooltipColor};\n      color: ${tooltipTextColor};\n      padding: ${tooltipPadding};\n      word-break: break-word;\n      position: relative;\n    }\n\n    .${RcTooltipClasses.tooltipPlacementTop},\n      .${RcTooltipClasses.tooltipPlacementBottom} {\n      margin: ${placementSpace} 0;\n    }\n\n    .${RcTooltipClasses.tooltipPlacementRight},\n      .${RcTooltipClasses.tooltipPlacementLeft} {\n      margin: 0 ${placementSpace};\n    }\n\n    .${RcTooltipClasses.arrow} {\n      color: ${tooltipColor};\n    }\n\n    .${RcTooltipClasses.tooltipPlacementTop} {\n      .${RcTooltipClasses.arrow} {\n        margin-bottom: ${marginOffset};\n        ${arrowSize.vertical}\n      }\n    }\n\n    .${RcTooltipClasses.tooltipPlacementBottom} {\n      .${RcTooltipClasses.arrow} {\n        margin-top: ${marginOffset};\n        ${arrowSize.vertical}\n      }\n    }\n\n    .${RcTooltipClasses.tooltipPlacementLeft} {\n      .${RcTooltipClasses.arrow} {\n        margin-right: ${marginOffset};\n        ${arrowSize.horizontal}\n        ${horizontalMarginTopAndMarginBottom}\n      }\n    }\n\n    .${RcTooltipClasses.tooltipPlacementRight} {\n      .${RcTooltipClasses.arrow} {\n        margin-left: ${marginOffset};\n        ${arrowSize.horizontal}\n        ${horizontalMarginTopAndMarginBottom}\n      }\n    }\n  `;\n};\n","import React, {\n  ComponentProps,\n  forwardRef,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport MuiTooltip from '@material-ui/core/Tooltip';\n\nimport {\n  combineClasses,\n  combineProps,\n  logInDev,\n  RcBaseProps,\n  RcBaseSize,\n  RcPaletteProp,\n  styled,\n  useForkRef,\n  useRcPortalWindowContext,\n  useThemeProps,\n  withDeprecatedCheck,\n} from '../../foundation';\nimport { Mask, tooltipStyle } from './styles';\nimport { RcTooltipClasses, useTooltipForceHide } from './utils';\n\ntype RcTooltipSize = RcBaseSize<'medium' | 'large' | 'xlarge'>;\n\ntype RcTooltipProps = {\n  /** focus hide the tooltip display */\n  tooltipForceHide?: boolean;\n  /** size of tooltip */\n  size?: RcTooltipSize;\n  /** color of tooltip */\n  color?: RcPaletteProp;\n  /** text color of tooltip */\n  textColor?: RcPaletteProp;\n  /** className for apply on tooltip popper */\n  className?: string;\n  /**\n   * Ignore wrap children pointer-event\n   *\n   * ## that will add a span wrap children component, please make sure your style not effect\n   */\n  ignorePointer?: boolean;\n  /** addition props for hidden mask in `ignorePointer` mode */\n  maskProps?: ComponentProps<typeof Mask>;\n  /**\n   * @deprecated never inject in global\n   */\n  injectGlobalStyle?: boolean;\n} & RcBaseProps<\n  ComponentProps<typeof MuiTooltip>,\n  'color' | 'arrow' | 'className'\n>;\n\nconst _RcTooltip = forwardRef<any, RcTooltipProps>((inProps, ref) => {\n  const props = useThemeProps({ props: inProps, name: 'RcTooltip' });\n  const {\n    children,\n    tooltipForceHide,\n    open: openProp,\n    onOpen,\n    onClose,\n    // * that className will pass into children, just pick that and pass into root popper\n    // * that also not a props in mui doc  https://material-ui.com/api/tooltip/\n    className: classNameProp,\n    classes: classesProp,\n    PopperProps: PopperPropsProp,\n    textColor,\n    color,\n    ignorePointer,\n    size,\n    maskProps,\n    title,\n    injectGlobalStyle,\n    ...rest\n  } = props;\n\n  const { externalWindow } = useRcPortalWindowContext();\n\n  const [isDisabledButton, setIsDisabledButton] = useState(false);\n\n  const innerRef = useRef<HTMLElement>(null);\n\n  const tooltipRef = useForkRef(ref, innerRef);\n\n  const classes = useMemo(\n    () =>\n      combineClasses(\n        combineClasses({ popper: classNameProp }, RcTooltipClasses),\n        classesProp,\n      ),\n    [classNameProp, classesProp],\n  );\n\n  const PopperProps = useMemo(\n    () =>\n      combineProps(\n        {\n          container: externalWindow?.document.body,\n        },\n        PopperPropsProp,\n      ),\n    [PopperPropsProp, externalWindow?.document.body],\n  );\n\n  const forceHideAdditionProps = useTooltipForceHide({\n    ref: innerRef,\n    tooltipForceHide,\n    open: openProp,\n    onClose,\n    onOpen,\n  });\n\n  const additionProp = forceHideAdditionProps ?? {\n    open: openProp,\n    onOpen,\n    onClose,\n  };\n\n  // * use to fix when children button is `disabled` that error in Mui\n  // * https://github.com/mui-org/material-ui/blob/next/packages/material-ui/src/Tooltip/Tooltip.js#L269\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(() => {\n    const childNode = innerRef.current;\n    if (\n      isDisabledButton! &&\n      childNode &&\n      childNode.tagName.toLowerCase() === 'button' &&\n      (childNode as any).disabled\n    ) {\n      setIsDisabledButton(true);\n      logInDev({\n        component: 'RcTooltip',\n        message:\n          'You have set a tooltip on disabled button, A disabled element does not fire events.',\n      });\n    } else if (isDisabledButton) {\n      setIsDisabledButton(false);\n    }\n  });\n\n  return (\n    <MuiTooltip\n      ref={tooltipRef}\n      title={isDisabledButton ? '' : title}\n      arrow\n      classes={classes}\n      PopperProps={PopperProps}\n      {...additionProp}\n      {...rest}\n    >\n      {ignorePointer ? (\n        <Mask {...(maskProps as any)}>{children}</Mask>\n      ) : (\n        children\n      )}\n    </MuiTooltip>\n  );\n});\n\n/** @release */\nconst RcTooltip = styled(\n  withDeprecatedCheck(\n    _RcTooltip,\n    [\n      {\n        prop: 'injectGlobalStyle',\n        time: '2021-3',\n        comment: `@deprecated now need anymore */`,\n      },\n    ],\n    'RcTooltip',\n  ),\n)`\n  ${tooltipStyle};\n`;\n\nRcTooltip.defaultProps = {\n  placement: 'bottom',\n  color: 'neutral.b04',\n  textColor: 'neutral.f01',\n  size: 'large',\n};\n\nRcTooltip.displayName = 'RcTooltip';\n\nexport { RcTooltip };\nexport type { RcTooltipProps, RcTooltipSize };\n","import React, { ComponentProps, ElementType, forwardRef, useMemo } from 'react';\n\nimport MuiTypography from '@material-ui/core/Typography';\n\nimport {\n  RcBaseProps,\n  RcTextPaletteKeys,\n  RcTypographyKeys,\n  styled,\n  useThemeProps,\n} from '../../foundation';\nimport { withTooltip, WithTooltipProps } from '../Tooltip';\nimport { TypographyStyle } from './styles';\nimport { MuiDefaultColor, RcCustomTypographyVariant } from './utils';\n\ntype RcTypographyVariant = RcTypographyKeys;\ntype RcTypographyWeight = 'normal' | 'bold';\n\ntype RcTypographyColor =\n  | RcTextPaletteKeys\n  | NonNullable<ComponentProps<typeof MuiTypography>['color']>;\n\ntype RcTypographyProps = {\n  /** variant of Typography, view `RcTypographyVariant` */\n  variant?: RcTypographyVariant;\n  /**\n   * component for root render, default value can view `RcCustomTypographyVariant`\n   * default variant `body1` is `p` <br />\n   */\n  component?: ElementType;\n  /** color for apply to text, support full palette */\n  color?: RcTypographyColor;\n  /** custom weight */\n  weight?: RcTypographyWeight;\n} & RcBaseProps<\n  ComponentProps<typeof MuiTypography>,\n  'variant' | 'variantMapping' | 'classes' | 'color' | 'title'\n> &\n  WithTooltipProps;\n\nconst _RcTypography = forwardRef<any, RcTypographyProps>(\n  (inProps: RcTypographyProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcTypography' });\n    const {\n      variant,\n      color: colorProp,\n      component: componentProp,\n      weight,\n      ...rest\n    } = props;\n    const component = componentProp || RcCustomTypographyVariant[variant!];\n\n    const color = useMemo(\n      () =>\n        MuiDefaultColor.includes(colorProp!) ? (colorProp as any) : undefined,\n      [colorProp],\n    );\n\n    return (\n      <MuiTypography\n        // * for use html view variant\n        data-variant={variant}\n        // * for use html view color\n        data-color={typeof colorProp === 'string' ? colorProp : undefined}\n        ref={ref}\n        color={color}\n        variant=\"inherit\"\n        component={component!}\n        {...rest}\n      />\n    );\n  },\n);\n\n/** @release */\nconst RcTypography = styled(withTooltip(_RcTypography))`\n  ${TypographyStyle}\n`;\n\nRcTypography.defaultProps = {\n  variant: 'body1',\n  color: 'initial',\n};\n\nRcTypography.displayName = 'RcTypography';\n\nexport { RcTypography };\nexport type { RcTypographyProps, RcTypographyVariant, RcTypographyWeight };\n","import {\n  css,\n  getParsePaletteColor,\n  RcThemedStyled,\n  typography,\n} from '../../../foundation';\nimport { RcTypographyProps } from '../Typography';\nimport { MuiDefaultColor, RcCustomTypographyWeight } from '../utils';\n\nexport const TypographyStyle: RcThemedStyled<RcTypographyProps, any> = ({\n  variant,\n  color,\n  weight,\n}) => {\n  const colorResult = !MuiDefaultColor.includes(color!)\n    ? getParsePaletteColor(color, null, false)\n    : '';\n\n  return css`\n    ${typography(variant!)};\n    font-weight: ${weight && RcCustomTypographyWeight[weight]};\n    color: ${colorResult};\n  `;\n};\n","import React, { forwardRef } from 'react';\n\nimport { spacing, styled, useThemeProps } from '../../../foundation';\nimport { RcDivider, RcDividerProps } from '../../Divider';\n\ntype RcVirtualizedDividerProps = {} & RcDividerProps;\n\nconst _RcVirtualizedDivider = forwardRef<any, RcDividerProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({\n      props: inProps,\n      name: 'RcVirtualizedDivider',\n    });\n    const { className, ...rest } = props;\n    return (\n      <li className={className} data-disabled-focus>\n        <RcDivider {...rest} ref={ref} />\n      </li>\n    );\n  },\n);\n\n/**\n * that virtualized divider is same as normal divider,\n * but that use a `li` to wrap outside,\n * use padding inside to prevent dynamic container height error calculate\n * and make that not be focusable\n */\nconst RcVirtualizedDivider = styled(_RcVirtualizedDivider)`\n  padding: ${spacing(2, 0)};\n  list-style: none;\n`;\n\nRcVirtualizedDivider.defaultProps = {};\n\nRcVirtualizedDivider.displayName = 'RcVirtualizedDivider';\n\nexport { RcVirtualizedDivider };\nexport type { RcVirtualizedDividerProps };\n","import React, { forwardRef, useMemo, useRef } from 'react';\n\nimport clsx from 'clsx';\n\nimport {\n  combineClasses,\n  combineProps,\n  RcBaseProps,\n  styled,\n  useEventCallback,\n  useForkRef,\n  useRcPortalWindowContext,\n  useThemeProps,\n} from '../../foundation';\nimport { RcMenuProps } from '../Menu';\nimport { RcPopover } from '../Popover';\nimport { VirtualizedMenuStyle } from './styles';\nimport { RcVirtualizedMenuClasses } from './utils';\nimport {\n  RcVirtualizedMenuList,\n  RcVirtualizedMenuListProps,\n  RcVirtualizedMenuListRef,\n} from './VirtualizedMenuList';\n\ntype RcVirtualizedMenuProps = {\n  /** props for apply on inner `MenuList` */\n  MenuListProps?: RcVirtualizedMenuListProps;\n} & RcBaseProps<RcMenuProps, 'MenuListProps'>;\n\nconst _RcVirtualizedMenu = forwardRef<any, RcVirtualizedMenuProps>(\n  (inProps, ref) => {\n    const props = useThemeProps({ props: inProps, name: 'RcVirtualizedMenu' });\n    const {\n      autoFocus = true,\n      children,\n      classes: classesProp,\n      disableAutoFocusItem = false,\n      MenuListProps: { maxHeight = 416, onKeyDown, ...MenuListProps } = {},\n      onClose,\n      open,\n      TransitionProps: TransitionPropsProp,\n      PaperProps: PaperPropsProp = {},\n      PopoverClasses,\n      transitionDuration = 'auto',\n      variant = 'selectedMenu',\n      ...rest\n    } = props;\n    const { document } = useRcPortalWindowContext();\n\n    const popoverRef = useRef<HTMLDivElement>(null);\n    const handleRef = useForkRef(ref, popoverRef);\n\n    const menuListActionRef = useRef<RcVirtualizedMenuListRef>(null);\n\n    const classes = useMemo(\n      () => combineClasses(RcVirtualizedMenuClasses, classesProp),\n      [classesProp],\n    );\n\n    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;\n\n    const TransitionProps = useMemo(\n      () =>\n        combineProps(\n          {\n            onEntering: () => {\n              menuListActionRef.current?.adjustStyleForScrollbar();\n              menuListActionRef.current?.scrollIntoViewAndFocus();\n            },\n            onEntered: () => {\n              const popoverElm = popoverRef.current!;\n              const paperElm = popoverElm.querySelector(\n                `.${RcVirtualizedMenuClasses.paper}`,\n              )!;\n\n              // check that paper height is same as vl scroll, if not adjust that containerHeight\n              const newHeight = paperElm.clientHeight;\n              if (newHeight !== maxHeight) {\n                menuListActionRef.current?.adjustContainerHeight(newHeight);\n              }\n            },\n          },\n          TransitionPropsProp,\n        ),\n      [maxHeight, TransitionPropsProp],\n    );\n\n    const PaperProps = combineProps(\n      {\n        classes: {\n          root: classes?.paper,\n        },\n      },\n      PaperPropsProp,\n    );\n\n    const handleListKeyDown = useEventCallback(\n      (event: React.KeyboardEvent<HTMLUListElement>): void => {\n        onKeyDown?.(event);\n\n        if (event.key === 'Tab') {\n          event.preventDefault();\n\n          if (onClose) {\n            onClose(event, 'tabKeyDown');\n          }\n        }\n      },\n    );\n\n    return (\n      <RcPopover\n        ref={handleRef}\n        container={document.body}\n        classes={PopoverClasses}\n        onClose={onClose}\n        open={open}\n        transitionDuration={transitionDuration}\n        PaperProps={PaperProps}\n        TransitionProps={TransitionProps}\n        {...rest}\n      >\n        <RcVirtualizedMenuList\n          position=\"unset\"\n          action={menuListActionRef}\n          autoFocus={autoFocus}\n          autoFocusItem={autoFocusItem}\n          maxHeight={maxHeight}\n          variant={variant}\n          onKeyDown={handleListKeyDown}\n          {...MenuListProps}\n          className={clsx(classes.list, MenuListProps.className)}\n        >\n          {children}\n        </RcVirtualizedMenuList>\n      </RcPopover>\n    );\n  },\n);\n\nconst RcVirtualizedMenu = styled(_RcVirtualizedMenu)`\n  ${VirtualizedMenuStyle}\n`;\n\nRcVirtualizedMenu.defaultProps = {\n  autoFocus: true,\n  variant: 'selectedMenu',\n  getContentAnchorEl: null,\n  anchorReference: 'anchorEl',\n  anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\n};\n\nexport { RcVirtualizedMenu };\nexport type { RcVirtualizedMenuProps };\n","import { styled } from '../../../foundation';\n\nexport const menuListBoundaryPadding = 8;\n\ntype StyledMenuListPaddingProps = {\n  /** that element height */\n  height: number;\n};\n\nexport const StyledMenuListPadding = styled.div<StyledMenuListPaddingProps>`\n  height: ${({ height = menuListBoundaryPadding }) => height}px;\n`;\n","import { css, RcThemedStyled } from '../../../foundation';\nimport { RcVirtualizedMenuClasses } from '../utils';\nimport { RcVirtualizedMenuProps } from '../VirtualizedMenu';\n\nexport const VirtualizedMenuStyle: RcThemedStyled<RcVirtualizedMenuProps, any> =\n  () => {\n    // * that is not need be scrollable, we use vl scroll container\n    return css`\n      .${RcVirtualizedMenuClasses.paper} {\n        max-height: calc(100% - 96px);\n        -webkit-overflow-scrolling: touch;\n        overflow: hidden;\n      }\n    `;\n  };\n","import { styled, visuallyHiddenStyles } from '../../foundation';\n\nconst RcVisuallyHidden = styled.span`\n  ${visuallyHiddenStyles}\n`;\n\nRcVisuallyHidden.displayName = 'RcVisuallyHidden';\n\nexport { RcVisuallyHidden };\n","import { createGlobalStyle } from '../../styled-components';\n\n// TODO: wait for designer confirm that color\nconst scrollBarColor = 'rgba(80,80,80,0.7)';\n\n/** Provide you to change whole app scrollBar color */\nexport const RcGlobalScrollBarStyle = createGlobalStyle`\n  /*  Firefox-only */\n  * {\n    scrollbar-color: ${scrollBarColor} transparent;\n  }\n  /*\n  /* Works on Chrome/Edge/Safari */\n  ::-webkit-scrollbar {\n    width: 10px;\n    height: 10px;\n  };\n\n  ::-webkit-scrollbar-track {\n    background-color: transparent;\n  };\n\n  ::-webkit-scrollbar-thumb {\n    background-color: ${scrollBarColor};\n    border-radius: 10px;\n  };\n`;\n","import { css } from '../styled-components';\nimport { RcTheme } from '../theme/theme.type';\nimport { shadowBorder } from './focusVisible';\nimport { palette2 } from './newPalette';\n\ntype ShadowBorderParams = Parameters<typeof shadowBorder>;\n\nexport type FakeBorderOption = {\n  /** should use pseudo */\n  pseudo?: boolean;\n  /** radius with fake border */\n  radius?: ShadowBorderParams[0];\n  /** color for fake border */\n  color?: ShadowBorderParams[1];\n  /** border size, default is `1` */\n  size?: number;\n  /** is that inset, default is `true` */\n  inset?: boolean;\n  /** should allow `transparent` color, default is `false`,\n   * if got `transparent` that will no have any style\n   */\n  allowTransparent?: boolean;\n};\n\nexport const fakeBorder = ({\n  pseudo,\n  inset = true,\n  radius,\n  size = 1,\n  color = palette2('highContrast'),\n  allowTransparent,\n}: FakeBorderOption = {}) => {\n  return ({ theme }: { theme?: RcTheme }) => {\n    const colorValue =\n      typeof color === 'function' && theme ? color({ theme }) : color;\n\n    if (!allowTransparent && colorValue === 'transparent') return;\n\n    if (pseudo) {\n      return shadowBorder(radius, colorValue, inset, size);\n    }\n\n    return css`\n      box-shadow: ${inset ? 'inset' : ''} 0 0 0 ${size}px ${colorValue};\n    `;\n  };\n};\n","import { css } from '../styled-components';\nimport { LiteralUnion } from '../typings';\n\n/**\n * flex width set\n *\n * @example\n *\n * ```tsx\n * `${flexWidth('auto')}`\n * // flex: 1 1 auto\n * // max-width: unset\n * // max-width: unset\n *\n *\n * `${flexWidth('500px')}`\n * // flex: 1 1 500px\n * // max-width: 500px\n * // max-width: 500px\n * ```\n */\nexport const flexWidth = (width: LiteralUnion<'auto'>) => css`\n  flex: 1 1 ${width};\n\n  ${width !== 'auto'\n    ? css`\n        max-width: ${width};\n        min-width: ${width};\n      `\n    : css`\n        max-width: unset;\n        min-width: unset;\n      `}\n`;\n","import { css } from '../styled-components';\nimport { palette2 } from './newPalette';\nimport { radius } from './radius';\n\nexport const focusVisible = '&.focus-visible, &[data-focus-visible-added]';\n\nexport const focusWithin = '&:hover, &:focus-within';\n\nexport const focusVisibleColor = palette2('interactive', 'f01');\n\nexport const shadowBorder = (\n  r: Parameters<typeof radius>[0] = 'zero',\n  color: any = focusVisibleColor,\n  inset: boolean = true,\n  size: number = 1,\n) => css`\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-shadow: ${inset ? 'inset' : ''} 0 0 0 ${size}px ${color};\n    border-radius: ${radius(r)};\n    pointer-events: none;\n  }\n`;\n\nexport const focusVisibleShadowStyle = (\n  r?: Parameters<typeof radius>[0],\n  color?: any,\n) => css`\n  ${focusVisible} {\n    ${shadowBorder(r, color)};\n  }\n`;\n","import { css } from '../styled-components';\nimport { RcThemedStyled } from '../theme/theme.type';\nimport { palette2 } from './newPalette';\n\nexport const backgroundTransition: RcThemedStyled<{}, string> = ({ theme }) =>\n  theme.transitions.create(['background'], {\n    easing: theme.transitions.easing.easeInOut,\n    duration: theme.transitions.duration.shortest,\n  });\n\nexport const rippleStyle = css`\n  position: relative;\n  overflow: hidden;\n  transform: translate3d(0, 0, 0);\n  transition: ${backgroundTransition};\n\n  &:after {\n    content: '';\n    display: block;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    pointer-events: none;\n    background-image: radial-gradient(\n      circle,\n      ${palette2('neutral', 'b06')} 10%,\n      transparent 10.01%\n    );\n    background-repeat: no-repeat;\n    background-position: 50%;\n    transform: scale(10, 10);\n    opacity: 0;\n    transition: transform 0.5s ease-out, opacity 0.6s ease-in;\n  }\n\n  &:active:after {\n    transform: scale(0, 0);\n    opacity: 0.1;\n    transition: 0s;\n  }\n`;\n","import { css } from '../styled-components';\nimport { px } from './px';\n\n/** lineClamp helper */\nexport function lineClamp(lineNumber: number, maxHeight: number) {\n  return css`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    display: -webkit-box;\n    -webkit-line-clamp: ${lineNumber};\n    -webkit-box-orient: vertical;\n    max-height: ${px(maxHeight)};\n    word-break: break-word;\n  `;\n}\n","import { css } from '../styled-components';\nimport { RcThemeProps } from '../theme/theme.type';\nimport { RcTypographyKeys } from '../theme/typography.type';\n\n/**\n * get typography key value with token\n *\n * @example\n * ```ts\n * typographyProp('body1', 'fontSize')\n * ```\n */\nfunction typographyProp(name: RcTypographyKeys, key: string) {\n  if (name === 'inherit') {\n    return undefined;\n  }\n  return ({ theme }: RcThemeProps) => {\n    const themeOfTypography = theme.typography[name];\n    if (typeof themeOfTypography !== 'object') {\n      throw new Error(`Unexpected typography name: ${name}`);\n    }\n    return themeOfTypography[key];\n  };\n}\n\n/**\n * get typography style from token\n *\n * @example\n * ```ts\n * typography('body1')\n * ```\n */\nfunction typography(\n  /** name of token */\n  name: RcTypographyKeys,\n  /** not contain `line-hight` style */\n  fontOnly = false,\n) {\n  const fontCss = css`\n    font-size: ${typographyProp(name, 'fontSize')};\n    font-weight: ${typographyProp(name, 'fontWeight')};\n    font-family: ${({ theme }: RcThemeProps) => theme.typography['fontFamily']};\n  `;\n  return fontOnly\n    ? fontCss\n    : css`\n        ${fontCss};\n        line-height: ${typographyProp(name, 'lineHeight')};\n      `;\n}\n\nexport { typography, typographyProp };\n","import {\n  getParsePaletteColor,\n  palette2,\n  radius,\n  shadows,\n  spacing,\n  styled,\n  typography,\n} from '../../foundation';\n\nexport const Tag = styled.div`\n  display: inline-flex;\n  border-radius: ${radius('xxl')};\n  overflow: hidden;\n  box-shadow: ${shadows('4')};\n  ${typography('caption1')};\n\n  > * {\n    margin: 0;\n    padding: 0;\n    padding: ${spacing(1, 2)};\n  }\n\n  > :first-child {\n    background: ${({ color }) => getParsePaletteColor(color)};\n  }\n\n  > :last-child {\n    background: ${palette2('neutral', 'b02')};\n  }\n`;\n\nTag.defaultProps = {\n  color: 'success.b04',\n};\n","import React, { FunctionComponent, ReactNode, useRef } from 'react';\n\nimport { ButtonBaseActions } from '@material-ui/core';\n\nimport {\n  RcButtonBase,\n  RcIconButton,\n  RcLink,\n  RcTypography,\n} from '../../components';\nimport {\n  createGlobalStyle,\n  getParsePaletteColor,\n  palette2,\n  radius,\n  styled,\n} from '../../foundation';\nimport { TagProps } from '../../typings/storybook';\nimport CenterFocusWeak from '../assets/CenterFocusWeak';\nimport { Tag } from './Tag';\n\nconst GlobalStyle = createGlobalStyle<{ backgroundColor?: string }>`\n  .sb-show-main,\n  .sbdocs-preview {\n    background-color: ${({ backgroundColor }) =>\n      backgroundColor\n        ? getParsePaletteColor(backgroundColor)\n        : palette2('neutral', 'b01')};\n  }\n`;\n\nconst ThemeContainer = styled.div`\n  display: block;\n  position: fixed;\n  right: 0;\n  top: 7px;\n`;\n\nconst FocusButton = styled(RcButtonBase)`\n  top: 0;\n  left: 0;\n  width: 16px;\n  height: 16px;\n  position: absolute;\n  pointer-events: none;\n  margin-left: -16px;\n  margin-top: -8px;\n  overflow: visible;\n  border-radius: ${radius('circle')};\n`;\n\nconst Header = styled.header`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  margin-right: 32px;\n  margin-bottom: 0.5rem;\n  > * + * {\n    margin-left: 0.5em;\n  }\n`;\n\nconst Main = styled.main`\n  position: relative;\n`;\n\nexport type MainStoryViewProps = {\n  tags: TagProps[];\n  name: string;\n  backgroundColor: string;\n  themeChildren: ReactNode;\n};\n\nexport const MainStoryView: FunctionComponent<MainStoryViewProps> = ({\n  tags,\n  name,\n  children,\n  backgroundColor,\n  themeChildren,\n}) => {\n  const ref = useRef<ButtonBaseActions>(null);\n\n  return (\n    <>\n      <Header>\n        <RcIconButton\n          symbol={CenterFocusWeak}\n          size=\"small\"\n          title=\"Reset focus to test keyboard navigation\"\n          onClick={() => ref.current!.focusVisible()}\n        />\n        {tags.length > 0 &&\n          tags.map((tag, i) => {\n            const tagColor =\n              tag.color ??\n              {\n                Spec: 'avatar.oasis',\n                Mui: 'content.brand',\n                Accessibility: undefined,\n                Source: undefined,\n              }[tag.name];\n\n            const tagValue =\n              tag.value ??\n              {\n                Spec: 'abstract',\n                Mui: name,\n                Accessibility: undefined,\n                Source: undefined,\n              }[tag.name];\n\n            return (\n              // eslint-disable-next-line react/no-array-index-key\n              <Tag key={`${tag.name}-${i}`} color={tagColor}>\n                <RcTypography variant=\"caption1\" color=\"neutral.f01\">\n                  {tag.name}\n                </RcTypography>\n                {tag.href ? (\n                  <RcLink\n                    variant=\"caption1\"\n                    color=\"neutral.f06\"\n                    href={tag.href}\n                    target=\"_blank\"\n                  >\n                    {tagValue}\n                  </RcLink>\n                ) : (\n                  <RcTypography variant=\"caption1\" color=\"neutral.f06\">\n                    {tagValue}\n                  </RcTypography>\n                )}\n              </Tag>\n            );\n          })}\n      </Header>\n      <Main>\n        <FocusButton\n          focusRipple\n          tabIndex={-1}\n          aria-label=\"A generic container that is programmatically focused to test keyboard navigation of our components.\"\n          action={ref}\n        />\n        {children}\n      </Main>\n      <GlobalStyle backgroundColor={backgroundColor} />\n      <ThemeContainer>{themeChildren}</ThemeContainer>\n    </>\n  );\n};\n"],"names":[],"sourceRoot":""}